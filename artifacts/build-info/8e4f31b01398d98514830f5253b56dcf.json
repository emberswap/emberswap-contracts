{
  "id": "8e4f31b01398d98514830f5253b56dcf",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.7",
  "solcLongVersion": "0.8.7+commit.e28d00a7",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/farm/EmberDistributorV2.sol": {
        "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n// SPDX-License-Identifier: MIT\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File contracts/farm/v2/libraries/IBoringERC20.sol\npragma solidity ^0.8.7;\n\ninterface IBoringERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\npragma solidity ^0.8.7;\n\ninterface IComplexRewarder {\n    function onEmberReward(\n        uint256 pid,\n        address user,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(uint256 pid, address user)\n        external\n        view\n        returns (uint256 pending);\n\n    function rewardToken() external view returns (IBoringERC20);\n\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\n}\n\n\n// File contracts/farm/v2/libraries/BoringERC20.sol\npragma solidity ^0.8.7;\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_SYMBOL)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_NAME)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_DECIMALS)\n        );\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IBoringERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: Transfer failed\"\n        );\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IBoringERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: TransferFrom failed\"\n        );\n    }\n}\n\n\n// File contracts/farm/v2/IEmberPair.sol\npragma solidity ^0.8.7;\n\ninterface IEmberPair {\n    function initialize(address, address) external;\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/EmberDistributorV2.sol\npragma solidity ^0.8.7;\n\n\n\n\n\n\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\n    using BoringERC20 for IBoringERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardLockedUp; // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBoringERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\n        uint16 depositFeeBP; // Deposit fee in basis points\n        uint256 harvestInterval; // Harvest interval in seconds\n        uint256 totalLp; // Total token in Pool\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\n    }\n\n    IBoringERC20 public ember;\n\n    // Ember tokens created per second\n    uint256 public emberPerSec;\n\n    // Max harvest interval: 14 days\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    // Maximum deposit fee rate: 10%\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The timestamp when Ember mining starts.\n    uint256 public startTimestamp;\n\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n\n    // Total Ember in Ember Pools (can be multiple pools)\n    uint256 public totalEmberInPools = 0;\n\n    // Team address.\n    address public teamAddress;\n\n    // Treasury address.\n    address public treasuryAddress;\n\n    // Investor address.\n    address public investorAddress;\n\n    // Percentage of pool rewards that goto the team.\n    uint256 public teamPercent;\n\n    // Percentage of pool rewards that goes to the treasury.\n    uint256 public treasuryPercent;\n\n    // Percentage of pool rewards that goes to the investor.\n    uint256 public investorPercent;\n\n    // The precision factor\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\n\n    modifier validatePoolByPid(uint256 _pid) {\n        require(_pid < poolInfo.length, \"Pool does not exist\");\n        _;\n    }\n\n    event Add(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IBoringERC20 indexed lpToken,\n        uint16 depositFeeBP,\n        uint256 harvestInterval,\n        IComplexRewarder[] indexed rewarders\n    );\n\n    event Set(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        uint16 depositFeeBP,\n        uint256 harvestInterval,\n        IComplexRewarder[] indexed rewarders\n    );\n\n    event UpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardTimestamp,\n        uint256 lpSupply,\n        uint256 accEmberPerShare\n    );\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    event EmissionRateUpdated(\n        address indexed caller,\n        uint256 previousValue,\n        uint256 newValue\n    );\n\n    event RewardLockedUp(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amountLockedUp\n    );\n\n    event AllocPointsUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n\n    event SetTeamAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetTreasuryAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetInvestorAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\n\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\n\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\n\n    constructor(\n        IBoringERC20 _ember,\n        uint256 _emberPerSec,\n        address _teamAddress,\n        address _treasuryAddress,\n        address _investorAddress,\n        uint256 _teamPercent,\n        uint256 _treasuryPercent,\n        uint256 _investorPercent\n    ) {\n        require(\n            _teamPercent <= 1000,\n            \"constructor: invalid team percent value\"\n        );\n        require(\n            _treasuryPercent <= 1000,\n            \"constructor: invalid treasury percent value\"\n        );\n        require(\n            _investorPercent <= 1000,\n            \"constructor: invalid investor percent value\"\n        );\n        require(\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\n            \"constructor: total percent over max\"\n        );\n\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\n\n        ember = _ember;\n        emberPerSec = _emberPerSec;\n\n        teamAddress = _teamAddress;\n        treasuryAddress = _treasuryAddress;\n        investorAddress = _investorAddress;\n\n        teamPercent = _teamPercent;\n        treasuryPercent = _treasuryPercent;\n        investorPercent = _investorPercent;\n    }\n\n    // Set farming start, can call only once\n    function startFarming() public onlyOwner {\n        require(\n            block.timestamp < startTimestamp,\n            \"start farming: farm started already\"\n        );\n\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            pool.lastRewardTimestamp = block.timestamp;\n        }\n\n        startTimestamp = block.timestamp;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\n    function add(\n        uint256 _allocPoint,\n        IBoringERC20 _lpToken,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        IComplexRewarder[] calldata _rewarders\n    ) public onlyOwner {\n        require(_rewarders.length <= 10, \"add: too many rewarders\");\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"add: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"add: invalid harvest interval\"\n        );\n        require(\n            Address.isContract(address(_lpToken)),\n            \"add: LP token must be a valid contract\"\n        );\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < _rewarders.length;\n            ++rewarderId\n        ) {\n            require(\n                Address.isContract(address(_rewarders[rewarderId])),\n                \"add: rewarder must be contract\"\n            );\n        }\n\n        _massUpdatePools();\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        totalAllocPoint += _allocPoint;\n\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accEmberPerShare: 0,\n                depositFeeBP: _depositFeeBP,\n                harvestInterval: _harvestInterval,\n                totalLp: 0,\n                rewarders: _rewarders\n            })\n        );\n\n        emit Add(\n            poolInfo.length - 1,\n            _allocPoint,\n            _lpToken,\n            _depositFeeBP,\n            _harvestInterval,\n            _rewarders\n        );\n    }\n\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        IComplexRewarder[] calldata _rewarders\n    ) public onlyOwner validatePoolByPid(_pid) {\n        require(_rewarders.length <= 10, \"set: too many rewarders\");\n\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"set: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"set: invalid harvest interval\"\n        );\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < _rewarders.length;\n            ++rewarderId\n        ) {\n            require(\n                Address.isContract(address(_rewarders[rewarderId])),\n                \"set: rewarder must be contract\"\n            );\n        }\n\n        _massUpdatePools();\n\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n        poolInfo[_pid].rewarders = _rewarders;\n\n        emit Set(\n            _pid,\n            _allocPoint,\n            _depositFeeBP,\n            _harvestInterval,\n            _rewarders\n        );\n    }\n\n    // View function to see pending rewards on frontend.\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (\n            address[] memory addresses,\n            string[] memory symbols,\n            uint256[] memory decimals,\n            uint256[] memory amounts\n        )\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEmberPerShare = pool.accEmberPerShare;\n        uint256 lpSupply = pool.totalLp;\n\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\n            uint256 total = 1000;\n            uint256 lpPercent = total -\n                teamPercent -\n                treasuryPercent -\n                investorPercent;\n\n            uint256 emberReward = (multiplier *\n                emberPerSec *\n                pool.allocPoint *\n                lpPercent) /\n                totalAllocPoint /\n                total;\n\n            accEmberPerShare += (\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\n            );\n        }\n\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\n\n        addresses = new address[](pool.rewarders.length + 1);\n        symbols = new string[](pool.rewarders.length + 1);\n        amounts = new uint256[](pool.rewarders.length + 1);\n        decimals = new uint256[](pool.rewarders.length + 1);\n\n        addresses[0] = address(ember);\n        symbols[0] = IBoringERC20(ember).safeSymbol();\n        decimals[0] = IBoringERC20(ember).safeDecimals();\n        amounts[0] = pendingEmber;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            addresses[rewarderId + 1] = address(\n                pool.rewarders[rewarderId].rewardToken()\n            );\n\n            symbols[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeSymbol();\n\n            decimals[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeDecimals();\n\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\n                _pid,\n                _user\n            );\n        }\n    }\n\n    /// @notice View function to see pool rewards per sec\n    function poolRewardsPerSec(uint256 _pid)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (\n            address[] memory addresses,\n            string[] memory symbols,\n            uint256[] memory decimals,\n            uint256[] memory rewardsPerSec\n        )\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        addresses = new address[](pool.rewarders.length + 1);\n        symbols = new string[](pool.rewarders.length + 1);\n        decimals = new uint256[](pool.rewarders.length + 1);\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\n\n        addresses[0] = address(ember);\n        symbols[0] = IBoringERC20(ember).safeSymbol();\n        decimals[0] = IBoringERC20(ember).safeDecimals();\n\n        uint256 total = 1000;\n        uint256 lpPercent = total -\n            teamPercent -\n            treasuryPercent -\n            investorPercent;\n\n        rewardsPerSec[0] =\n            (pool.allocPoint * emberPerSec * lpPercent) /\n            totalAllocPoint /\n            total;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            addresses[rewarderId + 1] = address(\n                pool.rewarders[rewarderId].rewardToken()\n            );\n\n            symbols[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeSymbol();\n\n            decimals[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeDecimals();\n\n            rewardsPerSec[rewarderId + 1] = pool\n                .rewarders[rewarderId]\n                .poolRewardsPerSec(_pid);\n        }\n    }\n\n    // View function to see rewarders for a pool\n    function poolRewarders(uint256 _pid)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (address[] memory rewarders)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        rewarders = new address[](pool.rewarders.length);\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\n        }\n    }\n\n    // View function to see if user can harvest Ember.\n    function canHarvest(uint256 _pid, address _user)\n        public\n        view\n        validatePoolByPid(_pid)\n        returns (bool)\n    {\n        UserInfo storage user = userInfo[_pid][_user];\n        return\n            block.timestamp >= startTimestamp &&\n            block.timestamp >= user.nextHarvestUntil;\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() external nonReentrant {\n        _massUpdatePools();\n    }\n\n    // Internal method for massUpdatePools\n    function _massUpdatePools() internal {\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\n            _updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) external nonReentrant {\n        _updatePool(_pid);\n    }\n\n    // Internal method for _updatePool\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = pool.totalLp;\n\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\n            totalAllocPoint;\n\n        uint256 total = 1000;\n        uint256 lpPercent = total -\n            teamPercent -\n            treasuryPercent -\n            investorPercent;\n\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\n        ember.mint(address(this), (emberReward * lpPercent) / total);\n\n        pool.accEmberPerShare +=\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\n            pool.totalLp /\n            total;\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit UpdatePool(\n            _pid,\n            pool.lastRewardTimestamp,\n            lpSupply,\n            pool.accEmberPerShare\n        );\n    }\n\n    function depositWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public nonReentrant validatePoolByPid(pid) {\n        PoolInfo storage pool = poolInfo[pid];\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\n        _deposit(pid, amount);\n    }\n\n    // Deposit tokens for Ember allocation.\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        _deposit(_pid, _amount);\n    }\n\n    // Deposit tokens for Ember allocation.\n    function _deposit(uint256 _pid, uint256 _amount)\n        internal\n        validatePoolByPid(_pid)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        _updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\n\n            _amount = afterDeposit - beforeDeposit;\n\n            if (pool.depositFeeBP > 0) {\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\n\n                _amount = _amount - depositFee;\n            }\n\n            user.amount += _amount;\n\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools += _amount;\n            }\n        }\n        user.rewardDebt =\n            (user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(\n                _pid,\n                msg.sender,\n                user.amount\n            );\n        }\n\n        if (_amount > 0) {\n            pool.totalLp += _amount;\n        }\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    //withdraw tokens\n    function withdraw(uint256 _pid, uint256 _amount)\n        public\n        nonReentrant\n        validatePoolByPid(_pid)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        //this will make sure that user can only withdraw from his pool\n        require(user.amount >= _amount, \"withdraw: user amount not enough\");\n\n        //cannot withdraw more than pool's balance\n        require(pool.totalLp >= _amount, \"withdraw: pool total not enough\");\n\n        _updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            user.amount -= _amount;\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools -= _amount;\n            }\n            pool.lpToken.safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt =\n            (user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(\n                _pid,\n                msg.sender,\n                user.amount\n            );\n        }\n\n        if (_amount > 0) {\n            pool.totalLp -= _amount;\n        }\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n\n        //Cannot withdraw more than pool's balance\n        require(\n            pool.totalLp >= amount,\n            \"emergency withdraw: pool total not enough\"\n        );\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.rewardLockedUp = 0;\n        user.nextHarvestUntil = 0;\n        pool.totalLp -= amount;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\n        }\n\n        if (address(pool.lpToken) == address(ember)) {\n            totalEmberInPools -= amount;\n        }\n\n        pool.lpToken.safeTransfer(msg.sender, amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Pay or lockup pending Ember.\n    function payOrLockupPendingEmber(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\n        }\n\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\n\n        if (canHarvest(_pid, msg.sender)) {\n            if (pending > 0 || user.rewardLockedUp > 0) {\n                uint256 pendingRewards = pending + user.rewardLockedUp;\n\n                // reset lockup\n                totalLockedUpRewards -= user.rewardLockedUp;\n                user.rewardLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\n\n                // send rewards\n                safeEmberTransfer(msg.sender, pendingRewards);\n            }\n        } else if (pending > 0) {\n            totalLockedUpRewards += pending;\n            user.rewardLockedUp += pending;\n            emit RewardLockedUp(msg.sender, _pid, pending);\n        }\n    }\n\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\n            uint256 emberBal = ember.balanceOf(address(this)) -\n                totalEmberInPools;\n            if (_amount >= emberBal) {\n                ember.safeTransfer(_to, emberBal);\n            } else if (_amount > 0) {\n                ember.safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\n        _massUpdatePools();\n\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\n\n        emberPerSec = _emberPerSec;\n    }\n\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\n        public\n        onlyOwner\n    {\n        _massUpdatePools();\n\n        emit AllocPointsUpdated(\n            msg.sender,\n            poolInfo[_pid].allocPoint,\n            _allocPoint\n        );\n\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\n        return poolInfo[pid].totalLp;\n    }\n\n    // Function to harvest many pools in a single transaction\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\n        require(_pids.length <= 30, \"harvest many: too many pool ids\");\n        for (uint256 index = 0; index < _pids.length; ++index) {\n            _deposit(_pids[index], 0);\n        }\n    }\n\n    // Update team address by the previous team address.\n    function setTeamAddress(address _teamAddress) public {\n        require(\n            msg.sender == teamAddress,\n            \"set team address: only previous team address can call this method\"\n        );\n        require(\n            _teamAddress != address(0),\n            \"set team address: invalid new team address\"\n        );\n        teamAddress = _teamAddress;\n        emit SetTeamAddress(msg.sender, _teamAddress);\n    }\n\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\n        require(\n            _newTeamPercent <= 1000,\n            \"set team percent: invalid percent value\"\n        );\n        require(\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\n            \"set team percent: total percent over max\"\n        );\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\n        teamPercent = _newTeamPercent;\n    }\n\n    // Update treasury address by the previous treasury.\n    function setTreasuryAddress(address _treasuryAddress) public {\n        require(\n            msg.sender == treasuryAddress,\n            \"set treasury address: only previous treasury address can call this method\"\n        );\n        require(\n            _treasuryAddress != address(0),\n            \"set treasury address: invalid new treasury address\"\n        );\n        treasuryAddress = _treasuryAddress;\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\n    }\n\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\n        require(\n            _newTreasuryPercent <= 1000,\n            \"set treasury percent: invalid percent value\"\n        );\n        require(\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\n            \"set treasury percent: total percent over max\"\n        );\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\n        treasuryPercent = _newTreasuryPercent;\n    }\n\n    // Update the investor address by the previous investor.\n    function setInvestorAddress(address _investorAddress) public {\n        require(\n            msg.sender == investorAddress,\n            \"set investor address: only previous investor can call this method\"\n        );\n        require(\n            _investorAddress != address(0),\n            \"set investor address: invalid new investor address\"\n        );\n        investorAddress = _investorAddress;\n        emit SetInvestorAddress(msg.sender, _investorAddress);\n    }\n\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\n        require(\n            _newInvestorPercent <= 1000,\n            \"set investor percent: invalid percent value\"\n        );\n        require(\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\n            \"set investor percent: total percent over max\"\n        );\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\n        investorPercent = _newInvestorPercent;\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/farm/EmberDistributorV2.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bba8273489c594d77727ff8532957865d48f429c5bc436a9079fa035aafdc2a64736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xBA DUP3 PUSH20 0x489C594D77727FF8532957865D48F429C5BC436A SWAP1 PUSH26 0xFA035AAFDC2A64736F6C63430008070033000000000000000000 ",
              "sourceMap": "5903:7518:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;5903:7518:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203bba8273489c594d77727ff8532957865d48f429c5bc436a9079fa035aafdc2a64736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE 0xBA DUP3 PUSH20 0x489C594D77727FF8532957865D48F429C5BC436A SWAP1 PUSH26 0xFA035AAFDC2A64736F6C63430008070033000000000000000000 ",
              "sourceMap": "5903:7518:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "_verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "BoringERC20": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080067b4db546a6711ffe27a99c84611d3b1f5501f03608345efba8981c39823964736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 MOD PUSH28 0x4DB546A6711FFE27A99C84611D3B1F5501F03608345EFBA8981C3982 CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "14933:3909:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;14933:3909:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080067b4db546a6711ffe27a99c84611d3b1f5501f03608345efba8981c39823964736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 MOD PUSH28 0x4DB546A6711FFE27A99C84611D3B1F5501F03608345EFBA8981C3982 CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "14933:3909:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "returnDataToString(bytes memory)": "infinite",
                "safeDecimals(contract IBoringERC20)": "infinite",
                "safeName(contract IBoringERC20)": "infinite",
                "safeSymbol(contract IBoringERC20)": "infinite",
                "safeTransfer(contract IBoringERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IBoringERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"BoringERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Context": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "EmberDistributorV2": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "_ember",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_emberPerSec",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_teamAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_treasuryAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_investorAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_teamPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_treasuryPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_investorPercent",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "contract IBoringERC20",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "depositFeeBP",
                  "type": "uint16"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "harvestInterval",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "contract IComplexRewarder[]",
                  "name": "rewarders",
                  "type": "address[]"
                }
              ],
              "name": "Add",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "previousAmount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newAmount",
                  "type": "uint256"
                }
              ],
              "name": "AllocPointsUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Deposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "EmergencyWithdraw",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "previousValue",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newValue",
                  "type": "uint256"
                }
              ],
              "name": "EmissionRateUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amountLockedUp",
                  "type": "uint256"
                }
              ],
              "name": "RewardLockedUp",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint16",
                  "name": "depositFeeBP",
                  "type": "uint16"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "harvestInterval",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "contract IComplexRewarder[]",
                  "name": "rewarders",
                  "type": "address[]"
                }
              ],
              "name": "Set",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "oldAddress",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newAddress",
                  "type": "address"
                }
              ],
              "name": "SetInvestorAddress",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "oldPercent",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newPercent",
                  "type": "uint256"
                }
              ],
              "name": "SetInvestorPercent",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "oldAddress",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newAddress",
                  "type": "address"
                }
              ],
              "name": "SetTeamAddress",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "oldPercent",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newPercent",
                  "type": "uint256"
                }
              ],
              "name": "SetTeamPercent",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "oldAddress",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newAddress",
                  "type": "address"
                }
              ],
              "name": "SetTreasuryAddress",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "oldPercent",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newPercent",
                  "type": "uint256"
                }
              ],
              "name": "SetTreasuryPercent",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "lastRewardTimestamp",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "lpSupply",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "accEmberPerShare",
                  "type": "uint256"
                }
              ],
              "name": "UpdatePool",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Withdraw",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "MAXIMUM_DEPOSIT_FEE_RATE",
              "outputs": [
                {
                  "internalType": "uint16",
                  "name": "",
                  "type": "uint16"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "MAXIMUM_HARVEST_INTERVAL",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IBoringERC20",
                  "name": "_lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "_depositFeeBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "_harvestInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IComplexRewarder[]",
                  "name": "_rewarders",
                  "type": "address[]"
                }
              ],
              "name": "add",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "canHarvest",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "depositWithPermit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ember",
              "outputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "emberPerSec",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "emergencyWithdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256[]",
                  "name": "_pids",
                  "type": "uint256[]"
                }
              ],
              "name": "harvestMany",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "investorAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "investorPercent",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "massUpdatePools",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "pendingTokens",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "addresses",
                  "type": "address[]"
                },
                {
                  "internalType": "string[]",
                  "name": "symbols",
                  "type": "string[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "decimals",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "poolInfo",
              "outputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accEmberPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "depositFeeBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "harvestInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalLp",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "poolLength",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "poolRewarders",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "rewarders",
                  "type": "address[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "poolRewardsPerSec",
              "outputs": [
                {
                  "internalType": "address[]",
                  "name": "addresses",
                  "type": "address[]"
                },
                {
                  "internalType": "string[]",
                  "name": "symbols",
                  "type": "string[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "decimals",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "rewardsPerSec",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                }
              ],
              "name": "poolTotalLp",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "_depositFeeBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "_harvestInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IComplexRewarder[]",
                  "name": "_rewarders",
                  "type": "address[]"
                }
              ],
              "name": "set",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_investorAddress",
                  "type": "address"
                }
              ],
              "name": "setInvestorAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newInvestorPercent",
                  "type": "uint256"
                }
              ],
              "name": "setInvestorPercent",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_teamAddress",
                  "type": "address"
                }
              ],
              "name": "setTeamAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newTeamPercent",
                  "type": "uint256"
                }
              ],
              "name": "setTeamPercent",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_treasuryAddress",
                  "type": "address"
                }
              ],
              "name": "setTreasuryAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_newTreasuryPercent",
                  "type": "uint256"
                }
              ],
              "name": "setTreasuryPercent",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "startFarming",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "startTimestamp",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "teamAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "teamPercent",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalAllocPoint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalEmberInPools",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalLockedUpRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "treasuryAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "treasuryPercent",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                }
              ],
              "name": "updateAllocPoint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_emberPerSec",
                  "type": "uint256"
                }
              ],
              "name": "updateEmissionRate",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "updatePool",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardDebt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardLockedUp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nextHarvestUntil",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_1219": {
                  "entryPoint": null,
                  "id": 1219,
                  "parameterSlots": 8,
                  "returnSlots": 0
                },
                "@_140": {
                  "entryPoint": null,
                  "id": 140,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_42": {
                  "entryPoint": null,
                  "id": 42,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_msgSender_10": {
                  "entryPoint": null,
                  "id": 10,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_setOwner_121": {
                  "entryPoint": 639,
                  "id": 121,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_contract$_IBoringERC20_$529t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256_fromMemory": {
                  "entryPoint": 719,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 8
                },
                "abi_encode_tuple_t_stringliteral_3f14bc06db93da4c8eba868006eed909adda2e68633073669d2673a9c88e2710__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_4803ad6d33e2f17ab9b1c5c5963e784f44e81d486062cb80ae3826b13caec96b__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_eeeaa0db73dabe0d366b874c90cfa02755527ee326ec9d4b0f833d42c9659222__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_fb234a8278b45faacdbcabe85b6bc001c61df1efa56208f39662d4cf9616fdbf__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": {
                  "entryPoint": 862,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "validator_revert_address": {
                  "entryPoint": 901,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:2940:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "234:702:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "281:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "290:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "293:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "283:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "283:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "283:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "255:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "264:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "251:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "251:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "276:3:1",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "247:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "247:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "244:53:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "306:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "325:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "319:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "319:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "310:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "344:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "344:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "344:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "384:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "394:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "384:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "408:35:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "428:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "439:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "424:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "424:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "418:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "418:25:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "408:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "452:40:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "477:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "488:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "473:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "473:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "467:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "467:25:1"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "456:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "526:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "501:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "501:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "501:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "543:17:1",
                              "value": {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "553:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "543:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "569:40:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "594:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "605:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "590:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "590:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "584:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "584:25:1"
                              },
                              "variables": [
                                {
                                  "name": "value_2",
                                  "nodeType": "YulTypedName",
                                  "src": "573:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "643:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "618:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "618:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "618:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "660:17:1",
                              "value": {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "670:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "660:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "686:41:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "711:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "722:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "707:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "707:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "701:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "701:26:1"
                              },
                              "variables": [
                                {
                                  "name": "value_3",
                                  "nodeType": "YulTypedName",
                                  "src": "690:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "761:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "736:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "736:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "736:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "778:17:1",
                              "value": {
                                "name": "value_3",
                                "nodeType": "YulIdentifier",
                                "src": "788:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "778:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "804:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "824:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "835:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "820:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "820:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "814:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "814:26:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "804:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "849:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "869:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "880:3:1",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "865:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "865:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "859:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "859:26:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value6",
                                  "nodeType": "YulIdentifier",
                                  "src": "849:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "894:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "914:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "925:3:1",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "910:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "910:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "904:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "904:26:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value7",
                                  "nodeType": "YulIdentifier",
                                  "src": "894:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IBoringERC20_$529t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "144:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "155:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "167:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "175:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "183:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "191:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "199:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "207:6:1",
                            "type": ""
                          },
                          {
                            "name": "value6",
                            "nodeType": "YulTypedName",
                            "src": "215:6:1",
                            "type": ""
                          },
                          {
                            "name": "value7",
                            "nodeType": "YulTypedName",
                            "src": "223:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:922:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1115:233:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1132:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1143:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1125:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1125:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1125:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1166:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1177:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1162:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1162:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1182:2:1",
                                    "type": "",
                                    "value": "43"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1155:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1155:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1155:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1205:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1216:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1201:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1201:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a20696e76616c6964207472656173757279207065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1221:34:1",
                                    "type": "",
                                    "value": "constructor: invalid treasury pe"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1194:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1194:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1194:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1276:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1287:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1272:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1272:18:1"
                                  },
                                  {
                                    "hexValue": "7263656e742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1292:13:1",
                                    "type": "",
                                    "value": "rcent value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1265:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1265:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1265:41:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1315:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1327:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1338:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1323:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1323:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1315:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3f14bc06db93da4c8eba868006eed909adda2e68633073669d2673a9c88e2710__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1092:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1106:4:1",
                            "type": ""
                          }
                        ],
                        "src": "941:407:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1527:229:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1544:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1555:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1537:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1537:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1537:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1578:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1589:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1574:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1574:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1594:2:1",
                                    "type": "",
                                    "value": "39"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1567:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1567:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1567:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1617:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1628:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1613:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1613:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1633:34:1",
                                    "type": "",
                                    "value": "constructor: invalid team percen"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1606:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1606:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1606:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1688:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1699:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1684:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1684:18:1"
                                  },
                                  {
                                    "hexValue": "742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1704:9:1",
                                    "type": "",
                                    "value": "t value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1677:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1677:37:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1677:37:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1723:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1735:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1746:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1731:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1731:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1723:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_4803ad6d33e2f17ab9b1c5c5963e784f44e81d486062cb80ae3826b13caec96b__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1504:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1518:4:1",
                            "type": ""
                          }
                        ],
                        "src": "1353:403:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1935:225:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1952:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1963:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1945:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1945:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1945:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1986:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1997:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1982:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1982:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2002:2:1",
                                    "type": "",
                                    "value": "35"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1975:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1975:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1975:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2025:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2036:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2021:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2021:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a20746f74616c2070657263656e74206f76657220",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2041:34:1",
                                    "type": "",
                                    "value": "constructor: total percent over "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2014:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2014:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2014:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2096:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2107:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2092:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2092:18:1"
                                  },
                                  {
                                    "hexValue": "6d6178",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2112:5:1",
                                    "type": "",
                                    "value": "max"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2085:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2085:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2085:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2127:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2139:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2150:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2135:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2135:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2127:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_eeeaa0db73dabe0d366b874c90cfa02755527ee326ec9d4b0f833d42c9659222__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1912:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1926:4:1",
                            "type": ""
                          }
                        ],
                        "src": "1761:399:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2339:233:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2356:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2367:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2349:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2349:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2349:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2390:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2401:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2386:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2386:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2406:2:1",
                                    "type": "",
                                    "value": "43"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2379:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2379:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2379:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2429:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2440:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2425:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2425:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a20696e76616c696420696e766573746f72207065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2445:34:1",
                                    "type": "",
                                    "value": "constructor: invalid investor pe"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2418:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2418:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2418:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2500:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2511:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2496:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2496:18:1"
                                  },
                                  {
                                    "hexValue": "7263656e742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2516:13:1",
                                    "type": "",
                                    "value": "rcent value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2489:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2489:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2489:41:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2539:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2551:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2562:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2547:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2547:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2539:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_fb234a8278b45faacdbcabe85b6bc001c61df1efa56208f39662d4cf9616fdbf__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2316:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "2330:4:1",
                            "type": ""
                          }
                        ],
                        "src": "2165:407:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2625:177:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2660:111:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2681:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2688:3:1",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2693:10:1",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "2684:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2684:20:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2674:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2674:31:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2674:31:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2725:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2728:4:1",
                                          "type": "",
                                          "value": "0x11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2718:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2718:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2718:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2753:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2756:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2746:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2746:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2746:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2641:1:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "2648:1:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2644:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2644:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2638:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2638:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2635:136:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2780:16:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2791:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "2794:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2787:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2787:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nodeType": "YulIdentifier",
                                  "src": "2780:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "2608:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "2611:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nodeType": "YulTypedName",
                            "src": "2617:3:1",
                            "type": ""
                          }
                        ],
                        "src": "2577:225:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2852:86:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2916:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2925:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2928:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2918:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2918:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2918:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2875:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2886:5:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2901:3:1",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2906:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2897:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2897:11:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2910:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "2893:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2893:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "2882:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2882:31:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "2872:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2872:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2865:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2865:50:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2862:70:1"
                            }
                          ]
                        },
                        "name": "validator_revert_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "2841:5:1",
                            "type": ""
                          }
                        ],
                        "src": "2807:131:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IBoringERC20_$529t_uint256t_addresst_addresst_addresst_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := mload(add(headStart, 32))\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_address(value_1)\n        value2 := value_1\n        let value_2 := mload(add(headStart, 96))\n        validator_revert_address(value_2)\n        value3 := value_2\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_address(value_3)\n        value4 := value_3\n        value5 := mload(add(headStart, 160))\n        value6 := mload(add(headStart, 192))\n        value7 := mload(add(headStart, 224))\n    }\n    function abi_encode_tuple_t_stringliteral_3f14bc06db93da4c8eba868006eed909adda2e68633073669d2673a9c88e2710__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"constructor: invalid treasury pe\")\n        mstore(add(headStart, 96), \"rcent value\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4803ad6d33e2f17ab9b1c5c5963e784f44e81d486062cb80ae3826b13caec96b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"constructor: invalid team percen\")\n        mstore(add(headStart, 96), \"t value\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_eeeaa0db73dabe0d366b874c90cfa02755527ee326ec9d4b0f833d42c9659222__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"constructor: total percent over \")\n        mstore(add(headStart, 96), \"max\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb234a8278b45faacdbcabe85b6bc001c61df1efa56208f39662d4cf9616fdbf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"constructor: invalid investor pe\")\n        mstore(add(headStart, 96), \"rcent value\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "60a06040526000600681905560095564e8d4a510006080523480156200002457600080fd5b5060405162005ec238038062005ec28339810160408190526200004791620002cf565b62000052336200027f565b600180556103e8831115620000be5760405162461bcd60e51b815260206004820152602760248201527f636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e604482015266742076616c756560c81b60648201526084015b60405180910390fd5b6103e8821115620001265760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420747265617375727920706560448201526a7263656e742076616c756560a81b6064820152608401620000b5565b6103e88111156200018e5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420696e766573746f7220706560448201526a7263656e742076616c756560a81b6064820152608401620000b5565b6103e8816200019e84866200035e565b620001aa91906200035e565b1115620002065760405162461bcd60e51b815260206004820152602360248201527f636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206044820152620dac2f60eb1b6064820152608401620000b5565b62000216426301e133806200035e565b600755600280546001600160a01b03199081166001600160a01b039a8b1617909155600397909755600a8054881696891696909617909555600b8054871694881694909417909355600c80549095169190951617909255600d92909255600e55600f556200039e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600080610100898b031215620002ed57600080fd5b8851620002fa8162000385565b60208a015160408b01519199509750620003148162000385565b60608a0151909650620003278162000385565b60808a01519095506200033a8162000385565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b600082198211156200038057634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146200039b57600080fd5b50565b608051615ae5620003dd600039600081816111ad01528181613897015281816138e50152818161429a015281816143c10152614b850152615ae56000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c8063630b5ba111610191578063afbcfea1116100e3578063e2bbb15811610097578063eff8976b11610071578063eff8976b146106a0578063f2fde38b146106c0578063ffcd4263146106d357600080fd5b8063e2bbb15814610671578063e6fd48bc14610684578063eddf96521461068d57600080fd5b8063dc640ac9116100c8578063dc640ac91461064b578063de73149d1461065e578063e164ac501461066857600080fd5b8063afbcfea114610623578063c5f956af1461062b57600080fd5b8063812c64f1116101455780638da5cb5b1161011f5780638da5cb5b1461059257806393f1a40b146105b0578063949e63021461061057600080fd5b8063812c64f114610550578063876d3c9c1461056c57806389a2bc251461057f57600080fd5b80636605bfda116101765780636605bfda146105225780636690864e14610535578063715018a61461054857600080fd5b8063630b5ba114610507578063654c9ece1461050f57600080fd5b80632081ccc41161024a578063465e81ec116101fe578063515bc323116101d8578063515bc323146104ce57806351eb05a6146104e15780635312ea8e146104f457600080fd5b8063465e81ec1461048f578063474fa630146104b2578063508593ab146104bb57600080fd5b80632e6c998d1161022f5780632e6c998d1461044657806342602f1e14610469578063441a3e701461047c57600080fd5b80632081ccc41461042a5780632a22bc431461043d57600080fd5b80631526fe27116102a157806317caf6f11161028657806317caf6f1146103e15780631c75f085146103ea5780631f1b9a7c1461040a57600080fd5b80631526fe27146103755780631745d2e4146103d857600080fd5b8063081e3eda116102d2578063081e3eda146103135780630ba84cd21461031b57806312e228fd1461033057600080fd5b806304ef9d58146102ee5780630735b2081461030a575b600080fd5b6102f7600e5481565b6040519081526020015b60405180910390f35b6102f7600f5481565b6004546102f7565b61032e610329366004615563565b6106e6565b005b600c546103509073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610301565b610388610383366004615563565b6107b7565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e001610301565b6102f760035481565b6102f760065481565b600a546103509073ffffffffffffffffffffffffffffffffffffffff1681565b6002546103509073ffffffffffffffffffffffffffffffffffffffff1681565b61032e610438366004615661565b610821565b6102f760095481565b610459610454366004615595565b610c7f565b6040519015158152602001610301565b61032e6104773660046153fa565b610d3d565b61032e61048a36600461563f565b610f1e565b6104a261049d366004615563565b61131a565b6040516103019493929190615800565b6102f760085481565b61032e6104c93660046155c5565b611a86565b61032e6104dc366004615691565b611fab565b61032e6104ef366004615563565b612178565b61032e610502366004615563565b6121fa565b61032e6124e7565b6102f761051d366004615563565b612567565b61032e6105303660046153fa565b612595565b61032e6105433660046153fa565b612776565b61032e612957565b6105596103e881565b60405161ffff9091168152602001610301565b61032e61057a366004615563565b6129e4565b61032e61058d366004615563565b612be4565b60005473ffffffffffffffffffffffffffffffffffffffff16610350565b6105f06105be366004615595565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610301565b61032e61061e366004615563565b612de4565b61032e612fe4565b600b546103509073ffffffffffffffffffffffffffffffffffffffff1681565b61032e610659366004615417565b61314c565b6102f76212750081565b6102f7600d5481565b61032e61067f36600461563f565b613270565b6102f760075481565b61032e61069b36600461563f565b6132f4565b6106b36106ae366004615563565b61346a565b60405161030191906157ed565b61032e6106ce3660046153fa565b6135e9565b6104a26106e1366004615595565b613719565b60005473ffffffffffffffffffffffffffffffffffffffff16331461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610774613e24565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b600481815481106107c757600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6004548690811061090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600a82111561097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7365743a20746f6f206d616e79207265776172646572730000000000000000006044820152606401610763565b6103e861ffff861611156109ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610763565b62127500841115610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610763565b60005b82811015610b0857610a92848483818110610a7757610a77615a20565b9050602002016020810190610a8c91906153fa565b3b151590565b610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7365743a207265776172646572206d75737420626520636f6e747261637400006044820152606401610763565b610b0181615998565b9050610a5a565b50610b11613e24565b8560048881548110610b2557610b25615a20565b906000526020600020906008020160010154600654610b449190615955565b610b4e91906158c5565b6006819055508560048881548110610b6857610b68615a20565b9060005260206000209060080201600101819055508460048881548110610b9157610b91615a20565b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610bd057610bd0615a20565b906000526020600020906008020160050181905550828260048981548110610bfa57610bfa615a20565b90600052602060002090600802016007019190610c18929190615285565b508282604051610c29929190615782565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544210801590610d34575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610e0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff8116610ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f73657420696e766573746f7220616464726573733a20696e76616c6964206e6560448201527f7720696e766573746f72206164647265737300000000000000000000000000006064820152608401610763565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b600260015560045482908110610ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b60006004848154811061101257611012615a20565b6000918252602080832087845260058252604080852033865290925292208054600890920290920192508411156110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f7567686044820152606401610763565b8382600601541015611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768006044820152606401610763565b61111c85613e4a565b6111258561434d565b83156111a4578381600001600082825461113f9190615955565b9091555050600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561118157836009600082825461117b9190615955565b90915550505b81546111a49073ffffffffffffffffffffffffffffffffffffffff163386614502565b600382015481547f0000000000000000000000000000000000000000000000000000000000000000916111d691615918565b6111e091906158dd565b600182015560005b60078301548110156112b75782600701818154811061120957611209615a20565b60009182526020909120015482546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638ad1472890606401600060405180830381600087803b15801561128e57600080fd5b505af11580156112a2573d6000803e3d6000fd5b50505050806112b090615998565b90506111e8565b5083156112d857838260060160008282546112d29190615955565b90915550505b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a3505060018055505050565b60608060608084600480549050811061138f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600487815481106113a4576113a4615a20565b90600052602060002090600802019050806007018054905060016113c891906158c5565b67ffffffffffffffff8111156113e0576113e0615a4f565b604051908082528060200260200182016040528015611409578160200160208202803683370190505b50600782015490965061141d9060016158c5565b67ffffffffffffffff81111561143557611435615a4f565b60405190808252806020026020018201604052801561146857816020015b60608152602001906001900390816114535790505b50600782015490955061147c9060016158c5565b67ffffffffffffffff81111561149457611494615a4f565b6040519080825280602002602001820160405280156114bd578160200160208202803683370190505b5060078201549094506114d19060016158c5565b67ffffffffffffffff8111156114e9576114e9615a4f565b604051908082528060200260200182016040528015611512578160200160208202803683370190505b50600254875191945073ffffffffffffffffffffffffffffffffffffffff1690879060009061154357611543615a20565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526002546115739116614672565b8560008151811061158657611586615a20565b60209081029190910101526002546115b39073ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff16846000815181106115c9576115c9615a20565b60200260200101818152505060006103e890506000600f54600e54600d54846115f29190615955565b6115fc9190615955565b6116069190615955565b90508160065482600354866001015461161f9190615918565b6116299190615918565b61163391906158dd565b61163d91906158dd565b8560008151811061165057611650615a20565b60200260200101818152505060005b6007840154811015611a7a5783600701818154811061168057611680615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611727919061547b565b896117338360016158c5565b8151811061174357611743615a20565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061185784600701828154811061179557611795615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c919061547b565b73ffffffffffffffffffffffffffffffffffffffff16614672565b886118638360016158c5565b8151811061187357611873615a20565b602002602001018190525061195884600701828154811061189657611896615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d919061547b565b73ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff16876119678360016158c5565b8151811061197757611977615a20565b60200260200101818152505083600701818154811061199857611998615a20565b6000918252602090912001546040517f465e81ec000000000000000000000000000000000000000000000000000000008152600481018c905273ffffffffffffffffffffffffffffffffffffffff9091169063465e81ec9060240160206040518083038186803b158015611a0b57600080fd5b505afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a43919061557c565b86611a4f8360016158c5565b81518110611a5f57611a5f615a20565b6020908102919091010152611a7381615998565b905061165f565b50505050509193509193565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b600a811115611b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6164643a20746f6f206d616e79207265776172646572730000000000000000006044820152606401610763565b6103e861ffff85161115611be2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610763565b62127500831115611c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610763565b843b611cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610763565b60005b81811015611d7357611cfd838383818110610a7757610a77615a20565b611d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610763565b611d6c81615998565b9050611ce0565b50611d7c613e24565b60006007544211611d8f57600754611d91565b425b90508660066000828254611da591906158c5565b9250508190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e08301518051939493611f1b93506007850192919091019061530d565b5050508282604051611f2e929190615782565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff881690611f5e90600190615955565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b60026001541415612018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556004548690811061208a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b60006004888154811061209f5761209f615a20565b6000918252602090912060089091020180546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810189905260ff8816608482015260a4810187905260c4810186905291925073ffffffffffffffffffffffffffffffffffffffff1690819063d505accf9060e401600060405180830381600087803b15801561214757600080fd5b505af115801561215b573d6000803e3d6000fd5b50505050612169898961487d565b50506001805550505050505050565b600260015414156121e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556121f381613e4a565b5060018055565b60026001541415612267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b600260018190555060006004828154811061228457612284615a20565b60009182526020808320858452600582526040808520338652909252922080546008929092029092016006810154909350811115612344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f75676800000000000000000000000000000000000000000000006064820152608401610763565b6000808355600183018190556002830181905560038301819055600684018054839290612372908490615955565b90915550600090505b60078401548110156124455783600701818154811061239c5761239c615a20565b60009182526020822001546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101889052336024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff1690638ad1472890606401600060405180830381600087803b15801561241c57600080fd5b505af1158015612430573d6000803e3d6000fd5b505050508061243e90615998565b905061237b565b50600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561248357806009600082825461247d9190615955565b90915550505b82546124a69073ffffffffffffffffffffffffffffffffffffffff163383614502565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60026001541415612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b6002600155612561613e24565b60018055565b60006004828154811061257c5761257c615a20565b9060005260206000209060080201600601549050919050565b600b5473ffffffffffffffffffffffffffffffffffffffff163314612662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f73657420747265617375727920616464726573733a206f6e6c7920707265766960448201527f6f757320747265617375727920616464726573732063616e2063616c6c20746860648201527f6973206d6574686f640000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff8116612705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f73657420747265617375727920616464726573733a20696e76616c6964206e6560448201527f77207472656173757279206164647265737300000000000000000000000000006064820152608401610763565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b600a5473ffffffffffffffffffffffffffffffffffffffff163314612843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff81166128e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f736574207465616d20616464726573733a20696e76616c6964206e657720746560448201527f616d2061646472657373000000000000000000000000000000000000000000006064820152608401610763565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146129d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6129e26000614cee565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314612a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610763565b6103e8600e5482600d54612b0b91906158c5565b612b1591906158c5565b1115612ba3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610763565b600f5460408051918252602082018390527f905b464403a98b455243c8b4d30c545b8fbd70cda670142b9326425b2c039f3b910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612c65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612cf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610763565b6103e8600f5482600d54612d0b91906158c5565b612d1591906158c5565b1115612da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610763565b600e5460408051918252602082018390527fa565895c0101fca10e6a7b85742e56cf52ac5f58b09ce030425d3555b47069fd910160405180910390a1600e55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612ef7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c7565000000000000000000000000000000000000000000000000006064820152608401610763565b6103e8600f5482600e54612f0b91906158c5565b612f1591906158c5565b1115612fa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d61780000000000000000000000000000000000000000000000006064820152608401610763565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b60005473ffffffffffffffffffffffffffffffffffffffff163314613065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b60075442106130f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7374617274206661726d696e673a206661726d207374617274656420616c726560448201527f61647900000000000000000000000000000000000000000000000000000000006064820152608401610763565b60045460005b818110156131445760006004828154811061311957613119615a20565b90600052602060002090600802019050428160020181905550508061313d90615998565b90506130fc565b505042600755565b600260015414156131b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b6002600155601e811115613229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f68617276657374206d616e793a20746f6f206d616e7920706f6f6c20696473006044820152606401610763565b60005b818110156132675761325783838381811061324957613249615a20565b90506020020135600061487d565b61326081615998565b905061322c565b50506001805550565b600260015414156132dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556132ec828261487d565b505060018055565b60005473ffffffffffffffffffffffffffffffffffffffff163314613375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b61337d613e24565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef3600484815481106133c8576133c8615a20565b906000526020600020906008020160010154836040516133f2929190918252602082015260400190565b60405180910390a2806004838154811061340e5761340e615a20565b90600052602060002090600802016001015460065461342d9190615955565b61343791906158c5565b600681905550806004838154811061345157613451615a20565b9060005260206000209060080201600101819055505050565b600454606090829081106134da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600484815481106134ef576134ef615a20565b90600052602060002090600802019050806007018054905067ffffffffffffffff81111561351f5761351f615a4f565b604051908082528060200260200182016040528015613548578160200160208202803683370190505b50925060005b60078201548110156135e15781600701818154811061356f5761356f615a20565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815181106135ac576135ac615a20565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526135da81615998565b905061354e565b505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461366a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b73ffffffffffffffffffffffffffffffffffffffff811661370d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610763565b61371681614cee565b50565b60608060608085600480549050811061378e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600488815481106137a3576137a3615a20565b600091825260208083208b845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8d168652909252922060036008909202909201908101546006820154600283015492945090914211801561380157508015155b156138d75760008460020154426138189190615955565b905060006103e890506000600f54600e54600d54846138379190615955565b6138419190615955565b61384b9190615955565b9050600082600654838a60010154600354886138679190615918565b6138719190615918565b61387b9190615918565b61388591906158dd565b61388f91906158dd565b9050846138bc7f000000000000000000000000000000000000000000000000000000000000000083615918565b6138c691906158dd565b6138d090876158c5565b9550505050505b6000836002015484600101547f00000000000000000000000000000000000000000000000000000000000000008587600001546139149190615918565b61391e91906158dd565b6139289190615955565b61393291906158c5565b60078601549091506139459060016158c5565b67ffffffffffffffff81111561395d5761395d615a4f565b604051908082528060200260200182016040528015613986578160200160208202803683370190505b506007860154909a5061399a9060016158c5565b67ffffffffffffffff8111156139b2576139b2615a4f565b6040519080825280602002602001820160405280156139e557816020015b60608152602001906001900390816139d05790505b5060078601549099506139f99060016158c5565b67ffffffffffffffff811115613a1157613a11615a4f565b604051908082528060200260200182016040528015613a3a578160200160208202803683370190505b506007860154909750613a4e9060016158c5565b67ffffffffffffffff811115613a6657613a66615a4f565b604051908082528060200260200182016040528015613a8f578160200160208202803683370190505b506002548b5191995073ffffffffffffffffffffffffffffffffffffffff16908b90600090613ac057613ac0615a20565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254613af09116614672565b89600081518110613b0357613b03615a20565b6020908102919091010152600254613b309073ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff1688600081518110613b4657613b46615a20565b6020026020010181815250508087600081518110613b6657613b66615a20565b60200260200101818152505060005b6007860154811015613e1457856007018181548110613b9657613b96615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b158015613c0557600080fd5b505afa158015613c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3d919061547b565b8b613c498360016158c5565b81518110613c5957613c59615a20565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613cab86600701828154811061179557611795615a20565b8a613cb78360016158c5565b81518110613cc757613cc7615a20565b6020026020010181905250613cea86600701828154811061189657611896615a20565b60ff1689613cf98360016158c5565b81518110613d0957613d09615a20565b602002602001018181525050856007018181548110613d2a57613d2a615a20565b6000918252602090912001546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481018f905273ffffffffffffffffffffffffffffffffffffffff8e811660248301529091169063ffcd42639060440160206040518083038186803b158015613da557600080fd5b505afa158015613db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddd919061557c565b88613de98360016158c5565b81518110613df957613df9615a20565b6020908102919091010152613e0d81615998565b9050613b75565b5050505050505092959194509250565b60005b60045481101561371657613e3a81613e4a565b613e4381615998565b9050613e27565b60045481908110613eb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600060048381548110613ecc57613ecc615a20565b9060005260206000209060080201905080600201544211613eec57505050565b6006810154801580613f0057506001820154155b15613f115750426002909101555050565b6000826002015442613f239190615955565b90506000600654846001015460035484613f3d9190615918565b613f479190615918565b613f5191906158dd565b905060006103e890506000600f54600e54600d5484613f709190615955565b613f7a9190615955565b613f849190615955565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116908590613fbf9088615918565b613fc991906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561403457600080fd5b505af1158015614048573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f19935091169085906140839088615918565b61408d91906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156140f857600080fd5b505af115801561410c573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f19935091169085906141479088615918565b61415191906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156141bc57600080fd5b505af11580156141d0573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f19905030846142008588615918565b61420a91906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561427557600080fd5b505af1158015614289573d6000803e3d6000fd5b5050506006870154839150826142bf7f000000000000000000000000000000000000000000000000000000000000000087615918565b6142c99190615918565b6142d391906158dd565b6142dd91906158dd565b8660030160008282546142f091906158c5565b909155505042600287018190556003870154604080519283526020830188905282015288907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469060600160405180910390a25050505050505b5050565b60006004828154811061436257614362615a20565b60009182526020808320858452600582526040808520338652909252922060038101546008909202909201925015801561439e57506007544210155b156143b85760058201546143b290426158c5565b60038201555b600081600101547f0000000000000000000000000000000000000000000000000000000000000000846003015484600001546143f49190615918565b6143fe91906158dd565b6144089190615955565b90506144148433610c7f565b1561448c57600081118061442c575060008260020154115b1561448757600082600201548261444391906158c5565b905082600201546008600082825461445b9190615955565b909155505060006002840155600584015461447690426158c5565b60038401556144853382614d63565b505b6144fc565b80156144fc5780600860008282546144a491906158c5565b92505081905550808260020160008282546144bf91906158c5565b9091555050604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161459991906157d1565b6000604051808303816000865af19150503d80600081146145d6576040519150601f19603f3d011682016040523d82523d6000602084013e6145db565b606091505b50915091508180156146055750805115806146055750808060200190518101906146059190615459565b61466b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610763565b5050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff8616916146f491906157d1565b600060405180830381855afa9150503d806000811461472f576040519150601f19603f3d011682016040523d82523d6000602084013e614734565b606091505b509150915081614779576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250614782565b61478281614f19565b949350505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff86169161480b91906157d1565b600060405180830381855afa9150503d8060008114614846576040519150601f19603f3d011682016040523d82523d6000602084013e61484b565b606091505b509150915081801561485e575080516020145b614869576012614782565b8080602001905181019061478291906156e4565b600454829081106148ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600484815481106148ff576148ff615a20565b6000918252602080832087845260058252604080852033865290925292206008909102909101915061493085613e4a565b6149398561434d565b8315614b7c5781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156149a857600080fd5b505afa1580156149bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149e0919061557c565b8354909150614a079073ffffffffffffffffffffffffffffffffffffffff1633308861510c565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015614a7057600080fd5b505afa158015614a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aa8919061557c565b9050614ab48282615955565b600485015490965061ffff1615614b2357600484015460009061271090614adf9061ffff1689615918565b614ae991906158dd565b600b548654919250614b159173ffffffffffffffffffffffffffffffffffffffff908116911683614502565b614b1f8188615955565b9650505b85836000016000828254614b3791906158c5565b9091555050600254845473ffffffffffffffffffffffffffffffffffffffff90811691161415614b79578560096000828254614b7391906158c5565b90915550505b50505b600382015481547f000000000000000000000000000000000000000000000000000000000000000091614bae91615918565b614bb891906158dd565b600182015560005b6007830154811015614c8f57826007018181548110614be157614be1615a20565b60009182526020909120015482546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638ad1472890606401600060405180830381600087803b158015614c6657600080fd5b505af1158015614c7a573d6000803e3d6000fd5b5050505080614c8890615998565b9050614bc0565b508315614cb05783826006016000828254614caa91906158c5565b90915550505b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a35050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015614dcf57600080fd5b505afa158015614de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e07919061557c565b1115614349576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015614e7b57600080fd5b505afa158015614e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eb3919061557c565b614ebd9190615955565b9050808210614eef57600254614eea9073ffffffffffffffffffffffffffffffffffffffff168483614502565b505050565b8115614eea57600254614eea9073ffffffffffffffffffffffffffffffffffffffff168484614502565b60606040825110614f3e5781806020019051810190614f389190615498565b92915050565b8151602014156150ce5760005b60208160ff16108015614f985750828160ff1681518110614f6e57614f6e615a20565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b15614faf5780614fa7816159d1565b915050614f4b565b60008160ff1667ffffffffffffffff811115614fcd57614fcd615a4f565b6040519080825280601f01601f191660200182016040528015614ff7576020820181803683370190505b509050600091505b60208260ff1610801561504c5750838260ff168151811061502257615022615a20565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b156150c757838260ff168151811061506657615066615a20565b602001015160f81c60f81b818360ff168151811061508657615086615a20565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816150bf816159d1565b925050614fff565b9392505050565b505060408051808201909152600381527f3f3f3f0000000000000000000000000000000000000000000000000000000000602082015290565b919050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916151ab91906157d1565b6000604051808303816000865af19150503d80600081146151e8576040519150601f19603f3d011682016040523d82523d6000602084013e6151ed565b606091505b50915091508180156152175750805115806152175750808060200190518101906152179190615459565b61527d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152606401610763565b505050505050565b8280548282559060005260206000209081019282156152fd579160200282015b828111156152fd5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8435161782556020909201916001909101906152a5565b50615309929150615387565b5090565b8280548282559060005260206000209081019282156152fd579160200282015b828111156152fd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061532d565b5b808211156153095760008155600101615388565b60008083601f8401126153ae57600080fd5b50813567ffffffffffffffff8111156153c657600080fd5b6020830191508360208260051b85010111156153e157600080fd5b9250929050565b803561ffff8116811461510757600080fd5b60006020828403121561540c57600080fd5b81356150c781615a7e565b6000806020838503121561542a57600080fd5b823567ffffffffffffffff81111561544157600080fd5b61544d8582860161539c565b90969095509350505050565b60006020828403121561546b57600080fd5b815180151581146150c757600080fd5b60006020828403121561548d57600080fd5b81516150c781615a7e565b6000602082840312156154aa57600080fd5b815167ffffffffffffffff808211156154c257600080fd5b818401915084601f8301126154d657600080fd5b8151818111156154e8576154e8615a4f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561552e5761552e615a4f565b8160405282815287602084870101111561554757600080fd5b61555883602083016020880161596c565b979650505050505050565b60006020828403121561557557600080fd5b5035919050565b60006020828403121561558e57600080fd5b5051919050565b600080604083850312156155a857600080fd5b8235915060208301356155ba81615a7e565b809150509250929050565b60008060008060008060a087890312156155de57600080fd5b8635955060208701356155f081615a7e565b94506155fe604088016153e8565b935060608701359250608087013567ffffffffffffffff81111561562157600080fd5b61562d89828a0161539c565b979a9699509497509295939492505050565b6000806040838503121561565257600080fd5b50508035926020909101359150565b60008060008060008060a0878903121561567a57600080fd5b86359550602087013594506155fe604088016153e8565b60008060008060008060c087890312156156aa57600080fd5b86359550602087013594506040870135935060608701356156ca81615aa0565b9598949750929560808101359460a0909101359350915050565b6000602082840312156156f657600080fd5b81516150c781615aa0565b600081518084526020808501945080840160005b8381101561574757815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101615715565b509495945050505050565b600081518084526020808501945080840160005b8381101561574757815187529582019590820190600101615766565b60008184825b858110156157c657813561579b81615a7e565b73ffffffffffffffffffffffffffffffffffffffff1683526020928301929190910190600101615788565b509095945050505050565b600082516157e381846020870161596c565b9190910192915050565b6020815260006150c76020830184615701565b6080815260006158136080830187615701565b6020838203818501528187518084528284019150828160051b850101838a0160005b83811015615899577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808885030186528251805180865261587b818a88018b850161596c565b96880196601f01909116939093018601925090850190600101615835565b505086810360408801526158ad818a615752565b94505050505082810360608401526155588185615752565b600082198211156158d8576158d86159f1565b500190565b600082615913577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615950576159506159f1565b500290565b600082821015615967576159676159f1565b500390565b60005b8381101561598757818101518382015260200161596f565b838111156144fc5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156159ca576159ca6159f1565b5060010190565b600060ff821660ff8114156159e8576159e86159f1565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461371657600080fd5b60ff8116811461371657600080fdfea2646970667358221220675acd47b434fa866a339703ba174905316bc1a1a0cbcd6244a1a80c23c63aaa64736f6c63430008070033",
              "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x9 SSTORE PUSH5 0xE8D4A51000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5EC2 CODESIZE SUB DUP1 PUSH3 0x5EC2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x47 SWAP2 PUSH3 0x2CF JUMP JUMPDEST PUSH3 0x52 CALLER PUSH3 0x27F JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH2 0x3E8 DUP4 GT ISZERO PUSH3 0xBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A20696E76616C6964207465616D2070657263656E PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x742076616C7565 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP3 GT ISZERO PUSH3 0x126 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A20696E76616C6964207472656173757279207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7263656E742076616C7565 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0xB5 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH3 0x18E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A20696E76616C696420696E766573746F72207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7263656E742076616C7565 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0xB5 JUMP JUMPDEST PUSH2 0x3E8 DUP2 PUSH3 0x19E DUP5 DUP7 PUSH3 0x35E JUMP JUMPDEST PUSH3 0x1AA SWAP2 SWAP1 PUSH3 0x35E JUMP JUMPDEST GT ISZERO PUSH3 0x206 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A20746F74616C2070657263656E74206F76657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0xDAC2F PUSH1 0xEB SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0xB5 JUMP JUMPDEST PUSH3 0x216 TIMESTAMP PUSH4 0x1E13380 PUSH3 0x35E JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP11 DUP12 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x3 SWAP8 SWAP1 SWAP8 SSTORE PUSH1 0xA DUP1 SLOAD DUP9 AND SWAP7 DUP10 AND SWAP7 SWAP1 SWAP7 OR SWAP1 SWAP6 SSTORE PUSH1 0xB DUP1 SLOAD DUP8 AND SWAP5 DUP9 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE PUSH1 0xC DUP1 SLOAD SWAP1 SWAP6 AND SWAP2 SWAP1 SWAP6 AND OR SWAP1 SWAP3 SSTORE PUSH1 0xD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH3 0x39E JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP10 DUP12 SUB SLT ISZERO PUSH3 0x2ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 MLOAD PUSH3 0x2FA DUP2 PUSH3 0x385 JUMP JUMPDEST PUSH1 0x20 DUP11 ADD MLOAD PUSH1 0x40 DUP12 ADD MLOAD SWAP2 SWAP10 POP SWAP8 POP PUSH3 0x314 DUP2 PUSH3 0x385 JUMP JUMPDEST PUSH1 0x60 DUP11 ADD MLOAD SWAP1 SWAP7 POP PUSH3 0x327 DUP2 PUSH3 0x385 JUMP JUMPDEST PUSH1 0x80 DUP11 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x33A DUP2 PUSH3 0x385 JUMP JUMPDEST PUSH1 0xA0 DUP11 ADD MLOAD PUSH1 0xC0 DUP12 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP12 ADD MLOAD SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 SWAP6 SWAP9 SWAP1 SWAP8 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x380 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x5AE5 PUSH3 0x3DD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x11AD ADD MSTORE DUP2 DUP2 PUSH2 0x3897 ADD MSTORE DUP2 DUP2 PUSH2 0x38E5 ADD MSTORE DUP2 DUP2 PUSH2 0x429A ADD MSTORE DUP2 DUP2 PUSH2 0x43C1 ADD MSTORE PUSH2 0x4B85 ADD MSTORE PUSH2 0x5AE5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x630B5BA1 GT PUSH2 0x191 JUMPI DUP1 PUSH4 0xAFBCFEA1 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE2BBB158 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEFF8976B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEFF8976B EQ PUSH2 0x6A0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0xFFCD4263 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE2BBB158 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x684 JUMPI DUP1 PUSH4 0xEDDF9652 EQ PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDC640AC9 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDC640AC9 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xDE73149D EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0xE164AC50 EQ PUSH2 0x668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFBCFEA1 EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0xC5F956AF EQ PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x812C64F1 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x592 JUMPI DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0x949E6302 EQ PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x812C64F1 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x876D3C9C EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x89A2BC25 EQ PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6605BFDA GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x6605BFDA EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0x6690864E EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x654C9ECE EQ PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2081CCC4 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x465E81EC GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x515BC323 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x515BC323 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0x5312EA8E EQ PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x465E81EC EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x474FA630 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0x508593AB EQ PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2E6C998D GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x2E6C998D EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x42602F1E EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2081CCC4 EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x2A22BC43 EQ PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x17CAF6F1 GT PUSH2 0x286 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x1C75F085 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x1F1B9A7C EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x1745D2E4 EQ PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81E3EDA GT PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x81E3EDA EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xBA84CD2 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x12E228FD EQ PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4EF9D58 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x735B208 EQ PUSH2 0x30A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F7 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x6E6 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x388 PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP9 AND DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0xFFFF AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x5661 JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x454 CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH2 0xC7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0xD3D JUMP JUMPDEST PUSH2 0x32E PUSH2 0x48A CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x4A2 PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5800 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x55C5 JUMP JUMPDEST PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x5691 JUMP JUMPDEST PUSH2 0x1FAB JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4EF CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2178 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x21FA JUMP JUMPDEST PUSH2 0x32E PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x51D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2567 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x2595 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x2776 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x2957 JUMP JUMPDEST PUSH2 0x559 PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x57A CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x29E4 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x58D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2BE4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x350 JUMP JUMPDEST PUSH2 0x5F0 PUSH2 0x5BE CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2DE4 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x2FE4 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x5417 JUMP JUMPDEST PUSH2 0x314C JUMP JUMPDEST PUSH2 0x2F7 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0x3270 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0x32F4 JUMP JUMPDEST PUSH2 0x6B3 PUSH2 0x6AE CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x346A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x57ED JUMP JUMPDEST PUSH2 0x32E PUSH2 0x6CE CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x35E9 JUMP JUMPDEST PUSH2 0x4A2 PUSH2 0x6E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH2 0x3719 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x774 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0xEEDC6338C9C1AD8F3CD6C90DD09DBE98DBD57E610D3E59A17996D07ACB0D9511 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 SWAP1 SWAP7 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP7 POP SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0xFFFF AND SWAP2 SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP3 GT ISZERO PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A20746F6F206D616E7920726577617264657273000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP7 AND GT ISZERO PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH3 0x127500 DUP5 GT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xA92 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA8C SWAP2 SWAP1 PUSH2 0x53FA JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A207265776172646572206D75737420626520636F6E74726163740000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0xA5A JUMP JUMPDEST POP PUSH2 0xB11 PUSH2 0x3E24 JUMP JUMPDEST DUP6 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x6 SLOAD PUSH2 0xB44 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0xB4E SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB68 JUMPI PUSH2 0xB68 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xBD0 JUMPI PUSH2 0xBD0 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP3 PUSH1 0x4 DUP10 DUP2 SLOAD DUP2 LT PUSH2 0xBFA JUMPI PUSH2 0xBFA PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD SWAP2 SWAP1 PUSH2 0xC18 SWAP3 SWAP2 SWAP1 PUSH2 0x5285 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xC29 SWAP3 SWAP2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP9 DUP4 MSTORE PUSH2 0xFFFF DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 DUP9 SWAP1 PUSH32 0x5ED6F0DEEF9AB49D02900B40D596DF4CD637A2A7FBFA56BBCB377389D3CE8D28 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xCEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x7 SLOAD TIMESTAMP LT DUP1 ISZERO SWAP1 PUSH2 0xD34 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F7220616464726573733A206F6E6C79207072657669 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F757320696E766573746F722063616E2063616C6C2074686973206D6574686F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xEAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F7220616464726573733A20696E76616C6964206E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7720696E766573746F7220616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x6260CB34F06B782E83BDE168F7D74AB2133041CB53B63CE22B127822A92B6791 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xF8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0xFFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1012 JUMPI PUSH2 0x1012 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP3 POP DUP5 GT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261773A207573657220616D6F756E74206E6F7420656E6F756768 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x6 ADD SLOAD LT ISZERO PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261773A20706F6F6C20746F74616C206E6F7420656E6F75676800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x111C DUP6 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x1125 DUP6 PUSH2 0x434D JUMP JUMPDEST DUP4 ISZERO PUSH2 0x11A4 JUMPI DUP4 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x113F SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1181 JUMPI DUP4 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x117B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP2 SLOAD PUSH2 0x11A4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP7 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x11D6 SWAP2 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x11E0 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x12B7 JUMPI DUP3 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1209 JUMPI PUSH2 0x1209 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x12B0 SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x11E8 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x12D8 JUMPI DUP4 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12D2 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP6 SWAP1 CALLER SWAP1 PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 DUP5 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 LT PUSH2 0x138F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x13A4 JUMPI PUSH2 0x13A4 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH2 0x13C8 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E0 JUMPI PUSH2 0x13E0 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1409 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP7 POP PUSH2 0x141D SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1435 JUMPI PUSH2 0x1435 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1468 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1453 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP6 POP PUSH2 0x147C SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1494 JUMPI PUSH2 0x1494 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14BD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP5 POP PUSH2 0x14D1 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14E9 JUMPI PUSH2 0x14E9 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1512 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x2 SLOAD DUP8 MLOAD SWAP2 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1543 JUMPI PUSH2 0x1543 PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x1573 SWAP2 AND PUSH2 0x4672 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1586 JUMPI PUSH2 0x1586 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x15B3 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15C9 JUMPI PUSH2 0x15C9 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x15F2 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x15FC SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x1606 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 SLOAD DUP3 PUSH1 0x3 SLOAD DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x161F SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x1629 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x1633 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x163D SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1650 JUMPI PUSH2 0x1650 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1A7A JUMPI DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1680 JUMPI PUSH2 0x1680 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1703 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1727 SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST DUP10 PUSH2 0x1733 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1743 JUMPI PUSH2 0x1743 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH2 0x1857 DUP5 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1795 JUMPI PUSH2 0x1795 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1818 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x183C SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4672 JUMP JUMPDEST DUP9 PUSH2 0x1863 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI PUSH2 0x1873 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1958 DUP5 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1896 JUMPI PUSH2 0x1896 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1919 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x193D SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP8 PUSH2 0x1967 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1977 JUMPI PUSH2 0x1977 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1998 JUMPI PUSH2 0x1998 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x465E81EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x465E81EC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A43 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP7 PUSH2 0x1A4F DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1A5F JUMPI PUSH2 0x1A5F PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x1A73 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x165F JUMP JUMPDEST POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1B07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP2 GT ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A20746F6F206D616E7920726577617264657273000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP6 AND GT ISZERO PUSH2 0x1BE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH3 0x127500 DUP4 GT ISZERO PUSH2 0x1C4F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x1CDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A204C5020746F6B656E206D75737420626520612076616C696420636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D73 JUMPI PUSH2 0x1CFD DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0x5A20 JUMP JUMPDEST PUSH2 0x1D63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A207265776172646572206D75737420626520636F6E74726163740000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1D6C DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CE0 JUMP JUMPDEST POP PUSH2 0x1D7C PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD TIMESTAMP GT PUSH2 0x1D8F JUMPI PUSH1 0x7 SLOAD PUSH2 0x1D91 JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DA5 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP DUP4 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP7 SSTORE SWAP5 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0x8 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE DUP4 DUP3 ADD MLOAD SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP6 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP6 ADD SSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD SWAP4 SWAP5 SWAP4 PUSH2 0x1F1B SWAP4 POP PUSH1 0x7 DUP6 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x530D JUMP JUMPDEST POP POP POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1F2E SWAP3 SWAP2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH2 0x1F5E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH2 0xFFFF DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH32 0x5ED295C4F5AF5AEB1CCD905E1CD55A86AB3BB9FC1FE2346FF64AC47DBEF36661 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2018 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x208A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x209F JUMPI PUSH2 0x209F PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH1 0xE4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x215B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x2169 DUP10 DUP10 PUSH2 0x487D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x21E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x21F3 DUP2 PUSH2 0x3E4A JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2267 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2284 JUMPI PUSH2 0x2284 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0x8 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP4 POP DUP2 GT ISZERO PUSH2 0x2344 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63792077697468647261773A20706F6F6C20746F74616C206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F7420656E6F7567680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x6 DUP5 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2372 SWAP1 DUP5 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x2445 JUMPI DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x239C JUMPI PUSH2 0x239C PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2430 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x243E SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x237B JUMP JUMPDEST POP PUSH1 0x2 SLOAD DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2483 JUMPI DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x247D SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP3 SLOAD PUSH2 0x24A6 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE DUP5 SWAP1 CALLER SWAP1 PUSH32 0xBB757047C2B5F3974FE26B7C10F732E7BCE710B0952A71082702781E62AE0595 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2554 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x2561 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x257C JUMPI PUSH2 0x257C PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2662 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420747265617375727920616464726573733A206F6E6C79207072657669 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F757320747265617375727920616464726573732063616E2063616C6C207468 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6973206D6574686F640000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420747265617375727920616464726573733A20696E76616C6964206E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7720747265617375727920616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x61885CDBA916BE748FF3E3F6F15E4206153B8EA3B7ACABADE9D04B4063A83510 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2843 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D20616464726573733A206F6E6C792070726576696F757320 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7465616D20616464726573732063616E2063616C6C2074686973206D6574686F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x28E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D20616464726573733A20696E76616C6964206E6577207465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616D206164647265737300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x42FBC17D847FDC3E5C82DA842A5EF3979C64F3B94CD4E7382310FD5525C6EE0F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x29E2 PUSH1 0x0 PUSH2 0x4CEE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2A65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2AF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F722070657263656E743A20696E76616C6964207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7263656E742076616C7565000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xE SLOAD DUP3 PUSH1 0xD SLOAD PUSH2 0x2B0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2B15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2BA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F722070657263656E743A20746F74616C2070657263 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E74206F766572206D61780000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x905B464403A98B455243C8B4D30C545B8FBD70CDA670142B9326425B2C039F3B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xF SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2C65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2CF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365742074726561737572792070657263656E743A20696E76616C6964207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7263656E742076616C7565000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xF SLOAD DUP3 PUSH1 0xD SLOAD PUSH2 0x2D0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2D15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2DA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365742074726561737572792070657263656E743A20746F74616C2070657263 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E74206F766572206D61780000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xA565895C0101FCA10E6A7B85742E56CF52AC5F58B09CE030425D3555B47069FD SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2E65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2EF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D2070657263656E743A20696E76616C69642070657263656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x742076616C756500000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xF SLOAD DUP3 PUSH1 0xE SLOAD PUSH2 0x2F0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2F15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2FA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D2070657263656E743A20746F74616C2070657263656E7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F766572206D6178000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x204A076F4A2E4E5E646BB8841CC285306BF747E277F40DBFD5750E782E17B7A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xD SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3065 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x7 SLOAD TIMESTAMP LT PUSH2 0x30F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7374617274206661726D696E673A206661726D207374617274656420616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164790000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3144 JUMPI PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3119 JUMPI PUSH2 0x3119 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP TIMESTAMP DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP DUP1 PUSH2 0x313D SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x30FC JUMP JUMPDEST POP POP TIMESTAMP PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x31B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x3229 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x68617276657374206D616E793A20746F6F206D616E7920706F6F6C2069647300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3267 JUMPI PUSH2 0x3257 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x3249 JUMPI PUSH2 0x3249 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 PUSH2 0x487D JUMP JUMPDEST PUSH2 0x3260 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x322C JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x32DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x32EC DUP3 DUP3 PUSH2 0x487D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3375 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x337D PUSH2 0x3E24 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x802633C8D26237616D81BDAC01BC40FCDF36E098832601582EC19D7E431C5EF3 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x33C8 JUMPI PUSH2 0x33C8 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP4 PUSH1 0x40 MLOAD PUSH2 0x33F2 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x340E JUMPI PUSH2 0x340E PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x6 SLOAD PUSH2 0x342D SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3437 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3451 JUMPI PUSH2 0x3451 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x34DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x34EF JUMPI PUSH2 0x34EF PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD DUP1 SLOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x351F JUMPI PUSH2 0x351F PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3548 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP3 ADD SLOAD DUP2 LT ISZERO PUSH2 0x35E1 JUMPI DUP2 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x356F JUMPI PUSH2 0x356F PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35AC JUMPI PUSH2 0x35AC PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x35DA DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x354E JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x366A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x370D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3716 DUP2 PUSH2 0x4CEE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 DUP6 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 LT PUSH2 0x378E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x37A3 JUMPI PUSH2 0x37A3 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x3 PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP1 DUP2 ADD SLOAD PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 SWAP5 POP SWAP1 SWAP2 TIMESTAMP GT DUP1 ISZERO PUSH2 0x3801 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x38D7 JUMPI PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD TIMESTAMP PUSH2 0x3818 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x3837 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3841 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x384B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD DUP4 DUP11 PUSH1 0x1 ADD SLOAD PUSH1 0x3 SLOAD DUP9 PUSH2 0x3867 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3871 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x387B SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3885 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x388F SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x38BC PUSH32 0x0 DUP4 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x38C6 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x38D0 SWAP1 DUP8 PUSH2 0x58C5 JUMP JUMPDEST SWAP6 POP POP POP POP POP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD DUP5 PUSH1 0x1 ADD SLOAD PUSH32 0x0 DUP6 DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x3914 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x391E SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x3928 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3932 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x3945 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x395D JUMPI PUSH2 0x395D PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3986 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP11 POP PUSH2 0x399A SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39B2 JUMPI PUSH2 0x39B2 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39E5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x39D0 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP10 POP PUSH2 0x39F9 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A11 JUMPI PUSH2 0x3A11 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP8 POP PUSH2 0x3A4E SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A66 JUMPI PUSH2 0x3A66 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A8F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x2 SLOAD DUP12 MLOAD SWAP2 SWAP10 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP12 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x3AC0 JUMPI PUSH2 0x3AC0 PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x3AF0 SWAP2 AND PUSH2 0x4672 JUMP JUMPDEST DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B03 JUMPI PUSH2 0x3B03 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x3B30 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B46 JUMPI PUSH2 0x3B46 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B66 JUMPI PUSH2 0x3B66 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP7 ADD SLOAD DUP2 LT ISZERO PUSH2 0x3E14 JUMPI DUP6 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3B96 JUMPI PUSH2 0x3B96 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C19 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C3D SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST DUP12 PUSH2 0x3C49 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3C59 JUMPI PUSH2 0x3C59 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH2 0x3CAB DUP7 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1795 JUMPI PUSH2 0x1795 PUSH2 0x5A20 JUMP JUMPDEST DUP11 PUSH2 0x3CB7 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3CC7 JUMPI PUSH2 0x3CC7 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x3CEA DUP7 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1896 JUMPI PUSH2 0x1896 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0xFF AND DUP10 PUSH2 0x3CF9 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3D09 JUMPI PUSH2 0x3D09 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3D2A JUMPI PUSH2 0x3D2A PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xFFCD426300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP16 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xFFCD4263 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DDD SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP9 PUSH2 0x3DE9 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3DF9 JUMPI PUSH2 0x3DF9 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x3E0D DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B75 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 SLOAD DUP2 LT ISZERO PUSH2 0x3716 JUMPI PUSH2 0x3E3A DUP2 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x3E43 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x3E27 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 SWAP1 DUP2 LT PUSH2 0x3EB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3ECC JUMPI PUSH2 0x3ECC PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT PUSH2 0x3EEC JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 ADD SLOAD DUP1 ISZERO DUP1 PUSH2 0x3F00 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x3F11 JUMPI POP TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP PUSH2 0x3F23 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6 SLOAD DUP5 PUSH1 0x1 ADD SLOAD PUSH1 0x3 SLOAD DUP5 PUSH2 0x3F3D SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3F47 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3F51 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x3F70 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3F7A SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3F84 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xA SLOAD PUSH1 0xD SLOAD SWAP3 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP3 PUSH4 0x40C10F19 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x3FBF SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3FC9 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4048 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0xB SLOAD PUSH1 0xE SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP5 POP PUSH4 0x40C10F19 SWAP4 POP SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x4083 SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x408D SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x410C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0xC SLOAD PUSH1 0xF SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP5 POP PUSH4 0x40C10F19 SWAP4 POP SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x4147 SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4151 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x41D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH4 0x40C10F19 SWAP1 POP ADDRESS DUP5 PUSH2 0x4200 DUP6 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x420A SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4289 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x6 DUP8 ADD SLOAD DUP4 SWAP2 POP DUP3 PUSH2 0x42BF PUSH32 0x0 DUP8 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x42C9 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x42D3 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x42DD SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST DUP7 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x42F0 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x2 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP9 SWAP1 MSTORE DUP3 ADD MSTORE DUP9 SWAP1 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4362 JUMPI PUSH2 0x4362 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP3 POP ISZERO DUP1 ISZERO PUSH2 0x439E JUMPI POP PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO JUMPDEST ISZERO PUSH2 0x43B8 JUMPI PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x43B2 SWAP1 TIMESTAMP PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD PUSH32 0x0 DUP5 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x43F4 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x43FE SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x4408 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH2 0x4414 DUP5 CALLER PUSH2 0xC7F JUMP JUMPDEST ISZERO PUSH2 0x448C JUMPI PUSH1 0x0 DUP2 GT DUP1 PUSH2 0x442C JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x4487 JUMPI PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x4443 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x2 ADD SLOAD PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x445B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x5 DUP5 ADD SLOAD PUSH2 0x4476 SWAP1 TIMESTAMP PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x4485 CALLER DUP3 PUSH2 0x4D63 JUMP JUMPDEST POP JUMPDEST PUSH2 0x44FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x44FC JUMPI DUP1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x44A4 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x44BF SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE DUP5 SWAP1 CALLER SWAP1 PUSH32 0xEE470483107F579A55C754FA00613C45A9A3B617A418B39CB0BE97E5381BA7C1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x4599 SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4605 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4605 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4605 SWAP2 SWAP1 PUSH2 0x5459 JUMP JUMPDEST PUSH2 0x466B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95D89B4100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x46F4 SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x472F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4734 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x4779 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3F3F3F0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x4782 JUMP JUMPDEST PUSH2 0x4782 DUP2 PUSH2 0x4F19 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x480B SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4846 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x484B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x485E JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x4869 JUMPI PUSH1 0x12 PUSH2 0x4782 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4782 SWAP2 SWAP1 PUSH2 0x56E4 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x48EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x48FF JUMPI PUSH2 0x48FF PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x4930 DUP6 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x4939 DUP6 PUSH2 0x434D JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4B7C JUMPI DUP2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49E0 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x4A07 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP9 PUSH2 0x510C JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA8 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB4 DUP3 DUP3 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD SWAP1 SWAP7 POP PUSH2 0xFFFF AND ISZERO PUSH2 0x4B23 JUMPI PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x4ADF SWAP1 PUSH2 0xFFFF AND DUP10 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4AE9 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0xB SLOAD DUP7 SLOAD SWAP2 SWAP3 POP PUSH2 0x4B15 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x4502 JUMP JUMPDEST PUSH2 0x4B1F DUP2 DUP9 PUSH2 0x5955 JUMP JUMPDEST SWAP7 POP POP JUMPDEST DUP6 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4B37 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4B79 JUMPI DUP6 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4B73 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x4BAE SWAP2 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4BB8 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x4C8F JUMPI DUP3 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4BE1 JUMPI PUSH2 0x4BE1 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x4C88 SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x4BC0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x4CB0 JUMPI DUP4 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CAA SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP6 SWAP1 CALLER SWAP1 PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E07 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST GT ISZERO PUSH2 0x4349 JUMPI PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EB3 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST PUSH2 0x4EBD SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x4EEF JUMPI PUSH1 0x2 SLOAD PUSH2 0x4EEA SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP4 PUSH2 0x4502 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x4EEA JUMPI PUSH1 0x2 SLOAD PUSH2 0x4EEA SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP3 MLOAD LT PUSH2 0x4F3E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4F38 SWAP2 SWAP1 PUSH2 0x5498 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x50CE JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x4F98 JUMPI POP DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x4F6E JUMPI PUSH2 0x4F6E PUSH2 0x5A20 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4FAF JUMPI DUP1 PUSH2 0x4FA7 DUP2 PUSH2 0x59D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F4B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4FCD JUMPI PUSH2 0x4FCD PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FF7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x504C JUMPI POP DUP4 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5022 JUMPI PUSH2 0x5022 PUSH2 0x5A20 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x50C7 JUMPI DUP4 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5066 JUMPI PUSH2 0x5066 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5086 JUMPI PUSH2 0x5086 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x50BF DUP2 PUSH2 0x59D1 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x4FFF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x3F3F3F0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x51AB SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x51ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5217 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x5217 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5217 SWAP2 SWAP1 PUSH2 0x5459 JUMP JUMPDEST PUSH2 0x527D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x52FD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x52FD JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x52A5 JUMP JUMPDEST POP PUSH2 0x5309 SWAP3 SWAP2 POP PUSH2 0x5387 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x52FD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x52FD JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x532D JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x5309 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x5388 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x53AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x53C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x53E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x5107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x540C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x50C7 DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x542A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x544D DUP6 DUP3 DUP7 ADD PUSH2 0x539C JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x546B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x50C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x548D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C7 DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x54C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x54D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x54E8 JUMPI PUSH2 0x54E8 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x552E JUMPI PUSH2 0x552E PUSH2 0x5A4F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x5547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5558 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x596C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5575 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x558E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x55A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x55BA DUP2 PUSH2 0x5A7E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x55DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x55F0 DUP2 PUSH2 0x5A7E JUMP JUMPDEST SWAP5 POP PUSH2 0x55FE PUSH1 0x40 DUP9 ADD PUSH2 0x53E8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x562D DUP10 DUP3 DUP11 ADD PUSH2 0x539C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5652 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x567A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0x55FE PUSH1 0x40 DUP9 ADD PUSH2 0x53E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x56AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x56CA DUP2 PUSH2 0x5AA0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C7 DUP2 PUSH2 0x5AA0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5747 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5715 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5747 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5766 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x57C6 JUMPI DUP2 CALLDATALOAD PUSH2 0x579B DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5788 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x57E3 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x596C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x50C7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5701 JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5813 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x5701 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP11 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5899 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP1 DUP9 DUP6 SUB ADD DUP7 MSTORE DUP3 MLOAD DUP1 MLOAD DUP1 DUP7 MSTORE PUSH2 0x587B DUP2 DUP11 DUP9 ADD DUP12 DUP6 ADD PUSH2 0x596C JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 PUSH1 0x1F ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 ADD DUP7 ADD SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5835 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x58AD DUP2 DUP11 PUSH2 0x5752 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x5558 DUP2 DUP6 PUSH2 0x5752 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x58D8 JUMPI PUSH2 0x58D8 PUSH2 0x59F1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5913 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5950 JUMPI PUSH2 0x5950 PUSH2 0x59F1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5967 JUMPI PUSH2 0x5967 PUSH2 0x59F1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5987 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x596F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x44FC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x59CA JUMPI PUSH2 0x59CA PUSH2 0x59F1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x59E8 JUMPI PUSH2 0x59E8 PUSH2 0x59F1 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3716 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x5ACD47B434FA866A CALLER SWAP8 SUB 0xBA OR 0x49 SDIV BALANCE PUSH12 0xC1A1A0CBCD6244A1A80C23C6 GASPRICE 0xAA PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "19258:27450:0:-:0;;;20951:1;20918:34;;;;21173:36;;21753:4;21705:52;;23649:1285;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1772:23;784:10;1772:9;:23::i;:::-;4793:1;4898:22;;23969:4;23953:20;;;23932:106;;;;-1:-1:-1;;;23932:106:0;;1555:2:1;23932:106:0;;;1537:21:1;1594:2;1574:18;;;1567:30;1633:34;1613:18;;;1606:62;-1:-1:-1;;;1684:18:1;;;1677:37;1731:19;;23932:106:0;;;;;;;;;24089:4;24069:16;:24;;24048:114;;;;-1:-1:-1;;;24048:114:0;;1143:2:1;24048:114:0;;;1125:21:1;1182:2;1162:18;;;1155:30;1221:34;1201:18;;;1194:62;-1:-1:-1;;;1272:18:1;;;1265:41;1323:19;;24048:114:0;941:407:1;24048:114:0;24213:4;24193:16;:24;;24172:114;;;;-1:-1:-1;;;24172:114:0;;2367:2:1;24172:114:0;;;2349:21:1;2406:2;2386:18;;;2379:30;2445:34;2425:18;;;2418:62;-1:-1:-1;;;2496:18:1;;;2489:41;2547:19;;24172:114:0;2165:407:1;24172:114:0;24371:4;24351:16;24317:31;24332:16;24317:12;:31;:::i;:::-;:50;;;;:::i;:::-;:58;;24296:140;;;;-1:-1:-1;;;24296:140:0;;1963:2:1;24296:140:0;;;1945:21:1;2002:2;1982:18;;;1975:30;2041:34;2021:18;;;2014:62;-1:-1:-1;;;2092:18:1;;;2085:33;2135:19;;24296:140:0;1761:399:1;24296:140:0;24578:38;:15;24597:18;24578:38;:::i;:::-;24561:14;:55;24627:5;:14;;-1:-1:-1;;;;;;24627:14:0;;;-1:-1:-1;;;;;24627:14:0;;;;;;;24651:11;:26;;;;24688:11;:26;;;;;;;;;;;;;;24724:15;:34;;;;;;;;;;;;;;24768:15;:34;;;;;;;;;;;;;24813:11;:26;;;;24849:15;:34;24893:15;:34;19258:27450;;2946:169;3001:16;3020:6;;-1:-1:-1;;;;;3036:17:0;;;-1:-1:-1;;;;;;3036:17:0;;;;;;3068:40;;3020:6;;;;;;;3068:40;;3001:16;3068:40;2991:124;2946:169;:::o;14:922:1:-;167:6;175;183;191;199;207;215;223;276:3;264:9;255:7;251:23;247:33;244:53;;;293:1;290;283:12;244:53;325:9;319:16;344:31;369:5;344:31;:::i;:::-;439:2;424:18;;418:25;488:2;473:18;;467:25;394:5;;-1:-1:-1;418:25:1;-1:-1:-1;501:33:1;467:25;501:33;:::i;:::-;605:2;590:18;;584:25;553:7;;-1:-1:-1;618:33:1;584:25;618:33;:::i;:::-;722:3;707:19;;701:26;670:7;;-1:-1:-1;736:33:1;701:26;736:33;:::i;:::-;835:3;820:19;;814:26;880:3;865:19;;859:26;925:3;910:19;;;904:26;14:922;;;;-1:-1:-1;14:922:1;;;;788:7;;904:26;;-1:-1:-1;14:922:1;-1:-1:-1;;;14:922:1:o;2577:225::-;2617:3;2648:1;2644:6;2641:1;2638:13;2635:136;;;2693:10;2688:3;2684:20;2681:1;2674:31;2728:4;2725:1;2718:15;2756:4;2753:1;2746:15;2635:136;-1:-1:-1;2787:9:1;;2577:225::o;2807:131::-;-1:-1:-1;;;;;2882:31:1;;2872:42;;2862:70;;2928:1;2925;2918:12;2862:70;2807:131;:::o;:::-;19258:27450:0;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@MAXIMUM_DEPOSIT_FEE_RATE_945": {
                  "entryPoint": null,
                  "id": 945,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@MAXIMUM_HARVEST_INTERVAL_942": {
                  "entryPoint": null,
                  "id": 942,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_deposit_2587": {
                  "entryPoint": 18557,
                  "id": 2587,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@_massUpdatePools_2141": {
                  "entryPoint": 15908,
                  "id": 2141,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_msgSender_10": {
                  "entryPoint": null,
                  "id": 10,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_setOwner_121": {
                  "entryPoint": 19694,
                  "id": 121,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_updatePool_2318": {
                  "entryPoint": 15946,
                  "id": 2318,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@add_1401": {
                  "entryPoint": 6790,
                  "id": 1401,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "@canHarvest_2111": {
                  "entryPoint": 3199,
                  "id": 2111,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@depositWithPermit_2378": {
                  "entryPoint": 8107,
                  "id": 2378,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "@deposit_2393": {
                  "entryPoint": 12912,
                  "id": 2393,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@emberPerSec_939": {
                  "entryPoint": null,
                  "id": 939,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ember_937": {
                  "entryPoint": null,
                  "id": 937,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@emergencyWithdraw_2863": {
                  "entryPoint": 8698,
                  "id": 2863,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@harvestMany_3163": {
                  "entryPoint": 12620,
                  "id": 3163,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@investorAddress_972": {
                  "entryPoint": null,
                  "id": 972,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@investorPercent_978": {
                  "entryPoint": null,
                  "id": 978,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@isContract_180": {
                  "entryPoint": null,
                  "id": 180,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@massUpdatePools_2120": {
                  "entryPoint": 9447,
                  "id": 2120,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@owner_51": {
                  "entryPoint": null,
                  "id": 51,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@payOrLockupPendingEmber_2995": {
                  "entryPoint": 17229,
                  "id": 2995,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@pendingTokens_1809": {
                  "entryPoint": 14105,
                  "id": 1809,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "@poolInfo_949": {
                  "entryPoint": 1975,
                  "id": 949,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@poolLength_1278": {
                  "entryPoint": null,
                  "id": 1278,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@poolRewarders_2078": {
                  "entryPoint": 13418,
                  "id": 2078,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@poolRewardsPerSec_2023": {
                  "entryPoint": 4890,
                  "id": 2023,
                  "parameterSlots": 1,
                  "returnSlots": 4
                },
                "@poolTotalLp_3126": {
                  "entryPoint": 9575,
                  "id": 3126,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@renounceOwnership_79": {
                  "entryPoint": 10583,
                  "id": 79,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@returnDataToString_665": {
                  "entryPoint": 20249,
                  "id": 665,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@safeDecimals_770": {
                  "entryPoint": 18314,
                  "id": 770,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@safeEmberTransfer_3050": {
                  "entryPoint": 19811,
                  "id": 3050,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@safeSymbol_697": {
                  "entryPoint": 18034,
                  "id": 697,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@safeTransferFrom_869": {
                  "entryPoint": 20748,
                  "id": 869,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "@safeTransfer_818": {
                  "entryPoint": 17666,
                  "id": 818,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@setInvestorAddress_3335": {
                  "entryPoint": 3389,
                  "id": 3335,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setInvestorPercent_3370": {
                  "entryPoint": 10724,
                  "id": 3370,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setTeamAddress_3197": {
                  "entryPoint": 10102,
                  "id": 3197,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setTeamPercent_3232": {
                  "entryPoint": 11748,
                  "id": 3232,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setTreasuryAddress_3266": {
                  "entryPoint": 9621,
                  "id": 3266,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setTreasuryPercent_3301": {
                  "entryPoint": 11236,
                  "id": 3301,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@set_1520": {
                  "entryPoint": 2081,
                  "id": 1520,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "@startFarming_1269": {
                  "entryPoint": 12260,
                  "id": 1269,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@startTimestamp_961": {
                  "entryPoint": null,
                  "id": 961,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@teamAddress_968": {
                  "entryPoint": null,
                  "id": 968,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@teamPercent_974": {
                  "entryPoint": null,
                  "id": 974,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@totalAllocPoint_959": {
                  "entryPoint": null,
                  "id": 959,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@totalEmberInPools_966": {
                  "entryPoint": null,
                  "id": 966,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@totalLockedUpRewards_963": {
                  "entryPoint": null,
                  "id": 963,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@transferOwnership_102": {
                  "entryPoint": 13801,
                  "id": 102,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@treasuryAddress_970": {
                  "entryPoint": null,
                  "id": 970,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@treasuryPercent_976": {
                  "entryPoint": null,
                  "id": 976,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@updateAllocPoint_3113": {
                  "entryPoint": 13044,
                  "id": 3113,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@updateEmissionRate_3072": {
                  "entryPoint": 1766,
                  "id": 3072,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@updatePool_2153": {
                  "entryPoint": 8568,
                  "id": 2153,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@userInfo_956": {
                  "entryPoint": null,
                  "id": 956,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@withdraw_2736": {
                  "entryPoint": 3870,
                  "id": 2736,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_array_contract_IComplexRewarder_dyn_calldata": {
                  "entryPoint": 21404,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_address": {
                  "entryPoint": 21498,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 21527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 21593,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IBoringERC20_$529_fromMemory": {
                  "entryPoint": 21627,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IComplexRewarder_$562": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
                  "entryPoint": 21656,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 21859,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 21884,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256t_address": {
                  "entryPoint": 21909,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_contract$_IBoringERC20_$529t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr": {
                  "entryPoint": 21957,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_uint256t_uint256": {
                  "entryPoint": 22079,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_uint256t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr": {
                  "entryPoint": 22113,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32": {
                  "entryPoint": 22161,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_uint8_fromMemory": {
                  "entryPoint": 22244,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint16": {
                  "entryPoint": 21480,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_array_address_dyn": {
                  "entryPoint": 22273,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_array_uint256_dyn": {
                  "entryPoint": 22354,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 22402,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 22481,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 8,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 22509,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 22528,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IBoringERC20_$529_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 8,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_062b11ff5385469ec73c97eb15a43f7ff079a5371a66fd58bdeca6df436bd281__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_11bcca43384175ff9ab4e366096ea276cc200d4f4e96ec7cf10af4e3c23a6718__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_1f723c64b341c3563e5c9c8e95dfced9a5f7ad599880a46ccb0bf93e235d17ea__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_32c9802382a4c9ed992955a41ef4a76d583dbf70dc166a072178738c06713616__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_3f178f6b435869b11e7807ebabe44aaf37869349d89b2de2d38d8ce2ca49db57__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_3f9de20e7d75e91bb6a2a04dc57a1ad0ca72a86061492a488ec20581061520d2__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_466a2d9409e515c8e544c25da52dc1d81668c4144c9b20387a9afb8241172c9d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_46e72d344b29df84eda53053105526bcca88405e033d24322788bbf12ed030f8__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_57f763a7e357b0bf03b24cf48523df8c706c86b5e4585baefd3683f53aa23ea4__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_599ee9914dd56277d22fc830ffad5129bfe92aee959c102ee9fdb8a6bf4bebd4__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_61012611393fb96084817e9de1a723747c469c9c404b4980d22828ca24da88e6__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_6531aeb0e8455789ae4a04a19adebe400f964ea2ec04265d404d9e844ec0569f__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_731c1d3f18a3fa5bb00ef76dcc3565468ef3929760a408589de619e618fae1bf__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_7403ca24e9c0a16402bd2f7a663c2e32bacc0f20ab96bd8ecff29ea615b41a35__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_78c2848d97f42f206b1d04161d95b25d6b31f76a68d7784dbfd771f0dc4545cc__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_80f49ce451bfa787912b59a7cfe9bfc751c1a1f008593f3c2b8a1316a392c821__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_84267f5f030648d2a2d39881f366a3558c44ac903693a027d1331806eb1fa2e2__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_91a6d43bc4b258f984ce3e01aeb399b7007888bfcd1e84d2cce57453a4e694c0__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_96c0ae7ae9c516fb014da861fa3c99fa20f93a17066e621a7fe9942d11857748__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_96fa5ebfdccd5fe963a5ea957c64eb336593f70dc510dd1bca45dcd26ddb6a7c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_a334800cd19b18b6d938393d303a75ee080f825dc478f54dd3ef6d6a8de1a586__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_b5c83331565e69a53e8ac1d54aa77fa100001aec4101e7fba075baebda05bbad__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_cad93da5b0bb30aab098be326a0ed1b2f8a79830f5cdc8241739db128d0ebe60__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_e89950b009b7d838066251bc00ee1eec4cf04c094693d143909c95df830d8fd2__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ec06cbd2d38a14b6ce78ac7101f6ae40faca0a2abc38858d8cdc766a500f0e19__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_f12d4402c9e19767dab0140cfb8c969d344e6f7feec765de3989d4ede066c2a8__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_address_t_rational_0_by_1__to_t_uint256_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint16_t_uint256__to_t_uint256_t_uint16_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": {
                  "entryPoint": 22725,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_div_t_uint256": {
                  "entryPoint": 22749,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 22808,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 22869,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "copy_memory_to_memory": {
                  "entryPoint": 22892,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "increment_t_uint256": {
                  "entryPoint": 22936,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_t_uint8": {
                  "entryPoint": 22993,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 23025,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 23072,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 23119,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 23166,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint8": {
                  "entryPoint": 23200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:30497:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "116:283:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "165:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "174:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "177:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "167:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "167:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "167:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "144:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "152:4:1",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "140:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "140:17:1"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "159:3:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "136:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "136:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "129:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "129:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "126:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "190:30:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "213:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "200:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "200:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "190:6:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "263:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "272:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "275:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "265:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "265:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "265:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "235:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "243:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "232:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "232:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "229:50:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "288:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "304:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "312:4:1",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "300:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "300:17:1"
                              },
                              "variableNames": [
                                {
                                  "name": "arrayPos",
                                  "nodeType": "YulIdentifier",
                                  "src": "288:8:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "377:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "386:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "389:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "379:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "379:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "379:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "340:6:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "352:1:1",
                                                "type": "",
                                                "value": "5"
                                              },
                                              {
                                                "name": "length",
                                                "nodeType": "YulIdentifier",
                                                "src": "355:6:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "348:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "348:14:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "336:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "336:27:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "365:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "332:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "332:38:1"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "372:3:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "329:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "329:47:1"
                              },
                              "nodeType": "YulIf",
                              "src": "326:67:1"
                            }
                          ]
                        },
                        "name": "abi_decode_array_contract_IComplexRewarder_dyn_calldata",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "79:6:1",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "87:3:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "arrayPos",
                            "nodeType": "YulTypedName",
                            "src": "95:8:1",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "105:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:385:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "452:111:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "462:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "484:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "471:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "471:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "462:5:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "541:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "550:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "553:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "543:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "543:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "543:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "513:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "524:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "531:6:1",
                                            "type": "",
                                            "value": "0xffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "520:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "520:18:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "510:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "510:29:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "503:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "503:37:1"
                              },
                              "nodeType": "YulIf",
                              "src": "500:57:1"
                            }
                          ]
                        },
                        "name": "abi_decode_uint16",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "431:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "442:5:1",
                            "type": ""
                          }
                        ],
                        "src": "404:159:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "638:177:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "684:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "693:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "696:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "686:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "686:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "686:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "659:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "668:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "655:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "655:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "680:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "651:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "651:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "648:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "709:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "735:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "722:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "722:23:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "713:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "779:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "754:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "754:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "754:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "794:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "804:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "794:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "604:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "615:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "627:6:1",
                            "type": ""
                          }
                        ],
                        "src": "568:247:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "925:350:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "971:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "980:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "983:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "973:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "973:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "973:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "946:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "955:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "942:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "942:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "967:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "938:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "938:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "935:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "996:37:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1023:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1010:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1010:23:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1000:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1076:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1085:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1088:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1078:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1078:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1078:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "1048:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1056:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1045:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1045:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1042:50:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1101:114:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1187:9:1"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1198:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1183:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1183:22:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1207:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_contract_IComplexRewarder_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "1127:55:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1127:88:1"
                              },
                              "variables": [
                                {
                                  "name": "value0_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1105:8:1",
                                  "type": ""
                                },
                                {
                                  "name": "value1_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1115:8:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1224:18:1",
                              "value": {
                                "name": "value0_1",
                                "nodeType": "YulIdentifier",
                                "src": "1234:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1224:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1251:18:1",
                              "value": {
                                "name": "value1_1",
                                "nodeType": "YulIdentifier",
                                "src": "1261:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1251:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "883:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "894:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "906:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "914:6:1",
                            "type": ""
                          }
                        ],
                        "src": "820:455:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1358:199:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1404:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1413:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1416:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1406:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1406:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1406:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1379:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1388:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1375:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1375:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1400:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1371:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1371:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1368:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1429:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1448:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1442:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1442:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "1433:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1511:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1520:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1523:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1513:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1513:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1513:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1480:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nodeType": "YulIdentifier",
                                                "src": "1501:5:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "1494:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1494:13:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "1487:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1487:21:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "1477:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1477:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1470:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1470:40:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1467:60:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1536:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1546:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1536:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1324:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1335:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1347:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1280:277:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1663:170:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1709:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1718:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1721:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1711:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1711:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1711:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1684:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1693:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1680:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1680:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1705:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1676:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1676:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1673:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1734:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1753:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1747:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1747:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "1738:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1797:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1772:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1772:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1772:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1812:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1822:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1812:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IBoringERC20_$529_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1629:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1640:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1652:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1562:271:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1932:177:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1978:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1987:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1990:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1980:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1980:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1980:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1953:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1962:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1949:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1949:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1974:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1945:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1945:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1942:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2003:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2029:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2016:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2016:23:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "2007:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2073:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "2048:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2048:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2048:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2088:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2098:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2088:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IComplexRewarder_$562",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1898:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1909:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1921:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1838:271:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2205:852:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2251:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2260:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2263:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2253:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2253:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2253:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2226:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2235:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2222:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2222:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2247:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2218:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2218:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2215:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2276:30:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2296:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2290:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2290:16:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "2280:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2315:28:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2325:18:1",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "2319:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2370:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2379:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2382:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2372:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2372:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2372:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2358:6:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2366:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2355:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2355:14:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2352:34:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2395:32:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2409:9:1"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2420:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2405:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2405:22:1"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nodeType": "YulTypedName",
                                  "src": "2399:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2475:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2484:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2487:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2477:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2477:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2477:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2454:2:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2458:4:1",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2450:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2450:13:1"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2465:7:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nodeType": "YulIdentifier",
                                      "src": "2446:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2446:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2439:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2439:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2436:55:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2500:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2516:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2510:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2510:9:1"
                              },
                              "variables": [
                                {
                                  "name": "_3",
                                  "nodeType": "YulTypedName",
                                  "src": "2504:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2542:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "2544:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2544:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2544:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2534:2:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2538:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2531:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2531:10:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2528:36:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2573:76:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2583:66:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                              },
                              "variables": [
                                {
                                  "name": "_4",
                                  "nodeType": "YulTypedName",
                                  "src": "2577:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2658:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2678:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2672:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2672:9:1"
                              },
                              "variables": [
                                {
                                  "name": "memPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "2662:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2690:71:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2712:6:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "_3",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2736:2:1"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2740:4:1",
                                                    "type": "",
                                                    "value": "0x1f"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2732:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2732:13:1"
                                              },
                                              {
                                                "name": "_4",
                                                "nodeType": "YulIdentifier",
                                                "src": "2747:2:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "2728:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2728:22:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2752:2:1",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2724:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2724:31:1"
                                      },
                                      {
                                        "name": "_4",
                                        "nodeType": "YulIdentifier",
                                        "src": "2757:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2720:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2720:40:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2708:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2708:53:1"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nodeType": "YulTypedName",
                                  "src": "2694:10:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2820:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "2822:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2822:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2822:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2779:10:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2791:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "2776:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2776:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2799:10:1"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2811:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "2796:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2796:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "2773:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2773:46:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2770:72:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2858:2:1",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2862:10:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2851:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2851:22:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2851:22:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2889:6:1"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "2897:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2882:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2882:18:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2882:18:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2946:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2955:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2958:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2948:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2948:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2948:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nodeType": "YulIdentifier",
                                            "src": "2923:2:1"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "2927:2:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2919:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2919:11:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2932:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2915:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2915:20:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2937:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2912:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2912:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2909:53:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "2997:2:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3001:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2993:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2993:11:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3010:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3018:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3006:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3006:15:1"
                                  },
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "3023:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "2971:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2971:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2971:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3035:16:1",
                              "value": {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3045:6:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3035:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2171:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2182:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2194:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2114:943:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3132:110:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3178:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3187:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3190:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3180:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3180:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3180:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3153:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3162:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3149:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3149:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3174:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3145:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3145:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3142:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3203:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3226:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3213:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3213:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3203:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3098:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3109:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3121:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3062:180:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3328:103:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3374:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3383:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3386:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3376:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3376:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3376:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3349:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3358:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3345:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3345:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3370:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3341:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3341:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3338:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3399:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3415:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3409:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3409:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3399:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3294:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3305:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3317:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3247:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3523:228:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3569:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3578:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3581:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3571:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3571:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3571:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3544:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3553:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3540:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3540:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3565:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3536:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3536:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3533:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3594:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3617:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3604:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3604:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "3594:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3636:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3666:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3677:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3662:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3662:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3649:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3649:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "3640:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3715:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "3690:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3690:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3690:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3730:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3740:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3730:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3481:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3492:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3504:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3512:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3436:315:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3972:628:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4019:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4028:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4031:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4021:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4021:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4021:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "3993:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4002:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "3989:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3989:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4014:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3985:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3985:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3982:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4044:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4067:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4054:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4054:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4044:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4086:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4116:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4127:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4112:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4112:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4099:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4099:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "4090:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4165:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4140:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4140:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4140:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4180:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4190:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4180:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4204:47:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4236:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4247:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4232:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4232:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "4214:17:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4214:37:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "4204:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4260:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4287:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4298:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4283:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4283:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4270:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4270:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "4260:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4311:47:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4342:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4353:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4338:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4338:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4325:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4325:33:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4315:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4401:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4410:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4413:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4403:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4403:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4403:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4373:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4381:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4370:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4370:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4367:50:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4426:114:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4512:9:1"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4523:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4508:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4508:22:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4532:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_contract_IComplexRewarder_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "4452:55:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4452:88:1"
                              },
                              "variables": [
                                {
                                  "name": "value4_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4430:8:1",
                                  "type": ""
                                },
                                {
                                  "name": "value5_1",
                                  "nodeType": "YulTypedName",
                                  "src": "4440:8:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4549:18:1",
                              "value": {
                                "name": "value4_1",
                                "nodeType": "YulIdentifier",
                                "src": "4559:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "4549:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4576:18:1",
                              "value": {
                                "name": "value5_1",
                                "nodeType": "YulIdentifier",
                                "src": "4586:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "4576:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_contract$_IBoringERC20_$529t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3898:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "3909:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3921:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3929:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "3937:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "3945:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "3953:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "3961:6:1",
                            "type": ""
                          }
                        ],
                        "src": "3756:844:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4692:161:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4738:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4747:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4750:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4740:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4740:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4740:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "4713:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4722:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "4709:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4709:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4734:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4705:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4705:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4702:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4763:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4786:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4773:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4773:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "4763:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4805:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4832:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4843:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4828:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4828:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4815:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4815:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4805:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4650:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "4661:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4673:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "4681:6:1",
                            "type": ""
                          }
                        ],
                        "src": "4605:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5054:561:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5101:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5110:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5113:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5103:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5103:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5103:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "5075:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5084:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5071:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5071:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5096:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5067:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5067:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5064:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5126:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5149:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5136:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5136:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5126:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5168:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5195:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5206:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5191:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5191:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5178:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5178:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5168:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5219:47:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5251:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5262:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5247:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5247:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_uint16",
                                  "nodeType": "YulIdentifier",
                                  "src": "5229:17:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5229:37:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5275:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5302:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5313:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5298:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5298:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5285:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5285:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "5275:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5326:47:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5357:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5368:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5353:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5353:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5340:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5340:33:1"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5330:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5416:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5425:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5428:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5418:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5418:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5418:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5388:6:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5396:18:1",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5385:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5385:30:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5382:50:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5441:114:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5527:9:1"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5538:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5523:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5523:22:1"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5547:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_contract_IComplexRewarder_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "5467:55:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5467:88:1"
                              },
                              "variables": [
                                {
                                  "name": "value4_1",
                                  "nodeType": "YulTypedName",
                                  "src": "5445:8:1",
                                  "type": ""
                                },
                                {
                                  "name": "value5_1",
                                  "nodeType": "YulTypedName",
                                  "src": "5455:8:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5564:18:1",
                              "value": {
                                "name": "value4_1",
                                "nodeType": "YulIdentifier",
                                "src": "5574:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "5564:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5591:18:1",
                              "value": {
                                "name": "value5_1",
                                "nodeType": "YulIdentifier",
                                "src": "5601:8:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "5591:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4980:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "4991:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5003:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "5011:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "5019:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "5027:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "5035:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "5043:6:1",
                            "type": ""
                          }
                        ],
                        "src": "4858:757:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5773:433:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5820:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5829:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5832:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5822:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5822:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5822:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "5794:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5803:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "5790:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5790:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5815:3:1",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5786:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5786:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "5783:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5845:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5868:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5855:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5855:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "5845:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5887:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5914:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5925:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5910:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5910:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5897:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5897:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5887:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5938:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5965:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5976:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5961:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5961:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5948:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5948:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "5938:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5989:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6019:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6030:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6015:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6015:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6002:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6002:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "5993:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6066:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "6043:22:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6043:29:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6043:29:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6081:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6091:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "6081:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6105:43:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6132:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6143:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6128:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6128:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6115:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6115:33:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "6105:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6157:43:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6184:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6195:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6180:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6180:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6167:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6167:33:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "6157:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5699:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "5710:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5722:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "5730:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "5738:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "5746:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "5754:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "5762:6:1",
                            "type": ""
                          }
                        ],
                        "src": "5620:586:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6290:168:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6336:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6345:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6348:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6338:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6338:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6338:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "6311:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6320:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6307:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6307:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6332:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6303:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6303:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "6300:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6361:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6380:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6374:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6374:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "6365:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6422:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "6399:22:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6399:29:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6399:29:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6437:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6447:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "6437:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint8_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6256:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "6267:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "6279:6:1",
                            "type": ""
                          }
                        ],
                        "src": "6211:247:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6524:423:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6534:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6554:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6548:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6548:12:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "6538:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6576:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "6581:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6569:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6569:19:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6569:19:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6597:14:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6607:4:1",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "6601:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6620:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "6631:3:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6636:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6627:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6627:12:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "6620:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6648:28:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6666:5:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6673:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6662:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6662:14:1"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "6652:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6685:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6694:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "6689:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6753:169:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "6774:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "srcPtr",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "6789:6:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "6783:5:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "6783:13:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "6798:42:1",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "6779:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "6779:62:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "6767:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6767:75:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6767:75:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "6855:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "6866:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "6871:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6862:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6862:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "6855:3:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "6887:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "6901:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "6909:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6897:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6897:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "6887:6:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "6715:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "6718:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6712:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6712:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "6726:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "6728:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "6737:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6740:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "6733:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6733:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "6728:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "6708:3:1",
                                "statements": []
                              },
                              "src": "6704:218:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6931:10:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6938:3:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "6931:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_array_address_dyn",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "6501:5:1",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "6508:3:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "6516:3:1",
                            "type": ""
                          }
                        ],
                        "src": "6463:484:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7013:374:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7023:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7043:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7037:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7037:12:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "7027:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7065:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7070:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7058:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7058:19:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7058:19:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7086:14:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7096:4:1",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "7090:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7109:19:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7120:3:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7125:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7116:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7116:12:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "7109:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7137:28:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7155:5:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7162:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7151:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7151:14:1"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "7141:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7174:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7183:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "7178:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7242:120:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "7263:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "7274:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "7268:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7268:13:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "7256:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7256:26:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7256:26:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7295:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "7306:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7311:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7302:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7302:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "7295:3:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7327:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "7341:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7349:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7337:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7337:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "7327:6:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7204:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "7207:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7201:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7201:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "7215:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7217:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "7226:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7229:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7222:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7222:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "7217:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "7197:3:1",
                                "statements": []
                              },
                              "src": "7193:169:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7371:10:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7378:3:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "7371:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_array_uint256_dyn",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "6990:5:1",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "6997:3:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "7005:3:1",
                            "type": ""
                          }
                        ],
                        "src": "6952:435:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7595:464:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7605:16:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7618:3:1"
                              },
                              "variables": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulTypedName",
                                  "src": "7609:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7630:12:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7639:3:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7630:5:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7651:20:1",
                              "value": {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7665:6:1"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "7655:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7680:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7689:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "7684:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7748:284:1",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7762:33:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "7788:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "7775:12:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7775:20:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "7766:5:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "7833:5:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "validator_revert_address",
                                        "nodeType": "YulIdentifier",
                                        "src": "7808:24:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7808:31:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7808:31:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7859:5:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "7870:5:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "7877:42:1",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "7866:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7866:54:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "7852:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7852:69:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7852:69:1"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7934:14:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7944:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_1",
                                        "nodeType": "YulTypedName",
                                        "src": "7938:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7961:23:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7974:5:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "7981:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7970:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7970:14:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7961:5:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7997:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8011:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8019:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8007:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8007:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "7997:6:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7710:1:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7713:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7707:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7707:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "7721:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7723:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "7732:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7735:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7728:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7728:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "7723:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "7703:3:1",
                                "statements": []
                              },
                              "src": "7699:333:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8041:12:1",
                              "value": {
                                "name": "pos_1",
                                "nodeType": "YulIdentifier",
                                "src": "8048:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "8041:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "7563:3:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "7568:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "7576:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "7587:3:1",
                            "type": ""
                          }
                        ],
                        "src": "7392:667:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8201:137:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8211:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8231:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8225:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8225:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "8215:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8273:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8281:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8269:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8269:17:1"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8288:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "8293:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "8247:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8247:53:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8247:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8309:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "8320:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "8325:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8316:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8316:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "8309:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "8177:3:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8182:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "8193:3:1",
                            "type": ""
                          }
                        ],
                        "src": "8064:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8444:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "8454:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8466:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8477:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8462:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8462:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8454:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8496:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8511:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8519:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "8507:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8507:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8489:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8489:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8489:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8413:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8424:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8435:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8343:226:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8731:241:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "8741:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8753:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8764:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8749:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8749:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8741:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8776:52:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8786:42:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "8780:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8844:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8859:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8867:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "8855:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8855:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8837:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8837:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8837:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8891:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8902:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8887:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8887:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8911:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8919:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "8907:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8907:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8880:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8880:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8880:43:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8943:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8954:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8939:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8939:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8959:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8932:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8932:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8932:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8684:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "8695:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "8703:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "8711:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8722:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8574:398:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9242:428:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9252:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9264:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9275:3:1",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9260:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9260:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9252:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9288:52:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9298:42:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "9292:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9356:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9371:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9379:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9367:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9367:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9349:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9349:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9349:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9403:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9414:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9399:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9399:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9423:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9431:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9419:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9419:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9392:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9392:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9392:43:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9455:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9466:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9451:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9451:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "9471:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9444:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9444:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9444:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9498:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9509:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9494:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9494:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "9514:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9487:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9487:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9487:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9541:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9552:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9537:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9537:19:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "9562:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9570:4:1",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9558:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9558:17:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9530:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9530:46:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9530:46:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9596:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9607:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9592:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9592:19:1"
                                  },
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "9613:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9585:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9585:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9585:35:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9640:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9651:3:1",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9636:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9636:19:1"
                                  },
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "9657:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9629:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9629:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9629:35:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9163:9:1",
                            "type": ""
                          },
                          {
                            "name": "value6",
                            "nodeType": "YulTypedName",
                            "src": "9174:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "9182:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "9190:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "9198:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "9206:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "9214:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9222:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9233:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8977:693:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9804:168:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9814:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9826:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9837:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9822:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9822:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9814:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9856:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "9871:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9879:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9867:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9867:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9849:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9849:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9849:74:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9943:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9954:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9939:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9939:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9959:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9932:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9932:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9932:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9765:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "9776:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "9784:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9795:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9675:297:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10128:110:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10145:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10156:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10138:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10138:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10138:21:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10168:64:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10205:6:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10217:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10228:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10213:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10213:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "10176:28:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10176:56:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10168:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10097:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "10108:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10119:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9977:261:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10648:1222:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10665:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10676:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10658:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10658:22:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10658:22:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10689:71:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10732:6:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10744:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10755:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10740:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10740:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "10703:28:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10703:57:1"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nodeType": "YulTypedName",
                                  "src": "10693:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10769:12:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10779:2:1",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "10773:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10801:9:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "10812:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10797:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10797:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "10821:6:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10829:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "10817:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10817:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10790:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10790:50:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10790:50:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10849:17:1",
                              "value": {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "10860:6:1"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulTypedName",
                                  "src": "10853:3:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10875:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10895:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10889:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10889:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "10879:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10918:6:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10926:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10911:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10911:22:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10911:22:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10942:22:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10953:6:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10961:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10949:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10949:15:1"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "10942:3:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10973:50:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "10995:6:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11007:1:1",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "11010:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "11003:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11003:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10991:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10991:27:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11020:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10987:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10987:36:1"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nodeType": "YulTypedName",
                                  "src": "10977:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11032:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11050:6:1"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11058:2:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11046:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11046:15:1"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulTypedName",
                                  "src": "11036:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11070:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11079:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "11074:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11138:480:1",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "11152:76:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11162:66:1",
                                      "type": "",
                                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "11156:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "11248:3:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tail_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11261:6:1"
                                                },
                                                {
                                                  "name": "tail_1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11269:6:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "11257:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "11257:19:1"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "11278:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11253:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11253:28:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "11241:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11241:41:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11241:41:1"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "11295:23:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "11311:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "11305:5:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11305:13:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulTypedName",
                                        "src": "11299:2:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "11331:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "11353:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "11347:5:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11347:9:1"
                                    },
                                    "variables": [
                                      {
                                        "name": "length_1",
                                        "nodeType": "YulTypedName",
                                        "src": "11335:8:1",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "11376:6:1"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "11384:8:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "11369:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11369:24:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11369:24:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "11432:2:1"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "11436:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11428:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11428:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "11445:6:1"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "11453:2:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11441:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11441:15:1"
                                        },
                                        {
                                          "name": "length_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "11458:8:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "copy_memory_to_memory",
                                        "nodeType": "YulIdentifier",
                                        "src": "11406:21:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11406:61:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11406:61:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11480:58:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "11498:6:1"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "length_1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "11514:8:1"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "11524:2:1",
                                                      "type": "",
                                                      "value": "31"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "11510:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "11510:17:1"
                                                },
                                                {
                                                  "name": "_2",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "11529:2:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "and",
                                                "nodeType": "YulIdentifier",
                                                "src": "11506:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "11506:26:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "11494:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11494:39:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "11535:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11490:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11490:48:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "11480:6:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11551:25:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "11565:6:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "11573:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11561:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11561:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "11551:6:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11589:19:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "11600:3:1"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "11605:2:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11596:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11596:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nodeType": "YulIdentifier",
                                        "src": "11589:3:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "11100:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "11103:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11097:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11097:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "11111:18:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11113:14:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "11122:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11125:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "11118:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11118:9:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "11113:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "11093:3:1",
                                "statements": []
                              },
                              "src": "11089:529:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11638:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11649:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11634:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11634:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "11658:6:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11666:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "11654:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11654:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11627:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11627:50:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11627:50:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11686:58:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11729:6:1"
                                  },
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11737:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_array_uint256_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "11700:28:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11700:44:1"
                              },
                              "variables": [
                                {
                                  "name": "tail_3",
                                  "nodeType": "YulTypedName",
                                  "src": "11690:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11764:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11775:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11760:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11760:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "11784:6:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11792:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "11780:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11780:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11753:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11753:50:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11753:50:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11812:52:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11849:6:1"
                                  },
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11857:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_array_uint256_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "11820:28:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11820:44:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11812:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10593:9:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "10604:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "10612:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "10620:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "10628:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10639:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10243:1627:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11970:92:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11980:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11992:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12003:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11988:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11988:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11980:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12022:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "12047:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "12040:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12040:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12033:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12033:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12015:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12015:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12015:41:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11939:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "11950:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11961:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11875:187:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12188:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12198:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12210:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12221:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12206:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12206:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12198:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12240:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "12255:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12263:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "12251:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12251:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12233:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12233:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12233:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12157:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12168:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12179:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12067:246:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12605:400:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12615:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12627:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12638:3:1",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12623:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12623:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12615:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12658:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "12673:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12681:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "12669:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12669:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12651:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12651:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12651:74:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12745:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12756:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12741:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12741:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12761:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12734:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12734:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12734:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12788:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12799:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12784:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12784:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "12804:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12777:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12777:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12777:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12831:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12842:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12827:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12827:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "12847:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12820:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12820:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12820:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12874:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12885:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12870:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12870:19:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "12895:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12903:6:1",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "12891:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12891:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12863:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12863:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12863:48:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12931:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12942:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12927:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12927:19:1"
                                  },
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "12948:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12920:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12920:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12920:35:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12975:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12986:3:1",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12971:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12971:19:1"
                                  },
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "12992:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12964:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12964:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12964:35:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IBoringERC20_$529_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12526:9:1",
                            "type": ""
                          },
                          {
                            "name": "value6",
                            "nodeType": "YulTypedName",
                            "src": "12537:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "12545:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "12553:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "12561:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "12569:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "12577:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12585:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12596:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12318:687:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13184:175:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13201:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13212:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13194:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13194:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13194:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13235:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13246:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13231:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13231:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13251:2:1",
                                    "type": "",
                                    "value": "25"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13224:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13224:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13224:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13274:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13285:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13270:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13270:18:1"
                                  },
                                  {
                                    "hexValue": "7365743a206465706f7369742066656520746f6f2068696768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13290:27:1",
                                    "type": "",
                                    "value": "set: deposit fee too high"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13263:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13263:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13263:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13327:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13339:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13350:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13335:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13335:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13327:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_062b11ff5385469ec73c97eb15a43f7ff079a5371a66fd58bdeca6df436bd281__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13161:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13175:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13010:349:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13538:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13555:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13566:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13548:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13548:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13548:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13589:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13600:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13585:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13585:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13605:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13578:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13578:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13578:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13628:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13639:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13624:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13624:18:1"
                                  },
                                  {
                                    "hexValue": "73657420696e766573746f7220616464726573733a20696e76616c6964206e65",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13644:34:1",
                                    "type": "",
                                    "value": "set investor address: invalid ne"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13617:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13617:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13617:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13699:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13710:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13695:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13695:18:1"
                                  },
                                  {
                                    "hexValue": "7720696e766573746f722061646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13715:20:1",
                                    "type": "",
                                    "value": "w investor address"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13688:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13688:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13688:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13745:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13757:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13768:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13753:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13753:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13745:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_11bcca43384175ff9ab4e366096ea276cc200d4f4e96ec7cf10af4e3c23a6718__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13515:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13529:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13364:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13957:178:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13974:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13985:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13967:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13967:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13967:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14008:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14019:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14004:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14004:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14024:2:1",
                                    "type": "",
                                    "value": "28"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13997:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13997:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13997:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14047:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14058:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14043:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14043:18:1"
                                  },
                                  {
                                    "hexValue": "426f72696e6745524332303a205472616e73666572206661696c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14063:30:1",
                                    "type": "",
                                    "value": "BoringERC20: Transfer failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14036:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14036:58:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14036:58:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14103:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14115:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14126:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14111:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14111:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14103:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13934:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13948:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13783:352:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14314:173:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14331:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14342:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14324:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14324:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14324:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14365:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14376:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14361:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14361:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14381:2:1",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14354:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14354:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14354:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14404:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14415:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14400:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14400:18:1"
                                  },
                                  {
                                    "hexValue": "7365743a20746f6f206d616e7920726577617264657273",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14420:25:1",
                                    "type": "",
                                    "value": "set: too many rewarders"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14393:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14393:53:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14393:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14455:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14467:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14478:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14463:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14463:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14455:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_1f723c64b341c3563e5c9c8e95dfced9a5f7ad599880a46ccb0bf93e235d17ea__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "14291:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "14305:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14140:347:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14666:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14683:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14694:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14676:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14676:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14676:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14717:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14728:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14713:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14713:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14733:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14706:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14706:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14706:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14756:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14767:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14752:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14752:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14772:34:1",
                                    "type": "",
                                    "value": "Ownable: new owner is the zero a"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14745:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14745:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14745:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14827:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14838:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14823:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14823:18:1"
                                  },
                                  {
                                    "hexValue": "646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14843:8:1",
                                    "type": "",
                                    "value": "ddress"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14816:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14816:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14816:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14861:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14873:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14884:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14869:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14869:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14861:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "14643:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "14657:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14492:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15073:181:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15090:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15101:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15083:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15083:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15083:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15124:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15135:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15120:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15120:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15140:2:1",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15113:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15113:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15113:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15163:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15174:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15159:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15159:18:1"
                                  },
                                  {
                                    "hexValue": "68617276657374206d616e793a20746f6f206d616e7920706f6f6c20696473",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15179:33:1",
                                    "type": "",
                                    "value": "harvest many: too many pool ids"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15152:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15152:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15152:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15222:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15234:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15245:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15230:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15230:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "15222:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_32c9802382a4c9ed992955a41ef4a76d583dbf70dc166a072178738c06713616__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "15050:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "15064:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14899:355:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15433:179:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15450:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15461:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15443:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15443:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15443:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15484:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15495:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15480:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15480:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15500:2:1",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15473:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15473:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15473:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15523:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15534:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15519:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15519:18:1"
                                  },
                                  {
                                    "hexValue": "6164643a20696e76616c6964206861727665737420696e74657276616c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15539:31:1",
                                    "type": "",
                                    "value": "add: invalid harvest interval"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15512:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15512:59:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15512:59:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15580:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15592:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15603:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15588:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15588:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "15580:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3f178f6b435869b11e7807ebabe44aaf37869349d89b2de2d38d8ce2ca49db57__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "15410:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "15424:4:1",
                            "type": ""
                          }
                        ],
                        "src": "15259:353:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15791:181:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15808:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15819:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15801:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15801:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15801:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15842:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15853:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15838:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15838:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15858:2:1",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15831:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15831:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15831:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "15881:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15892:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "15877:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15877:18:1"
                                  },
                                  {
                                    "hexValue": "77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15897:33:1",
                                    "type": "",
                                    "value": "withdraw: pool total not enough"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "15870:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15870:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15870:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15940:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15952:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15963:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15948:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15948:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "15940:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3f9de20e7d75e91bb6a2a04dc57a1ad0ca72a86061492a488ec20581061520d2__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "15768:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "15782:4:1",
                            "type": ""
                          }
                        ],
                        "src": "15617:355:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16151:232:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16168:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16179:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16161:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16161:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16161:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16202:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16213:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16198:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16198:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16218:2:1",
                                    "type": "",
                                    "value": "42"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16191:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16191:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16191:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16241:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16252:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16237:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16237:18:1"
                                  },
                                  {
                                    "hexValue": "736574207465616d20616464726573733a20696e76616c6964206e6577207465",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16257:34:1",
                                    "type": "",
                                    "value": "set team address: invalid new te"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16230:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16230:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16230:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16312:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16323:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16308:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16308:18:1"
                                  },
                                  {
                                    "hexValue": "616d2061646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16328:12:1",
                                    "type": "",
                                    "value": "am address"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16301:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16301:40:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16301:40:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16350:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16362:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16373:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16358:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16358:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "16350:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_466a2d9409e515c8e544c25da52dc1d81668c4144c9b20387a9afb8241172c9d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "16128:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "16142:4:1",
                            "type": ""
                          }
                        ],
                        "src": "15977:406:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16562:180:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16579:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16590:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16572:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16572:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16572:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16613:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16624:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16609:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16609:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16629:2:1",
                                    "type": "",
                                    "value": "30"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16602:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16602:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16602:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16652:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16663:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16648:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16648:18:1"
                                  },
                                  {
                                    "hexValue": "7365743a207265776172646572206d75737420626520636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16668:32:1",
                                    "type": "",
                                    "value": "set: rewarder must be contract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16641:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16641:60:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16641:60:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16710:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16722:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16733:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16718:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16718:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "16710:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_46e72d344b29df84eda53053105526bcca88405e033d24322788bbf12ed030f8__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "16539:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "16553:4:1",
                            "type": ""
                          }
                        ],
                        "src": "16388:354:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16921:169:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16938:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16949:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16931:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16931:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16931:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "16972:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16983:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "16968:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16968:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16988:2:1",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16961:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16961:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16961:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17011:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17022:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17007:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17007:18:1"
                                  },
                                  {
                                    "hexValue": "506f6f6c20646f6573206e6f74206578697374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "17027:21:1",
                                    "type": "",
                                    "value": "Pool does not exist"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17000:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17000:49:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17000:49:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17058:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17070:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17081:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17066:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17066:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "17058:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "16898:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "16912:4:1",
                            "type": ""
                          }
                        ],
                        "src": "16747:343:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "17269:234:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17286:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17297:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17279:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17279:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17279:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17320:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17331:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17316:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17316:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17336:2:1",
                                    "type": "",
                                    "value": "44"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17309:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17309:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17309:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17359:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17370:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17355:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17355:18:1"
                                  },
                                  {
                                    "hexValue": "73657420696e766573746f722070657263656e743a20746f74616c2070657263",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "17375:34:1",
                                    "type": "",
                                    "value": "set investor percent: total perc"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17348:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17348:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17348:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17430:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17441:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17426:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17426:18:1"
                                  },
                                  {
                                    "hexValue": "656e74206f766572206d6178",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "17446:14:1",
                                    "type": "",
                                    "value": "ent over max"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17419:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17419:42:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17419:42:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17470:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17482:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17493:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17478:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17478:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "17470:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_57f763a7e357b0bf03b24cf48523df8c706c86b5e4585baefd3683f53aa23ea4__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "17246:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "17260:4:1",
                            "type": ""
                          }
                        ],
                        "src": "17095:408:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "17682:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17699:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17710:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17692:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17692:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17692:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17733:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17744:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17729:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17729:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17749:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17722:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17722:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17722:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17772:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17783:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17768:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17768:18:1"
                                  },
                                  {
                                    "hexValue": "77697468647261773a207573657220616d6f756e74206e6f7420656e6f756768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "17788:34:1",
                                    "type": "",
                                    "value": "withdraw: user amount not enough"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "17761:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17761:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17761:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17832:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17844:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17855:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17840:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17840:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "17832:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_599ee9914dd56277d22fc830ffad5129bfe92aee959c102ee9fdb8a6bf4bebd4__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "17659:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "17673:4:1",
                            "type": ""
                          }
                        ],
                        "src": "17508:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "18043:295:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18060:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18071:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18053:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18053:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18053:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18094:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18105:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18090:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18090:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18110:2:1",
                                    "type": "",
                                    "value": "65"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18083:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18083:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18083:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18133:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18144:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18129:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18129:18:1"
                                  },
                                  {
                                    "hexValue": "73657420696e766573746f7220616464726573733a206f6e6c79207072657669",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "18149:34:1",
                                    "type": "",
                                    "value": "set investor address: only previ"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18122:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18122:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18122:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18204:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18215:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18200:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18200:18:1"
                                  },
                                  {
                                    "hexValue": "6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "18220:34:1",
                                    "type": "",
                                    "value": "ous investor can call this metho"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18193:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18193:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18193:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18275:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18286:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18271:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18271:19:1"
                                  },
                                  {
                                    "hexValue": "64",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "18292:3:1",
                                    "type": "",
                                    "value": "d"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18264:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18264:32:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18264:32:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "18305:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18317:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18328:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18313:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18313:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "18305:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_61012611393fb96084817e9de1a723747c469c9c404b4980d22828ca24da88e6__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "18020:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "18034:4:1",
                            "type": ""
                          }
                        ],
                        "src": "17869:469:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "18517:173:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18534:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18545:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18527:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18527:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18527:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18568:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18579:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18564:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18564:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18584:2:1",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18557:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18557:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18557:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18607:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18618:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18603:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18603:18:1"
                                  },
                                  {
                                    "hexValue": "6164643a20746f6f206d616e7920726577617264657273",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "18623:25:1",
                                    "type": "",
                                    "value": "add: too many rewarders"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18596:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18596:53:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18596:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "18658:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18670:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18681:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18666:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18666:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "18658:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_6531aeb0e8455789ae4a04a19adebe400f964ea2ec04265d404d9e844ec0569f__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "18494:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "18508:4:1",
                            "type": ""
                          }
                        ],
                        "src": "18343:347:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "18869:180:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18886:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18897:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18879:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18879:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18879:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18920:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18931:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18916:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18916:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18936:2:1",
                                    "type": "",
                                    "value": "30"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18909:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18909:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18909:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "18959:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18970:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "18955:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18955:18:1"
                                  },
                                  {
                                    "hexValue": "6164643a207265776172646572206d75737420626520636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "18975:32:1",
                                    "type": "",
                                    "value": "add: rewarder must be contract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "18948:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18948:60:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "18948:60:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "19017:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19029:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19040:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19025:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19025:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "19017:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_731c1d3f18a3fa5bb00ef76dcc3565468ef3929760a408589de619e618fae1bf__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "18846:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "18860:4:1",
                            "type": ""
                          }
                        ],
                        "src": "18695:354:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "19228:231:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19245:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19256:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19238:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19238:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19238:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19279:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19290:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19275:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19275:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19295:2:1",
                                    "type": "",
                                    "value": "41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19268:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19268:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19268:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19318:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19329:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19314:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19314:18:1"
                                  },
                                  {
                                    "hexValue": "656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "19334:34:1",
                                    "type": "",
                                    "value": "emergency withdraw: pool total n"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19307:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19307:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19307:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19389:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19400:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19385:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19385:18:1"
                                  },
                                  {
                                    "hexValue": "6f7420656e6f756768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "19405:11:1",
                                    "type": "",
                                    "value": "ot enough"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19378:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19378:39:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19378:39:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "19426:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19438:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19449:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19434:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19434:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "19426:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_7403ca24e9c0a16402bd2f7a663c2e32bacc0f20ab96bd8ecff29ea615b41a35__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "19205:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "19219:4:1",
                            "type": ""
                          }
                        ],
                        "src": "19054:405:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "19638:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19655:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19666:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19648:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19648:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19648:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19689:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19700:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19685:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19685:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19705:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19678:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19678:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19678:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19728:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19739:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19724:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19724:18:1"
                                  },
                                  {
                                    "hexValue": "73657420747265617375727920616464726573733a20696e76616c6964206e65",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "19744:34:1",
                                    "type": "",
                                    "value": "set treasury address: invalid ne"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19717:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19717:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19717:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19799:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19810:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19795:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19795:18:1"
                                  },
                                  {
                                    "hexValue": "772074726561737572792061646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "19815:20:1",
                                    "type": "",
                                    "value": "w treasury address"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "19788:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19788:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "19788:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "19845:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19857:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19868:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19853:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19853:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "19845:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_78c2848d97f42f206b1d04161d95b25d6b31f76a68d7784dbfd771f0dc4545cc__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "19615:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "19629:4:1",
                            "type": ""
                          }
                        ],
                        "src": "19464:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "20057:225:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20074:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20085:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20067:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20067:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20067:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20108:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20119:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20104:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20104:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20124:2:1",
                                    "type": "",
                                    "value": "35"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20097:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20097:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20097:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20147:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20158:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20143:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20143:18:1"
                                  },
                                  {
                                    "hexValue": "7374617274206661726d696e673a206661726d207374617274656420616c7265",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "20163:34:1",
                                    "type": "",
                                    "value": "start farming: farm started alre"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20136:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20136:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20136:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20218:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20229:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20214:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20214:18:1"
                                  },
                                  {
                                    "hexValue": "616479",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "20234:5:1",
                                    "type": "",
                                    "value": "ady"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20207:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20207:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20207:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "20249:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20261:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20272:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20257:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20257:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "20249:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_80f49ce451bfa787912b59a7cfe9bfc751c1a1f008593f3c2b8a1316a392c821__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "20034:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "20048:4:1",
                            "type": ""
                          }
                        ],
                        "src": "19883:399:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "20461:233:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20478:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20489:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20471:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20471:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20471:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20512:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20523:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20508:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20508:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20528:2:1",
                                    "type": "",
                                    "value": "43"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20501:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20501:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20501:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20551:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20562:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20547:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20547:18:1"
                                  },
                                  {
                                    "hexValue": "7365742074726561737572792070657263656e743a20696e76616c6964207065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "20567:34:1",
                                    "type": "",
                                    "value": "set treasury percent: invalid pe"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20540:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20540:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20540:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20622:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20633:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20618:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20618:18:1"
                                  },
                                  {
                                    "hexValue": "7263656e742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "20638:13:1",
                                    "type": "",
                                    "value": "rcent value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20611:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20611:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20611:41:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "20661:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20673:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20684:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20669:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20669:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "20661:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_84267f5f030648d2a2d39881f366a3558c44ac903693a027d1331806eb1fa2e2__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "20438:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "20452:4:1",
                            "type": ""
                          }
                        ],
                        "src": "20287:407:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "20873:295:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20890:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20901:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20883:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20883:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20883:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20924:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20935:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20920:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20920:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20940:2:1",
                                    "type": "",
                                    "value": "65"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20913:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20913:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20913:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20963:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20974:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "20959:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20959:18:1"
                                  },
                                  {
                                    "hexValue": "736574207465616d20616464726573733a206f6e6c792070726576696f757320",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "20979:34:1",
                                    "type": "",
                                    "value": "set team address: only previous "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "20952:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20952:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "20952:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21034:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21045:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21030:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21030:18:1"
                                  },
                                  {
                                    "hexValue": "7465616d20616464726573732063616e2063616c6c2074686973206d6574686f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21050:34:1",
                                    "type": "",
                                    "value": "team address can call this metho"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21023:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21023:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21023:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21105:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21116:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21101:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21101:19:1"
                                  },
                                  {
                                    "hexValue": "64",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21122:3:1",
                                    "type": "",
                                    "value": "d"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21094:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21094:32:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21094:32:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "21135:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21147:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21158:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21143:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21143:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "21135:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_91a6d43bc4b258f984ce3e01aeb399b7007888bfcd1e84d2cce57453a4e694c0__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "20850:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "20864:4:1",
                            "type": ""
                          }
                        ],
                        "src": "20699:469:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "21347:303:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21364:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21375:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21357:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21357:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21357:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21398:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21409:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21394:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21394:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21414:2:1",
                                    "type": "",
                                    "value": "73"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21387:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21387:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21387:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21437:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21448:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21433:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21433:18:1"
                                  },
                                  {
                                    "hexValue": "73657420747265617375727920616464726573733a206f6e6c79207072657669",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21453:34:1",
                                    "type": "",
                                    "value": "set treasury address: only previ"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21426:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21426:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21426:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21508:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21519:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21504:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21504:18:1"
                                  },
                                  {
                                    "hexValue": "6f757320747265617375727920616464726573732063616e2063616c6c207468",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21524:34:1",
                                    "type": "",
                                    "value": "ous treasury address can call th"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21497:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21497:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21497:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21579:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21590:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21575:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21575:19:1"
                                  },
                                  {
                                    "hexValue": "6973206d6574686f64",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21596:11:1",
                                    "type": "",
                                    "value": "is method"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21568:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21568:40:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21568:40:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "21617:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21629:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21640:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21625:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21625:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "21617:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_96c0ae7ae9c516fb014da861fa3c99fa20f93a17066e621a7fe9942d11857748__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "21324:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "21338:4:1",
                            "type": ""
                          }
                        ],
                        "src": "21173:477:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "21829:229:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21846:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21857:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21839:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21839:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21839:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21880:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21891:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21876:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21876:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21896:2:1",
                                    "type": "",
                                    "value": "39"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21869:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21869:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21869:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21919:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21930:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21915:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21915:18:1"
                                  },
                                  {
                                    "hexValue": "736574207465616d2070657263656e743a20696e76616c69642070657263656e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "21935:34:1",
                                    "type": "",
                                    "value": "set team percent: invalid percen"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21908:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21908:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21908:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "21990:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22001:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "21986:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21986:18:1"
                                  },
                                  {
                                    "hexValue": "742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "22006:9:1",
                                    "type": "",
                                    "value": "t value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "21979:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21979:37:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "21979:37:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "22025:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22037:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22048:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22033:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22033:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "22025:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_96fa5ebfdccd5fe963a5ea957c64eb336593f70dc510dd1bca45dcd26ddb6a7c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "21806:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "21820:4:1",
                            "type": ""
                          }
                        ],
                        "src": "21655:403:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "22237:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22254:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22265:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22247:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22247:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22247:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "22288:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22299:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "22284:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22284:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22304:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22277:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22277:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22277:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "22327:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22338:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "22323:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22323:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "22343:34:1",
                                    "type": "",
                                    "value": "Ownable: caller is not the owner"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22316:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22316:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22316:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "22387:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22399:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22410:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22395:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22395:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "22387:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "22214:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "22228:4:1",
                            "type": ""
                          }
                        ],
                        "src": "22063:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "22598:179:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22615:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22626:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22608:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22608:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22608:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "22649:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22660:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "22645:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22645:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22665:2:1",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22638:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22638:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22638:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "22688:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "22699:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "22684:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22684:18:1"
                                  },
                                  {
                                    "hexValue": "7365743a20696e76616c6964206861727665737420696e74657276616c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "22704:31:1",
                                    "type": "",
                                    "value": "set: invalid harvest interval"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22677:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22677:59:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22677:59:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "22745:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22757:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22768:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22753:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22753:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "22745:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_a334800cd19b18b6d938393d303a75ee080f825dc478f54dd3ef6d6a8de1a586__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "22575:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "22589:4:1",
                            "type": ""
                          }
                        ],
                        "src": "22424:353:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "22956:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22973:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22984:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22966:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22966:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22966:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23007:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23018:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23003:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23003:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23023:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "22996:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22996:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "22996:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23046:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23057:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23042:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23042:18:1"
                                  },
                                  {
                                    "hexValue": "6164643a204c5020746f6b656e206d75737420626520612076616c696420636f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "23062:34:1",
                                    "type": "",
                                    "value": "add: LP token must be a valid co"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23035:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23035:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23035:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23117:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23128:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23113:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23113:18:1"
                                  },
                                  {
                                    "hexValue": "6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "23133:8:1",
                                    "type": "",
                                    "value": "ntract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23106:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23106:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23106:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "23151:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23163:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23174:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23159:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23159:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "23151:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_b5c83331565e69a53e8ac1d54aa77fa100001aec4101e7fba075baebda05bbad__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "22933:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "22947:4:1",
                            "type": ""
                          }
                        ],
                        "src": "22782:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "23363:230:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23380:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23391:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23373:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23373:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23373:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23414:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23425:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23410:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23410:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23430:2:1",
                                    "type": "",
                                    "value": "40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23403:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23403:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23403:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23453:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23464:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23449:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23449:18:1"
                                  },
                                  {
                                    "hexValue": "736574207465616d2070657263656e743a20746f74616c2070657263656e7420",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "23469:34:1",
                                    "type": "",
                                    "value": "set team percent: total percent "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23442:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23442:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23442:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23524:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23535:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23520:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23520:18:1"
                                  },
                                  {
                                    "hexValue": "6f766572206d6178",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "23540:10:1",
                                    "type": "",
                                    "value": "over max"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23513:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23513:38:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23513:38:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "23560:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23572:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23583:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23568:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23568:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "23560:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_cad93da5b0bb30aab098be326a0ed1b2f8a79830f5cdc8241739db128d0ebe60__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "23340:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "23354:4:1",
                            "type": ""
                          }
                        ],
                        "src": "23189:404:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "23772:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23789:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23800:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23782:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23782:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23782:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23823:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23834:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23819:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23819:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23839:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23812:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23812:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23812:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "23862:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23873:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23858:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23858:18:1"
                                  },
                                  {
                                    "hexValue": "426f72696e6745524332303a205472616e7366657246726f6d206661696c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "23878:34:1",
                                    "type": "",
                                    "value": "BoringERC20: TransferFrom failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "23851:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23851:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "23851:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "23922:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23934:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23945:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23930:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23930:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "23922:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "23749:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "23763:4:1",
                            "type": ""
                          }
                        ],
                        "src": "23598:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "24133:175:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24150:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24161:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24143:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24143:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24143:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24184:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24195:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24180:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24180:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24200:2:1",
                                    "type": "",
                                    "value": "25"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24173:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24173:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24173:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24223:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24234:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24219:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24219:18:1"
                                  },
                                  {
                                    "hexValue": "6164643a206465706f7369742066656520746f6f2068696768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "24239:27:1",
                                    "type": "",
                                    "value": "add: deposit fee too high"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24212:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24212:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24212:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "24276:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24288:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24299:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24284:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24284:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "24276:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_e89950b009b7d838066251bc00ee1eec4cf04c094693d143909c95df830d8fd2__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "24110:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "24124:4:1",
                            "type": ""
                          }
                        ],
                        "src": "23959:349:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "24487:181:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24504:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24515:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24497:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24497:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24497:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24538:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24549:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24534:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24534:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24554:2:1",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24527:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24527:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24527:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24577:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24588:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24573:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24573:18:1"
                                  },
                                  {
                                    "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "24593:33:1",
                                    "type": "",
                                    "value": "ReentrancyGuard: reentrant call"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24566:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24566:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24566:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "24636:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24648:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24659:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24644:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24644:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "24636:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "24464:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "24478:4:1",
                            "type": ""
                          }
                        ],
                        "src": "24313:355:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "24847:233:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24864:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24875:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24857:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24857:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24857:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24898:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24909:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24894:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24894:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24914:2:1",
                                    "type": "",
                                    "value": "43"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24887:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24887:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24887:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "24937:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24948:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "24933:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "24933:18:1"
                                  },
                                  {
                                    "hexValue": "73657420696e766573746f722070657263656e743a20696e76616c6964207065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "24953:34:1",
                                    "type": "",
                                    "value": "set investor percent: invalid pe"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24926:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24926:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24926:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "25008:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25019:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25004:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25004:18:1"
                                  },
                                  {
                                    "hexValue": "7263656e742076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "25024:13:1",
                                    "type": "",
                                    "value": "rcent value"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "24997:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24997:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "24997:41:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "25047:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25059:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25070:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25055:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25055:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "25047:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ec06cbd2d38a14b6ce78ac7101f6ae40faca0a2abc38858d8cdc766a500f0e19__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "24824:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "24838:4:1",
                            "type": ""
                          }
                        ],
                        "src": "24673:407:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "25259:234:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25276:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25287:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25269:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25269:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25269:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "25310:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25321:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25306:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25306:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25326:2:1",
                                    "type": "",
                                    "value": "44"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25299:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25299:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25299:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "25349:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25360:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25345:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25345:18:1"
                                  },
                                  {
                                    "hexValue": "7365742074726561737572792070657263656e743a20746f74616c2070657263",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "25365:34:1",
                                    "type": "",
                                    "value": "set treasury percent: total perc"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25338:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25338:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25338:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "25420:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25431:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25416:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25416:18:1"
                                  },
                                  {
                                    "hexValue": "656e74206f766572206d6178",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "25436:14:1",
                                    "type": "",
                                    "value": "ent over max"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25409:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25409:42:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25409:42:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "25460:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25472:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25483:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25468:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25468:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "25460:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_f12d4402c9e19767dab0140cfb8c969d344e6f7feec765de3989d4ede066c2a8__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "25236:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "25250:4:1",
                            "type": ""
                          }
                        ],
                        "src": "25085:408:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "25597:89:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "25607:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25619:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25630:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25615:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25615:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "25607:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25649:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "25664:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25672:6:1",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "25660:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25660:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25642:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25642:38:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25642:38:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "25566:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "25577:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "25588:4:1",
                            "type": ""
                          }
                        ],
                        "src": "25498:188:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "25792:76:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "25802:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25814:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25825:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25810:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25810:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "25802:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25844:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "25855:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "25837:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25837:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "25837:25:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "25761:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "25772:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "25783:4:1",
                            "type": ""
                          }
                        ],
                        "src": "25691:177:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "26002:168:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "26012:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26024:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26035:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26020:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26020:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "26012:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26054:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "26065:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26047:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26047:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26047:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "26092:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26103:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26088:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26088:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26112:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26120:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "26108:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26108:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26081:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26081:83:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26081:83:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "25963:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "25974:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "25982:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "25993:4:1",
                            "type": ""
                          }
                        ],
                        "src": "25873:297:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "26340:211:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "26350:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26362:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26373:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26358:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26358:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "26350:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26392:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "26403:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26385:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26385:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26385:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "26430:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26441:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26426:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26426:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26450:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26458:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "26446:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26446:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26419:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26419:83:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26419:83:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "26522:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26533:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26518:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26518:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "26538:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26511:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26511:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26511:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_address_t_rational_0_by_1__to_t_uint256_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "26293:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "26304:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "26312:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "26320:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "26331:4:1",
                            "type": ""
                          }
                        ],
                        "src": "26175:376:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "26713:211:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "26723:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26735:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26746:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26731:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26731:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "26723:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26765:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "26776:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26758:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26758:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26758:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "26803:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26814:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26799:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26799:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "26823:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26831:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "26819:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26819:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26792:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26792:83:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26792:83:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "26895:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "26906:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "26891:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26891:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "26911:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "26884:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26884:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "26884:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "26666:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "26677:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "26685:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "26693:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "26704:4:1",
                            "type": ""
                          }
                        ],
                        "src": "26556:368:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "27084:175:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "27094:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27106:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27117:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27102:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27102:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "27094:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27136:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "27147:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27129:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27129:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27129:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27174:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27185:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27170:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27170:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "27194:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27202:6:1",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "27190:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27190:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27163:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27163:47:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27163:47:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27230:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27241:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27226:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27226:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "27246:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27219:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27219:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27219:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint16_t_uint256__to_t_uint256_t_uint16_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "27037:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "27048:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "27056:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "27064:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "27075:4:1",
                            "type": ""
                          }
                        ],
                        "src": "26929:330:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "27393:119:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "27403:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27415:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27426:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27411:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27411:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "27403:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27445:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "27456:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27438:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27438:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27438:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27483:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27494:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27479:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27479:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27499:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27472:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27472:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27472:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "27354:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "27365:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "27373:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "27384:4:1",
                            "type": ""
                          }
                        ],
                        "src": "27264:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "27674:162:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "27684:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27696:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27707:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27692:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27692:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "27684:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27726:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "27737:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27719:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27719:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27719:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27764:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27775:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27760:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27760:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27780:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27753:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27753:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27753:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27807:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "27818:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27803:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27803:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "27823:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "27796:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27796:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "27796:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "27627:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "27638:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "27646:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "27654:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "27665:4:1",
                            "type": ""
                          }
                        ],
                        "src": "27517:319:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "28026:206:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "28036:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28048:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28059:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28044:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28044:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "28036:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28079:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "28090:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "28072:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28072:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "28072:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "28117:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "28128:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "28113:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28113:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "28133:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "28106:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28106:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "28106:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "28160:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "28171:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "28156:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28156:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "28176:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "28149:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28149:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "28149:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "28203:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "28214:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "28199:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28199:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "28219:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "28192:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28192:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "28192:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "27971:9:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "27982:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "27990:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "27998:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "28006:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "28017:4:1",
                            "type": ""
                          }
                        ],
                        "src": "27841:391:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "28285:80:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "28312:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "28314:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28314:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28314:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28301:1:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "28308:1:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "28304:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28304:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "28298:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28298:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "28295:39:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "28343:16:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28354:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28357:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28350:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28350:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nodeType": "YulIdentifier",
                                  "src": "28343:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "28268:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "28271:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nodeType": "YulTypedName",
                            "src": "28277:3:1",
                            "type": ""
                          }
                        ],
                        "src": "28237:128:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "28416:228:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "28447:168:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28468:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28471:77:1",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "28461:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28461:88:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28461:88:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28569:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28572:4:1",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "28562:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28562:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28562:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28597:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "28600:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "28590:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28590:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28590:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28436:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "28429:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28429:9:1"
                              },
                              "nodeType": "YulIf",
                              "src": "28426:189:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "28624:14:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28633:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28636:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "28629:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28629:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "28624:1:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "28401:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "28404:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "r",
                            "nodeType": "YulTypedName",
                            "src": "28410:1:1",
                            "type": ""
                          }
                        ],
                        "src": "28370:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "28701:176:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "28820:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "28822:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28822:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28822:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "28732:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "28725:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "28725:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "28718:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28718:17:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "28740:1:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "28747:66:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "28815:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "28743:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "28743:74:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "28737:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28737:81:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "28714:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28714:105:1"
                              },
                              "nodeType": "YulIf",
                              "src": "28711:131:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "28851:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28866:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28869:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "28862:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28862:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "28851:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "28680:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "28683:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "28689:7:1",
                            "type": ""
                          }
                        ],
                        "src": "28649:228:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "28931:76:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "28953:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "28955:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "28955:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "28955:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28947:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28950:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "28944:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28944:8:1"
                              },
                              "nodeType": "YulIf",
                              "src": "28941:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "28984:17:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28996:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "28999:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "28992:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28992:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "28984:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "28913:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "28916:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "28922:4:1",
                            "type": ""
                          }
                        ],
                        "src": "28882:125:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "29065:205:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "29075:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29084:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "29079:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29144:63:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "29169:3:1"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "29174:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "29165:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "29165:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "29188:3:1"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "29193:1:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "29184:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "29184:11:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "29178:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "29178:18:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "29158:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29158:39:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "29158:39:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "29105:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "29108:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "29102:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29102:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "29116:19:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "29118:15:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "29127:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "29130:2:1",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "29123:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29123:10:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "29118:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "29098:3:1",
                                "statements": []
                              },
                              "src": "29094:113:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29233:31:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "29246:3:1"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "29251:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "29242:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "29242:16:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "29260:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "29235:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29235:27:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "29235:27:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "29222:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "29225:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "29219:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29219:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "29216:48:1"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nodeType": "YulTypedName",
                            "src": "29043:3:1",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nodeType": "YulTypedName",
                            "src": "29048:3:1",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "29053:6:1",
                            "type": ""
                          }
                        ],
                        "src": "29012:258:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "29322:148:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29413:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "29415:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29415:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "29415:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "29338:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29345:66:1",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "29335:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29335:77:1"
                              },
                              "nodeType": "YulIf",
                              "src": "29332:103:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "29444:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "29455:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29462:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29451:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29451:13:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "29444:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "29304:5:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "29314:3:1",
                            "type": ""
                          }
                        ],
                        "src": "29275:195:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "29520:130:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "29530:31:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "29549:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29556:4:1",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "29545:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29545:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "29534:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "29591:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "29593:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "29593:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "29593:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "29576:7:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29585:4:1",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "29573:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29573:17:1"
                              },
                              "nodeType": "YulIf",
                              "src": "29570:43:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "29622:22:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "29633:7:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29642:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29629:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29629:15:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "29622:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "29502:5:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "29512:3:1",
                            "type": ""
                          }
                        ],
                        "src": "29475:175:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "29687:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29704:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29707:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "29697:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29697:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "29697:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29801:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29804:4:1",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "29794:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29794:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "29794:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29825:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29828:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "29818:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29818:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "29818:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "29655:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "29876:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29893:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29896:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "29886:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29886:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "29886:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29990:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29993:4:1",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "29983:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29983:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "29983:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30014:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30017:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "30007:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30007:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "30007:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "29844:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "30065:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30082:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30085:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "30075:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30075:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "30075:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30179:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30182:4:1",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "30172:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30172:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "30172:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30203:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30206:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "30196:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30196:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "30196:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "30033:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "30267:109:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "30354:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "30363:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "30366:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "30356:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "30356:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "30356:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "30290:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "30301:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "30308:42:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "30297:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "30297:54:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "30287:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "30287:65:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "30280:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30280:73:1"
                              },
                              "nodeType": "YulIf",
                              "src": "30277:93:1"
                            }
                          ]
                        },
                        "name": "validator_revert_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "30256:5:1",
                            "type": ""
                          }
                        ],
                        "src": "30222:154:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "30424:71:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "30473:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "30482:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "30485:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "30475:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "30475:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "30475:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "30447:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "30458:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "30465:4:1",
                                            "type": "",
                                            "value": "0xff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "30454:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "30454:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "30444:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "30444:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "30437:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30437:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "30434:55:1"
                            }
                          ]
                        },
                        "name": "validator_revert_uint8",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "30413:5:1",
                            "type": ""
                          }
                        ],
                        "src": "30381:114:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_array_contract_IComplexRewarder_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_contract_IComplexRewarder_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IBoringERC20_$529_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IComplexRewarder_$562(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_contract$_IBoringERC20_$529t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        value2 := abi_decode_uint16(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_contract_IComplexRewarder_dyn_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint16t_uint256t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_uint16(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_contract_IComplexRewarder_dyn_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        validator_revert_uint8(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_uint8(value)\n        value0 := value\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_packed_t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let pos_1 := pos\n        pos_1 := pos\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            let value := calldataload(srcPtr)\n            validator_revert_address(value)\n            mstore(pos_1, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n            let _1 := 0x20\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_address_t_address_t_uint256_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_address_dyn(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 128))\n        let _1 := 32\n        mstore(add(headStart, _1), sub(tail_1, headStart))\n        let pos := tail_1\n        let length := mload(value1)\n        mstore(tail_1, length)\n        pos := add(tail_1, _1)\n        let tail_2 := add(add(tail_1, shl(5, length)), _1)\n        let srcPtr := add(value1, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _2 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n            mstore(pos, add(sub(tail_2, tail_1), _2))\n            let _3 := mload(srcPtr)\n            let length_1 := mload(_3)\n            mstore(tail_2, length_1)\n            copy_memory_to_memory(add(_3, _1), add(tail_2, _1), length_1)\n            tail_2 := add(add(tail_2, and(add(length_1, 31), _2)), _1)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        let tail_3 := abi_encode_array_uint256_dyn(value2, tail_2)\n        mstore(add(headStart, 96), sub(tail_3, headStart))\n        tail := abi_encode_array_uint256_dyn(value3, tail_3)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IBoringERC20_$529_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_stringliteral_062b11ff5385469ec73c97eb15a43f7ff079a5371a66fd58bdeca6df436bd281__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"set: deposit fee too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_11bcca43384175ff9ab4e366096ea276cc200d4f4e96ec7cf10af4e3c23a6718__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"set investor address: invalid ne\")\n        mstore(add(headStart, 96), \"w investor address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"BoringERC20: Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1f723c64b341c3563e5c9c8e95dfced9a5f7ad599880a46ccb0bf93e235d17ea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"set: too many rewarders\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_32c9802382a4c9ed992955a41ef4a76d583dbf70dc166a072178738c06713616__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"harvest many: too many pool ids\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3f178f6b435869b11e7807ebabe44aaf37869349d89b2de2d38d8ce2ca49db57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"add: invalid harvest interval\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3f9de20e7d75e91bb6a2a04dc57a1ad0ca72a86061492a488ec20581061520d2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"withdraw: pool total not enough\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_466a2d9409e515c8e544c25da52dc1d81668c4144c9b20387a9afb8241172c9d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"set team address: invalid new te\")\n        mstore(add(headStart, 96), \"am address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_46e72d344b29df84eda53053105526bcca88405e033d24322788bbf12ed030f8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"set: rewarder must be contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Pool does not exist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_57f763a7e357b0bf03b24cf48523df8c706c86b5e4585baefd3683f53aa23ea4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"set investor percent: total perc\")\n        mstore(add(headStart, 96), \"ent over max\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_599ee9914dd56277d22fc830ffad5129bfe92aee959c102ee9fdb8a6bf4bebd4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"withdraw: user amount not enough\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_61012611393fb96084817e9de1a723747c469c9c404b4980d22828ca24da88e6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 65)\n        mstore(add(headStart, 64), \"set investor address: only previ\")\n        mstore(add(headStart, 96), \"ous investor can call this metho\")\n        mstore(add(headStart, 128), \"d\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_6531aeb0e8455789ae4a04a19adebe400f964ea2ec04265d404d9e844ec0569f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"add: too many rewarders\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_731c1d3f18a3fa5bb00ef76dcc3565468ef3929760a408589de619e618fae1bf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"add: rewarder must be contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7403ca24e9c0a16402bd2f7a663c2e32bacc0f20ab96bd8ecff29ea615b41a35__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"emergency withdraw: pool total n\")\n        mstore(add(headStart, 96), \"ot enough\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_78c2848d97f42f206b1d04161d95b25d6b31f76a68d7784dbfd771f0dc4545cc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"set treasury address: invalid ne\")\n        mstore(add(headStart, 96), \"w treasury address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_80f49ce451bfa787912b59a7cfe9bfc751c1a1f008593f3c2b8a1316a392c821__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"start farming: farm started alre\")\n        mstore(add(headStart, 96), \"ady\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_84267f5f030648d2a2d39881f366a3558c44ac903693a027d1331806eb1fa2e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"set treasury percent: invalid pe\")\n        mstore(add(headStart, 96), \"rcent value\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_91a6d43bc4b258f984ce3e01aeb399b7007888bfcd1e84d2cce57453a4e694c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 65)\n        mstore(add(headStart, 64), \"set team address: only previous \")\n        mstore(add(headStart, 96), \"team address can call this metho\")\n        mstore(add(headStart, 128), \"d\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_96c0ae7ae9c516fb014da861fa3c99fa20f93a17066e621a7fe9942d11857748__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 73)\n        mstore(add(headStart, 64), \"set treasury address: only previ\")\n        mstore(add(headStart, 96), \"ous treasury address can call th\")\n        mstore(add(headStart, 128), \"is method\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_96fa5ebfdccd5fe963a5ea957c64eb336593f70dc510dd1bca45dcd26ddb6a7c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"set team percent: invalid percen\")\n        mstore(add(headStart, 96), \"t value\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a334800cd19b18b6d938393d303a75ee080f825dc478f54dd3ef6d6a8de1a586__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"set: invalid harvest interval\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b5c83331565e69a53e8ac1d54aa77fa100001aec4101e7fba075baebda05bbad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"add: LP token must be a valid co\")\n        mstore(add(headStart, 96), \"ntract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cad93da5b0bb30aab098be326a0ed1b2f8a79830f5cdc8241739db128d0ebe60__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"set team percent: total percent \")\n        mstore(add(headStart, 96), \"over max\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"BoringERC20: TransferFrom failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e89950b009b7d838066251bc00ee1eec4cf04c094693d143909c95df830d8fd2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"add: deposit fee too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ec06cbd2d38a14b6ce78ac7101f6ae40faca0a2abc38858d8cdc766a500f0e19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"set investor percent: invalid pe\")\n        mstore(add(headStart, 96), \"rcent value\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f12d4402c9e19767dab0140cfb8c969d344e6f7feec765de3989d4ede066c2a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"set treasury percent: total perc\")\n        mstore(add(headStart, 96), \"ent over max\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_rational_0_by_1__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint16_t_uint256__to_t_uint256_t_uint16_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function validator_revert_uint8(value)\n    {\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {
                "981": [
                  {
                    "length": 32,
                    "start": 4525
                  },
                  {
                    "length": 32,
                    "start": 14487
                  },
                  {
                    "length": 32,
                    "start": 14565
                  },
                  {
                    "length": 32,
                    "start": 17050
                  },
                  {
                    "length": 32,
                    "start": 17345
                  },
                  {
                    "length": 32,
                    "start": 19333
                  }
                ]
              },
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2E9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x630B5BA1 GT PUSH2 0x191 JUMPI DUP1 PUSH4 0xAFBCFEA1 GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xE2BBB158 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEFF8976B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEFF8976B EQ PUSH2 0x6A0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0xFFCD4263 EQ PUSH2 0x6D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xE2BBB158 EQ PUSH2 0x671 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x684 JUMPI DUP1 PUSH4 0xEDDF9652 EQ PUSH2 0x68D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xDC640AC9 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xDC640AC9 EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xDE73149D EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0xE164AC50 EQ PUSH2 0x668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFBCFEA1 EQ PUSH2 0x623 JUMPI DUP1 PUSH4 0xC5F956AF EQ PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x812C64F1 GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x592 JUMPI DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0x949E6302 EQ PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x812C64F1 EQ PUSH2 0x550 JUMPI DUP1 PUSH4 0x876D3C9C EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x89A2BC25 EQ PUSH2 0x57F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6605BFDA GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x6605BFDA EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0x6690864E EQ PUSH2 0x535 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x654C9ECE EQ PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2081CCC4 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x465E81EC GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x515BC323 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x515BC323 EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0x5312EA8E EQ PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x465E81EC EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0x474FA630 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0x508593AB EQ PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2E6C998D GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x2E6C998D EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x42602F1E EQ PUSH2 0x469 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2081CCC4 EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x2A22BC43 EQ PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 GT PUSH2 0x2A1 JUMPI DUP1 PUSH4 0x17CAF6F1 GT PUSH2 0x286 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x1C75F085 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x1F1B9A7C EQ PUSH2 0x40A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0x1745D2E4 EQ PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81E3EDA GT PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x81E3EDA EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xBA84CD2 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x12E228FD EQ PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4EF9D58 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x735B208 EQ PUSH2 0x30A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F7 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2F7 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x329 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x6E6 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x388 PUSH2 0x383 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP9 AND DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0xFFFF AND PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x5661 JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x454 CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH2 0xC7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x477 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0xD3D JUMP JUMPDEST PUSH2 0x32E PUSH2 0x48A CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x4A2 PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x131A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5800 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x55C5 JUMP JUMPDEST PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x5691 JUMP JUMPDEST PUSH2 0x1FAB JUMP JUMPDEST PUSH2 0x32E PUSH2 0x4EF CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2178 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x21FA JUMP JUMPDEST PUSH2 0x32E PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x51D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2567 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x530 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x2595 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x543 CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x2776 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x2957 JUMP JUMPDEST PUSH2 0x559 PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x57A CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x29E4 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x58D CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2BE4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x350 JUMP JUMPDEST PUSH2 0x5F0 PUSH2 0x5BE CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x301 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x61E CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x2DE4 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x2FE4 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x350 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x5417 JUMP JUMPDEST PUSH2 0x314C JUMP JUMPDEST PUSH2 0x2F7 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0x3270 JUMP JUMPDEST PUSH2 0x2F7 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x32E PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x563F JUMP JUMPDEST PUSH2 0x32F4 JUMP JUMPDEST PUSH2 0x6B3 PUSH2 0x6AE CALLDATASIZE PUSH1 0x4 PUSH2 0x5563 JUMP JUMPDEST PUSH2 0x346A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x301 SWAP2 SWAP1 PUSH2 0x57ED JUMP JUMPDEST PUSH2 0x32E PUSH2 0x6CE CALLDATASIZE PUSH1 0x4 PUSH2 0x53FA JUMP JUMPDEST PUSH2 0x35E9 JUMP JUMPDEST PUSH2 0x4A2 PUSH2 0x6E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x5595 JUMP JUMPDEST PUSH2 0x3719 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x774 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0xEEDC6338C9C1AD8F3CD6C90DD09DBE98DBD57E610D3E59A17996D07ACB0D9511 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 SWAP1 SWAP7 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND SWAP7 POP SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0xFFFF AND SWAP2 SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x8A2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP3 GT ISZERO PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A20746F6F206D616E7920726577617264657273000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP7 AND GT ISZERO PUSH2 0x9EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH3 0x127500 DUP5 GT ISZERO PUSH2 0xA57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xA92 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA8C SWAP2 SWAP1 PUSH2 0x53FA JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xAF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365743A207265776172646572206D75737420626520636F6E74726163740000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0xB01 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0xA5A JUMP JUMPDEST POP PUSH2 0xB11 PUSH2 0x3E24 JUMP JUMPDEST DUP6 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x6 SLOAD PUSH2 0xB44 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0xB4E SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP6 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB68 JUMPI PUSH2 0xB68 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0xBD0 JUMPI PUSH2 0xBD0 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP DUP3 DUP3 PUSH1 0x4 DUP10 DUP2 SLOAD DUP2 LT PUSH2 0xBFA JUMPI PUSH2 0xBFA PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x7 ADD SWAP2 SWAP1 PUSH2 0xC18 SWAP3 SWAP2 SWAP1 PUSH2 0x5285 JUMP JUMPDEST POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xC29 SWAP3 SWAP2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 DUP9 DUP4 MSTORE PUSH2 0xFFFF DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD DUP7 SWAP1 MSTORE SWAP1 DUP9 SWAP1 PUSH32 0x5ED6F0DEEF9AB49D02900B40D596DF4CD637A2A7FBFA56BBCB377389D3CE8D28 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xCEF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x7 SLOAD TIMESTAMP LT DUP1 ISZERO SWAP1 PUSH2 0xD34 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xE0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F7220616464726573733A206F6E6C79207072657669 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F757320696E766573746F722063616E2063616C6C2074686973206D6574686F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xEAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F7220616464726573733A20696E76616C6964206E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7720696E766573746F7220616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x6260CB34F06B782E83BDE168F7D74AB2133041CB53B63CE22B127822A92B6791 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xF8B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0xFFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1012 JUMPI PUSH2 0x1012 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP3 POP DUP5 GT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261773A207573657220616D6F756E74206E6F7420656E6F756768 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST DUP4 DUP3 PUSH1 0x6 ADD SLOAD LT ISZERO PUSH2 0x1113 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77697468647261773A20706F6F6C20746F74616C206E6F7420656E6F75676800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x111C DUP6 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x1125 DUP6 PUSH2 0x434D JUMP JUMPDEST DUP4 ISZERO PUSH2 0x11A4 JUMPI DUP4 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x113F SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1181 JUMPI DUP4 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x117B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP2 SLOAD PUSH2 0x11A4 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP7 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x11D6 SWAP2 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x11E0 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x12B7 JUMPI DUP3 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1209 JUMPI PUSH2 0x1209 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x12B0 SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x11E8 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x12D8 JUMPI DUP4 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12D2 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP6 SWAP1 CALLER SWAP1 PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 DUP5 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 LT PUSH2 0x138F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP8 DUP2 SLOAD DUP2 LT PUSH2 0x13A4 JUMPI PUSH2 0x13A4 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH2 0x13C8 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13E0 JUMPI PUSH2 0x13E0 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1409 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP7 POP PUSH2 0x141D SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1435 JUMPI PUSH2 0x1435 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1468 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1453 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP6 POP PUSH2 0x147C SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1494 JUMPI PUSH2 0x1494 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14BD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP3 ADD SLOAD SWAP1 SWAP5 POP PUSH2 0x14D1 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14E9 JUMPI PUSH2 0x14E9 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1512 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x2 SLOAD DUP8 MLOAD SWAP2 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x1543 JUMPI PUSH2 0x1543 PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x1573 SWAP2 AND PUSH2 0x4672 JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1586 JUMPI PUSH2 0x1586 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x15B3 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x15C9 JUMPI PUSH2 0x15C9 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x15F2 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x15FC SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x1606 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 SLOAD DUP3 PUSH1 0x3 SLOAD DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x161F SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x1629 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x1633 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x163D SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1650 JUMPI PUSH2 0x1650 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x1A7A JUMPI DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1680 JUMPI PUSH2 0x1680 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1703 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1727 SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST DUP10 PUSH2 0x1733 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1743 JUMPI PUSH2 0x1743 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH2 0x1857 DUP5 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1795 JUMPI PUSH2 0x1795 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1818 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x183C SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4672 JUMP JUMPDEST DUP9 PUSH2 0x1863 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI PUSH2 0x1873 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1958 DUP5 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1896 JUMPI PUSH2 0x1896 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1905 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1919 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x193D SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP8 PUSH2 0x1967 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1977 JUMPI PUSH2 0x1977 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1998 JUMPI PUSH2 0x1998 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x465E81EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x465E81EC SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A1F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A43 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP7 PUSH2 0x1A4F DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1A5F JUMPI PUSH2 0x1A5F PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x1A73 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x165F JUMP JUMPDEST POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1B07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP2 GT ISZERO PUSH2 0x1B72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A20746F6F206D616E7920726577617264657273000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP6 AND GT ISZERO PUSH2 0x1BE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH3 0x127500 DUP4 GT ISZERO PUSH2 0x1C4F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x1CDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A204C5020746F6B656E206D75737420626520612076616C696420636F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E74726163740000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D73 JUMPI PUSH2 0x1CFD DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xA77 JUMPI PUSH2 0xA77 PUSH2 0x5A20 JUMP JUMPDEST PUSH2 0x1D63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164643A207265776172646572206D75737420626520636F6E74726163740000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1D6C DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CE0 JUMP JUMPDEST POP PUSH2 0x1D7C PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 SLOAD TIMESTAMP GT PUSH2 0x1D8F JUMPI PUSH1 0x7 SLOAD PUSH2 0x1D91 JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 POP DUP7 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DA5 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 PUSH2 0x100 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH2 0xFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP6 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 SWAP1 SWAP5 MSTORE POP POP DUP4 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP7 SSTORE SWAP5 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 MLOAD PUSH1 0x8 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE DUP4 DUP3 ADD MLOAD SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x2 DUP6 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP6 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP6 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP6 ADD SSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0xE0 DUP4 ADD MLOAD DUP1 MLOAD SWAP4 SWAP5 SWAP4 PUSH2 0x1F1B SWAP4 POP PUSH1 0x7 DUP6 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x530D JUMP JUMPDEST POP POP POP DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1F2E SWAP3 SWAP2 SWAP1 PUSH2 0x5782 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 KECCAK256 PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 PUSH2 0x1F5E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP12 DUP2 MSTORE PUSH2 0xFFFF DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH32 0x5ED295C4F5AF5AEB1CCD905E1CD55A86AB3BB9FC1FE2346FF64AC47DBEF36661 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2018 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x4 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x208A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x209F JUMPI PUSH2 0x209F PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD505ACCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xC4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 SWAP1 PUSH4 0xD505ACCF SWAP1 PUSH1 0xE4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x215B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x2169 DUP10 DUP10 PUSH2 0x487D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x21E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x21F3 DUP2 PUSH2 0x3E4A JUMP JUMPDEST POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2267 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2284 JUMPI PUSH2 0x2284 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 DUP1 SLOAD PUSH1 0x8 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD PUSH1 0x6 DUP2 ADD SLOAD SWAP1 SWAP4 POP DUP2 GT ISZERO PUSH2 0x2344 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E63792077697468647261773A20706F6F6C20746F74616C206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F7420656E6F7567680000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SSTORE PUSH1 0x1 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x2 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP2 SWAP1 SSTORE PUSH1 0x6 DUP5 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2372 SWAP1 DUP5 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x7 DUP5 ADD SLOAD DUP2 LT ISZERO PUSH2 0x2445 JUMPI DUP4 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x239C JUMPI PUSH2 0x239C PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x241C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2430 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x243E SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x237B JUMP JUMPDEST POP PUSH1 0x2 SLOAD DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2483 JUMPI DUP1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x247D SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP3 SLOAD PUSH2 0x24A6 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE DUP5 SWAP1 CALLER SWAP1 PUSH32 0xBB757047C2B5F3974FE26B7C10F732E7BCE710B0952A71082702781E62AE0595 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x2554 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x2561 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x257C JUMPI PUSH2 0x257C PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x6 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2662 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420747265617375727920616464726573733A206F6E6C79207072657669 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F757320747265617375727920616464726573732063616E2063616C6C207468 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6973206D6574686F640000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420747265617375727920616464726573733A20696E76616C6964206E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7720747265617375727920616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x61885CDBA916BE748FF3E3F6F15E4206153B8EA3B7ACABADE9D04B4063A83510 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2843 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D20616464726573733A206F6E6C792070726576696F757320 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7465616D20616464726573732063616E2063616C6C2074686973206D6574686F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x28E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D20616464726573733A20696E76616C6964206E6577207465 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616D206164647265737300000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD CALLER SWAP1 PUSH32 0x42FBC17D847FDC3E5C82DA842A5EF3979C64F3B94CD4E7382310FD5525C6EE0F SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x29D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x29E2 PUSH1 0x0 PUSH2 0x4CEE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2A65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2AF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F722070657263656E743A20696E76616C6964207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7263656E742076616C7565000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xE SLOAD DUP3 PUSH1 0xD SLOAD PUSH2 0x2B0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2B15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2BA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73657420696E766573746F722070657263656E743A20746F74616C2070657263 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E74206F766572206D61780000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x905B464403A98B455243C8B4D30C545B8FBD70CDA670142B9326425B2C039F3B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xF SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2C65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2CF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365742074726561737572792070657263656E743A20696E76616C6964207065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7263656E742076616C7565000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xF SLOAD DUP3 PUSH1 0xD SLOAD PUSH2 0x2D0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2D15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2DA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7365742074726561737572792070657263656E743A20746F74616C2070657263 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656E74206F766572206D61780000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xA565895C0101FCA10E6A7B85742E56CF52AC5F58B09CE030425D3555B47069FD SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x2E65 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT ISZERO PUSH2 0x2EF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D2070657263656E743A20696E76616C69642070657263656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x742076616C756500000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0xF SLOAD DUP3 PUSH1 0xE SLOAD PUSH2 0x2F0B SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH2 0x2F15 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST GT ISZERO PUSH2 0x2FA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574207465616D2070657263656E743A20746F74616C2070657263656E7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F766572206D6178000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x204A076F4A2E4E5E646BB8841CC285306BF747E277F40DBFD5750E782E17B7A6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xD SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3065 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x7 SLOAD TIMESTAMP LT PUSH2 0x30F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7374617274206661726D696E673A206661726D207374617274656420616C7265 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164790000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3144 JUMPI PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3119 JUMPI PUSH2 0x3119 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP TIMESTAMP DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP DUP1 PUSH2 0x313D SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x30FC JUMP JUMPDEST POP POP TIMESTAMP PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x31B9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x3229 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x68617276657374206D616E793A20746F6F206D616E7920706F6F6C2069647300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3267 JUMPI PUSH2 0x3257 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x3249 JUMPI PUSH2 0x3249 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 PUSH2 0x487D JUMP JUMPDEST PUSH2 0x3260 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x322C JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x32DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x32EC DUP3 DUP3 PUSH2 0x487D JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x3375 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x337D PUSH2 0x3E24 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x802633C8D26237616D81BDAC01BC40FCDF36E098832601582EC19D7E431C5EF3 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x33C8 JUMPI PUSH2 0x33C8 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP4 PUSH1 0x40 MLOAD PUSH2 0x33F2 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x340E JUMPI PUSH2 0x340E PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x6 SLOAD PUSH2 0x342D SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3437 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3451 JUMPI PUSH2 0x3451 PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 DUP3 SWAP1 DUP2 LT PUSH2 0x34DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x34EF JUMPI PUSH2 0x34EF PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD DUP1 SLOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x351F JUMPI PUSH2 0x351F PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3548 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP3 ADD SLOAD DUP2 LT ISZERO PUSH2 0x35E1 JUMPI DUP2 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x356F JUMPI PUSH2 0x356F PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x35AC JUMPI PUSH2 0x35AC PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH2 0x35DA DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x354E JUMP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x366A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x370D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x3716 DUP2 PUSH2 0x4CEE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 DUP6 PUSH1 0x4 DUP1 SLOAD SWAP1 POP DUP2 LT PUSH2 0x378E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP9 DUP2 SLOAD DUP2 LT PUSH2 0x37A3 JUMPI PUSH2 0x37A3 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x3 PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP1 DUP2 ADD SLOAD PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP3 SWAP5 POP SWAP1 SWAP2 TIMESTAMP GT DUP1 ISZERO PUSH2 0x3801 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x38D7 JUMPI PUSH1 0x0 DUP5 PUSH1 0x2 ADD SLOAD TIMESTAMP PUSH2 0x3818 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x3837 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3841 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x384B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x6 SLOAD DUP4 DUP11 PUSH1 0x1 ADD SLOAD PUSH1 0x3 SLOAD DUP9 PUSH2 0x3867 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3871 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x387B SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3885 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x388F SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x38BC PUSH32 0x0 DUP4 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x38C6 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x38D0 SWAP1 DUP8 PUSH2 0x58C5 JUMP JUMPDEST SWAP6 POP POP POP POP POP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x2 ADD SLOAD DUP5 PUSH1 0x1 ADD SLOAD PUSH32 0x0 DUP6 DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x3914 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x391E SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x3928 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3932 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x3945 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x395D JUMPI PUSH2 0x395D PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3986 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP11 POP PUSH2 0x399A SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39B2 JUMPI PUSH2 0x39B2 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x39E5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x39D0 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP10 POP PUSH2 0x39F9 SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A11 JUMPI PUSH2 0x3A11 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A3A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x7 DUP7 ADD SLOAD SWAP1 SWAP8 POP PUSH2 0x3A4E SWAP1 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A66 JUMPI PUSH2 0x3A66 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A8F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x2 SLOAD DUP12 MLOAD SWAP2 SWAP10 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP12 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x3AC0 JUMPI PUSH2 0x3AC0 PUSH2 0x5A20 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x3AF0 SWAP2 AND PUSH2 0x4672 JUMP JUMPDEST DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B03 JUMPI PUSH2 0x3B03 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x2 SLOAD PUSH2 0x3B30 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x478A JUMP JUMPDEST PUSH1 0xFF AND DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B46 JUMPI PUSH2 0x3B46 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B66 JUMPI PUSH2 0x3B66 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP7 ADD SLOAD DUP2 LT ISZERO PUSH2 0x3E14 JUMPI DUP6 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3B96 JUMPI PUSH2 0x3B96 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 ADD SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xF7C618C100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP3 PUSH4 0xF7C618C1 SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C19 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C3D SWAP2 SWAP1 PUSH2 0x547B JUMP JUMPDEST DUP12 PUSH2 0x3C49 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3C59 JUMPI PUSH2 0x3C59 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH2 0x3CAB DUP7 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1795 JUMPI PUSH2 0x1795 PUSH2 0x5A20 JUMP JUMPDEST DUP11 PUSH2 0x3CB7 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3CC7 JUMPI PUSH2 0x3CC7 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x3CEA DUP7 PUSH1 0x7 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1896 JUMPI PUSH2 0x1896 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0xFF AND DUP10 PUSH2 0x3CF9 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3D09 JUMPI PUSH2 0x3D09 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x3D2A JUMPI PUSH2 0x3D2A PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xFFCD426300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP16 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xFFCD4263 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DDD SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP9 PUSH2 0x3DE9 DUP4 PUSH1 0x1 PUSH2 0x58C5 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x3DF9 JUMPI PUSH2 0x3DF9 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH2 0x3E0D DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B75 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x4 SLOAD DUP2 LT ISZERO PUSH2 0x3716 JUMPI PUSH2 0x3E3A DUP2 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x3E43 DUP2 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x3E27 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 SWAP1 DUP2 LT PUSH2 0x3EB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3ECC JUMPI PUSH2 0x3ECC PUSH2 0x5A20 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT PUSH2 0x3EEC JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 ADD SLOAD DUP1 ISZERO DUP1 PUSH2 0x3F00 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x3F11 JUMPI POP TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP PUSH2 0x3F23 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6 SLOAD DUP5 PUSH1 0x1 ADD SLOAD PUSH1 0x3 SLOAD DUP5 PUSH2 0x3F3D SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3F47 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3F51 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3E8 SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0xE SLOAD PUSH1 0xD SLOAD DUP5 PUSH2 0x3F70 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3F7A SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH2 0x3F84 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xA SLOAD PUSH1 0xD SLOAD SWAP3 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND SWAP3 PUSH4 0x40C10F19 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x3FBF SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x3FC9 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4048 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0xB SLOAD PUSH1 0xE SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP5 POP PUSH4 0x40C10F19 SWAP4 POP SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x4083 SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x408D SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x410C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0xC SLOAD PUSH1 0xF SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND SWAP5 POP PUSH4 0x40C10F19 SWAP4 POP SWAP2 AND SWAP1 DUP6 SWAP1 PUSH2 0x4147 SWAP1 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4151 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x41D0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH4 0x40C10F19 SWAP1 POP ADDRESS DUP5 PUSH2 0x4200 DUP6 DUP9 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x420A SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4289 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x6 DUP8 ADD SLOAD DUP4 SWAP2 POP DUP3 PUSH2 0x42BF PUSH32 0x0 DUP8 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x42C9 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x42D3 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x42DD SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST DUP7 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x42F0 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x2 DUP8 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP8 ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP9 SWAP1 MSTORE DUP3 ADD MSTORE DUP9 SWAP1 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x4362 JUMPI PUSH2 0x4362 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x8 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP3 POP ISZERO DUP1 ISZERO PUSH2 0x439E JUMPI POP PUSH1 0x7 SLOAD TIMESTAMP LT ISZERO JUMPDEST ISZERO PUSH2 0x43B8 JUMPI PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x43B2 SWAP1 TIMESTAMP PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD PUSH32 0x0 DUP5 PUSH1 0x3 ADD SLOAD DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x43F4 SWAP2 SWAP1 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x43FE SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH2 0x4408 SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP PUSH2 0x4414 DUP5 CALLER PUSH2 0xC7F JUMP JUMPDEST ISZERO PUSH2 0x448C JUMPI PUSH1 0x0 DUP2 GT DUP1 PUSH2 0x442C JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x4487 JUMPI PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x4443 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x2 ADD SLOAD PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x445B SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x5 DUP5 ADD SLOAD PUSH2 0x4476 SWAP1 TIMESTAMP PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x4485 CALLER DUP3 PUSH2 0x4D63 JUMP JUMPDEST POP JUMPDEST PUSH2 0x44FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x44FC JUMPI DUP1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x44A4 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x44BF SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE DUP5 SWAP1 CALLER SWAP1 PUSH32 0xEE470483107F579A55C754FA00613C45A9A3B617A418B39CB0BE97E5381BA7C1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x4599 SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x45D6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x45DB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x4605 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x4605 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4605 SWAP2 SWAP1 PUSH2 0x5459 JUMP JUMPDEST PUSH2 0x466B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x95D89B4100000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x46F4 SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x472F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4734 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x4779 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3F3F3F0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x4782 JUMP JUMPDEST PUSH2 0x4782 DUP2 PUSH2 0x4F19 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x480B SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4846 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x484B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x485E JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x4869 JUMPI PUSH1 0x12 PUSH2 0x4782 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4782 SWAP2 SWAP1 PUSH2 0x56E4 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x48EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506F6F6C20646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x48FF JUMPI PUSH2 0x48FF PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x4930 DUP6 PUSH2 0x3E4A JUMP JUMPDEST PUSH2 0x4939 DUP6 PUSH2 0x434D JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4B7C JUMPI DUP2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49E0 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST DUP4 SLOAD SWAP1 SWAP2 POP PUSH2 0x4A07 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP9 PUSH2 0x510C JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A84 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AA8 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB4 DUP3 DUP3 PUSH2 0x5955 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD SWAP1 SWAP7 POP PUSH2 0xFFFF AND ISZERO PUSH2 0x4B23 JUMPI PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x4ADF SWAP1 PUSH2 0xFFFF AND DUP10 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4AE9 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0xB SLOAD DUP7 SLOAD SWAP2 SWAP3 POP PUSH2 0x4B15 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x4502 JUMP JUMPDEST PUSH2 0x4B1F DUP2 DUP9 PUSH2 0x5955 JUMP JUMPDEST SWAP7 POP POP JUMPDEST DUP6 DUP4 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4B37 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x4B79 JUMPI DUP6 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4B73 SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST POP POP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x4BAE SWAP2 PUSH2 0x5918 JUMP JUMPDEST PUSH2 0x4BB8 SWAP2 SWAP1 PUSH2 0x58DD JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP4 ADD SLOAD DUP2 LT ISZERO PUSH2 0x4C8F JUMPI DUP3 PUSH1 0x7 ADD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4BE1 JUMPI PUSH2 0x4BE1 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8AD1472800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x8AD14728 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4C66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4C7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH2 0x4C88 SWAP1 PUSH2 0x5998 JUMP JUMPDEST SWAP1 POP PUSH2 0x4BC0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x4CB0 JUMPI DUP4 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CAA SWAP2 SWAP1 PUSH2 0x58C5 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE DUP6 SWAP1 CALLER SWAP1 PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DE3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E07 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST GT ISZERO PUSH2 0x4349 JUMPI PUSH1 0x9 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4EB3 SWAP2 SWAP1 PUSH2 0x557C JUMP JUMPDEST PUSH2 0x4EBD SWAP2 SWAP1 PUSH2 0x5955 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x4EEF JUMPI PUSH1 0x2 SLOAD PUSH2 0x4EEA SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP4 PUSH2 0x4502 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x4EEA JUMPI PUSH1 0x2 SLOAD PUSH2 0x4EEA SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP5 PUSH2 0x4502 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP3 MLOAD LT PUSH2 0x4F3E JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4F38 SWAP2 SWAP1 PUSH2 0x5498 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x50CE JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x4F98 JUMPI POP DUP3 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x4F6E JUMPI PUSH2 0x4F6E PUSH2 0x5A20 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x4FAF JUMPI DUP1 PUSH2 0x4FA7 DUP2 PUSH2 0x59D1 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F4B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4FCD JUMPI PUSH2 0x4FCD PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FF7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH2 0x504C JUMPI POP DUP4 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5022 JUMPI PUSH2 0x5022 PUSH2 0x5A20 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x50C7 JUMPI DUP4 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5066 JUMPI PUSH2 0x5066 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5086 JUMPI PUSH2 0x5086 PUSH2 0x5A20 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH2 0x50BF DUP2 PUSH2 0x59D1 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x4FFF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH32 0x3F3F3F0000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x51AB SWAP2 SWAP1 PUSH2 0x57D1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x51E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x51ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5217 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x5217 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5217 SWAP2 SWAP1 PUSH2 0x5459 JUMP JUMPDEST PUSH2 0x527D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x52FD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x52FD JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 CALLDATALOAD AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x52A5 JUMP JUMPDEST POP PUSH2 0x5309 SWAP3 SWAP2 POP PUSH2 0x5387 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x52FD JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x52FD JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x532D JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x5309 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x5388 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x53AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x53C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x53E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x5107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x540C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x50C7 DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x542A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5441 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x544D DUP6 DUP3 DUP7 ADD PUSH2 0x539C JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x546B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x50C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x548D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C7 DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x54C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x54D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x54E8 JUMPI PUSH2 0x54E8 PUSH2 0x5A4F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x552E JUMPI PUSH2 0x552E PUSH2 0x5A4F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x5547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5558 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x596C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5575 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x558E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x55A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x55BA DUP2 PUSH2 0x5A7E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x55DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x55F0 DUP2 PUSH2 0x5A7E JUMP JUMPDEST SWAP5 POP PUSH2 0x55FE PUSH1 0x40 DUP9 ADD PUSH2 0x53E8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x562D DUP10 DUP3 DUP11 ADD PUSH2 0x539C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5652 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x567A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0x55FE PUSH1 0x40 DUP9 ADD PUSH2 0x53E8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x56AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0x56CA DUP2 PUSH2 0x5AA0 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x56F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x50C7 DUP2 PUSH2 0x5AA0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5747 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5715 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5747 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5766 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x57C6 JUMPI DUP2 CALLDATALOAD PUSH2 0x579B DUP2 PUSH2 0x5A7E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5788 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x57E3 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x596C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x50C7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x5701 JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x5813 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x5701 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP11 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5899 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP1 DUP9 DUP6 SUB ADD DUP7 MSTORE DUP3 MLOAD DUP1 MLOAD DUP1 DUP7 MSTORE PUSH2 0x587B DUP2 DUP11 DUP9 ADD DUP12 DUP6 ADD PUSH2 0x596C JUMP JUMPDEST SWAP7 DUP9 ADD SWAP7 PUSH1 0x1F ADD SWAP1 SWAP2 AND SWAP4 SWAP1 SWAP4 ADD DUP7 ADD SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5835 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x58AD DUP2 DUP11 PUSH2 0x5752 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x5558 DUP2 DUP6 PUSH2 0x5752 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x58D8 JUMPI PUSH2 0x58D8 PUSH2 0x59F1 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x5913 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x5950 JUMPI PUSH2 0x5950 PUSH2 0x59F1 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x5967 JUMPI PUSH2 0x5967 PUSH2 0x59F1 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5987 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x596F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x44FC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x59CA JUMPI PUSH2 0x59CA PUSH2 0x59F1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x59E8 JUMPI PUSH2 0x59E8 PUSH2 0x59F1 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3716 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x5ACD47B434FA866A CALLER SWAP8 SUB 0xBA OR 0x49 SDIV BALANCE PUSH12 0xC1A1A0CBCD6244A1A80C23C6 GASPRICE 0xAA PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "19258:27450:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21542:30;;;;;;;;;25837:25:1;;;25825:2;25810:18;21542:30:0;;;;;;;;21640;;;;;;25419:93;25490:8;:15;25419:93;;42620:213;;;;;;:::i;:::-;;:::i;:::-;;21357:30;;;;;;;;;;;;8519:42:1;8507:55;;;8489:74;;8477:2;8462:18;21357:30:0;8343:226:1;20679:26:0;;;;;;:::i;:::-;;:::i;:::-;;;;12681:42:1;12669:55;;;12651:74;;12756:2;12741:18;;12734:34;;;;12784:18;;;12777:34;;;;12842:2;12827:18;;12820:34;;;;12903:6;12891:19;12885:3;12870:19;;12863:48;12942:3;12927:19;;12920:35;12986:3;12971:19;;12964:35;12638:3;12623:19;20679:26:0;12318:687:1;20421:26:0;;;;;;20918:34;;;;;;21237:26;;;;;;;;;20350:25;;;;;;;;;27594:1362;;;;;;:::i;:::-;;:::i;21173:36::-;;;;;;33810:316;;;;;;:::i;:::-;;:::i;:::-;;;12040:14:1;;12033:22;12015:41;;12003:2;11988:18;33810:316:0;11875:187:1;45751:463:0;;;;;;:::i;:::-;;:::i;38272:1367::-;;;;;;:::i;:::-;;:::i;31500:1715::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;21073:35::-;;;;;;25721:1763;;;;;;:::i;:::-;;:::i;36070:423::-;;;;;;:::i;:::-;;:::i;34558:90::-;;;;;;:::i;:::-;;:::i;39707:984::-;;;;;;:::i;:::-;;:::i;34206:84::-;;;:::i;43281:111::-;;;;;;:::i;:::-;;:::i;44721:471::-;;;;;;:::i;:::-;;:::i;43783:423::-;;;;;;:::i;:::-;;:::i;2510:92::-;;;:::i;20593:54::-;;20643:4;20593:54;;;;;25672:6:1;25660:19;;;25642:38;;25630:2;25615:18;20593:54:0;25498:188:1;46220:486:0;;;;;;:::i;:::-;;:::i;45198:::-;;;;;;:::i;:::-;;:::i;1878:85::-;1924:7;1950:6;;;1878:85;;20760:64;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28072:25:1;;;28128:2;28113:18;;28106:34;;;;28156:18;;;28149:34;28214:2;28199:18;;28192:34;28059:3;28044:19;20760:64:0;27841:391:1;44212:446:0;;;;;;:::i;:::-;;:::i;24985:428::-;;;:::i;21295:30::-;;;;;;;;;43460:260;;;;;;:::i;:::-;;:::i;20491:58::-;;20542:7;20491:58;;21448:26;;;;;;36543:108;;;;;;:::i;:::-;;:::i;21006:29::-;;;;;;42839:436;;;;;;:::i;:::-;;:::i;33270:479::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2751:189::-;;;;;;:::i;:::-;;:::i;29019:2417::-;;;;;;:::i;:::-;;:::i;42620:213::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;;;;;;;;;42697:18:::1;:16;:18::i;:::-;42763:11;::::0;42731:58:::1;::::0;;27438:25:1;;;27494:2;27479:18;;27472:34;;;42751:10:0::1;::::0;42731:58:::1;::::0;27411:18:1;42731:58:0::1;;;;;;;42800:11;:26:::0;42620:213::o;20679:26::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20679:26:0;;;;;;;;;;;:::o;27594:1362::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;21830:8:::1;:15:::0;27811:4;;21823:22;::::1;21815:54;;;::::0;::::1;::::0;;16949:2:1;21815:54:0::1;::::0;::::1;16931:21:1::0;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0::1;16747:343:1::0;21815:54:0::1;27856:2:::2;27835:23:::0;::::2;;27827:59;;;::::0;::::2;::::0;;14342:2:1;27827:59:0::2;::::0;::::2;14324:21:1::0;14381:2;14361:18;;;14354:30;14420:25;14400:18;;;14393:53;14463:18;;27827:59:0::2;14140:347:1::0;27827:59:0::2;20643:4;27918:41;::::0;::::2;;;27897:113;;;::::0;::::2;::::0;;13212:2:1;27897:113:0::2;::::0;::::2;13194:21:1::0;13251:2;13231:18;;;13224:30;13290:27;13270:18;;;13263:55;13335:18;;27897:113:0::2;13010:349:1::0;27897:113:0::2;20542:7;28041:16;:44;;28020:120;;;::::0;::::2;::::0;;22626:2:1;28020:120:0::2;::::0;::::2;22608:21:1::0;22665:2;22645:18;;;22638:30;22704:31;22684:18;;;22677:59;22753:18;;28020:120:0::2;22424:353:1::0;28020:120:0::2;28169:18;28151:286;28205:30:::0;;::::2;28151:286;;;28311:51;28338:10;;28349;28338:22;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;6811:20:::0;6857:8;;;6495:377;28311:51:::2;28286:140;;;::::0;::::2;::::0;;16590:2:1;28286:140:0::2;::::0;::::2;16572:21:1::0;16629:2;16609:18;;;16602:30;16668:32;16648:18;;;16641:60;16718:18;;28286:140:0::2;16388:354:1::0;28286:140:0::2;28249:12;::::0;::::2;:::i;:::-;;;28151:286;;;;28447:18;:16;:18::i;:::-;28576:11;28536:8;28545:4;28536:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;;28506:15;;:55;;;;:::i;:::-;:81;;;;:::i;:::-;28476:15;:111;;;;28626:11;28598:8;28607:4;28598:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;:39;;;;28677:13;28647:8;28656:4;28647:14;;;;;;;;:::i;:::-;;;;;;;;;;;:27;;;:43;;;;;;;;;;;;;;;;;;28733:16;28700:8;28709:4;28700:14;;;;;;;;:::i;:::-;;;;;;;;;;;:30;;:49;;;;28786:10;;28759:8;28768:4;28759:14;;;;;;;;:::i;:::-;;;;;;;;;;;:24;;:37;;;;;;;:::i;:::-;;28929:10;;28812:137;;;;;;;:::i;:::-;;::::0;;;;;::::2;::::0;;27129:25:1;;;27202:6;27190:19;;27185:2;27170:18;;27163:47;27226:18;;;27219:34;;;28812:137:0;28829:4;;28812:137:::2;::::0;27117:2:1;27102:18;28812:137:0::2;;;;;;;2160:1:::1;27594:1362:::0;;;;;;:::o;33810:316::-;21830:8;:15;33936:4;;33913;;21823:22;;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;33956:21:::1;33980:14:::0;;;:8:::1;:14;::::0;;;;;;;:21:::1;::::0;::::1;::::0;;;;;;;34049:14:::1;::::0;34030:15:::1;:33;::::0;::::1;::::0;:89:::1;;;34098:4;:21;;;34079:15;:40;;34030:89;34011:108:::0;33810:316;-1:-1:-1;;;;;33810:316:0:o;45751:463::-;45857:15;;;;45843:10;:29;45822:141;;;;;;;18071:2:1;45822:141:0;;;18053:21:1;18110:2;18090:18;;;18083:30;18149:34;18129:18;;;18122:62;18220:34;18200:18;;;18193:62;18292:3;18271:19;;;18264:32;18313:19;;45822:141:0;17869:469:1;45822:141:0;45994:30;;;45973:127;;;;;;;13566:2:1;45973:127:0;;;13548:21:1;13605:2;13585:18;;;13578:30;13644:34;13624:18;;;13617:62;13715:20;13695:18;;;13688:48;13753:19;;45973:127:0;13364:414:1;45973:127:0;46110:15;:34;;;;;;;;;;;;;46159:48;;46178:10;;46159:48;;-1:-1:-1;;46159:48:0;45751:463;:::o;38272:1367::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;21830:8:::1;:15:::0;38383:4;;21823:22;::::1;21815:54;;;::::0;::::1;::::0;;16949:2:1;21815:54:0::1;::::0;::::1;16931:21:1::0;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0::1;16747:343:1::0;21815:54:0::1;38403:21:::2;38427:8;38436:4;38427:14;;;;;;;;:::i;:::-;;::::0;;;::::2;::::0;;;38475;;;:8:::2;:14:::0;;;;;;38490:10:::2;38475:26:::0;;;;;;;38592:11;;38427:14:::2;::::0;;::::2;::::0;;::::2;::::0;-1:-1:-1;38592:22:0;-1:-1:-1;38592:22:0::2;38584:67;;;::::0;::::2;::::0;;17710:2:1;38584:67:0::2;::::0;::::2;17692:21:1::0;;;17729:18;;;17722:30;17788:34;17768:18;;;17761:62;17840:18;;38584:67:0::2;17508:356:1::0;38584:67:0::2;38737:7;38721:4;:12;;;:23;;38713:67;;;::::0;::::2;::::0;;15819:2:1;38713:67:0::2;::::0;::::2;15801:21:1::0;15858:2;15838:18;;;15831:30;15897:33;15877:18;;;15870:61;15948:18;;38713:67:0::2;15617:355:1::0;38713:67:0::2;38791:17;38803:4;38791:11;:17::i;:::-;38819:29;38843:4;38819:23;:29::i;:::-;38863:11:::0;;38859:243:::2;;38905:7;38890:4;:11;;;:22;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;38963:5:0::2;::::0;38938:12;;38963:5:::2;38938:12:::0;;::::2;38963:5:::0;::::2;38930:39;38926:106;;;39010:7;38989:17;;:28;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;38926:106:0::2;39045:12:::0;;:46:::2;::::0;:12:::2;;39071:10;39083:7:::0;39045:25:::2;:46::i;:::-;39157:21;::::0;::::2;::::0;39143:11;;39194:19:::2;::::0;39143:35:::2;::::0;::::2;:::i;:::-;39142:71;;;;:::i;:::-;39112:15;::::0;::::2;:101:::0;39242:18:::2;39224:283;39291:14;::::0;::::2;:21:::0;39278:34;::::2;39224:283;;;39363:4;:14;;39378:10;39363:26;;;;;;;;:::i;:::-;;::::0;;;::::2;::::0;;;::::2;::::0;39471:11;;39363:133:::2;::::0;;;;::::2;::::0;::::2;26385:25:1::0;;;39443:10:0::2;26426:18:1::0;;;26419:83;26518:18;;;26511:34;;;;39363:26:0::2;::::0;;::::2;::::0;:40:::2;::::0;26358:18:1;;39363:133:0::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;39326:12;;;;:::i;:::-;;;39224:283;;;-1:-1:-1::0;39521:11:0;;39517:65:::2;;39564:7;39548:4;:12;;;:23;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;39517:65:0::2;39597:35;::::0;25837:25:1;;;39618:4:0;;39606:10:::2;::::0;39597:35:::2;::::0;25825:2:1;25810:18;39597:35:0::2;;;;;;;-1:-1:-1::0;;4793:1:0;5718:22;;-1:-1:-1;;;38272:1367:0:o;31500:1715::-;31633:26;31673:23;31710:25;31749:30;31597:4;21830:8;:15;;;;21823:4;:22;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;31804:21:::1;31828:8;31837:4;31828:14;;;;;;;;:::i;:::-;;;;;;;;;;;31804:38;;31879:4;:14;;:21;;;;31903:1;31879:25;;;;:::i;:::-;31865:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;31865:40:0::1;-1:-1:-1::0;31938:14:0::1;::::0;::::1;:21:::0;31853:52;;-1:-1:-1;31938:25:0::1;::::0;31962:1:::1;31938:25;:::i;:::-;31925:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;31999:14:0::1;::::0;::::1;:21:::0;31915:49;;-1:-1:-1;31999:25:0::1;::::0;32023:1:::1;31999:25;:::i;:::-;31985:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;31985:40:0::1;-1:-1:-1::0;32065:14:0::1;::::0;::::1;:21:::0;31974:51;;-1:-1:-1;32065:25:0::1;::::0;32089:1:::1;32065:25;:::i;:::-;32051:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;32051:40:0::1;-1:-1:-1::0;32125:5:0::1;::::0;32102:12;;32035:56;;-1:-1:-1;32125:5:0::1;;::::0;32102:9;;32125:5:::1;::::0;32102:12:::1;;;;:::i;:::-;:29;::::0;;::::1;:12;::::0;;::::1;::::0;;;;;:29;32167:5:::1;::::0;32154:32:::1;::::0;32167:5:::1;32154:30;:32::i;:::-;32141:7;32149:1;32141:10;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;:45;32223:5:::1;::::0;32210:34:::1;::::0;32223:5:::1;;32210:32;:34::i;:::-;32196:48;;:8;32205:1;32196:11;;;;;;;;:::i;:::-;;;;;;:48;;;::::0;::::1;32255:13;32271:4;32255:20;;32285:17;32381:15;;32351;;32325:11;;32305:5;:31;;;;:::i;:::-;:61;;;;:::i;:::-;:91;;;;:::i;:::-;32285:111;;32526:5;32496:15;;32471:9;32457:11;;32439:4;:15;;;:29;;;;:::i;:::-;:41;;;;:::i;:::-;32438:73;;;;:::i;:::-;:93;;;;:::i;:::-;32407:13;32421:1;32407:16;;;;;;;;:::i;:::-;;;;;;:124;;;::::0;::::1;32560:18;32542:667;32609:14;::::0;::::1;:21:::0;32596:34;::::1;32542:667;;;32734:4;:14;;32749:10;32734:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;::::1;::::0;:40:::1;::::0;;;;;;;:26:::1;::::0;;::::1;::::0;:38:::1;::::0;:40:::1;::::0;;::::1;::::0;;;;;;:26;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32681:9:::0;32691:14:::1;:10:::0;32704:1:::1;32691:14;:::i;:::-;32681:25;;;;;;;;:::i;:::-;;;;;;:107;;;;;;;;;::::0;::::1;32829:97;32859:4;:14;;32874:10;32859:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;::::1;::::0;:40:::1;::::0;;;;;;;:26:::1;::::0;;::::1;::::0;:38:::1;::::0;:40:::1;::::0;;::::1;::::0;;;;;;:26;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32829:95;;;:97::i;:::-;32803:7:::0;32811:14:::1;:10:::0;32824:1:::1;32811:14;:::i;:::-;32803:23;;;;;;;;:::i;:::-;;;;;;:123;;;;32968:99;32998:4;:14;;33013:10;32998:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;::::1;::::0;:40:::1;::::0;;;;;;;:26:::1;::::0;;::::1;::::0;:38:::1;::::0;:40:::1;::::0;;::::1;::::0;;;;;;:26;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32968:97;;;:99::i;:::-;32941:126;;:8:::0;32950:14:::1;:10:::0;32963:1:::1;32950:14;:::i;:::-;32941:24;;;;;;;;:::i;:::-;;;;;;:126;;;::::0;::::1;33114:4;:31;;33146:10;33114:43;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;:84:::1;::::0;;;;::::1;::::0;::::1;25837:25:1::0;;;33114:43:0::1;::::0;;::::1;::::0;:78:::1;::::0;25810:18:1;;33114:84:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;33082:13:::0;33096:14:::1;:10:::0;33109:1:::1;33096:14;:::i;:::-;33082:29;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;:116;32644:12:::1;::::0;::::1;:::i;:::-;;;32542:667;;;;31794:1421;;;31500:1715:::0;;;;;;:::o;25721:1763::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;25968:2:::1;25947:23:::0;::::1;;25939:59;;;::::0;::::1;::::0;;18545:2:1;25939:59:0::1;::::0;::::1;18527:21:1::0;18584:2;18564:18;;;18557:30;18623:25;18603:18;;;18596:53;18666:18;;25939:59:0::1;18343:347:1::0;25939:59:0::1;20643:4;26029:41;::::0;::::1;;;26008:113;;;::::0;::::1;::::0;;24161:2:1;26008:113:0::1;::::0;::::1;24143:21:1::0;24200:2;24180:18;;;24173:30;24239:27;24219:18;;;24212:55;24284:18;;26008:113:0::1;23959:349:1::0;26008:113:0::1;20542:7;26152:16;:44;;26131:120;;;::::0;::::1;::::0;;15461:2:1;26131:120:0::1;::::0;::::1;15443:21:1::0;15500:2;15480:18;;;15473:30;15539:31;15519:18;;;15512:59;15588:18;;26131:120:0::1;15259:353:1::0;26131:120:0::1;6811:20:::0;;26261:122:::1;;;::::0;::::1;::::0;;22984:2:1;26261:122:0::1;::::0;::::1;22966:21:1::0;23023:2;23003:18;;;22996:30;23062:34;23042:18;;;23035:62;23133:8;23113:18;;;23106:36;23159:19;;26261:122:0::1;22782:402:1::0;26261:122:0::1;26412:18;26394:286;26448:30:::0;;::::1;26394:286;;;26554:51;26581:10;;26592;26581:22;;;;;;;:::i;26554:51::-;26529:140;;;::::0;::::1;::::0;;18897:2:1;26529:140:0::1;::::0;::::1;18879:21:1::0;18936:2;18916:18;;;18909:30;18975:32;18955:18;;;18948:60;19025:18;;26529:140:0::1;18695:354:1::0;26529:140:0::1;26492:12;::::0;::::1;:::i;:::-;;;26394:286;;;;26690:18;:16;:18::i;:::-;26719:27;26767:14;;26749:15;:32;:91;;26826:14;;26749:91;;;26796:15;26749:91;26719:121;;26870:11;26851:15;;:30;;;;;;;:::i;:::-;;;;;;;;26892:8;26919:358;;;;;;;;26955:8;26919:358;;;;;;26993:11;26919:358;;;;27043:19;26919:358;;;;27098:1;26919:358;;;;27131:13;26919:358;;;;;;27179:16;26919:358;;;;27222:1;26919:358;;;;27252:10;;26919:358;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;-1:-1:-1;26919:358:0;;;;-1:-1:-1;;26892:395:0;;::::1;::::0;;::::1;::::0;;;;;::::1;::::0;;;;;;::::1;::::0;;::::1;;::::0;;;::::1;;::::0;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;;::::0;;::::1;::::0;;;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;-1:-1:-1;26892:395:0::1;::::0;::::1;::::0;;;;::::1;::::0;::::1;:::i;:::-;;;;27457:10;;27303:174;;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;27320:8:::1;:15:::0;27303:174:::1;::::0;::::1;::::0;27320:19:::1;::::0;27338:1:::1;::::0;27320:19:::1;:::i;:::-;27303:174;::::0;;27129:25:1;;;27202:6;27190:19;;27185:2;27170:18;;27163:47;27226:18;;;27219:34;;;27303:174:0::1;::::0;27117:2:1;27102:18;27303:174:0::1;;;;;;;25929:1555;25721:1763:::0;;;;;;:::o;36070:423::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;21830:8:::1;:15:::0;36267:3;;21823:22;::::1;21815:54;;;::::0;::::1;::::0;;16949:2:1;21815:54:0::1;::::0;::::1;16931:21:1::0;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0::1;16747:343:1::0;21815:54:0::1;36282:21:::2;36306:8;36315:3;36306:13;;;;;;;;:::i;:::-;;::::0;;;::::2;::::0;;;::::2;::::0;;::::2;;36366:12:::0;;36390:65:::2;::::0;;;;36402:10:::2;36390:65;::::0;::::2;9349:34:1::0;36422:4:0::2;9399:18:1::0;;;9392:43;9451:18;;;9444:34;;;9494:18;;;9487:34;;;9570:4;9558:17;;9537:19;;;9530:46;9592:19;;;9585:35;;;9636:19;;;9629:35;;;36306:13:0;;-1:-1:-1;36366:12:0::2;;::::0;;;36390:11:::2;::::0;9260:19:1;;36390:65:0::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;36465:21;36474:3;36479:6;36465:8;:21::i;:::-;-1:-1:-1::0;;4793:1:0;5718:22;;-1:-1:-1;;;;;;;36070:423:0:o;34558:90::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;34624:17:::1;34636:4:::0;34624:11:::1;:17::i;:::-;-1:-1:-1::0;4793:1:0;5718:22;;34558:90::o;39707:984::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;;;;39778:21:::1;39802:8;39811:4;39802:14;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;39850;;;:8:::1;:14:::0;;;;;;39865:10:::1;39850:26:::0;;;;;;;39903:11;;39802:14:::1;::::0;;;::::1;::::0;;::::1;39997:12;::::0;::::1;::::0;39802:14;;-1:-1:-1;;;39997:22:0::1;39976:110;;;::::0;::::1;::::0;;19256:2:1;39976:110:0::1;::::0;::::1;19238:21:1::0;19295:2;19275:18;;;19268:30;19334:34;19314:18;;;19307:62;19405:11;19385:18;;;19378:39;19434:19;;39976:110:0::1;19054:405:1::0;39976:110:0::1;40111:1;40097:15:::0;;;40122::::1;::::0;::::1;:19:::0;;;40151::::1;::::0;::::1;:23:::0;;;40184:21:::1;::::0;::::1;:25:::0;;;40219:12:::1;::::0;::::1;:22:::0;;40235:6;;40111:1;40219:22:::1;::::0;40235:6;;40219:22:::1;:::i;:::-;::::0;;;-1:-1:-1;40270:18:0::1;::::0;-1:-1:-1;40252:211:0::1;40319:14;::::0;::::1;:21:::0;40306:34;::::1;40252:211;;;40391:4;:14;;40406:10;40391:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;::::1;::::0;:61:::1;::::0;;;;::::1;::::0;::::1;26385:25:1::0;;;40438:10:0::1;26426:18:1::0;;;26419:83;26518:18;;;26511:34;;;;40391:26:0::1;;::::0;:40:::1;::::0;26358:18:1;;40391:61:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;40354:12;;;;:::i;:::-;;;40252:211;;;-1:-1:-1::0;40510:5:0::1;::::0;40485:12;;40510:5:::1;40485:12:::0;;::::1;40510:5:::0;::::1;40477:39;40473:97;;;40553:6;40532:17;;:27;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;40473:97:0::1;40580:12:::0;;:45:::1;::::0;:12:::1;;40606:10;40618:6:::0;40580:25:::1;:45::i;:::-;40641:43;::::0;25837:25:1;;;40671:4:0;;40659:10:::1;::::0;40641:43:::1;::::0;25825:2:1;25810:18;40641:43:0::1;;;;;;;-1:-1:-1::0;;4793:1:0;5718:22;;-1:-1:-1;;39707:984:0:o;34206:84::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;34265::::1;:16;:18::i;:::-;4793:1:::0;5718:22;;34206:84::o;43281:111::-;43338:7;43364:8;43373:3;43364:13;;;;;;;;:::i;:::-;;;;;;;;;;;:21;;;43357:28;;43281:111;;;:::o;44721:471::-;44827:15;;;;44813:10;:29;44792:149;;;;;;;21375:2:1;44792:149:0;;;21357:21:1;21414:2;21394:18;;;21387:30;21453:34;21433:18;;;21426:62;21524:34;21504:18;;;21497:62;21596:11;21575:19;;;21568:40;21625:19;;44792:149:0;21173:477:1;44792:149:0;44972:30;;;44951:127;;;;;;;19666:2:1;44951:127:0;;;19648:21:1;19705:2;19685:18;;;19678:30;19744:34;19724:18;;;19717:62;19815:20;19795:18;;;19788:48;19853:19;;44951:127:0;19464:414:1;44951:127:0;45088:15;:34;;;;;;;;;;;;;45137:48;;45156:10;;45137:48;;-1:-1:-1;;45137:48:0;44721:471;:::o;43783:423::-;43881:11;;;;43867:10;:25;43846:137;;;;;;;20901:2:1;43846:137:0;;;20883:21:1;20940:2;20920:18;;;20913:30;20979:34;20959:18;;;20952:62;21050:34;21030:18;;;21023:62;21122:3;21101:19;;;21094:32;21143:19;;43846:137:0;20699:469:1;43846:137:0;44014:26;;;43993:115;;;;;;;16179:2:1;43993:115:0;;;16161:21:1;16218:2;16198:18;;;16191:30;16257:34;16237:18;;;16230:62;16328:12;16308:18;;;16301:40;16358:19;;43993:115:0;15977:406:1;43993:115:0;44118:11;:26;;;;;;;;;;;;;44159:40;;44174:10;;44159:40;;-1:-1:-1;;44159:40:0;43783:423;:::o;2510:92::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;2574:21:::1;2592:1;2574:9;:21::i;:::-;2510:92::o:0;46220:486::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;46348:4:::1;46325:19;:27;;46304:117;;;::::0;::::1;::::0;;24875:2:1;46304:117:0::1;::::0;::::1;24857:21:1::0;24914:2;24894:18;;;24887:30;24953:34;24933:18;;;24926:62;25024:13;25004:18;;;24997:41;25055:19;;46304:117:0::1;24673:407:1::0;46304:117:0::1;46507:4;46488:15;;46466:19;46452:11;;:33;;;;:::i;:::-;:51;;;;:::i;:::-;:59;;46431:150;;;::::0;::::1;::::0;;17297:2:1;46431:150:0::1;::::0;::::1;17279:21:1::0;17336:2;17316:18;;;17309:30;17375:34;17355:18;;;17348:62;17446:14;17426:18;;;17419:42;17478:19;;46431:150:0::1;17095:408:1::0;46431:150:0::1;46615:15;::::0;46596:56:::1;::::0;;27438:25:1;;;27494:2;27479:18;;27472:34;;;46596:56:0::1;::::0;27411:18:1;46596:56:0::1;;;;;;;46662:15;:37:::0;46220:486::o;45198:::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;45326:4:::1;45303:19;:27;;45282:117;;;::::0;::::1;::::0;;20489:2:1;45282:117:0::1;::::0;::::1;20471:21:1::0;20528:2;20508:18;;;20501:30;20567:34;20547:18;;;20540:62;20638:13;20618:18;;;20611:41;20669:19;;45282:117:0::1;20287:407:1::0;45282:117:0::1;45485:4;45466:15;;45444:19;45430:11;;:33;;;;:::i;:::-;:51;;;;:::i;:::-;:59;;45409:150;;;::::0;::::1;::::0;;25287:2:1;45409:150:0::1;::::0;::::1;25269:21:1::0;25326:2;25306:18;;;25299:30;25365:34;25345:18;;;25338:62;25436:14;25416:18;;;25409:42;25468:19;;45409:150:0::1;25085:408:1::0;45409:150:0::1;45593:15;::::0;45574:56:::1;::::0;;27438:25:1;;;27494:2;27479:18;;27472:34;;;45574:56:0::1;::::0;27411:18:1;45574:56:0::1;;;;;;;45640:15;:37:::0;45198:486::o;44212:446::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;44328:4:::1;44309:15;:23;;44288:109;;;::::0;::::1;::::0;;21857:2:1;44288:109:0::1;::::0;::::1;21839:21:1::0;21896:2;21876:18;;;21869:30;21935:34;21915:18;;;21908:62;22006:9;21986:18;;;21979:37;22033:19;;44288:109:0::1;21655:403:1::0;44288:109:0::1;44483:4;44464:15;;44446;44428;;:33;;;;:::i;:::-;:51;;;;:::i;:::-;:59;;44407:146;;;::::0;::::1;::::0;;23391:2:1;44407:146:0::1;::::0;::::1;23373:21:1::0;23430:2;23410:18;;;23403:30;23469:34;23449:18;;;23442:62;23540:10;23520:18;;;23513:38;23568:19;;44407:146:0::1;23189:404:1::0;44407:146:0::1;44583:11;::::0;44568:44:::1;::::0;;27438:25:1;;;27494:2;27479:18;;27472:34;;;44568:44:0::1;::::0;27411:18:1;44568:44:0::1;;;;;;;44622:11;:29:::0;44212:446::o;24985:428::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;25075:14:::1;;25057:15;:32;25036:114;;;::::0;::::1;::::0;;20085:2:1;25036:114:0::1;::::0;::::1;20067:21:1::0;20124:2;20104:18;;;20097:30;20163:34;20143:18;;;20136:62;20234:5;20214:18;;;20207:33;20257:19;;25036:114:0::1;19883:399:1::0;25036:114:0::1;25178:8;:15:::0;25161:14:::1;25203:161;25231:6;25225:3;:12;25203:161;;;25260:21;25284:8;25293:3;25284:13;;;;;;;;:::i;:::-;;;;;;;;;;;25260:37;;25338:15;25311:4;:24;;:42;;;;25246:118;25239:5;;;;:::i;:::-;;;25203:161;;;-1:-1:-1::0;;25391:15:0::1;25374:14;:32:::0;24985:428::o;43460:260::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;43561:2:::1;43545:18:::0;::::1;;43537:62;;;::::0;::::1;::::0;;15101:2:1;43537:62:0::1;::::0;::::1;15083:21:1::0;15140:2;15120:18;;;15113:30;15179:33;15159:18;;;15152:61;15230:18;;43537:62:0::1;14899:355:1::0;43537:62:0::1;43614:13;43609:105;43633:20:::0;;::::1;43609:105;;;43678:25;43687:5;;43693;43687:12;;;;;;;:::i;:::-;;;;;;;43701:1;43678:8;:25::i;:::-;43655:7;::::0;::::1;:::i;:::-;;;43609:105;;;-1:-1:-1::0;;4793:1:0;5718:22;;-1:-1:-1;43460:260:0:o;36543:108::-;4836:1;5415:7;;:19;;5407:63;;;;;;;24515:2:1;5407:63:0;;;24497:21:1;24554:2;24534:18;;;24527:30;24593:33;24573:18;;;24566:61;24644:18;;5407:63:0;24313:355:1;5407:63:0;4836:1;5545:7;:18;36621:23:::1;36630:4:::0;36636:7;36621:8:::1;:23::i;:::-;-1:-1:-1::0;;4793:1:0;5718:22;;36543:108::o;42839:436::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;42947:18:::1;:16;:18::i;:::-;43013:10;42981:116;;;43037:8;43046:4;43037:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;;43076:11;42981:116;;;;;;27438:25:1::0;;;27494:2;27479:18;;27472:34;27426:2;27411:18;;27264:248;42981:116:0::1;;;;;;;;43208:11;43168:8;43177:4;43168:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;;43138:15;;:55;;;;:::i;:::-;:81;;;;:::i;:::-;43108:15;:111;;;;43257:11;43229:8;43238:4;43229:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;:39;;;;42839:436:::0;;:::o;33270:479::-;21830:8;:15;33386:26;;33363:4;;21823:22;;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;33428:21:::1;33452:8;33461:4;33452:14;;;;;;;;:::i;:::-;;;;;;;;;;;33428:38;;33502:4;:14;;:21;;;;33488:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;33488:36:0::1;;33476:48;;33552:18;33534:209;33601:14;::::0;::::1;:21:::0;33588:34;::::1;33534:209;;;33705:4;:14;;33720:10;33705:26;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;33673:9;33683:10;33673:21;;;;;;;;:::i;:::-;:59;::::0;;::::1;:21;::::0;;::::1;::::0;;;;;;;:59;33636:12:::1;::::0;::::1;:::i;:::-;;;33534:209;;;;33418:331;33270:479:::0;;;;:::o;2751:189::-;1924:7;1950:6;2090:23;1950:6;784:10;2090:23;2082:68;;;;;;;22265:2:1;2082:68:0;;;22247:21:1;;;22284:18;;;22277:30;22343:34;22323:18;;;22316:62;22395:18;;2082:68:0;22063:356:1;2082:68:0;2839:22:::1;::::0;::::1;2831:73;;;::::0;::::1;::::0;;14694:2:1;2831:73:0::1;::::0;::::1;14676:21:1::0;14733:2;14713:18;;;14706:30;14772:34;14752:18;;;14745:62;14843:8;14823:18;;;14816:36;14869:19;;2831:73:0::1;14492:402:1::0;2831:73:0::1;2914:19;2924:8;2914:9;:19::i;:::-;2751:189:::0;:::o;29019:2417::-;29163:26;29203:23;29240:25;29279:24;29127:4;21830:8;:15;;;;21823:4;:22;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;29328:21:::1;29352:8;29361:4;29352:14;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;29400;;;:8:::1;:14:::0;;;;;;:21:::1;::::0;::::1;::::0;;;;;;;29458::::1;29352:14;::::0;;::::1;::::0;;::::1;29458:21:::0;;::::1;::::0;29508:12:::1;::::0;::::1;::::0;29553:24:::1;::::0;::::1;::::0;29352:14;;-1:-1:-1;29458:21:0;;29535:15:::1;:42;:59:::0;::::1;;;-1:-1:-1::0;29581:13:0;;::::1;29535:59;29531:638;;;29610:18;29649:4;:24;;;29631:15;:42;;;;:::i;:::-;29610:63;;29687:13;29703:4;29687:20;;29721:17;29829:15;;29795;;29765:11;;29741:5;:35;;;;:::i;:::-;:69;;;;:::i;:::-;:103;;;;:::i;:::-;29721:123;;29859:19;30038:5;30004:15;;29975:9;29941:4;:15;;;29911:11;;29882:10;:40;;;;:::i;:::-;:74;;;;:::i;:::-;:102;;;;:::i;:::-;29881:138;;;;:::i;:::-;:162;;;;:::i;:::-;29859:184:::0;-1:-1:-1;30135:8:0;30098:33:::1;30112:19;29859:184:::0;30098:33:::1;:::i;:::-;30097:46;;;;:::i;:::-;30058:100;::::0;;::::1;:::i;:::-;;;29596:573;;;;29531:638;30179:20;30293:4;:19;;;30274:4;:15;;;30251:19;30219:16;30205:4;:11;;;:30;;;;:::i;:::-;30204:66;;;;:::i;:::-;30203:86;;;;:::i;:::-;30202:110;;;;:::i;:::-;30349:14;::::0;::::1;:21:::0;30179:133;;-1:-1:-1;30349:25:0::1;::::0;30373:1:::1;30349:25;:::i;:::-;30335:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;30335:40:0::1;-1:-1:-1::0;30408:14:0::1;::::0;::::1;:21:::0;30323:52;;-1:-1:-1;30408:25:0::1;::::0;30432:1:::1;30408:25;:::i;:::-;30395:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;30468:14:0::1;::::0;::::1;:21:::0;30385:49;;-1:-1:-1;30468:25:0::1;::::0;30492:1:::1;30468:25;:::i;:::-;30454:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;30454:40:0::1;-1:-1:-1::0;30529:14:0::1;::::0;::::1;:21:::0;30444:50;;-1:-1:-1;30529:25:0::1;::::0;30553:1:::1;30529:25;:::i;:::-;30515:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;30515:40:0::1;-1:-1:-1::0;30589:5:0::1;::::0;30566:12;;30504:51;;-1:-1:-1;30589:5:0::1;;::::0;30566:9;;30589:5:::1;::::0;30566:12:::1;;;;:::i;:::-;:29;::::0;;::::1;:12;::::0;;::::1;::::0;;;;;:29;30631:5:::1;::::0;30618:32:::1;::::0;30631:5:::1;30618:30;:32::i;:::-;30605:7;30613:1;30605:10;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;:45;30687:5:::1;::::0;30674:34:::1;::::0;30687:5:::1;;30674:32;:34::i;:::-;30660:48;;:8;30669:1;30660:11;;;;;;;;:::i;:::-;;;;;;:48;;;::::0;::::1;30731:12;30718:7;30726:1;30718:10;;;;;;;;:::i;:::-;;;;;;:25;;;::::0;::::1;30772:18;30754:676;30821:14;::::0;::::1;:21:::0;30808:34;::::1;30754:676;;;30946:4;:14;;30961:10;30946:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;::::1;::::0;:40:::1;::::0;;;;;;;:26:::1;::::0;;::::1;::::0;:38:::1;::::0;:40:::1;::::0;;::::1;::::0;;;;;;:26;:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;30893:9:::0;30903:14:::1;:10:::0;30916:1:::1;30903:14;:::i;:::-;30893:25;;;;;;;;:::i;:::-;;;;;;:107;;;;;;;;;::::0;::::1;31041:97;31071:4;:14;;31086:10;31071:26;;;;;;;;:::i;31041:97::-;31015:7:::0;31023:14:::1;:10:::0;31036:1:::1;31023:14;:::i;:::-;31015:23;;;;;;;;:::i;:::-;;;;;;:123;;;;31180:99;31210:4;:14;;31225:10;31210:26;;;;;;;;:::i;31180:99::-;31153:126;;:8:::0;31162:14:::1;:10:::0;31175:1:::1;31162:14;:::i;:::-;31153:24;;;;;;;;:::i;:::-;;;;;;:126;;;::::0;::::1;31320:4;:14;;31335:10;31320:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;:99:::1;::::0;;;;::::1;::::0;::::1;26047:25:1::0;;;31320:26:0::1;26108:55:1::0;;;26088:18;;;26081:83;31320:26:0;;::::1;::::0;:40:::1;::::0;26020:18:1;;31320:99:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;31294:7:::0;31302:14:::1;:10:::0;31315:1:::1;31302:14;:::i;:::-;31294:23;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;:125;30856:12:::1;::::0;::::1;:::i;:::-;;;30754:676;;;;29318:2118;;;;;29019:2417:::0;;;;;;;;:::o;34339:146::-;34391:11;34386:93;34414:8;:15;34408:21;;34386:93;;;34452:16;34464:3;34452:11;:16::i;:::-;34431:5;;;:::i;:::-;;;34386:93;;34693:1371;21830:8;:15;34755:4;;21823:22;;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;34771:21:::1;34795:8;34804:4;34795:14;;;;;;;;:::i;:::-;;;;;;;;;;;34771:38;;34843:4;:24;;;34824:15;:43;34820:80;;34883:7;34693:1371:::0;;:::o;34820:80::-:1;34929:12;::::0;::::1;::::0;34956:13;;;:37:::1;;-1:-1:-1::0;34973:15:0::1;::::0;::::1;::::0;:20;34956:37:::1;34952:130;;;-1:-1:-1::0;35036:15:0::1;35009:24;::::0;;::::1;:42:::0;34693:1371;;:::o;34952:130::-:1;35092:18;35131:4;:24;;;35113:15;:42;;;;:::i;:::-;35092:63;;35166:19;35249:15;;35218:4;:15;;;35203:11;;35190:10;:24;;;;:::i;:::-;35189:44;;;;:::i;:::-;35188:76;;;;:::i;:::-;35166:98;;35275:13;35291:4;35275:20;;35305:17;35401:15;;35371;;35345:11;;35325:5;:31;;;;:::i;:::-;:61;;;;:::i;:::-;:91;;;;:::i;:::-;35427:5;::::0;35438:11:::1;::::0;35466::::1;::::0;35305:111;;-1:-1:-1;35427:5:0::1;::::0;;::::1;::::0;:10:::1;::::0;35438:11;;::::1;::::0;35481:5;;35452:25:::1;::::0;:11;:25:::1;:::i;:::-;35451:35;;;;:::i;:::-;35427:60;::::0;;::::1;::::0;;;;;;9879:42:1;9867:55;;;35427:60:0::1;::::0;::::1;9849:74:1::0;9939:18;;;9932:34;9822:18;;35427:60:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;35497:5:0::1;::::0;35508:15:::1;::::0;35540::::1;::::0;35497:5:::1;::::0;;::::1;::::0;-1:-1:-1;35497:10:0::1;::::0;-1:-1:-1;35508:15:0;::::1;::::0;35559:5;;35526:29:::1;::::0;:11;:29:::1;:::i;:::-;35525:39;;;;:::i;:::-;35497:68;::::0;;::::1;::::0;;;;;;9879:42:1;9867:55;;;35497:68:0::1;::::0;::::1;9849:74:1::0;9939:18;;;9932:34;9822:18;;35497:68:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;35575:5:0::1;::::0;35586:15:::1;::::0;35618::::1;::::0;35575:5:::1;::::0;;::::1;::::0;-1:-1:-1;35575:10:0::1;::::0;-1:-1:-1;35586:15:0;::::1;::::0;35637:5;;35604:29:::1;::::0;:11;:29:::1;:::i;:::-;35603:39;;;;:::i;:::-;35575:68;::::0;;::::1;::::0;;;;;;9879:42:1;9867:55;;;35575:68:0::1;::::0;::::1;9849:74:1::0;9939:18;;;9932:34;9822:18;;35575:68:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;35653:5:0::1;::::0;::::1;;::::0;-1:-1:-1;35653:10:0::1;::::0;-1:-1:-1;35672:4:0::1;35707:5:::0;35680:23:::1;35694:9:::0;35680:11;:23:::1;:::i;:::-;35679:33;;;;:::i;:::-;35653:60;::::0;;::::1;::::0;;;;;;9879:42:1;9867:55;;;35653:60:0::1;::::0;::::1;9849:74:1::0;9939:18;;;9932:34;9822:18;;35653:60:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;;35823:12:0::1;::::0;::::1;::::0;35850:5;;-1:-1:-1;35798:9:0;35762:33:::1;35776:19;35762:11:::0;:33:::1;:::i;:::-;:45;;;;:::i;:::-;35761:74;;;;:::i;:::-;:94;;;;:::i;:::-;35724:4;:21;;;:131;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;35893:15:0::1;35866:24;::::0;::::1;:42:::0;;;36026:21:::1;::::0;::::1;::::0;35924:133:::1;::::0;;27719:25:1;;;27775:2;27760:18;;27753:34;;;27803:18;;27796:34;35948:4:0;;35924:133:::1;::::0;27707:2:1;27692:18;35924:133:0::1;;;;;;;34761:1303;;;;;;21879:1;34693:1371:::0;;:::o;40733:1150::-;40799:21;40823:8;40832:4;40823:14;;;;;;;;:::i;:::-;;;;;;;;;40871;;;:8;:14;;;;;;40886:10;40871:26;;;;;;;40912:21;;;;40823:14;;;;;;;;-1:-1:-1;40912:26:0;:63;;;;;40961:14;;40942:15;:33;;40912:63;40908:156;;;41033:20;;;;41015:38;;:15;:38;:::i;:::-;40991:21;;;:62;40908:156;41074:15;41168:4;:15;;;41145:19;41108:4;:21;;;41094:4;:11;;;:35;;;;:::i;:::-;41093:71;;;;:::i;:::-;41092:91;;;;:::i;:::-;41074:109;;41198:28;41209:4;41215:10;41198;:28::i;:::-;41194:683;;;41256:1;41246:7;:11;:38;;;;41283:1;41261:4;:19;;;:23;41246:38;41242:442;;;41304:22;41339:4;:19;;;41329:7;:29;;;;:::i;:::-;41304:54;;41433:4;:19;;;41409:20;;:43;;;;;;;:::i;:::-;;;;-1:-1:-1;;41492:1:0;41470:19;;;:23;41553:20;;;;41535:38;;:15;:38;:::i;:::-;41511:21;;;:62;41624:45;41642:10;41654:14;41624:17;:45::i;:::-;41286:398;41242:442;41194:683;;;41704:11;;41700:177;;41755:7;41731:20;;:31;;;;;;;:::i;:::-;;;;;;;;41799:7;41776:4;:19;;;:30;;;;;;;:::i;:::-;;;;-1:-1:-1;;41825:41:0;;25837:25:1;;;41852:4:0;;41840:10;;41825:41;;25825:2:1;25810:18;41825:41:0;;;;;;;41700:177;40789:1094;;;40733:1150;:::o;17694:395::-;17882:48;;;17849:19;9867:55:1;;;17882:48:0;;;9849:74:1;9939:18;;;;9932:34;;;17882:48:0;;;;;;;;;;9822:18:1;;;;17882:48:0;;;;;;;;;17905:12;17882:48;;;17849:91;;-1:-1:-1;;;;17849:19:0;;;;:91;;17882:48;17849:91;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17813:127;;;;17971:7;:57;;;;-1:-1:-1;17983:11:0;;:16;;:44;;;18014:4;18003:24;;;;;;;;;;;;:::i;:::-;17950:132;;;;;;;13985:2:1;17950:132:0;;;13967:21:1;14024:2;14004:18;;;13997:30;14063;14043:18;;;14036:58;14111:18;;17950:132:0;13783:352:1;17950:132:0;17803:286;;17694:395;;;:::o;16140:301::-;16331:34;;;;;;;;;;;;;;;;;;16354:10;16331:34;;;16292:83;;16227:13;;16257:12;;;;16292:25;;;;:83;;16331:34;16292:83;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16256:119;;;;16392:7;:42;;;;;;;;;;;;;;;;;;;;;;16402:24;16421:4;16402:18;:24::i;:::-;16385:49;16140:301;-1:-1:-1;;;;16140:301:0:o;17137:288::-;17294:36;;;;;;;;;;;;;;;;;;17317:12;17294:36;;;17255:85;;17202:5;;;;;;17255:25;;;;:85;;17294:36;17255:85;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17219:121;;;;17357:7;:28;;;;;17368:4;:11;17383:2;17368:17;17357:28;:61;;17416:2;17357:61;;;17399:4;17388:25;;;;;;;;;;;;:::i;36701:1543::-;21830:8;:15;36793:4;;21823:22;;21815:54;;;;;;;16949:2:1;21815:54:0;;;16931:21:1;16988:2;16968:18;;;16961:30;17027:21;17007:18;;;17000:49;17066:18;;21815:54:0;16747:343:1;21815:54:0;36813:21:::1;36837:8;36846:4;36837:14;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;36885;;;:8:::1;:14:::0;;;;;;36900:10:::1;36885:26:::0;;;;;;;36837:14:::1;::::0;;::::1;::::0;;::::1;::::0;-1:-1:-1;36922:17:0::1;36894:4:::0;36922:11:::1;:17::i;:::-;36950:29;36974:4;36950:23;:29::i;:::-;36994:11:::0;;36990:719:::1;;37045:12:::0;;:37:::1;::::0;;;;37076:4:::1;37045:37;::::0;::::1;8489:74:1::0;37021:21:0::1;::::0;37045:12:::1;;::::0;:22:::1;::::0;8462:18:1;;37045:37:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;37096:12:::0;;37021:61;;-1:-1:-1;37096:65:0::1;::::0;:12:::1;;37126:10;37146:4;37153:7:::0;37096:29:::1;:65::i;:::-;37198:12:::0;;:37:::1;::::0;;;;37229:4:::1;37198:37;::::0;::::1;8489:74:1::0;37175:20:0::1;::::0;37198:12:::1;;::::0;:22:::1;::::0;8462:18:1;;37198:37:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;37175:60:::0;-1:-1:-1;37260:28:0::1;37275:13:::0;37175:60;37260:28:::1;:::i;:::-;37307:17;::::0;::::1;::::0;37250:38;;-1:-1:-1;37307:17:0::1;;:21:::0;37303:239:::1;;37380:17;::::0;::::1;::::0;37348:18:::1;::::0;37401:5:::1;::::0;37370:27:::1;::::0;37380:17:::1;;37370:7:::0;:27:::1;:::i;:::-;37369:37;;;;:::i;:::-;37450:15;::::0;37424:12;;37348:58;;-1:-1:-1;37424:54:0::1;::::0;37450:15:::1;37424:12:::0;;::::1;::::0;37450:15:::1;37348:58:::0;37424:25:::1;:54::i;:::-;37507:20;37517:10:::0;37507:7;:20:::1;:::i;:::-;37497:30;;37330:212;37303:239;37571:7;37556:4;:11;;;:22;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;37630:5:0::1;::::0;37605:12;;37630:5:::1;37605:12:::0;;::::1;37630:5:::0;::::1;37597:39;37593:106;;;37677:7;37656:17;;:28;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;37593:106:0::1;37007:702;;36990:719;37763:21;::::0;::::1;::::0;37749:11;;37800:19:::1;::::0;37749:35:::1;::::0;::::1;:::i;:::-;37748:71;;;;:::i;:::-;37718:15;::::0;::::1;:101:::0;37848:18:::1;37830:283;37897:14;::::0;::::1;:21:::0;37884:34;::::1;37830:283;;;37969:4;:14;;37984:10;37969:26;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;38077:11;;37969:133:::1;::::0;;;;::::1;::::0;::::1;26385:25:1::0;;;38049:10:0::1;26426:18:1::0;;;26419:83;26518:18;;;26511:34;;;;37969:26:0::1;::::0;;::::1;::::0;:40:::1;::::0;26358:18:1;;37969:133:0::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;37932:12;;;;:::i;:::-;;;37830:283;;;-1:-1:-1::0;38127:11:0;;38123:65:::1;;38170:7;38154:4;:12;;;:23;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;38123:65:0::1;38203:34;::::0;25837:25:1;;;38223:4:0;;38211:10:::1;::::0;38203:34:::1;::::0;25825:2:1;25810:18;38203:34:0::1;;;;;;;36803:1441;;36701:1543:::0;;;:::o;2946:169::-;3001:16;3020:6;;;3036:17;;;;;;;;;;3068:40;;3020:6;;;;;;;3068:40;;3001:16;3068:40;2991:124;2946:169;:::o;41995:619::-;42108:17;;42075:5;;:30;;;;;42099:4;42075:30;;;8489:74:1;42075:5:0;;;;;:15;;8462:18:1;;42075:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:50;42071:537;;;42388:17;;42339:5;;:30;;;;;42363:4;42339:30;;;8489:74:1;42320:16:0;;42388:17;42339:5;;;:15;;8462:18:1;;42339:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:66;;;;:::i;:::-;42320:85;;42434:8;42423:7;:19;42419:179;;42462:5;;:33;;:5;;42481:3;42486:8;42462:18;:33::i;:::-;42127:481;41995:619;;:::o;42419:179::-;42520:11;;42516:82;;42551:5;;:32;;:5;;42570:3;42575:7;42551:18;:32::i;15340:599::-;15434:13;15482:2;15467:4;:11;:17;15463:470;;15518:4;15507:26;;;;;;;;;;;;:::i;:::-;15500:33;15340:599;-1:-1:-1;;15340:599:0:o;15463:470::-;15554:4;:11;15569:2;15554:17;15550:383;;;15587:7;15612:67;15623:2;15619:1;:6;;;:22;;;;;15629:4;15634:1;15629:7;;;;;;;;;;:::i;:::-;;;;;;;:12;;15619:22;15612:67;;;15661:3;;;;:::i;:::-;;;;15612:67;;;15692:23;15728:1;15718:12;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15718:12:0;;15692:38;;15753:1;15749:5;;15744:97;15760:2;15756:1;:6;;;:22;;;;;15766:4;15771:1;15766:7;;;;;;;;;;:::i;:::-;;;;;;;:12;;15756:22;15744:97;;;15819:4;15824:1;15819:7;;;;;;;;;;:::i;:::-;;;;;;;;;15803:10;15814:1;15803:13;;;;;;;;;;:::i;:::-;;;;:23;;;;;;;;;;-1:-1:-1;15780:3:0;;;;:::i;:::-;;;;15744:97;;;15868:10;15340:599;-1:-1:-1;;;15340:599:0:o;15550:383::-;-1:-1:-1;;15910:12:0;;;;;;;;;;;;;;;;;;15340:599::o;15550:383::-;15340:599;;;:::o;18404:436::-;18618:59;;;18585:19;8855:15:1;;;18618:59:0;;;8837:34:1;8907:15;;;8887:18;;;8880:43;8939:18;;;;8932:34;;;18618:59:0;;;;;;;;;;8749:18:1;;;;18618:59:0;;;;;;;;;18641:17;18618:59;;;18585:102;;-1:-1:-1;;;;18585:19:0;;;;:102;;18618:59;18585:102;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18549:138;;;;18718:7;:57;;;;-1:-1:-1;18730:11:0;;:16;;:44;;;18761:4;18750:24;;;;;;;;;;;;:::i;:::-;18697:136;;;;;;;23800:2:1;18697:136:0;;;23782:21:1;;;23819:18;;;23812:30;23878:34;23858:18;;;23851:62;23930:18;;18697:136:0;23598:356:1;18697:136:0;18539:301;;18404:436;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:385:1;95:8;105:6;159:3;152:4;144:6;140:17;136:27;126:55;;177:1;174;167:12;126:55;-1:-1:-1;200:20:1;;243:18;232:30;;229:50;;;275:1;272;265:12;229:50;312:4;304:6;300:17;288:29;;372:3;365:4;355:6;352:1;348:14;340:6;336:27;332:38;329:47;326:67;;;389:1;386;379:12;326:67;14:385;;;;;:::o;404:159::-;471:20;;531:6;520:18;;510:29;;500:57;;553:1;550;543:12;568:247;627:6;680:2;668:9;659:7;655:23;651:32;648:52;;;696:1;693;686:12;648:52;735:9;722:23;754:31;779:5;754:31;:::i;820:455::-;906:6;914;967:2;955:9;946:7;942:23;938:32;935:52;;;983:1;980;973:12;935:52;1023:9;1010:23;1056:18;1048:6;1045:30;1042:50;;;1088:1;1085;1078:12;1042:50;1127:88;1207:7;1198:6;1187:9;1183:22;1127:88;:::i;:::-;1234:8;;1101:114;;-1:-1:-1;820:455:1;-1:-1:-1;;;;820:455:1:o;1280:277::-;1347:6;1400:2;1388:9;1379:7;1375:23;1371:32;1368:52;;;1416:1;1413;1406:12;1368:52;1448:9;1442:16;1501:5;1494:13;1487:21;1480:5;1477:32;1467:60;;1523:1;1520;1513:12;1562:271;1652:6;1705:2;1693:9;1684:7;1680:23;1676:32;1673:52;;;1721:1;1718;1711:12;1673:52;1753:9;1747:16;1772:31;1797:5;1772:31;:::i;2114:943::-;2194:6;2247:2;2235:9;2226:7;2222:23;2218:32;2215:52;;;2263:1;2260;2253:12;2215:52;2296:9;2290:16;2325:18;2366:2;2358:6;2355:14;2352:34;;;2382:1;2379;2372:12;2352:34;2420:6;2409:9;2405:22;2395:32;;2465:7;2458:4;2454:2;2450:13;2446:27;2436:55;;2487:1;2484;2477:12;2436:55;2516:2;2510:9;2538:2;2534;2531:10;2528:36;;;2544:18;;:::i;:::-;2678:2;2672:9;2740:4;2732:13;;2583:66;2728:22;;;2752:2;2724:31;2720:40;2708:53;;;2776:18;;;2796:22;;;2773:46;2770:72;;;2822:18;;:::i;:::-;2862:10;2858:2;2851:22;2897:2;2889:6;2882:18;2937:7;2932:2;2927;2923;2919:11;2915:20;2912:33;2909:53;;;2958:1;2955;2948:12;2909:53;2971:55;3023:2;3018;3010:6;3006:15;3001:2;2997;2993:11;2971:55;:::i;:::-;3045:6;2114:943;-1:-1:-1;;;;;;;2114:943:1:o;3062:180::-;3121:6;3174:2;3162:9;3153:7;3149:23;3145:32;3142:52;;;3190:1;3187;3180:12;3142:52;-1:-1:-1;3213:23:1;;3062:180;-1:-1:-1;3062:180:1:o;3247:184::-;3317:6;3370:2;3358:9;3349:7;3345:23;3341:32;3338:52;;;3386:1;3383;3376:12;3338:52;-1:-1:-1;3409:16:1;;3247:184;-1:-1:-1;3247:184:1:o;3436:315::-;3504:6;3512;3565:2;3553:9;3544:7;3540:23;3536:32;3533:52;;;3581:1;3578;3571:12;3533:52;3617:9;3604:23;3594:33;;3677:2;3666:9;3662:18;3649:32;3690:31;3715:5;3690:31;:::i;:::-;3740:5;3730:15;;;3436:315;;;;;:::o;3756:844::-;3921:6;3929;3937;3945;3953;3961;4014:3;4002:9;3993:7;3989:23;3985:33;3982:53;;;4031:1;4028;4021:12;3982:53;4067:9;4054:23;4044:33;;4127:2;4116:9;4112:18;4099:32;4140:31;4165:5;4140:31;:::i;:::-;4190:5;-1:-1:-1;4214:37:1;4247:2;4232:18;;4214:37;:::i;:::-;4204:47;;4298:2;4287:9;4283:18;4270:32;4260:42;;4353:3;4342:9;4338:19;4325:33;4381:18;4373:6;4370:30;4367:50;;;4413:1;4410;4403:12;4367:50;4452:88;4532:7;4523:6;4512:9;4508:22;4452:88;:::i;:::-;3756:844;;;;-1:-1:-1;3756:844:1;;-1:-1:-1;3756:844:1;;4559:8;;3756:844;-1:-1:-1;;;3756:844:1:o;4605:248::-;4673:6;4681;4734:2;4722:9;4713:7;4709:23;4705:32;4702:52;;;4750:1;4747;4740:12;4702:52;-1:-1:-1;;4773:23:1;;;4843:2;4828:18;;;4815:32;;-1:-1:-1;4605:248:1:o;4858:757::-;5003:6;5011;5019;5027;5035;5043;5096:3;5084:9;5075:7;5071:23;5067:33;5064:53;;;5113:1;5110;5103:12;5064:53;5149:9;5136:23;5126:33;;5206:2;5195:9;5191:18;5178:32;5168:42;;5229:37;5262:2;5251:9;5247:18;5229:37;:::i;5620:586::-;5722:6;5730;5738;5746;5754;5762;5815:3;5803:9;5794:7;5790:23;5786:33;5783:53;;;5832:1;5829;5822:12;5783:53;5868:9;5855:23;5845:33;;5925:2;5914:9;5910:18;5897:32;5887:42;;5976:2;5965:9;5961:18;5948:32;5938:42;;6030:2;6019:9;6015:18;6002:32;6043:29;6066:5;6043:29;:::i;:::-;5620:586;;;;-1:-1:-1;5620:586:1;;6143:3;6128:19;;6115:33;;6195:3;6180:19;;;6167:33;;-1:-1:-1;5620:586:1;-1:-1:-1;;5620:586:1:o;6211:247::-;6279:6;6332:2;6320:9;6311:7;6307:23;6303:32;6300:52;;;6348:1;6345;6338:12;6300:52;6380:9;6374:16;6399:29;6422:5;6399:29;:::i;6463:484::-;6516:3;6554:5;6548:12;6581:6;6576:3;6569:19;6607:4;6636:2;6631:3;6627:12;6620:19;;6673:2;6666:5;6662:14;6694:1;6704:218;6718:6;6715:1;6712:13;6704:218;;;6783:13;;6798:42;6779:62;6767:75;;6862:12;;;;6897:15;;;;6740:1;6733:9;6704:218;;;-1:-1:-1;6938:3:1;;6463:484;-1:-1:-1;;;;;6463:484:1:o;6952:435::-;7005:3;7043:5;7037:12;7070:6;7065:3;7058:19;7096:4;7125:2;7120:3;7116:12;7109:19;;7162:2;7155:5;7151:14;7183:1;7193:169;7207:6;7204:1;7201:13;7193:169;;;7268:13;;7256:26;;7302:12;;;;7337:15;;;;7229:1;7222:9;7193:169;;7392:667;7587:3;7618;7665:6;7587:3;7699:333;7713:6;7710:1;7707:13;7699:333;;;7788:6;7775:20;7808:31;7833:5;7808:31;:::i;:::-;7877:42;7866:54;7852:69;;7944:4;7970:14;;;;8007:15;;;;;7735:1;7728:9;7699:333;;;-1:-1:-1;8048:5:1;;7392:667;-1:-1:-1;;;;;7392:667:1:o;8064:274::-;8193:3;8231:6;8225:13;8247:53;8293:6;8288:3;8281:4;8273:6;8269:17;8247:53;:::i;:::-;8316:16;;;;;8064:274;-1:-1:-1;;8064:274:1:o;9977:261::-;10156:2;10145:9;10138:21;10119:4;10176:56;10228:2;10217:9;10213:18;10205:6;10176:56;:::i;10243:1627::-;10676:3;10665:9;10658:22;10639:4;10703:57;10755:3;10744:9;10740:19;10732:6;10703:57;:::i;:::-;10779:2;10829:9;10821:6;10817:22;10812:2;10801:9;10797:18;10790:50;10860:6;10895;10889:13;10926:6;10918;10911:22;10961:2;10953:6;10949:15;10942:22;;11020:2;11010:6;11007:1;11003:14;10995:6;10991:27;10987:36;11058:2;11050:6;11046:15;11079:1;11089:529;11103:6;11100:1;11097:13;11089:529;;;11162:66;11278:2;11269:6;11261;11257:19;11253:28;11248:3;11241:41;11311:6;11305:13;11353:2;11347:9;11384:8;11376:6;11369:24;11406:61;11458:8;11453:2;11445:6;11441:15;11436:2;11432;11428:11;11406:61;:::i;:::-;11596:12;;;;11524:2;11510:17;11506:26;;;11494:39;;;;11490:48;;;-1:-1:-1;11561:15:1;;;;11125:1;11118:9;11089:529;;;11093:3;;11666:9;11658:6;11654:22;11649:2;11638:9;11634:18;11627:50;11700:44;11737:6;11729;11700:44;:::i;:::-;11686:58;;;;;;11792:9;11784:6;11780:22;11775:2;11764:9;11760:18;11753:50;11820:44;11857:6;11849;11820:44;:::i;28237:128::-;28277:3;28308:1;28304:6;28301:1;28298:13;28295:39;;;28314:18;;:::i;:::-;-1:-1:-1;28350:9:1;;28237:128::o;28370:274::-;28410:1;28436;28426:189;;28471:77;28468:1;28461:88;28572:4;28569:1;28562:15;28600:4;28597:1;28590:15;28426:189;-1:-1:-1;28629:9:1;;28370:274::o;28649:228::-;28689:7;28815:1;28747:66;28743:74;28740:1;28737:81;28732:1;28725:9;28718:17;28714:105;28711:131;;;28822:18;;:::i;:::-;-1:-1:-1;28862:9:1;;28649:228::o;28882:125::-;28922:4;28950:1;28947;28944:8;28941:34;;;28955:18;;:::i;:::-;-1:-1:-1;28992:9:1;;28882:125::o;29012:258::-;29084:1;29094:113;29108:6;29105:1;29102:13;29094:113;;;29184:11;;;29178:18;29165:11;;;29158:39;29130:2;29123:10;29094:113;;;29225:6;29222:1;29219:13;29216:48;;;-1:-1:-1;;29260:1:1;29242:16;;29235:27;29012:258::o;29275:195::-;29314:3;29345:66;29338:5;29335:77;29332:103;;;29415:18;;:::i;:::-;-1:-1:-1;29462:1:1;29451:13;;29275:195::o;29475:175::-;29512:3;29556:4;29549:5;29545:16;29585:4;29576:7;29573:17;29570:43;;;29593:18;;:::i;:::-;29642:1;29629:15;;29475:175;-1:-1:-1;;29475:175:1:o;29655:184::-;29707:77;29704:1;29697:88;29804:4;29801:1;29794:15;29828:4;29825:1;29818:15;29844:184;29896:77;29893:1;29886:88;29993:4;29990:1;29983:15;30017:4;30014:1;30007:15;30033:184;30085:77;30082:1;30075:88;30182:4;30179:1;30172:15;30206:4;30203:1;30196:15;30222:154;30308:42;30301:5;30297:54;30290:5;30287:65;30277:93;;30366:1;30363;30356:12;30381:114;30465:4;30458:5;30454:16;30447:5;30444:27;30434:55;;30485:1;30482;30475:12"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "4653800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "MAXIMUM_DEPOSIT_FEE_RATE()": "272",
                "MAXIMUM_HARVEST_INTERVAL()": "273",
                "add(uint256,address,uint16,uint256,address[])": "infinite",
                "canHarvest(uint256,address)": "6994",
                "deposit(uint256,uint256)": "infinite",
                "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
                "ember()": "2425",
                "emberPerSec()": "2375",
                "emergencyWithdraw(uint256)": "infinite",
                "harvestMany(uint256[])": "infinite",
                "investorAddress()": "2426",
                "investorPercent()": "2376",
                "massUpdatePools()": "infinite",
                "owner()": "2374",
                "pendingTokens(uint256,address)": "infinite",
                "poolInfo(uint256)": "17495",
                "poolLength()": "2350",
                "poolRewarders(uint256)": "infinite",
                "poolRewardsPerSec(uint256)": "infinite",
                "poolTotalLp(uint256)": "4674",
                "renounceOwnership()": "28187",
                "set(uint256,uint256,uint16,uint256,address[])": "infinite",
                "setInvestorAddress(address)": "28286",
                "setInvestorPercent(uint256)": "infinite",
                "setTeamAddress(address)": "28286",
                "setTeamPercent(uint256)": "infinite",
                "setTreasuryAddress(address)": "28264",
                "setTreasuryPercent(uint256)": "infinite",
                "startFarming()": "infinite",
                "startTimestamp()": "2373",
                "teamAddress()": "2403",
                "teamPercent()": "2395",
                "totalAllocPoint()": "2352",
                "totalEmberInPools()": "2375",
                "totalLockedUpRewards()": "2374",
                "transferOwnership(address)": "infinite",
                "treasuryAddress()": "2403",
                "treasuryPercent()": "2354",
                "updateAllocPoint(uint256,uint256)": "infinite",
                "updateEmissionRate(uint256)": "infinite",
                "updatePool(uint256)": "infinite",
                "userInfo(uint256,address)": "9095",
                "withdraw(uint256,uint256)": "infinite"
              },
              "internal": {
                "_deposit(uint256,uint256)": "infinite",
                "_massUpdatePools()": "infinite",
                "_updatePool(uint256)": "infinite",
                "payOrLockupPendingEmber(uint256)": "infinite",
                "safeEmberTransfer(address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "MAXIMUM_DEPOSIT_FEE_RATE()": "812c64f1",
              "MAXIMUM_HARVEST_INTERVAL()": "de73149d",
              "add(uint256,address,uint16,uint256,address[])": "508593ab",
              "canHarvest(uint256,address)": "2e6c998d",
              "deposit(uint256,uint256)": "e2bbb158",
              "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": "515bc323",
              "ember()": "1f1b9a7c",
              "emberPerSec()": "1745d2e4",
              "emergencyWithdraw(uint256)": "5312ea8e",
              "harvestMany(uint256[])": "dc640ac9",
              "investorAddress()": "12e228fd",
              "investorPercent()": "0735b208",
              "massUpdatePools()": "630b5ba1",
              "owner()": "8da5cb5b",
              "pendingTokens(uint256,address)": "ffcd4263",
              "poolInfo(uint256)": "1526fe27",
              "poolLength()": "081e3eda",
              "poolRewarders(uint256)": "eff8976b",
              "poolRewardsPerSec(uint256)": "465e81ec",
              "poolTotalLp(uint256)": "654c9ece",
              "renounceOwnership()": "715018a6",
              "set(uint256,uint256,uint16,uint256,address[])": "2081ccc4",
              "setInvestorAddress(address)": "42602f1e",
              "setInvestorPercent(uint256)": "876d3c9c",
              "setTeamAddress(address)": "6690864e",
              "setTeamPercent(uint256)": "949e6302",
              "setTreasuryAddress(address)": "6605bfda",
              "setTreasuryPercent(uint256)": "89a2bc25",
              "startFarming()": "afbcfea1",
              "startTimestamp()": "e6fd48bc",
              "teamAddress()": "1c75f085",
              "teamPercent()": "e164ac50",
              "totalAllocPoint()": "17caf6f1",
              "totalEmberInPools()": "2a22bc43",
              "totalLockedUpRewards()": "474fa630",
              "transferOwnership(address)": "f2fde38b",
              "treasuryAddress()": "c5f956af",
              "treasuryPercent()": "04ef9d58",
              "updateAllocPoint(uint256,uint256)": "eddf9652",
              "updateEmissionRate(uint256)": "0ba84cd2",
              "updatePool(uint256)": "51eb05a6",
              "userInfo(uint256,address)": "93f1a40b",
              "withdraw(uint256,uint256)": "441a3e70"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_ember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emberPerSec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetInvestorPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTeamPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBoringERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ember\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emberPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewarders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSec\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolTotalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"setInvestorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInvestorPercent\",\"type\":\"uint256\"}],\"name\":\"setInvestorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTeamPercent\",\"type\":\"uint256\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmberInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emberPerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"EmberDistributorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 26,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 132,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "_status",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 937,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "ember",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IBoringERC20)529"
              },
              {
                "astId": 939,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "emberPerSec",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              },
              {
                "astId": 949,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "poolInfo",
                "offset": 0,
                "slot": "4",
                "type": "t_array(t_struct(PoolInfo)934_storage)dyn_storage"
              },
              {
                "astId": 956,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "userInfo",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)914_storage))"
              },
              {
                "astId": 959,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "totalAllocPoint",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 961,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "startTimestamp",
                "offset": 0,
                "slot": "7",
                "type": "t_uint256"
              },
              {
                "astId": 963,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "totalLockedUpRewards",
                "offset": 0,
                "slot": "8",
                "type": "t_uint256"
              },
              {
                "astId": 966,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "totalEmberInPools",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
              },
              {
                "astId": 968,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "teamAddress",
                "offset": 0,
                "slot": "10",
                "type": "t_address"
              },
              {
                "astId": 970,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "treasuryAddress",
                "offset": 0,
                "slot": "11",
                "type": "t_address"
              },
              {
                "astId": 972,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "investorAddress",
                "offset": 0,
                "slot": "12",
                "type": "t_address"
              },
              {
                "astId": 974,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "teamPercent",
                "offset": 0,
                "slot": "13",
                "type": "t_uint256"
              },
              {
                "astId": 976,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "treasuryPercent",
                "offset": 0,
                "slot": "14",
                "type": "t_uint256"
              },
              {
                "astId": 978,
                "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                "label": "investorPercent",
                "offset": 0,
                "slot": "15",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_contract(IComplexRewarder)562)dyn_storage": {
                "base": "t_contract(IComplexRewarder)562",
                "encoding": "dynamic_array",
                "label": "contract IComplexRewarder[]",
                "numberOfBytes": "32"
              },
              "t_array(t_struct(PoolInfo)934_storage)dyn_storage": {
                "base": "t_struct(PoolInfo)934_storage",
                "encoding": "dynamic_array",
                "label": "struct EmberDistributorV2.PoolInfo[]",
                "numberOfBytes": "32"
              },
              "t_contract(IBoringERC20)529": {
                "encoding": "inplace",
                "label": "contract IBoringERC20",
                "numberOfBytes": "20"
              },
              "t_contract(IComplexRewarder)562": {
                "encoding": "inplace",
                "label": "contract IComplexRewarder",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_struct(UserInfo)914_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct EmberDistributorV2.UserInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(UserInfo)914_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)914_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(UserInfo)914_storage)"
              },
              "t_struct(PoolInfo)934_storage": {
                "encoding": "inplace",
                "label": "struct EmberDistributorV2.PoolInfo",
                "members": [
                  {
                    "astId": 917,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "lpToken",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_contract(IBoringERC20)529"
                  },
                  {
                    "astId": 919,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "allocPoint",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 921,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "lastRewardTimestamp",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 923,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "accEmberPerShare",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 925,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "depositFeeBP",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint16"
                  },
                  {
                    "astId": 927,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "harvestInterval",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 929,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "totalLp",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 933,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "rewarders",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_array(t_contract(IComplexRewarder)562)dyn_storage"
                  }
                ],
                "numberOfBytes": "256"
              },
              "t_struct(UserInfo)914_storage": {
                "encoding": "inplace",
                "label": "struct EmberDistributorV2.UserInfo",
                "members": [
                  {
                    "astId": 907,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "amount",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 909,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "rewardDebt",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 911,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "rewardLockedUp",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 913,
                    "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
                    "label": "nextHarvestUntil",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "128"
              },
              "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "poolRewardsPerSec(uint256)": {
                "notice": "View function to see pool rewards per sec"
              }
            },
            "version": 1
          }
        },
        "IBoringERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "mint(address,uint256)": "40c10f19",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"IBoringERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "notice": "EIP 2612"
              }
            },
            "version": 1
          }
        },
        "IComplexRewarder": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "newLpAmount",
                  "type": "uint256"
                }
              ],
              "name": "onEmberReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "pendingTokens",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "pending",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                }
              ],
              "name": "poolRewardsPerSec",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "rewardToken",
              "outputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "onEmberReward(uint256,address,uint256)": "8ad14728",
              "pendingTokens(uint256,address)": "ffcd4263",
              "poolRewardsPerSec(uint256)": "465e81ec",
              "rewardToken()": "f7c618c1"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLpAmount\",\"type\":\"uint256\"}],\"name\":\"onEmberReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"IComplexRewarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IEmberPair": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "initialize(address,address)": "485cc955",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"IEmberPair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 26,
                "contract": "contracts/farm/EmberDistributorV2.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "ReentrancyGuard": {
          "abi": [],
          "devdoc": {
            "details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 132,
                "contract": "contracts/farm/EmberDistributorV2.sol:ReentrancyGuard",
                "label": "_status",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/farm/EmberDistributorV2.sol": {
        "ast": {
          "absolutePath": "contracts/farm/EmberDistributorV2.sol",
          "exportedSymbols": {
            "Address": [
              456
            ],
            "BoringERC20": [
              870
            ],
            "Context": [
              20
            ],
            "EmberDistributorV2": [
              3371
            ],
            "IBoringERC20": [
              529
            ],
            "IComplexRewarder": [
              562
            ],
            "IEmberPair": [
              896
            ],
            "Ownable": [
              122
            ],
            "ReentrancyGuard": [
              161
            ]
          },
          "id": 3372,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "152:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 20,
              "linearizedBaseContracts": [
                20
              ],
              "name": "Context",
              "nameLocation": "691:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 9,
                    "nodeType": "Block",
                    "src": "767:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 6,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "784:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 7,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "784:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 5,
                        "id": 8,
                        "nodeType": "Return",
                        "src": "777:17:0"
                      }
                    ]
                  },
                  "id": 10,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "714:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "724:2:0"
                  },
                  "returnParameters": {
                    "id": 5,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 10,
                        "src": "758:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "758:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "757:9:0"
                  },
                  "scope": 20,
                  "src": "705:96:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 18,
                    "nodeType": "Block",
                    "src": "874:32:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 15,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "891:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "891:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 14,
                        "id": 17,
                        "nodeType": "Return",
                        "src": "884:15:0"
                      }
                    ]
                  },
                  "id": 19,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "816:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "824:2:0"
                  },
                  "returnParameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "858:14:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "858:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "857:16:0"
                  },
                  "scope": 20,
                  "src": "807:99:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 3372,
              "src": "673:235:0",
              "usedErrors": []
            },
            {
              "id": 21,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "970:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 23,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 20,
                    "src": "1519:7:0"
                  },
                  "id": 24,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1519:7:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 22,
                "nodeType": "StructuredDocumentation",
                "src": "995:494:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 122,
              "linearizedBaseContracts": [
                122,
                20
              ],
              "name": "Ownable",
              "nameLocation": "1508:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1549:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 122,
                  "src": "1533:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1533:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 32,
                  "name": "OwnershipTransferred",
                  "nameLocation": "1568:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 28,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "1605:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "1589:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1589:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "1636:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "1620:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1620:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1588:57:0"
                  },
                  "src": "1562:84:0"
                },
                {
                  "body": {
                    "id": 41,
                    "nodeType": "Block",
                    "src": "1762:40:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 37,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10,
                                "src": "1782:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 38,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1782:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 36,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "1772:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1772:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 40,
                        "nodeType": "ExpressionStatement",
                        "src": "1772:23:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 33,
                    "nodeType": "StructuredDocumentation",
                    "src": "1652:91:0",
                    "text": " @dev Initializes the contract setting the deployer as the initial owner."
                  },
                  "id": 42,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 34,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1759:2:0"
                  },
                  "returnParameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1762:0:0"
                  },
                  "scope": 122,
                  "src": "1748:54:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 50,
                    "nodeType": "Block",
                    "src": "1933:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 48,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "1950:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 47,
                        "id": 49,
                        "nodeType": "Return",
                        "src": "1943:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 43,
                    "nodeType": "StructuredDocumentation",
                    "src": "1808:65:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 51,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "1887:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 44,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1892:2:0"
                  },
                  "returnParameters": {
                    "id": 47,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 46,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 51,
                        "src": "1924:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 45,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1924:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1923:9:0"
                  },
                  "scope": 122,
                  "src": "1878:85:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 64,
                    "nodeType": "Block",
                    "src": "2072:96:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 59,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 55,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 51,
                                  "src": "2090:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 56,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2090:7:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 57,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10,
                                  "src": "2101:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 58,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2101:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2090:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 60,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2115:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 54,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2082:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2082:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 62,
                        "nodeType": "ExpressionStatement",
                        "src": "2082:68:0"
                      },
                      {
                        "id": 63,
                        "nodeType": "PlaceholderStatement",
                        "src": "2160:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 52,
                    "nodeType": "StructuredDocumentation",
                    "src": "1969:77:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 65,
                  "name": "onlyOwner",
                  "nameLocation": "2060:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 53,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2069:2:0"
                  },
                  "src": "2051:117:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 78,
                    "nodeType": "Block",
                    "src": "2564:38:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 74,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2592:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 73,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2584:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 72,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2584:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 75,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2584:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 71,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "2574:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2574:21:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 77,
                        "nodeType": "ExpressionStatement",
                        "src": "2574:21:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 66,
                    "nodeType": "StructuredDocumentation",
                    "src": "2174:331:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 79,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 69,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 68,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "2554:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2554:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "2519:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2536:2:0"
                  },
                  "returnParameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2564:0:0"
                  },
                  "scope": 122,
                  "src": "2510:92:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 101,
                    "nodeType": "Block",
                    "src": "2821:119:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 93,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 88,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 82,
                                "src": "2839:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 91,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2859:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 90,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2851:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 89,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2851:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 92,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2851:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2839:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 94,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2863:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 87,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2831:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2831:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 96,
                        "nodeType": "ExpressionStatement",
                        "src": "2831:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 98,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 82,
                              "src": "2924:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 97,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "2914:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 99,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2914:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 100,
                        "nodeType": "ExpressionStatement",
                        "src": "2914:19:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 80,
                    "nodeType": "StructuredDocumentation",
                    "src": "2608:138:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 102,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 85,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 84,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "2811:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2811:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "2760:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 83,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 82,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2786:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 102,
                        "src": "2778:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 81,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2778:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2777:18:0"
                  },
                  "returnParameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2821:0:0"
                  },
                  "scope": 122,
                  "src": "2751:189:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 120,
                    "nodeType": "Block",
                    "src": "2991:124:0",
                    "statements": [
                      {
                        "assignments": [
                          108
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 108,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "3009:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 120,
                            "src": "3001:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 107,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3001:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 110,
                        "initialValue": {
                          "id": 109,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "3020:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3001:25:0"
                      },
                      {
                        "expression": {
                          "id": 113,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 111,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26,
                            "src": "3036:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 112,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 104,
                            "src": "3045:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3036:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 114,
                        "nodeType": "ExpressionStatement",
                        "src": "3036:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 116,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 108,
                              "src": "3089:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 117,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 104,
                              "src": "3099:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 115,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "3068:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 118,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3068:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 119,
                        "nodeType": "EmitStatement",
                        "src": "3063:45:0"
                      }
                    ]
                  },
                  "id": 121,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setOwner",
                  "nameLocation": "2955:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2973:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 121,
                        "src": "2965:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2965:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2964:18:0"
                  },
                  "returnParameters": {
                    "id": 106,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2991:0:0"
                  },
                  "scope": 122,
                  "src": "2946:169:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 3372,
              "src": "1490:1627:0",
              "usedErrors": []
            },
            {
              "id": 123,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "3189:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 124,
                "nodeType": "StructuredDocumentation",
                "src": "3214:750:0",
                "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
              },
              "fullyImplemented": true,
              "id": 161,
              "linearizedBaseContracts": [
                161
              ],
              "name": "ReentrancyGuard",
              "nameLocation": "3983:15:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 127,
                  "mutability": "constant",
                  "name": "_NOT_ENTERED",
                  "nameLocation": "4778:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 161,
                  "src": "4753:41:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 125,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4753:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4793:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 130,
                  "mutability": "constant",
                  "name": "_ENTERED",
                  "nameLocation": "4825:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 161,
                  "src": "4800:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 128,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4800:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 129,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4836:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 132,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "4860:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 161,
                  "src": "4844:23:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 131,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4844:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 139,
                    "nodeType": "Block",
                    "src": "4888:39:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 137,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 135,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 132,
                            "src": "4898:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 136,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 127,
                            "src": "4908:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4898:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 138,
                        "nodeType": "ExpressionStatement",
                        "src": "4898:22:0"
                      }
                    ]
                  },
                  "id": 140,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 133,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4885:2:0"
                  },
                  "returnParameters": {
                    "id": 134,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4888:0:0"
                  },
                  "scope": 161,
                  "src": "4874:53:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 159,
                    "nodeType": "Block",
                    "src": "5326:421:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 146,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 144,
                                "name": "_status",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 132,
                                "src": "5415:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 145,
                                "name": "_ENTERED",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 130,
                                "src": "5426:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5415:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                              "id": 147,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5436:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              },
                              "value": "ReentrancyGuard: reentrant call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              }
                            ],
                            "id": 143,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5407:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 148,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5407:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 149,
                        "nodeType": "ExpressionStatement",
                        "src": "5407:63:0"
                      },
                      {
                        "expression": {
                          "id": 152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 150,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 132,
                            "src": "5545:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 151,
                            "name": "_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 130,
                            "src": "5555:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5545:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 153,
                        "nodeType": "ExpressionStatement",
                        "src": "5545:18:0"
                      },
                      {
                        "id": 154,
                        "nodeType": "PlaceholderStatement",
                        "src": "5574:1:0"
                      },
                      {
                        "expression": {
                          "id": 157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 155,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 132,
                            "src": "5718:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 156,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 127,
                            "src": "5728:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5718:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 158,
                        "nodeType": "ExpressionStatement",
                        "src": "5718:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 141,
                    "nodeType": "StructuredDocumentation",
                    "src": "4933:364:0",
                    "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
                  },
                  "id": 160,
                  "name": "nonReentrant",
                  "nameLocation": "5311:12:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 142,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5323:2:0"
                  },
                  "src": "5302:445:0",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 3372,
              "src": "3965:1784:0",
              "usedErrors": []
            },
            {
              "id": 162,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "5810:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 163,
                "nodeType": "StructuredDocumentation",
                "src": "5835:67:0",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 456,
              "linearizedBaseContracts": [
                456
              ],
              "name": "Address",
              "nameLocation": "5911:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 179,
                    "nodeType": "Block",
                    "src": "6561:311:0",
                    "statements": [
                      {
                        "assignments": [
                          172
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 172,
                            "mutability": "mutable",
                            "name": "size",
                            "nameLocation": "6766:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 179,
                            "src": "6758:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 171,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "6758:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 173,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6758:12:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "6789:52:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6803:28:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "account",
                                    "nodeType": "YulIdentifier",
                                    "src": "6823:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "6811:11:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6811:20:0"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "6803:4:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 166,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6823:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 172,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6803:4:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 174,
                        "nodeType": "InlineAssembly",
                        "src": "6780:61:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 175,
                            "name": "size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 172,
                            "src": "6857:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 176,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6864:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6857:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 170,
                        "id": 178,
                        "nodeType": "Return",
                        "src": "6850:15:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 164,
                    "nodeType": "StructuredDocumentation",
                    "src": "5925:565:0",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
                  },
                  "id": 180,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "6504:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 167,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 166,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "6523:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 180,
                        "src": "6515:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 165,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6515:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6514:17:0"
                  },
                  "returnParameters": {
                    "id": 170,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 169,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 180,
                        "src": "6555:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 168,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6555:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6554:6:0"
                  },
                  "scope": 456,
                  "src": "6495:377:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 213,
                    "nodeType": "Block",
                    "src": "7860:241:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 195,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 191,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "7886:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$456",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$456",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 190,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7878:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 189,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "7878:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 192,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7878:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 193,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "7878:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 194,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 185,
                                "src": "7903:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7878:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 196,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7911:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 188,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7870:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7870:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 198,
                        "nodeType": "ExpressionStatement",
                        "src": "7870:73:0"
                      },
                      {
                        "assignments": [
                          200,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 200,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "7960:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 213,
                            "src": "7955:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 199,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "7955:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 207,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 205,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8003:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 201,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 183,
                                "src": "7973:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 202,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "7973:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 204,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 203,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 185,
                                "src": "7995:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "7973:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 206,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7973:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7954:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 209,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 200,
                              "src": "8024:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8033:60:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 208,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "8016:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 211,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8016:78:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 212,
                        "nodeType": "ExpressionStatement",
                        "src": "8016:78:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 181,
                    "nodeType": "StructuredDocumentation",
                    "src": "6878:906:0",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 214,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "7798:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 186,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 183,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "7824:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 214,
                        "src": "7808:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 182,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7808:15:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 185,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "7843:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 214,
                        "src": "7835:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 184,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7835:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7807:43:0"
                  },
                  "returnParameters": {
                    "id": 187,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7860:0:0"
                  },
                  "scope": 456,
                  "src": "7789:312:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 230,
                    "nodeType": "Block",
                    "src": "8932:84:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 225,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 217,
                              "src": "8962:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 226,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "8970:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 227,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8976:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 224,
                            "name": "functionCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              231,
                              251
                            ],
                            "referencedDeclaration": 251,
                            "src": "8949:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 228,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8949:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 223,
                        "id": 229,
                        "nodeType": "Return",
                        "src": "8942:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 215,
                    "nodeType": "StructuredDocumentation",
                    "src": "8107:731:0",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 231,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "8852:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 220,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 217,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "8873:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 231,
                        "src": "8865:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 216,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8865:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "8894:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 231,
                        "src": "8881:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 218,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8881:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8864:35:0"
                  },
                  "returnParameters": {
                    "id": 223,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 222,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 231,
                        "src": "8918:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 221,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8918:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8917:14:0"
                  },
                  "scope": 456,
                  "src": "8843:173:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 250,
                    "nodeType": "Block",
                    "src": "9385:76:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 244,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 234,
                              "src": "9424:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 245,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 236,
                              "src": "9432:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9438:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 247,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 238,
                              "src": "9441:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 243,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              271,
                              321
                            ],
                            "referencedDeclaration": 321,
                            "src": "9402:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9402:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 242,
                        "id": 249,
                        "nodeType": "Return",
                        "src": "9395:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 232,
                    "nodeType": "StructuredDocumentation",
                    "src": "9022:211:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 251,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "9247:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 239,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 234,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "9277:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 251,
                        "src": "9269:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 233,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9269:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 236,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "9306:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 251,
                        "src": "9293:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 235,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9293:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 238,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "9334:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 251,
                        "src": "9320:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 237,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "9320:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9259:93:0"
                  },
                  "returnParameters": {
                    "id": 242,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 241,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 251,
                        "src": "9371:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 240,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9371:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9370:14:0"
                  },
                  "scope": 456,
                  "src": "9238:223:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 270,
                    "nodeType": "Block",
                    "src": "9966:111:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 264,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 254,
                              "src": "10005:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 265,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 256,
                              "src": "10013:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 266,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 258,
                              "src": "10019:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 267,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10026:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 263,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              271,
                              321
                            ],
                            "referencedDeclaration": 321,
                            "src": "9983:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9983:87:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 262,
                        "id": 269,
                        "nodeType": "Return",
                        "src": "9976:94:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 252,
                    "nodeType": "StructuredDocumentation",
                    "src": "9467:351:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 271,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "9832:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 254,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "9871:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "9863:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 253,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9863:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 256,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "9900:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "9887:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 255,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9887:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "9922:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "9914:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 257,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "9914:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9853:80:0"
                  },
                  "returnParameters": {
                    "id": 262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 261,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 271,
                        "src": "9952:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9952:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9951:14:0"
                  },
                  "scope": 456,
                  "src": "9823:254:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 320,
                    "nodeType": "Block",
                    "src": "10504:321:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 292,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 288,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "10530:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$456",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$456",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 287,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "10522:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 286,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10522:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 289,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "10522:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 290,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "10522:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 291,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 278,
                                "src": "10547:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "10522:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 293,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10554:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 285,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10514:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10514:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 295,
                        "nodeType": "ExpressionStatement",
                        "src": "10514:81:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 298,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 274,
                                  "src": "10624:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 297,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 180,
                                "src": "10613:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10613:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10633:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              },
                              "value": "Address: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              }
                            ],
                            "id": 296,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10605:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 301,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10605:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 302,
                        "nodeType": "ExpressionStatement",
                        "src": "10605:60:0"
                      },
                      {
                        "assignments": [
                          304,
                          306
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 304,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "10682:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 320,
                            "src": "10677:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 303,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "10677:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 306,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "10704:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 320,
                            "src": "10691:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 305,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "10691:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 313,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 311,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 276,
                              "src": "10744:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 307,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 274,
                                "src": "10718:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 308,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "10718:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 309,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 278,
                                "src": "10737:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "10718:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10718:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10676:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 315,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 304,
                              "src": "10784:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 316,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 306,
                              "src": "10793:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 317,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 280,
                              "src": "10805:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 314,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "10766:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 318,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10766:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 284,
                        "id": 319,
                        "nodeType": "Return",
                        "src": "10759:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 272,
                    "nodeType": "StructuredDocumentation",
                    "src": "10083:237:0",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 321,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "10334:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 281,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 274,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "10373:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 321,
                        "src": "10365:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 273,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10365:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 276,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "10402:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 321,
                        "src": "10389:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 275,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "10389:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 278,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "10424:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 321,
                        "src": "10416:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 277,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10416:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "10453:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 321,
                        "src": "10439:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 279,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "10439:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10355:116:0"
                  },
                  "returnParameters": {
                    "id": 284,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 283,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 321,
                        "src": "10490:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 282,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "10490:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10489:14:0"
                  },
                  "scope": 456,
                  "src": "10325:500:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 337,
                    "nodeType": "Block",
                    "src": "11102:97:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 332,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 324,
                              "src": "11138:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 333,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 326,
                              "src": "11146:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 334,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11152:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 331,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              338,
                              373
                            ],
                            "referencedDeclaration": 373,
                            "src": "11119:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 335,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11119:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 330,
                        "id": 336,
                        "nodeType": "Return",
                        "src": "11112:80:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 322,
                    "nodeType": "StructuredDocumentation",
                    "src": "10831:166:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 338,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "11011:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 327,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 324,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "11038:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "11030:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 323,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11030:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 326,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "11059:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "11046:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 325,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11046:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11029:35:0"
                  },
                  "returnParameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 329,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "11088:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 328,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11088:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11087:14:0"
                  },
                  "scope": 456,
                  "src": "11002:197:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 372,
                    "nodeType": "Block",
                    "src": "11541:229:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 352,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 341,
                                  "src": "11570:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 351,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 180,
                                "src": "11559:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 353,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11559:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 354,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11579:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              },
                              "value": "Address: static call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              }
                            ],
                            "id": 350,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "11551:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11551:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 356,
                        "nodeType": "ExpressionStatement",
                        "src": "11551:67:0"
                      },
                      {
                        "assignments": [
                          358,
                          360
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 358,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "11635:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 372,
                            "src": "11630:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 357,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "11630:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 360,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "11657:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 372,
                            "src": "11644:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 359,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "11644:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 365,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 363,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "11689:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 361,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 341,
                              "src": "11671:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "11671:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 364,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11671:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "11629:65:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 367,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 358,
                              "src": "11729:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 368,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 360,
                              "src": "11738:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 369,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 345,
                              "src": "11750:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 366,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "11711:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11711:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 349,
                        "id": 371,
                        "nodeType": "Return",
                        "src": "11704:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 339,
                    "nodeType": "StructuredDocumentation",
                    "src": "11205:173:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 373,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "11392:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "11428:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 373,
                        "src": "11420:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11420:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "11457:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 373,
                        "src": "11444:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11444:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 345,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "11485:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 373,
                        "src": "11471:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 344,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11471:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11410:93:0"
                  },
                  "returnParameters": {
                    "id": 349,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 348,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 373,
                        "src": "11527:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 347,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11527:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11526:14:0"
                  },
                  "scope": 456,
                  "src": "11383:387:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 389,
                    "nodeType": "Block",
                    "src": "12046:101:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 384,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 376,
                              "src": "12084:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 385,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 378,
                              "src": "12092:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12098:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 383,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              390,
                              425
                            ],
                            "referencedDeclaration": 425,
                            "src": "12063:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12063:77:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 382,
                        "id": 388,
                        "nodeType": "Return",
                        "src": "12056:84:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 374,
                    "nodeType": "StructuredDocumentation",
                    "src": "11776:168:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 390,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "11958:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 379,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 376,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "11987:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 390,
                        "src": "11979:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 375,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11979:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 378,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "12008:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 390,
                        "src": "11995:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 377,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "11995:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11978:35:0"
                  },
                  "returnParameters": {
                    "id": 382,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 381,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 390,
                        "src": "12032:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 380,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12032:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12031:14:0"
                  },
                  "scope": 456,
                  "src": "11949:198:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 424,
                    "nodeType": "Block",
                    "src": "12488:233:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 404,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 393,
                                  "src": "12517:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 403,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 180,
                                "src": "12506:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 405,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12506:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 406,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12526:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              },
                              "value": "Address: delegate call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              }
                            ],
                            "id": 402,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "12498:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 407,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12498:69:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 408,
                        "nodeType": "ExpressionStatement",
                        "src": "12498:69:0"
                      },
                      {
                        "assignments": [
                          410,
                          412
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 410,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "12584:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 424,
                            "src": "12579:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 409,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "12579:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 412,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "12606:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 424,
                            "src": "12593:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 411,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "12593:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 417,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 415,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 395,
                              "src": "12640:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 413,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 393,
                              "src": "12620:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 414,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "12620:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12620:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12578:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 419,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 410,
                              "src": "12680:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 420,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 412,
                              "src": "12689:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 421,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 397,
                              "src": "12701:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 418,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "12662:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12662:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 401,
                        "id": 423,
                        "nodeType": "Return",
                        "src": "12655:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 391,
                    "nodeType": "StructuredDocumentation",
                    "src": "12153:175:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 425,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "12342:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 398,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 393,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "12380:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 425,
                        "src": "12372:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 392,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12372:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 395,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "12409:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 425,
                        "src": "12396:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 394,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12396:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 397,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "12437:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 425,
                        "src": "12423:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 396,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "12423:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12362:93:0"
                  },
                  "returnParameters": {
                    "id": 401,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 400,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 425,
                        "src": "12474:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 399,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12474:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12473:14:0"
                  },
                  "scope": 456,
                  "src": "12333:388:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 454,
                    "nodeType": "Block",
                    "src": "12887:532:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 436,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 427,
                          "src": "12901:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 452,
                          "nodeType": "Block",
                          "src": "12958:455:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 443,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 440,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 429,
                                    "src": "13042:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 441,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "13042:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 442,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13062:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "13042:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 450,
                                "nodeType": "Block",
                                "src": "13350:53:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 447,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 431,
                                          "src": "13375:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 446,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "13368:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 448,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "13368:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 449,
                                    "nodeType": "ExpressionStatement",
                                    "src": "13368:20:0"
                                  }
                                ]
                              },
                              "id": 451,
                              "nodeType": "IfStatement",
                              "src": "13038:365:0",
                              "trueBody": {
                                "id": 445,
                                "nodeType": "Block",
                                "src": "13065:279:0",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "13185:145:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "13207:40:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "13236:10:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "13230:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13230:17:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "13211:15:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "13279:2:0",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "13283:10:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "13275:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "13275:19:0"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "13296:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "13268:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "13268:44:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "13268:44:0"
                                        }
                                      ]
                                    },
                                    "evmVersion": "london",
                                    "externalReferences": [
                                      {
                                        "declaration": 429,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "13236:10:0",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 429,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "13283:10:0",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 444,
                                    "nodeType": "InlineAssembly",
                                    "src": "13176:154:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 453,
                        "nodeType": "IfStatement",
                        "src": "12897:516:0",
                        "trueBody": {
                          "id": 439,
                          "nodeType": "Block",
                          "src": "12910:42:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 437,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 429,
                                "src": "12931:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 435,
                              "id": 438,
                              "nodeType": "Return",
                              "src": "12924:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 455,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_verifyCallResult",
                  "nameLocation": "12736:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 432,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 427,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "12768:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "12763:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 426,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "12763:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 429,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "12798:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "12785:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 428,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12785:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 431,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "12832:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "12818:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 430,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "12818:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12753:97:0"
                  },
                  "returnParameters": {
                    "id": 435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 434,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 455,
                        "src": "12873:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 433,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "12873:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12872:14:0"
                  },
                  "scope": 456,
                  "src": "12727:692:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 3372,
              "src": "5903:7518:0",
              "usedErrors": []
            },
            {
              "id": 457,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "13477:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 529,
              "linearizedBaseContracts": [
                529
              ],
              "name": "IBoringERC20",
              "nameLocation": "13512:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "40c10f19",
                  "id": 464,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "13540:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 462,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 459,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "13553:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 464,
                        "src": "13545:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13545:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "13565:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 464,
                        "src": "13557:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13557:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13544:28:0"
                  },
                  "returnParameters": {
                    "id": 463,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13581:0:0"
                  },
                  "scope": 529,
                  "src": "13531:51:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "18160ddd",
                  "id": 469,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "13597:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 465,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13608:2:0"
                  },
                  "returnParameters": {
                    "id": 468,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 467,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "13634:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 466,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13634:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13633:9:0"
                  },
                  "scope": 529,
                  "src": "13588:55:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 476,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "13658:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 472,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 471,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "13676:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "13668:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 470,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13668:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13667:17:0"
                  },
                  "returnParameters": {
                    "id": 475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 474,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "13708:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 473,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13708:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13707:9:0"
                  },
                  "scope": 529,
                  "src": "13649:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "dd62ed3e",
                  "id": 485,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "13732:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 481,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "13750:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13742:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13742:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 480,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "13765:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13757:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 479,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13757:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13741:32:0"
                  },
                  "returnParameters": {
                    "id": 484,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 483,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13821:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 482,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13821:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13820:9:0"
                  },
                  "scope": 529,
                  "src": "13723:107:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "095ea7b3",
                  "id": 494,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "13845:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 490,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 487,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "13861:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13853:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 486,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13853:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 489,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "13878:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13870:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 488,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13870:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13852:33:0"
                  },
                  "returnParameters": {
                    "id": 493,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 492,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13904:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 491,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "13904:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13903:6:0"
                  },
                  "scope": 529,
                  "src": "13836:74:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "id": 502,
                  "name": "Transfer",
                  "nameLocation": "13922:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 501,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 496,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "13947:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13931:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13931:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 498,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "13969:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13953:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 497,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13953:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 500,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "13981:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13973:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 499,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13973:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13930:57:0"
                  },
                  "src": "13916:72:0"
                },
                {
                  "anonymous": false,
                  "id": 510,
                  "name": "Approval",
                  "nameLocation": "13999:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 504,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "14033:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14017:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 503,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14017:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 506,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "14064:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14048:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 505,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14048:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 508,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "14089:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14081:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 507,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14081:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14007:93:0"
                  },
                  "src": "13993:108:0"
                },
                {
                  "documentation": {
                    "id": 511,
                    "nodeType": "StructuredDocumentation",
                    "src": "14107:20:0",
                    "text": "@notice EIP 2612"
                  },
                  "functionSelector": "d505accf",
                  "id": 528,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "permit",
                  "nameLocation": "14141:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 526,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 513,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "14165:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14157:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 512,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14157:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 515,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "14188:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14180:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 514,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14180:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 517,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "14213:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14205:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 516,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14205:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 519,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "14236:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14228:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 518,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14228:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 521,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "14260:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14254:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 520,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "14254:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 523,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "14279:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14271:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 522,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14271:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 525,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "14298:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14290:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 524,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14290:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14147:158:0"
                  },
                  "returnParameters": {
                    "id": 527,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14314:0:0"
                  },
                  "scope": 529,
                  "src": "14132:183:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3372,
              "src": "13502:815:0",
              "usedErrors": []
            },
            {
              "id": 530,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "14377:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 562,
              "linearizedBaseContracts": [
                562
              ],
              "name": "IComplexRewarder",
              "nameLocation": "14412:16:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "8ad14728",
                  "id": 539,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "onEmberReward",
                  "nameLocation": "14444:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 537,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 532,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14475:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14467:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 531,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14467:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 534,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "14496:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14488:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 533,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14488:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 536,
                        "mutability": "mutable",
                        "name": "newLpAmount",
                        "nameLocation": "14518:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14510:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 535,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14510:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14457:78:0"
                  },
                  "returnParameters": {
                    "id": 538,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14544:0:0"
                  },
                  "scope": 562,
                  "src": "14435:110:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "ffcd4263",
                  "id": 548,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pendingTokens",
                  "nameLocation": "14560:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 544,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 541,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14582:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14574:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 540,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14574:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 543,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "14595:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14587:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 542,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14587:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14573:27:0"
                  },
                  "returnParameters": {
                    "id": 547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 546,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "14656:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14648:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 545,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14648:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14647:17:0"
                  },
                  "scope": 562,
                  "src": "14551:114:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "f7c618c1",
                  "id": 554,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "rewardToken",
                  "nameLocation": "14680:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 549,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14691:2:0"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 552,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "14717:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 551,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 550,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "14717:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "14717:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14716:14:0"
                  },
                  "scope": 562,
                  "src": "14671:60:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "465e81ec",
                  "id": 561,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolRewardsPerSec",
                  "nameLocation": "14746:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 557,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 556,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14772:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "14764:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 555,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14764:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14763:13:0"
                  },
                  "returnParameters": {
                    "id": 560,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 559,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "14800:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 558,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14800:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14799:9:0"
                  },
                  "scope": 562,
                  "src": "14737:72:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3372,
              "src": "14402:409:0",
              "usedErrors": []
            },
            {
              "id": 563,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "14866:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 870,
              "linearizedBaseContracts": [
                870
              ],
              "name": "BoringERC20",
              "nameLocation": "14941:11:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 566,
                  "mutability": "constant",
                  "name": "SIG_SYMBOL",
                  "nameLocation": "14983:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "14959:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 564,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "14959:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783935643839623431",
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "14996:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2514000705_by_1",
                      "typeString": "int_const 2514000705"
                    },
                    "value": "0x95d89b41"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 569,
                  "mutability": "constant",
                  "name": "SIG_NAME",
                  "nameLocation": "15048:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "15024:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 567,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15024:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783036666464653033",
                    "id": 568,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15059:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_117300739_by_1",
                      "typeString": "int_const 117300739"
                    },
                    "value": "0x06fdde03"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 572,
                  "mutability": "constant",
                  "name": "SIG_DECIMALS",
                  "nameLocation": "15109:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "15085:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 570,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15085:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783331336365353637",
                    "id": 571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15124:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_826074471_by_1",
                      "typeString": "int_const 826074471"
                    },
                    "value": "0x313ce567"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 575,
                  "mutability": "constant",
                  "name": "SIG_TRANSFER",
                  "nameLocation": "15178:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "15154:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 573,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15154:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30786139303539636262",
                    "id": 574,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15193:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2835717307_by_1",
                      "typeString": "int_const 2835717307"
                    },
                    "value": "0xa9059cbb"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 578,
                  "mutability": "constant",
                  "name": "SIG_TRANSFER_FROM",
                  "nameLocation": "15262:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "15238:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 576,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15238:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783233623837326464",
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15282:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_599290589_by_1",
                      "typeString": "int_const 599290589"
                    },
                    "value": "0x23b872dd"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 664,
                    "nodeType": "Block",
                    "src": "15453:486:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 585,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 580,
                              "src": "15467:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 586,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "15467:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "hexValue": "3634",
                            "id": 587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15482:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_64_by_1",
                              "typeString": "int_const 64"
                            },
                            "value": "64"
                          },
                          "src": "15467:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 601,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 598,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 580,
                                "src": "15554:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 599,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "15554:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "3332",
                              "id": 600,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15569:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "15554:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 661,
                            "nodeType": "Block",
                            "src": "15896:37:0",
                            "statements": [
                              {
                                "expression": {
                                  "hexValue": "3f3f3f",
                                  "id": 659,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15917:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                                    "typeString": "literal_string \"???\""
                                  },
                                  "value": "???"
                                },
                                "functionReturnParameters": 584,
                                "id": 660,
                                "nodeType": "Return",
                                "src": "15910:12:0"
                              }
                            ]
                          },
                          "id": 662,
                          "nodeType": "IfStatement",
                          "src": "15550:383:0",
                          "trueBody": {
                            "id": 658,
                            "nodeType": "Block",
                            "src": "15573:317:0",
                            "statements": [
                              {
                                "assignments": [
                                  603
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 603,
                                    "mutability": "mutable",
                                    "name": "i",
                                    "nameLocation": "15593:1:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 658,
                                    "src": "15587:7:0",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "typeName": {
                                      "id": 602,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15587:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 605,
                                "initialValue": {
                                  "hexValue": "30",
                                  "id": 604,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15597:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "nodeType": "VariableDeclarationStatement",
                                "src": "15587:11:0"
                              },
                              {
                                "body": {
                                  "id": 618,
                                  "nodeType": "Block",
                                  "src": "15643:36:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 616,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "15661:3:0",
                                        "subExpression": {
                                          "id": 615,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 603,
                                          "src": "15661:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "id": 617,
                                      "nodeType": "ExpressionStatement",
                                      "src": "15661:3:0"
                                    }
                                  ]
                                },
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 614,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 608,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 606,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 603,
                                      "src": "15619:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "hexValue": "3332",
                                      "id": 607,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15623:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "15619:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    },
                                    "id": 613,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 609,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 580,
                                        "src": "15629:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 611,
                                      "indexExpression": {
                                        "id": 610,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 603,
                                        "src": "15634:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "15629:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 612,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15640:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "15629:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "15619:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 619,
                                "nodeType": "WhileStatement",
                                "src": "15612:67:0"
                              },
                              {
                                "assignments": [
                                  621
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 621,
                                    "mutability": "mutable",
                                    "name": "bytesArray",
                                    "nameLocation": "15705:10:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 658,
                                    "src": "15692:23:0",
                                    "stateVariable": false,
                                    "storageLocation": "memory",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes"
                                    },
                                    "typeName": {
                                      "id": 620,
                                      "name": "bytes",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15692:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage_ptr",
                                        "typeString": "bytes"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 626,
                                "initialValue": {
                                  "arguments": [
                                    {
                                      "id": 624,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 603,
                                      "src": "15728:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    ],
                                    "id": 623,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "NewExpression",
                                    "src": "15718:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (bytes memory)"
                                    },
                                    "typeName": {
                                      "id": 622,
                                      "name": "bytes",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15722:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage_ptr",
                                        "typeString": "bytes"
                                      }
                                    }
                                  },
                                  "id": 625,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "15718:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "nodeType": "VariableDeclarationStatement",
                                "src": "15692:38:0"
                              },
                              {
                                "body": {
                                  "id": 651,
                                  "nodeType": "Block",
                                  "src": "15785:56:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 649,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "baseExpression": {
                                            "id": 643,
                                            "name": "bytesArray",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 621,
                                            "src": "15803:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 645,
                                          "indexExpression": {
                                            "id": 644,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 603,
                                            "src": "15814:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": true,
                                          "nodeType": "IndexAccess",
                                          "src": "15803:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "baseExpression": {
                                            "id": 646,
                                            "name": "data",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 580,
                                            "src": "15819:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 648,
                                          "indexExpression": {
                                            "id": 647,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 603,
                                            "src": "15824:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "15819:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        },
                                        "src": "15803:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      "id": 650,
                                      "nodeType": "ExpressionStatement",
                                      "src": "15803:23:0"
                                    }
                                  ]
                                },
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 639,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 633,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 631,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 603,
                                      "src": "15756:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "hexValue": "3332",
                                      "id": 632,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15760:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "15756:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    },
                                    "id": 638,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 634,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 580,
                                        "src": "15766:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 636,
                                      "indexExpression": {
                                        "id": 635,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 603,
                                        "src": "15771:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "15766:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 637,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15777:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "15766:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "15756:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 652,
                                "initializationExpression": {
                                  "expression": {
                                    "id": 629,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 627,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 603,
                                      "src": "15749:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "hexValue": "30",
                                      "id": 628,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15753:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "15749:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "id": 630,
                                  "nodeType": "ExpressionStatement",
                                  "src": "15749:5:0"
                                },
                                "loopExpression": {
                                  "expression": {
                                    "id": 641,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "15780:3:0",
                                    "subExpression": {
                                      "id": 640,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 603,
                                      "src": "15780:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "id": 642,
                                  "nodeType": "ExpressionStatement",
                                  "src": "15780:3:0"
                                },
                                "nodeType": "ForStatement",
                                "src": "15744:97:0"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 655,
                                      "name": "bytesArray",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 621,
                                      "src": "15868:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 654,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "15861:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    },
                                    "typeName": {
                                      "id": 653,
                                      "name": "string",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15861:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 656,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "15861:18:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "functionReturnParameters": 584,
                                "id": 657,
                                "nodeType": "Return",
                                "src": "15854:25:0"
                              }
                            ]
                          }
                        },
                        "id": 663,
                        "nodeType": "IfStatement",
                        "src": "15463:470:0",
                        "trueBody": {
                          "id": 597,
                          "nodeType": "Block",
                          "src": "15486:58:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 591,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 580,
                                    "src": "15518:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "components": [
                                      {
                                        "id": 593,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "15525:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                          "typeString": "type(string storage pointer)"
                                        },
                                        "typeName": {
                                          "id": 592,
                                          "name": "string",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "15525:6:0",
                                          "typeDescriptions": {}
                                        }
                                      }
                                    ],
                                    "id": 594,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "15524:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    }
                                  ],
                                  "expression": {
                                    "id": 589,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "15507:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 590,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "decode",
                                  "nodeType": "MemberAccess",
                                  "src": "15507:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 595,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15507:26:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "functionReturnParameters": 584,
                              "id": 596,
                              "nodeType": "Return",
                              "src": "15500:33:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 665,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "returnDataToString",
                  "nameLocation": "15349:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 581,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 580,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "15381:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 665,
                        "src": "15368:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 579,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "15368:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15367:19:0"
                  },
                  "returnParameters": {
                    "id": 584,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 583,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 665,
                        "src": "15434:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 582,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "15434:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15433:15:0"
                  },
                  "scope": 870,
                  "src": "15340:599:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 696,
                    "nodeType": "Block",
                    "src": "16246:195:0",
                    "statements": [
                      {
                        "assignments": [
                          675,
                          677
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 675,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "16262:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 696,
                            "src": "16257:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 674,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "16257:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 677,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "16284:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 696,
                            "src": "16271:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 676,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "16271:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 688,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 685,
                                  "name": "SIG_SYMBOL",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 566,
                                  "src": "16354:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 683,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "16331:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 684,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "16331:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 686,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16331:34:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 680,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 669,
                                  "src": "16300:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 679,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "16292:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 678,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "16292:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 681,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16292:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 682,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "16292:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 687,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16292:83:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16256:119:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "id": 689,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 675,
                            "src": "16392:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3f3f3f",
                            "id": 693,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16429:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                              "typeString": "literal_string \"???\""
                            },
                            "value": "???"
                          },
                          "id": 694,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "16392:42:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 691,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 677,
                                "src": "16421:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 690,
                              "name": "returnDataToString",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 665,
                              "src": "16402:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (string memory)"
                              }
                            },
                            "id": 692,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16402:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 673,
                        "id": 695,
                        "nodeType": "Return",
                        "src": "16385:49:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 666,
                    "nodeType": "StructuredDocumentation",
                    "src": "15945:190:0",
                    "text": "@notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token symbol."
                  },
                  "id": 697,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeSymbol",
                  "nameLocation": "16149:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 670,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 669,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "16173:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 697,
                        "src": "16160:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 668,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 667,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "16160:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "16160:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16159:20:0"
                  },
                  "returnParameters": {
                    "id": 673,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 672,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 697,
                        "src": "16227:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 671,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "16227:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16226:15:0"
                  },
                  "scope": 870,
                  "src": "16140:301:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 728,
                    "nodeType": "Block",
                    "src": "16742:193:0",
                    "statements": [
                      {
                        "assignments": [
                          707,
                          709
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 707,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "16758:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 728,
                            "src": "16753:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 706,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "16753:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 709,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "16780:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 728,
                            "src": "16767:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 708,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "16767:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 720,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 717,
                                  "name": "SIG_NAME",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 569,
                                  "src": "16850:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 715,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "16827:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 716,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "16827:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 718,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16827:32:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 712,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 701,
                                  "src": "16796:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 711,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "16788:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 710,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "16788:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 713,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16788:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 714,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "16788:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 719,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16788:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16752:117:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "id": 721,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 707,
                            "src": "16886:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3f3f3f",
                            "id": 725,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16923:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                              "typeString": "literal_string \"???\""
                            },
                            "value": "???"
                          },
                          "id": 726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "16886:42:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 723,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 709,
                                "src": "16915:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 722,
                              "name": "returnDataToString",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 665,
                              "src": "16896:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (string memory)"
                              }
                            },
                            "id": 724,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16896:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 705,
                        "id": 727,
                        "nodeType": "Return",
                        "src": "16879:49:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 698,
                    "nodeType": "StructuredDocumentation",
                    "src": "16447:186:0",
                    "text": "@notice Provides a safe ERC20.name version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token name."
                  },
                  "id": 729,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeName",
                  "nameLocation": "16647:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 702,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 701,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "16669:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 729,
                        "src": "16656:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 700,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 699,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "16656:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "16656:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16655:20:0"
                  },
                  "returnParameters": {
                    "id": 705,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 704,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 729,
                        "src": "16723:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 703,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "16723:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16722:15:0"
                  },
                  "scope": 870,
                  "src": "16638:297:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 769,
                    "nodeType": "Block",
                    "src": "17209:216:0",
                    "statements": [
                      {
                        "assignments": [
                          739,
                          741
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 739,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "17225:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 769,
                            "src": "17220:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 738,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "17220:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 741,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "17247:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 769,
                            "src": "17234:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 740,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "17234:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 752,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 749,
                                  "name": "SIG_DECIMALS",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 572,
                                  "src": "17317:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 747,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "17294:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 748,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "17294:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 750,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17294:36:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 744,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 733,
                                  "src": "17263:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 743,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "17255:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 742,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17255:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 745,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17255:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "17255:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17255:85:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17219:121:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 758,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 753,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 739,
                              "src": "17357:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 757,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 754,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 741,
                                  "src": "17368:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 755,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "17368:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3332",
                                "id": 756,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17383:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "17368:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "17357:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3138",
                            "id": 766,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17416:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "id": 767,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "17357:61:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 761,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 741,
                                "src": "17399:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "components": [
                                  {
                                    "id": 763,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "17406:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint8_$",
                                      "typeString": "type(uint8)"
                                    },
                                    "typeName": {
                                      "id": 762,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "17406:5:0",
                                      "typeDescriptions": {}
                                    }
                                  }
                                ],
                                "id": 764,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "17405:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint8_$",
                                  "typeString": "type(uint8)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_type$_t_uint8_$",
                                  "typeString": "type(uint8)"
                                }
                              ],
                              "expression": {
                                "id": 759,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "17388:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 760,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "decode",
                              "nodeType": "MemberAccess",
                              "src": "17388:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 765,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17388:25:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "functionReturnParameters": 737,
                        "id": 768,
                        "nodeType": "Return",
                        "src": "17350:68:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 730,
                    "nodeType": "StructuredDocumentation",
                    "src": "16941:191:0",
                    "text": "@notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n @param token The address of the ERC-20 token contract.\n @return (uint8) Token decimals."
                  },
                  "id": 770,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeDecimals",
                  "nameLocation": "17146:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 734,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 733,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "17172:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 770,
                        "src": "17159:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 732,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 731,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "17159:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "17159:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17158:20:0"
                  },
                  "returnParameters": {
                    "id": 737,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 736,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 770,
                        "src": "17202:5:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 735,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "17202:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17201:7:0"
                  },
                  "scope": 870,
                  "src": "17137:288:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 817,
                    "nodeType": "Block",
                    "src": "17803:286:0",
                    "statements": [
                      {
                        "assignments": [
                          782,
                          784
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 782,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "17819:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 817,
                            "src": "17814:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 781,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "17814:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 784,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "17841:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 817,
                            "src": "17828:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 783,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "17828:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 797,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 792,
                                  "name": "SIG_TRANSFER",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 575,
                                  "src": "17905:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 793,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 776,
                                  "src": "17919:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 794,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 778,
                                  "src": "17923:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 790,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "17882:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 791,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "17882:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 795,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17882:48:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 787,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 774,
                                  "src": "17857:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 786,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "17849:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 785,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17849:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 788,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17849:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 789,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "17849:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 796,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17849:91:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17813:127:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 799,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 782,
                                "src": "17971:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 811,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 803,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 800,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 784,
                                          "src": "17983:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 801,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "17983:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 802,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "17998:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "17983:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "||",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "id": 806,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 784,
                                          "src": "18014:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        {
                                          "components": [
                                            {
                                              "id": 808,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "18021:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_bool_$",
                                                "typeString": "type(bool)"
                                              },
                                              "typeName": {
                                                "id": 807,
                                                "name": "bool",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "18021:4:0",
                                                "typeDescriptions": {}
                                              }
                                            }
                                          ],
                                          "id": 809,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "18020:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          },
                                          {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        ],
                                        "expression": {
                                          "id": 804,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "18003:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 805,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "decode",
                                        "nodeType": "MemberAccess",
                                        "src": "18003:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 810,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18003:24:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "17983:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 812,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "17982:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "17971:57:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "426f72696e6745524332303a205472616e73666572206661696c6564",
                              "id": 814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18042:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27",
                                "typeString": "literal_string \"BoringERC20: Transfer failed\""
                              },
                              "value": "BoringERC20: Transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27",
                                "typeString": "literal_string \"BoringERC20: Transfer failed\""
                              }
                            ],
                            "id": 798,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "17950:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17950:132:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 816,
                        "nodeType": "ExpressionStatement",
                        "src": "17950:132:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 771,
                    "nodeType": "StructuredDocumentation",
                    "src": "17431:258:0",
                    "text": "@notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param to Transfer tokens to.\n @param amount The token amount."
                  },
                  "id": 818,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nameLocation": "17703:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 779,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 774,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "17738:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "17725:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 773,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 772,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "17725:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "17725:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 776,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "17761:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "17753:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 775,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17753:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 778,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "17781:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "17773:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 777,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "17773:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17715:78:0"
                  },
                  "returnParameters": {
                    "id": 780,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "17803:0:0"
                  },
                  "scope": 870,
                  "src": "17694:395:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 868,
                    "nodeType": "Block",
                    "src": "18539:301:0",
                    "statements": [
                      {
                        "assignments": [
                          832,
                          834
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 832,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "18555:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 868,
                            "src": "18550:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 831,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "18550:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 834,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "18577:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 868,
                            "src": "18564:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 833,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "18564:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 848,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 842,
                                  "name": "SIG_TRANSFER_FROM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 578,
                                  "src": "18641:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 843,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 824,
                                  "src": "18660:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 844,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 826,
                                  "src": "18666:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 845,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 828,
                                  "src": "18670:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 840,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "18618:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 841,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "18618:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 846,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18618:59:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 837,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 822,
                                  "src": "18593:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 836,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "18585:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 835,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "18585:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 838,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18585:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 839,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "18585:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18585:102:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "18549:138:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 864,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 850,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 832,
                                "src": "18718:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 862,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 854,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 851,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 834,
                                          "src": "18730:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 852,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "18730:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 853,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "18745:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "18730:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "||",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "id": 857,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 834,
                                          "src": "18761:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        {
                                          "components": [
                                            {
                                              "id": 859,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "18768:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_bool_$",
                                                "typeString": "type(bool)"
                                              },
                                              "typeName": {
                                                "id": 858,
                                                "name": "bool",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "18768:4:0",
                                                "typeDescriptions": {}
                                              }
                                            }
                                          ],
                                          "id": 860,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "18767:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          },
                                          {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        ],
                                        "expression": {
                                          "id": 855,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "18750:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 856,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "decode",
                                        "nodeType": "MemberAccess",
                                        "src": "18750:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 861,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18750:24:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "18730:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 863,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "18729:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "18718:57:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "426f72696e6745524332303a205472616e7366657246726f6d206661696c6564",
                              "id": 865,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18789:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26",
                                "typeString": "literal_string \"BoringERC20: TransferFrom failed\""
                              },
                              "value": "BoringERC20: TransferFrom failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26",
                                "typeString": "literal_string \"BoringERC20: TransferFrom failed\""
                              }
                            ],
                            "id": 849,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "18697:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 866,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18697:136:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 867,
                        "nodeType": "ExpressionStatement",
                        "src": "18697:136:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 819,
                    "nodeType": "StructuredDocumentation",
                    "src": "18095:304:0",
                    "text": "@notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param from Transfer tokens from.\n @param to Transfer tokens to.\n @param amount The token amount."
                  },
                  "id": 869,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "18413:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 829,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 822,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "18452:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 869,
                        "src": "18439:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 821,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 820,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "18439:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "18439:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 824,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "18475:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 869,
                        "src": "18467:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 823,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18467:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 826,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "18497:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 869,
                        "src": "18489:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 825,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18489:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 828,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "18517:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 869,
                        "src": "18509:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 827,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "18509:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18429:100:0"
                  },
                  "returnParameters": {
                    "id": 830,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18539:0:0"
                  },
                  "scope": 870,
                  "src": "18404:436:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 3372,
              "src": "14933:3909:0",
              "usedErrors": []
            },
            {
              "id": 871,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "18886:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 896,
              "linearizedBaseContracts": [
                896
              ],
              "name": "IEmberPair",
              "nameLocation": "18921:10:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "485cc955",
                  "id": 878,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "initialize",
                  "nameLocation": "18947:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 876,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 873,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "18958:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 872,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18958:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 875,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 878,
                        "src": "18967:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 874,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18967:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18957:18:0"
                  },
                  "returnParameters": {
                    "id": 877,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18984:0:0"
                  },
                  "scope": 896,
                  "src": "18938:47:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "d505accf",
                  "id": 895,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "permit",
                  "nameLocation": "19000:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 893,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 880,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "19024:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19016:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 879,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19016:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 882,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "19047:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19039:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 881,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "19039:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 884,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "19072:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19064:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 883,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19064:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 886,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "19095:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19087:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 885,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "19087:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 888,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "19119:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19113:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 887,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "19113:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 890,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "19138:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19130:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 889,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "19130:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 892,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "19157:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "19149:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 891,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "19149:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "19006:158:0"
                  },
                  "returnParameters": {
                    "id": 894,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19173:0:0"
                  },
                  "scope": 896,
                  "src": "18991:183:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 3372,
              "src": "18911:265:0",
              "usedErrors": []
            },
            {
              "id": 897,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "19228:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 898,
                    "name": "Ownable",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 122,
                    "src": "19289:7:0"
                  },
                  "id": 899,
                  "nodeType": "InheritanceSpecifier",
                  "src": "19289:7:0"
                },
                {
                  "baseName": {
                    "id": 900,
                    "name": "ReentrancyGuard",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 161,
                    "src": "19298:15:0"
                  },
                  "id": 901,
                  "nodeType": "InheritanceSpecifier",
                  "src": "19298:15:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 3371,
              "linearizedBaseContracts": [
                3371,
                161,
                122,
                20
              ],
              "name": "EmberDistributorV2",
              "nameLocation": "19267:18:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 905,
                  "libraryName": {
                    "id": 902,
                    "name": "BoringERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 870,
                    "src": "19326:11:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "19320:35:0",
                  "typeName": {
                    "id": 904,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 903,
                      "name": "IBoringERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 529,
                      "src": "19342:12:0"
                    },
                    "referencedDeclaration": 529,
                    "src": "19342:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                      "typeString": "contract IBoringERC20"
                    }
                  }
                },
                {
                  "canonicalName": "EmberDistributorV2.UserInfo",
                  "id": 914,
                  "members": [
                    {
                      "constant": false,
                      "id": 907,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "19421:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 914,
                      "src": "19413:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 906,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19413:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 909,
                      "mutability": "mutable",
                      "name": "rewardDebt",
                      "nameLocation": "19490:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 914,
                      "src": "19482:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 908,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19482:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 911,
                      "mutability": "mutable",
                      "name": "rewardLockedUp",
                      "nameLocation": "19557:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 914,
                      "src": "19549:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 910,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19549:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 913,
                      "mutability": "mutable",
                      "name": "nextHarvestUntil",
                      "nameLocation": "19610:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 914,
                      "src": "19602:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 912,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19602:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserInfo",
                  "nameLocation": "19394:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 3371,
                  "src": "19387:282:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "EmberDistributorV2.PoolInfo",
                  "id": 934,
                  "members": [
                    {
                      "constant": false,
                      "id": 917,
                      "mutability": "mutable",
                      "name": "lpToken",
                      "nameLocation": "19740:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "19727:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                        "typeString": "contract IBoringERC20"
                      },
                      "typeName": {
                        "id": 916,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 915,
                          "name": "IBoringERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 529,
                          "src": "19727:12:0"
                        },
                        "referencedDeclaration": 529,
                        "src": "19727:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 919,
                      "mutability": "mutable",
                      "name": "allocPoint",
                      "nameLocation": "19798:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "19790:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 918,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19790:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 921,
                      "mutability": "mutable",
                      "name": "lastRewardTimestamp",
                      "nameLocation": "19910:19:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "19902:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 920,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19902:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 923,
                      "mutability": "mutable",
                      "name": "accEmberPerShare",
                      "nameLocation": "20000:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "19992:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 922,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19992:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 925,
                      "mutability": "mutable",
                      "name": "depositFeeBP",
                      "nameLocation": "20088:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20081:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 924,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "20081:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 927,
                      "mutability": "mutable",
                      "name": "harvestInterval",
                      "nameLocation": "20149:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20141:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 926,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20141:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 929,
                      "mutability": "mutable",
                      "name": "totalLp",
                      "nameLocation": "20213:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20205:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 928,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20205:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 933,
                      "mutability": "mutable",
                      "name": "rewarders",
                      "nameLocation": "20272:9:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20253:28:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                        "typeString": "contract IComplexRewarder[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 931,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 930,
                            "name": "IComplexRewarder",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 562,
                            "src": "20253:16:0"
                          },
                          "referencedDeclaration": 562,
                          "src": "20253:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                            "typeString": "contract IComplexRewarder"
                          }
                        },
                        "id": 932,
                        "nodeType": "ArrayTypeName",
                        "src": "20253:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                          "typeString": "contract IComplexRewarder[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "PoolInfo",
                  "nameLocation": "19708:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 3371,
                  "src": "19701:643:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1f1b9a7c",
                  "id": 937,
                  "mutability": "mutable",
                  "name": "ember",
                  "nameLocation": "20370:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20350:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                    "typeString": "contract IBoringERC20"
                  },
                  "typeName": {
                    "id": 936,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 935,
                      "name": "IBoringERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 529,
                      "src": "20350:12:0"
                    },
                    "referencedDeclaration": 529,
                    "src": "20350:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                      "typeString": "contract IBoringERC20"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1745d2e4",
                  "id": 939,
                  "mutability": "mutable",
                  "name": "emberPerSec",
                  "nameLocation": "20436:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20421:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 938,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20421:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "de73149d",
                  "id": 942,
                  "mutability": "constant",
                  "name": "MAXIMUM_HARVEST_INTERVAL",
                  "nameLocation": "20515:24:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20491:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 940,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20491:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3134",
                    "id": 941,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "20542:7:0",
                    "subdenomination": "days",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1209600_by_1",
                      "typeString": "int_const 1209600"
                    },
                    "value": "14"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "812c64f1",
                  "id": 945,
                  "mutability": "constant",
                  "name": "MAXIMUM_DEPOSIT_FEE_RATE",
                  "nameLocation": "20616:24:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20593:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 943,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "20593:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "value": {
                    "hexValue": "31303030",
                    "id": 944,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "20643:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000_by_1",
                      "typeString": "int_const 1000"
                    },
                    "value": "1000"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1526fe27",
                  "id": 949,
                  "mutability": "mutable",
                  "name": "poolInfo",
                  "nameLocation": "20697:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20679:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                    "typeString": "struct EmberDistributorV2.PoolInfo[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 947,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 946,
                        "name": "PoolInfo",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 934,
                        "src": "20679:8:0"
                      },
                      "referencedDeclaration": 934,
                      "src": "20679:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                        "typeString": "struct EmberDistributorV2.PoolInfo"
                      }
                    },
                    "id": 948,
                    "nodeType": "ArrayTypeName",
                    "src": "20679:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage_ptr",
                      "typeString": "struct EmberDistributorV2.PoolInfo[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "93f1a40b",
                  "id": 956,
                  "mutability": "mutable",
                  "name": "userInfo",
                  "nameLocation": "20816:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20760:64:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                    "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo))"
                  },
                  "typeName": {
                    "id": 955,
                    "keyType": {
                      "id": 950,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "20768:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "20760:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                      "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo))"
                    },
                    "valueType": {
                      "id": 954,
                      "keyType": {
                        "id": 951,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "20787:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "20779:28:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                        "typeString": "mapping(address => struct EmberDistributorV2.UserInfo)"
                      },
                      "valueType": {
                        "id": 953,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 952,
                          "name": "UserInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 914,
                          "src": "20798:8:0"
                        },
                        "referencedDeclaration": 914,
                        "src": "20798:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                          "typeString": "struct EmberDistributorV2.UserInfo"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "17caf6f1",
                  "id": 959,
                  "mutability": "mutable",
                  "name": "totalAllocPoint",
                  "nameLocation": "20933:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "20918:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 957,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "20918:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "20951:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "e6fd48bc",
                  "id": 961,
                  "mutability": "mutable",
                  "name": "startTimestamp",
                  "nameLocation": "21021:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21006:29:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 960,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21006:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "474fa630",
                  "id": 963,
                  "mutability": "mutable",
                  "name": "totalLockedUpRewards",
                  "nameLocation": "21088:20:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21073:35:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 962,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21073:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "2a22bc43",
                  "id": 966,
                  "mutability": "mutable",
                  "name": "totalEmberInPools",
                  "nameLocation": "21188:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21173:36:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21173:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 965,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "21208:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1c75f085",
                  "id": 968,
                  "mutability": "mutable",
                  "name": "teamAddress",
                  "nameLocation": "21252:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21237:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 967,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21237:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "c5f956af",
                  "id": 970,
                  "mutability": "mutable",
                  "name": "treasuryAddress",
                  "nameLocation": "21310:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21295:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 969,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21295:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "12e228fd",
                  "id": 972,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "21372:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21357:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 971,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21357:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "e164ac50",
                  "id": 974,
                  "mutability": "mutable",
                  "name": "teamPercent",
                  "nameLocation": "21463:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21448:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 973,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21448:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "04ef9d58",
                  "id": 976,
                  "mutability": "mutable",
                  "name": "treasuryPercent",
                  "nameLocation": "21557:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21542:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 975,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21542:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "0735b208",
                  "id": 978,
                  "mutability": "mutable",
                  "name": "investorPercent",
                  "nameLocation": "21655:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21640:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 977,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21640:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 981,
                  "mutability": "immutable",
                  "name": "ACC_TOKEN_PRECISION",
                  "nameLocation": "21731:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 3371,
                  "src": "21705:52:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 979,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21705:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31653132",
                    "id": 980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "21753:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000000_by_1",
                      "typeString": "int_const 1000000000000"
                    },
                    "value": "1e12"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 994,
                    "nodeType": "Block",
                    "src": "21805:82:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 989,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 986,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 983,
                                "src": "21823:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "expression": {
                                  "id": 987,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 949,
                                  "src": "21830:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 988,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "21830:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "21823:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "506f6f6c20646f6573206e6f74206578697374",
                              "id": 990,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "21847:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37",
                                "typeString": "literal_string \"Pool does not exist\""
                              },
                              "value": "Pool does not exist"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5431fb1d188dcb2accc598cd1f0bfc0c6d8ac1fdd8f589953b20179c9a903b37",
                                "typeString": "literal_string \"Pool does not exist\""
                              }
                            ],
                            "id": 985,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "21815:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 991,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "21815:54:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 992,
                        "nodeType": "ExpressionStatement",
                        "src": "21815:54:0"
                      },
                      {
                        "id": 993,
                        "nodeType": "PlaceholderStatement",
                        "src": "21879:1:0"
                      }
                    ]
                  },
                  "id": 995,
                  "name": "validatePoolByPid",
                  "nameLocation": "21773:17:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 984,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 983,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "21799:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 995,
                        "src": "21791:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 982,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21791:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21790:14:0"
                  },
                  "src": "21764:123:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "id": 1012,
                  "name": "Add",
                  "nameLocation": "21899:3:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1011,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 997,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "21928:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "21912:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 996,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21912:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 999,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "allocPoint",
                        "nameLocation": "21949:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "21941:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 998,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21941:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1002,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "lpToken",
                        "nameLocation": "21990:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "21969:28:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 1001,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1000,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "21969:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "21969:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1004,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "depositFeeBP",
                        "nameLocation": "22014:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "22007:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 1003,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "22007:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1006,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "harvestInterval",
                        "nameLocation": "22044:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "22036:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1005,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22036:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1010,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "rewarders",
                        "nameLocation": "22096:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1012,
                        "src": "22069:36:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_memory_ptr",
                          "typeString": "contract IComplexRewarder[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1008,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 1007,
                              "name": "IComplexRewarder",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 562,
                              "src": "22069:16:0"
                            },
                            "referencedDeclaration": 562,
                            "src": "22069:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                              "typeString": "contract IComplexRewarder"
                            }
                          },
                          "id": 1009,
                          "nodeType": "ArrayTypeName",
                          "src": "22069:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                            "typeString": "contract IComplexRewarder[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21902:209:0"
                  },
                  "src": "21893:219:0"
                },
                {
                  "anonymous": false,
                  "id": 1026,
                  "name": "Set",
                  "nameLocation": "22124:3:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1025,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1014,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22153:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1026,
                        "src": "22137:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1013,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22137:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1016,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "allocPoint",
                        "nameLocation": "22174:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1026,
                        "src": "22166:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1015,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22166:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1018,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "depositFeeBP",
                        "nameLocation": "22201:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1026,
                        "src": "22194:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 1017,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "22194:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1020,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "harvestInterval",
                        "nameLocation": "22231:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1026,
                        "src": "22223:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1019,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22223:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1024,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "rewarders",
                        "nameLocation": "22283:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1026,
                        "src": "22256:36:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_memory_ptr",
                          "typeString": "contract IComplexRewarder[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1022,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 1021,
                              "name": "IComplexRewarder",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 562,
                              "src": "22256:16:0"
                            },
                            "referencedDeclaration": 562,
                            "src": "22256:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                              "typeString": "contract IComplexRewarder"
                            }
                          },
                          "id": 1023,
                          "nodeType": "ArrayTypeName",
                          "src": "22256:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                            "typeString": "contract IComplexRewarder[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22127:171:0"
                  },
                  "src": "22118:181:0"
                },
                {
                  "anonymous": false,
                  "id": 1036,
                  "name": "UpdatePool",
                  "nameLocation": "22311:10:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1035,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1028,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22347:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1036,
                        "src": "22331:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1027,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22331:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1030,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "lastRewardTimestamp",
                        "nameLocation": "22368:19:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1036,
                        "src": "22360:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1029,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22360:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1032,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "lpSupply",
                        "nameLocation": "22405:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1036,
                        "src": "22397:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1031,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22397:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1034,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "accEmberPerShare",
                        "nameLocation": "22431:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1036,
                        "src": "22423:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1033,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22423:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22321:132:0"
                  },
                  "src": "22305:149:0"
                },
                {
                  "anonymous": false,
                  "id": 1044,
                  "name": "Deposit",
                  "nameLocation": "22466:7:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1043,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1038,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "22490:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1044,
                        "src": "22474:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1037,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22474:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1040,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22512:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1044,
                        "src": "22496:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1039,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22496:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1042,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "22525:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1044,
                        "src": "22517:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1041,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22517:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22473:59:0"
                  },
                  "src": "22460:73:0"
                },
                {
                  "anonymous": false,
                  "id": 1052,
                  "name": "Withdraw",
                  "nameLocation": "22545:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1051,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1046,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "22570:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1052,
                        "src": "22554:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1045,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22554:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1048,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22592:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1052,
                        "src": "22576:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1047,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22576:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1050,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "22605:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1052,
                        "src": "22597:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1049,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22597:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22553:59:0"
                  },
                  "src": "22539:74:0"
                },
                {
                  "anonymous": false,
                  "id": 1060,
                  "name": "EmergencyWithdraw",
                  "nameLocation": "22625:17:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1059,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1054,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "22668:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1060,
                        "src": "22652:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1053,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22652:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1056,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22698:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1060,
                        "src": "22682:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1055,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22682:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1058,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "22719:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1060,
                        "src": "22711:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1057,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22711:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22642:89:0"
                  },
                  "src": "22619:113:0"
                },
                {
                  "anonymous": false,
                  "id": 1068,
                  "name": "EmissionRateUpdated",
                  "nameLocation": "22744:19:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1067,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1062,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "22789:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "22773:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1061,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22773:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1064,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "previousValue",
                        "nameLocation": "22813:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "22805:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1063,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22805:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1066,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newValue",
                        "nameLocation": "22844:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1068,
                        "src": "22836:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1065,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22836:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22763:95:0"
                  },
                  "src": "22738:121:0"
                },
                {
                  "anonymous": false,
                  "id": 1076,
                  "name": "RewardLockedUp",
                  "nameLocation": "22871:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1075,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1070,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "22911:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1076,
                        "src": "22895:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1069,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22895:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1072,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22941:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1076,
                        "src": "22925:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1071,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22925:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1074,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amountLockedUp",
                        "nameLocation": "22962:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1076,
                        "src": "22954:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22954:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22885:97:0"
                  },
                  "src": "22865:118:0"
                },
                {
                  "anonymous": false,
                  "id": 1084,
                  "name": "AllocPointsUpdated",
                  "nameLocation": "22995:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1083,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1078,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "23039:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1084,
                        "src": "23023:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1077,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23023:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1080,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "previousAmount",
                        "nameLocation": "23063:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1084,
                        "src": "23055:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1079,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23055:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1082,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newAmount",
                        "nameLocation": "23095:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1084,
                        "src": "23087:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1081,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23087:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23013:97:0"
                  },
                  "src": "22989:122:0"
                },
                {
                  "anonymous": false,
                  "id": 1090,
                  "name": "SetTeamAddress",
                  "nameLocation": "23123:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1089,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1086,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldAddress",
                        "nameLocation": "23163:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1090,
                        "src": "23147:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1085,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23147:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1088,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAddress",
                        "nameLocation": "23199:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1090,
                        "src": "23183:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1087,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23183:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23137:78:0"
                  },
                  "src": "23117:99:0"
                },
                {
                  "anonymous": false,
                  "id": 1096,
                  "name": "SetTreasuryAddress",
                  "nameLocation": "23228:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1095,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1092,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldAddress",
                        "nameLocation": "23272:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1096,
                        "src": "23256:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1091,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23256:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1094,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAddress",
                        "nameLocation": "23308:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1096,
                        "src": "23292:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1093,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23292:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23246:78:0"
                  },
                  "src": "23222:103:0"
                },
                {
                  "anonymous": false,
                  "id": 1102,
                  "name": "SetInvestorAddress",
                  "nameLocation": "23337:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1098,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldAddress",
                        "nameLocation": "23381:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1102,
                        "src": "23365:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1097,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23365:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1100,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newAddress",
                        "nameLocation": "23417:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1102,
                        "src": "23401:26:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1099,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23401:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23355:78:0"
                  },
                  "src": "23331:103:0"
                },
                {
                  "anonymous": false,
                  "id": 1108,
                  "name": "SetTeamPercent",
                  "nameLocation": "23446:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1107,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1104,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldPercent",
                        "nameLocation": "23469:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1108,
                        "src": "23461:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1103,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23461:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1106,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newPercent",
                        "nameLocation": "23489:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1108,
                        "src": "23481:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1105,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23481:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23460:40:0"
                  },
                  "src": "23440:61:0"
                },
                {
                  "anonymous": false,
                  "id": 1114,
                  "name": "SetTreasuryPercent",
                  "nameLocation": "23513:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1113,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1110,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldPercent",
                        "nameLocation": "23540:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1114,
                        "src": "23532:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23532:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1112,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newPercent",
                        "nameLocation": "23560:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1114,
                        "src": "23552:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1111,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23552:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23531:40:0"
                  },
                  "src": "23507:65:0"
                },
                {
                  "anonymous": false,
                  "id": 1120,
                  "name": "SetInvestorPercent",
                  "nameLocation": "23584:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1119,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1116,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldPercent",
                        "nameLocation": "23611:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1120,
                        "src": "23603:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1115,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23603:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1118,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newPercent",
                        "nameLocation": "23631:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1120,
                        "src": "23623:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1117,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23623:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23602:40:0"
                  },
                  "src": "23578:65:0"
                },
                {
                  "body": {
                    "id": 1218,
                    "nodeType": "Block",
                    "src": "23922:1012:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1143,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1141,
                                "name": "_teamPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1133,
                                "src": "23953:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 1142,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "23969:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "23953:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e742076616c7565",
                              "id": 1144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23987:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4803ad6d33e2f17ab9b1c5c5963e784f44e81d486062cb80ae3826b13caec96b",
                                "typeString": "literal_string \"constructor: invalid team percent value\""
                              },
                              "value": "constructor: invalid team percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4803ad6d33e2f17ab9b1c5c5963e784f44e81d486062cb80ae3826b13caec96b",
                                "typeString": "literal_string \"constructor: invalid team percent value\""
                              }
                            ],
                            "id": 1140,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "23932:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1145,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23932:106:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1146,
                        "nodeType": "ExpressionStatement",
                        "src": "23932:106:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1150,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1148,
                                "name": "_treasuryPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1135,
                                "src": "24069:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 1149,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24089:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "24069:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a20696e76616c69642074726561737572792070657263656e742076616c7565",
                              "id": 1151,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24107:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3f14bc06db93da4c8eba868006eed909adda2e68633073669d2673a9c88e2710",
                                "typeString": "literal_string \"constructor: invalid treasury percent value\""
                              },
                              "value": "constructor: invalid treasury percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3f14bc06db93da4c8eba868006eed909adda2e68633073669d2673a9c88e2710",
                                "typeString": "literal_string \"constructor: invalid treasury percent value\""
                              }
                            ],
                            "id": 1147,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24048:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24048:114:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1153,
                        "nodeType": "ExpressionStatement",
                        "src": "24048:114:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1157,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1155,
                                "name": "_investorPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1137,
                                "src": "24193:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 1156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24213:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "24193:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a20696e76616c696420696e766573746f722070657263656e742076616c7565",
                              "id": 1158,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24231:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_fb234a8278b45faacdbcabe85b6bc001c61df1efa56208f39662d4cf9616fdbf",
                                "typeString": "literal_string \"constructor: invalid investor percent value\""
                              },
                              "value": "constructor: invalid investor percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_fb234a8278b45faacdbcabe85b6bc001c61df1efa56208f39662d4cf9616fdbf",
                                "typeString": "literal_string \"constructor: invalid investor percent value\""
                              }
                            ],
                            "id": 1154,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24172:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24172:114:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1160,
                        "nodeType": "ExpressionStatement",
                        "src": "24172:114:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1168,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1166,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1164,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1162,
                                    "name": "_teamPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1133,
                                    "src": "24317:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 1163,
                                    "name": "_treasuryPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1135,
                                    "src": "24332:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "24317:31:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 1165,
                                  "name": "_investorPercent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1137,
                                  "src": "24351:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "24317:50:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 1167,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24371:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "24317:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206d6178",
                              "id": 1169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24389:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eeeaa0db73dabe0d366b874c90cfa02755527ee326ec9d4b0f833d42c9659222",
                                "typeString": "literal_string \"constructor: total percent over max\""
                              },
                              "value": "constructor: total percent over max"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eeeaa0db73dabe0d366b874c90cfa02755527ee326ec9d4b0f833d42c9659222",
                                "typeString": "literal_string \"constructor: total percent over max\""
                              }
                            ],
                            "id": 1161,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24296:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24296:140:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1171,
                        "nodeType": "ExpressionStatement",
                        "src": "24296:140:0"
                      },
                      {
                        "expression": {
                          "id": 1184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1172,
                            "name": "startTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 961,
                            "src": "24561:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1183,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1173,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "24578:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1174,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "24578:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_rational_31536000_by_1",
                                    "typeString": "int_const 31536000"
                                  },
                                  "id": 1181,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_rational_86400_by_1",
                                      "typeString": "int_const 86400"
                                    },
                                    "id": 1179,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_3600_by_1",
                                        "typeString": "int_const 3600"
                                      },
                                      "id": 1177,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "3630",
                                        "id": 1175,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "24597:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_60_by_1",
                                          "typeString": "int_const 60"
                                        },
                                        "value": "60"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "3630",
                                        "id": 1176,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "24602:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_60_by_1",
                                          "typeString": "int_const 60"
                                        },
                                        "value": "60"
                                      },
                                      "src": "24597:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_3600_by_1",
                                        "typeString": "int_const 3600"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "hexValue": "3234",
                                      "id": 1178,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "24607:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_24_by_1",
                                        "typeString": "int_const 24"
                                      },
                                      "value": "24"
                                    },
                                    "src": "24597:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_86400_by_1",
                                      "typeString": "int_const 86400"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "hexValue": "333635",
                                    "id": 1180,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "24612:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_365_by_1",
                                      "typeString": "int_const 365"
                                    },
                                    "value": "365"
                                  },
                                  "src": "24597:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_31536000_by_1",
                                    "typeString": "int_const 31536000"
                                  }
                                }
                              ],
                              "id": 1182,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "24596:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_31536000_by_1",
                                "typeString": "int_const 31536000"
                              }
                            },
                            "src": "24578:38:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24561:55:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1185,
                        "nodeType": "ExpressionStatement",
                        "src": "24561:55:0"
                      },
                      {
                        "expression": {
                          "id": 1188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1186,
                            "name": "ember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 937,
                            "src": "24627:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IBoringERC20_$529",
                              "typeString": "contract IBoringERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1187,
                            "name": "_ember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1123,
                            "src": "24635:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IBoringERC20_$529",
                              "typeString": "contract IBoringERC20"
                            }
                          },
                          "src": "24627:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "id": 1189,
                        "nodeType": "ExpressionStatement",
                        "src": "24627:14:0"
                      },
                      {
                        "expression": {
                          "id": 1192,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1190,
                            "name": "emberPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 939,
                            "src": "24651:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1191,
                            "name": "_emberPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1125,
                            "src": "24665:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24651:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1193,
                        "nodeType": "ExpressionStatement",
                        "src": "24651:26:0"
                      },
                      {
                        "expression": {
                          "id": 1196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1194,
                            "name": "teamAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "24688:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1195,
                            "name": "_teamAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1127,
                            "src": "24702:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "24688:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1197,
                        "nodeType": "ExpressionStatement",
                        "src": "24688:26:0"
                      },
                      {
                        "expression": {
                          "id": 1200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1198,
                            "name": "treasuryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "24724:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1199,
                            "name": "_treasuryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1129,
                            "src": "24742:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "24724:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1201,
                        "nodeType": "ExpressionStatement",
                        "src": "24724:34:0"
                      },
                      {
                        "expression": {
                          "id": 1204,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1202,
                            "name": "investorAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 972,
                            "src": "24768:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1203,
                            "name": "_investorAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1131,
                            "src": "24786:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "24768:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1205,
                        "nodeType": "ExpressionStatement",
                        "src": "24768:34:0"
                      },
                      {
                        "expression": {
                          "id": 1208,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1206,
                            "name": "teamPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 974,
                            "src": "24813:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1207,
                            "name": "_teamPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1133,
                            "src": "24827:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24813:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1209,
                        "nodeType": "ExpressionStatement",
                        "src": "24813:26:0"
                      },
                      {
                        "expression": {
                          "id": 1212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1210,
                            "name": "treasuryPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 976,
                            "src": "24849:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1211,
                            "name": "_treasuryPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1135,
                            "src": "24867:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24849:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1213,
                        "nodeType": "ExpressionStatement",
                        "src": "24849:34:0"
                      },
                      {
                        "expression": {
                          "id": 1216,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1214,
                            "name": "investorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 978,
                            "src": "24893:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1215,
                            "name": "_investorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1137,
                            "src": "24911:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24893:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1217,
                        "nodeType": "ExpressionStatement",
                        "src": "24893:34:0"
                      }
                    ]
                  },
                  "id": 1219,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1138,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1123,
                        "mutability": "mutable",
                        "name": "_ember",
                        "nameLocation": "23683:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23670:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 1122,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1121,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "23670:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "23670:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1125,
                        "mutability": "mutable",
                        "name": "_emberPerSec",
                        "nameLocation": "23707:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23699:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1124,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23699:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1127,
                        "mutability": "mutable",
                        "name": "_teamAddress",
                        "nameLocation": "23737:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23729:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1126,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23729:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1129,
                        "mutability": "mutable",
                        "name": "_treasuryAddress",
                        "nameLocation": "23767:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23759:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1128,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23759:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1131,
                        "mutability": "mutable",
                        "name": "_investorAddress",
                        "nameLocation": "23801:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23793:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1130,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "23793:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1133,
                        "mutability": "mutable",
                        "name": "_teamPercent",
                        "nameLocation": "23835:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23827:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1132,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23827:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1135,
                        "mutability": "mutable",
                        "name": "_treasuryPercent",
                        "nameLocation": "23865:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23857:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1134,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23857:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1137,
                        "mutability": "mutable",
                        "name": "_investorPercent",
                        "nameLocation": "23899:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1219,
                        "src": "23891:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1136,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23891:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23660:261:0"
                  },
                  "returnParameters": {
                    "id": 1139,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "23922:0:0"
                  },
                  "scope": 3371,
                  "src": "23649:1285:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1268,
                    "nodeType": "Block",
                    "src": "25026:387:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1225,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "25057:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 1226,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "25057:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 1227,
                                "name": "startTimestamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 961,
                                "src": "25075:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "25057:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7374617274206661726d696e673a206661726d207374617274656420616c7265616479",
                              "id": 1229,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25103:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_80f49ce451bfa787912b59a7cfe9bfc751c1a1f008593f3c2b8a1316a392c821",
                                "typeString": "literal_string \"start farming: farm started already\""
                              },
                              "value": "start farming: farm started already"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_80f49ce451bfa787912b59a7cfe9bfc751c1a1f008593f3c2b8a1316a392c821",
                                "typeString": "literal_string \"start farming: farm started already\""
                              }
                            ],
                            "id": 1224,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "25036:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25036:114:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1231,
                        "nodeType": "ExpressionStatement",
                        "src": "25036:114:0"
                      },
                      {
                        "assignments": [
                          1233
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1233,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "25169:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1268,
                            "src": "25161:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1232,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "25161:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1236,
                        "initialValue": {
                          "expression": {
                            "id": 1234,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "25178:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1235,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "25178:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "25161:32:0"
                      },
                      {
                        "body": {
                          "id": 1261,
                          "nodeType": "Block",
                          "src": "25246:118:0",
                          "statements": [
                            {
                              "assignments": [
                                1249
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1249,
                                  "mutability": "mutable",
                                  "name": "pool",
                                  "nameLocation": "25277:4:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1261,
                                  "src": "25260:21:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.PoolInfo"
                                  },
                                  "typeName": {
                                    "id": 1248,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1247,
                                      "name": "PoolInfo",
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 934,
                                      "src": "25260:8:0"
                                    },
                                    "referencedDeclaration": 934,
                                    "src": "25260:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1253,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 1250,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 949,
                                  "src": "25284:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 1252,
                                "indexExpression": {
                                  "id": 1251,
                                  "name": "pid",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1238,
                                  "src": "25293:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "25284:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "25260:37:0"
                            },
                            {
                              "expression": {
                                "id": 1259,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1254,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1249,
                                    "src": "25311:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1256,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "lastRewardTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 921,
                                  "src": "25311:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1257,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "25338:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1258,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "25338:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "25311:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1260,
                              "nodeType": "ExpressionStatement",
                              "src": "25311:42:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1241,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1238,
                            "src": "25225:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1242,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1233,
                            "src": "25231:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "25225:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1262,
                        "initializationExpression": {
                          "assignments": [
                            1238
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1238,
                              "mutability": "mutable",
                              "name": "pid",
                              "nameLocation": "25216:3:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1262,
                              "src": "25208:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1237,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "25208:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1240,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1239,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "25222:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "25208:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "25239:5:0",
                            "subExpression": {
                              "id": 1244,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1238,
                              "src": "25241:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1246,
                          "nodeType": "ExpressionStatement",
                          "src": "25239:5:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "25203:161:0"
                      },
                      {
                        "expression": {
                          "id": 1266,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1263,
                            "name": "startTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 961,
                            "src": "25374:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1264,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "25391:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1265,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "25391:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "25374:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1267,
                        "nodeType": "ExpressionStatement",
                        "src": "25374:32:0"
                      }
                    ]
                  },
                  "functionSelector": "afbcfea1",
                  "id": 1269,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1222,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1221,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "25016:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "25016:9:0"
                    }
                  ],
                  "name": "startFarming",
                  "nameLocation": "24994:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1220,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "25006:2:0"
                  },
                  "returnParameters": {
                    "id": 1223,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "25026:0:0"
                  },
                  "scope": 3371,
                  "src": "24985:428:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1277,
                    "nodeType": "Block",
                    "src": "25473:39:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1274,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "25490:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "25490:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1273,
                        "id": 1276,
                        "nodeType": "Return",
                        "src": "25483:22:0"
                      }
                    ]
                  },
                  "functionSelector": "081e3eda",
                  "id": 1278,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolLength",
                  "nameLocation": "25428:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1270,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "25438:2:0"
                  },
                  "returnParameters": {
                    "id": 1273,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1272,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1278,
                        "src": "25464:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1271,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25464:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25463:9:0"
                  },
                  "scope": 3371,
                  "src": "25419:93:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1400,
                    "nodeType": "Block",
                    "src": "25929:1555:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1297,
                                  "name": "_rewarders",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1291,
                                  "src": "25947:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                    "typeString": "contract IComplexRewarder[] calldata"
                                  }
                                },
                                "id": 1298,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "25947:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "3130",
                                "id": 1299,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "25968:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "src": "25947:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164643a20746f6f206d616e7920726577617264657273",
                              "id": 1301,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25972:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6531aeb0e8455789ae4a04a19adebe400f964ea2ec04265d404d9e844ec0569f",
                                "typeString": "literal_string \"add: too many rewarders\""
                              },
                              "value": "add: too many rewarders"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_6531aeb0e8455789ae4a04a19adebe400f964ea2ec04265d404d9e844ec0569f",
                                "typeString": "literal_string \"add: too many rewarders\""
                              }
                            ],
                            "id": 1296,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "25939:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25939:59:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1303,
                        "nodeType": "ExpressionStatement",
                        "src": "25939:59:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 1307,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1305,
                                "name": "_depositFeeBP",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1285,
                                "src": "26029:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1306,
                                "name": "MAXIMUM_DEPOSIT_FEE_RATE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 945,
                                "src": "26046:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "src": "26029:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164643a206465706f7369742066656520746f6f2068696768",
                              "id": 1308,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26084:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e89950b009b7d838066251bc00ee1eec4cf04c094693d143909c95df830d8fd2",
                                "typeString": "literal_string \"add: deposit fee too high\""
                              },
                              "value": "add: deposit fee too high"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e89950b009b7d838066251bc00ee1eec4cf04c094693d143909c95df830d8fd2",
                                "typeString": "literal_string \"add: deposit fee too high\""
                              }
                            ],
                            "id": 1304,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "26008:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1309,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26008:113:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1310,
                        "nodeType": "ExpressionStatement",
                        "src": "26008:113:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1314,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1312,
                                "name": "_harvestInterval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1287,
                                "src": "26152:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1313,
                                "name": "MAXIMUM_HARVEST_INTERVAL",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 942,
                                "src": "26172:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "26152:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164643a20696e76616c6964206861727665737420696e74657276616c",
                              "id": 1315,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26210:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3f178f6b435869b11e7807ebabe44aaf37869349d89b2de2d38d8ce2ca49db57",
                                "typeString": "literal_string \"add: invalid harvest interval\""
                              },
                              "value": "add: invalid harvest interval"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3f178f6b435869b11e7807ebabe44aaf37869349d89b2de2d38d8ce2ca49db57",
                                "typeString": "literal_string \"add: invalid harvest interval\""
                              }
                            ],
                            "id": 1311,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "26131:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26131:120:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1317,
                        "nodeType": "ExpressionStatement",
                        "src": "26131:120:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1323,
                                      "name": "_lpToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1283,
                                      "src": "26309:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 1322,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "26301:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1321,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "26301:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1324,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "26301:17:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 1319,
                                  "name": "Address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 456,
                                  "src": "26282:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Address_$456_$",
                                    "typeString": "type(library Address)"
                                  }
                                },
                                "id": 1320,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "isContract",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 180,
                                "src": "26282:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1325,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "26282:37:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6e7472616374",
                              "id": 1326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26333:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b5c83331565e69a53e8ac1d54aa77fa100001aec4101e7fba075baebda05bbad",
                                "typeString": "literal_string \"add: LP token must be a valid contract\""
                              },
                              "value": "add: LP token must be a valid contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b5c83331565e69a53e8ac1d54aa77fa100001aec4101e7fba075baebda05bbad",
                                "typeString": "literal_string \"add: LP token must be a valid contract\""
                              }
                            ],
                            "id": 1318,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "26261:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1327,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26261:122:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1328,
                        "nodeType": "ExpressionStatement",
                        "src": "26261:122:0"
                      },
                      {
                        "body": {
                          "id": 1353,
                          "nodeType": "Block",
                          "src": "26515:165:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "baseExpression": {
                                              "id": 1345,
                                              "name": "_rewarders",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1291,
                                              "src": "26581:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                                "typeString": "contract IComplexRewarder[] calldata"
                                              }
                                            },
                                            "id": 1347,
                                            "indexExpression": {
                                              "id": 1346,
                                              "name": "rewarderId",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1330,
                                              "src": "26592:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "26581:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                              "typeString": "contract IComplexRewarder"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                              "typeString": "contract IComplexRewarder"
                                            }
                                          ],
                                          "id": 1344,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "26573:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 1343,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "26573:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1348,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "26573:31:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 1341,
                                        "name": "Address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 456,
                                        "src": "26554:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_Address_$456_$",
                                          "typeString": "type(library Address)"
                                        }
                                      },
                                      "id": 1342,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "isContract",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 180,
                                      "src": "26554:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                        "typeString": "function (address) view returns (bool)"
                                      }
                                    },
                                    "id": 1349,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "26554:51:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "6164643a207265776172646572206d75737420626520636f6e7472616374",
                                    "id": 1350,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "26623:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_731c1d3f18a3fa5bb00ef76dcc3565468ef3929760a408589de619e618fae1bf",
                                      "typeString": "literal_string \"add: rewarder must be contract\""
                                    },
                                    "value": "add: rewarder must be contract"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_731c1d3f18a3fa5bb00ef76dcc3565468ef3929760a408589de619e618fae1bf",
                                      "typeString": "literal_string \"add: rewarder must be contract\""
                                    }
                                  ],
                                  "id": 1340,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "26529:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1351,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "26529:140:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1352,
                              "nodeType": "ExpressionStatement",
                              "src": "26529:140:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1336,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1333,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1330,
                            "src": "26448:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1334,
                              "name": "_rewarders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1291,
                              "src": "26461:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            },
                            "id": 1335,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "26461:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "26448:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1354,
                        "initializationExpression": {
                          "assignments": [
                            1330
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1330,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "26420:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1354,
                              "src": "26412:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1329,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "26412:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1332,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1331,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26433:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "26412:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1338,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "26492:12:0",
                            "subExpression": {
                              "id": 1337,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1330,
                              "src": "26494:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1339,
                          "nodeType": "ExpressionStatement",
                          "src": "26492:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "26394:286:0"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1355,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "26690:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26690:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1357,
                        "nodeType": "ExpressionStatement",
                        "src": "26690:18:0"
                      },
                      {
                        "assignments": [
                          1359
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1359,
                            "mutability": "mutable",
                            "name": "lastRewardTimestamp",
                            "nameLocation": "26727:19:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1400,
                            "src": "26719:27:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1358,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "26719:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1368,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1363,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1360,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "26749:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1361,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "26749:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 1362,
                              "name": "startTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 961,
                              "src": "26767:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "26749:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 1366,
                            "name": "startTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 961,
                            "src": "26826:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1367,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "26749:91:0",
                          "trueExpression": {
                            "expression": {
                              "id": 1364,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "26796:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1365,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "26796:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "26719:121:0"
                      },
                      {
                        "expression": {
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1369,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "26851:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1370,
                            "name": "_allocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1280,
                            "src": "26870:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "26851:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1372,
                        "nodeType": "ExpressionStatement",
                        "src": "26851:30:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1377,
                                  "name": "_lpToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1283,
                                  "src": "26955:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                },
                                {
                                  "id": 1378,
                                  "name": "_allocPoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1280,
                                  "src": "26993:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1379,
                                  "name": "lastRewardTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1359,
                                  "src": "27043:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 1380,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "27098:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 1381,
                                  "name": "_depositFeeBP",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1285,
                                  "src": "27131:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                {
                                  "id": 1382,
                                  "name": "_harvestInterval",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1287,
                                  "src": "27179:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 1383,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "27222:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 1384,
                                  "name": "_rewarders",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1291,
                                  "src": "27252:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                    "typeString": "contract IComplexRewarder[] calldata"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  {
                                    "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                    "typeString": "contract IComplexRewarder[] calldata"
                                  }
                                ],
                                "id": 1376,
                                "name": "PoolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 934,
                                "src": "26919:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_PoolInfo_$934_storage_ptr_$",
                                  "typeString": "type(struct EmberDistributorV2.PoolInfo storage pointer)"
                                }
                              },
                              "id": 1385,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "lpToken",
                                "allocPoint",
                                "lastRewardTimestamp",
                                "accEmberPerShare",
                                "depositFeeBP",
                                "harvestInterval",
                                "totalLp",
                                "rewarders"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "26919:358:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo memory"
                              }
                            ],
                            "expression": {
                              "id": 1373,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 949,
                              "src": "26892:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                              }
                            },
                            "id": 1375,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "26892:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage_ptr_$_t_struct$_PoolInfo_$934_storage_$returns$__$bound_to$_t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct EmberDistributorV2.PoolInfo storage ref[] storage pointer,struct EmberDistributorV2.PoolInfo storage ref)"
                            }
                          },
                          "id": 1386,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26892:395:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1387,
                        "nodeType": "ExpressionStatement",
                        "src": "26892:395:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1392,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1389,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 949,
                                  "src": "27320:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 1390,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "27320:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1391,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "27338:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "27320:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1393,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1280,
                              "src": "27353:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1394,
                              "name": "_lpToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1283,
                              "src": "27378:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            {
                              "id": 1395,
                              "name": "_depositFeeBP",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1285,
                              "src": "27400:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            },
                            {
                              "id": 1396,
                              "name": "_harvestInterval",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1287,
                              "src": "27427:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1397,
                              "name": "_rewarders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1291,
                              "src": "27457:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              },
                              {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            ],
                            "id": 1388,
                            "name": "Add",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1012,
                            "src": "27303:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_contract$_IBoringERC20_$529_$_t_uint16_$_t_uint256_$_t_array$_t_contract$_IComplexRewarder_$562_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,uint256,contract IBoringERC20,uint16,uint256,contract IComplexRewarder[] memory)"
                            }
                          },
                          "id": 1398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "27303:174:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1399,
                        "nodeType": "EmitStatement",
                        "src": "27298:179:0"
                      }
                    ]
                  },
                  "functionSelector": "508593ab",
                  "id": 1401,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1294,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1293,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "25919:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "25919:9:0"
                    }
                  ],
                  "name": "add",
                  "nameLocation": "25730:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1292,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1280,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "25751:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1401,
                        "src": "25743:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1279,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25743:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1283,
                        "mutability": "mutable",
                        "name": "_lpToken",
                        "nameLocation": "25785:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1401,
                        "src": "25772:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 1282,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1281,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "25772:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "25772:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1285,
                        "mutability": "mutable",
                        "name": "_depositFeeBP",
                        "nameLocation": "25810:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1401,
                        "src": "25803:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 1284,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "25803:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1287,
                        "mutability": "mutable",
                        "name": "_harvestInterval",
                        "nameLocation": "25841:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1401,
                        "src": "25833:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1286,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25833:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1291,
                        "mutability": "mutable",
                        "name": "_rewarders",
                        "nameLocation": "25895:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1401,
                        "src": "25867:38:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                          "typeString": "contract IComplexRewarder[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1289,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 1288,
                              "name": "IComplexRewarder",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 562,
                              "src": "25867:16:0"
                            },
                            "referencedDeclaration": 562,
                            "src": "25867:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                              "typeString": "contract IComplexRewarder"
                            }
                          },
                          "id": 1290,
                          "nodeType": "ArrayTypeName",
                          "src": "25867:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                            "typeString": "contract IComplexRewarder[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25733:178:0"
                  },
                  "returnParameters": {
                    "id": 1295,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "25929:0:0"
                  },
                  "scope": 3371,
                  "src": "25721:1763:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1519,
                    "nodeType": "Block",
                    "src": "27817:1139:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1425,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1422,
                                  "name": "_rewarders",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1413,
                                  "src": "27835:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                    "typeString": "contract IComplexRewarder[] calldata"
                                  }
                                },
                                "id": 1423,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "27835:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "3130",
                                "id": 1424,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "27856:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "src": "27835:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7365743a20746f6f206d616e7920726577617264657273",
                              "id": 1426,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "27860:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1f723c64b341c3563e5c9c8e95dfced9a5f7ad599880a46ccb0bf93e235d17ea",
                                "typeString": "literal_string \"set: too many rewarders\""
                              },
                              "value": "set: too many rewarders"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1f723c64b341c3563e5c9c8e95dfced9a5f7ad599880a46ccb0bf93e235d17ea",
                                "typeString": "literal_string \"set: too many rewarders\""
                              }
                            ],
                            "id": 1421,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "27827:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1427,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "27827:59:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1428,
                        "nodeType": "ExpressionStatement",
                        "src": "27827:59:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 1432,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1430,
                                "name": "_depositFeeBP",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1407,
                                "src": "27918:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1431,
                                "name": "MAXIMUM_DEPOSIT_FEE_RATE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 945,
                                "src": "27935:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "src": "27918:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7365743a206465706f7369742066656520746f6f2068696768",
                              "id": 1433,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "27973:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_062b11ff5385469ec73c97eb15a43f7ff079a5371a66fd58bdeca6df436bd281",
                                "typeString": "literal_string \"set: deposit fee too high\""
                              },
                              "value": "set: deposit fee too high"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_062b11ff5385469ec73c97eb15a43f7ff079a5371a66fd58bdeca6df436bd281",
                                "typeString": "literal_string \"set: deposit fee too high\""
                              }
                            ],
                            "id": 1429,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "27897:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1434,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "27897:113:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1435,
                        "nodeType": "ExpressionStatement",
                        "src": "27897:113:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1439,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1437,
                                "name": "_harvestInterval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1409,
                                "src": "28041:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1438,
                                "name": "MAXIMUM_HARVEST_INTERVAL",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 942,
                                "src": "28061:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "28041:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7365743a20696e76616c6964206861727665737420696e74657276616c",
                              "id": 1440,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "28099:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a334800cd19b18b6d938393d303a75ee080f825dc478f54dd3ef6d6a8de1a586",
                                "typeString": "literal_string \"set: invalid harvest interval\""
                              },
                              "value": "set: invalid harvest interval"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a334800cd19b18b6d938393d303a75ee080f825dc478f54dd3ef6d6a8de1a586",
                                "typeString": "literal_string \"set: invalid harvest interval\""
                              }
                            ],
                            "id": 1436,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "28020:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1441,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28020:120:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1442,
                        "nodeType": "ExpressionStatement",
                        "src": "28020:120:0"
                      },
                      {
                        "body": {
                          "id": 1467,
                          "nodeType": "Block",
                          "src": "28272:165:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "baseExpression": {
                                              "id": 1459,
                                              "name": "_rewarders",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1413,
                                              "src": "28338:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                                "typeString": "contract IComplexRewarder[] calldata"
                                              }
                                            },
                                            "id": 1461,
                                            "indexExpression": {
                                              "id": 1460,
                                              "name": "rewarderId",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1444,
                                              "src": "28349:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "28338:22:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                              "typeString": "contract IComplexRewarder"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                              "typeString": "contract IComplexRewarder"
                                            }
                                          ],
                                          "id": 1458,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "28330:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 1457,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "28330:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1462,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "28330:31:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 1455,
                                        "name": "Address",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 456,
                                        "src": "28311:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_Address_$456_$",
                                          "typeString": "type(library Address)"
                                        }
                                      },
                                      "id": 1456,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "isContract",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 180,
                                      "src": "28311:18:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                        "typeString": "function (address) view returns (bool)"
                                      }
                                    },
                                    "id": 1463,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "28311:51:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "7365743a207265776172646572206d75737420626520636f6e7472616374",
                                    "id": 1464,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "28380:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_46e72d344b29df84eda53053105526bcca88405e033d24322788bbf12ed030f8",
                                      "typeString": "literal_string \"set: rewarder must be contract\""
                                    },
                                    "value": "set: rewarder must be contract"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_46e72d344b29df84eda53053105526bcca88405e033d24322788bbf12ed030f8",
                                      "typeString": "literal_string \"set: rewarder must be contract\""
                                    }
                                  ],
                                  "id": 1454,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "28286:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1465,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "28286:140:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1466,
                              "nodeType": "ExpressionStatement",
                              "src": "28286:140:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1447,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1444,
                            "src": "28205:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1448,
                              "name": "_rewarders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1413,
                              "src": "28218:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            },
                            "id": 1449,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "28218:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28205:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1468,
                        "initializationExpression": {
                          "assignments": [
                            1444
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1444,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "28177:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1468,
                              "src": "28169:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1443,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "28169:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1446,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1445,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28190:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "28169:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1452,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "28249:12:0",
                            "subExpression": {
                              "id": 1451,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1444,
                              "src": "28251:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1453,
                          "nodeType": "ExpressionStatement",
                          "src": "28249:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "28151:286:0"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1469,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "28447:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28447:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1471,
                        "nodeType": "ExpressionStatement",
                        "src": "28447:18:0"
                      },
                      {
                        "expression": {
                          "id": 1481,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1472,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "28476:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1480,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1478,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1473,
                                "name": "totalAllocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 959,
                                "src": "28506:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 1474,
                                    "name": "poolInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 949,
                                    "src": "28536:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                    }
                                  },
                                  "id": 1476,
                                  "indexExpression": {
                                    "id": 1475,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1403,
                                    "src": "28545:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "28536:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                                  }
                                },
                                "id": 1477,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allocPoint",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 919,
                                "src": "28536:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "28506:55:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 1479,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1405,
                              "src": "28576:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "28506:81:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28476:111:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1482,
                        "nodeType": "ExpressionStatement",
                        "src": "28476:111:0"
                      },
                      {
                        "expression": {
                          "id": 1488,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1483,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 949,
                                "src": "28598:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 1485,
                              "indexExpression": {
                                "id": 1484,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "28607:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "28598:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                              }
                            },
                            "id": 1486,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "allocPoint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 919,
                            "src": "28598:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1487,
                            "name": "_allocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1405,
                            "src": "28626:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28598:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1489,
                        "nodeType": "ExpressionStatement",
                        "src": "28598:39:0"
                      },
                      {
                        "expression": {
                          "id": 1495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1490,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 949,
                                "src": "28647:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 1492,
                              "indexExpression": {
                                "id": 1491,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "28656:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "28647:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                              }
                            },
                            "id": 1493,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "depositFeeBP",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 925,
                            "src": "28647:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1494,
                            "name": "_depositFeeBP",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1407,
                            "src": "28677:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint16",
                              "typeString": "uint16"
                            }
                          },
                          "src": "28647:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "id": 1496,
                        "nodeType": "ExpressionStatement",
                        "src": "28647:43:0"
                      },
                      {
                        "expression": {
                          "id": 1502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1497,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 949,
                                "src": "28700:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 1499,
                              "indexExpression": {
                                "id": 1498,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "28709:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "28700:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                              }
                            },
                            "id": 1500,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "harvestInterval",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 927,
                            "src": "28700:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1501,
                            "name": "_harvestInterval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1409,
                            "src": "28733:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28700:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1503,
                        "nodeType": "ExpressionStatement",
                        "src": "28700:49:0"
                      },
                      {
                        "expression": {
                          "id": 1509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1504,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 949,
                                "src": "28759:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 1506,
                              "indexExpression": {
                                "id": 1505,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "28768:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "28759:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                              }
                            },
                            "id": 1507,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewarders",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 933,
                            "src": "28759:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                              "typeString": "contract IComplexRewarder[] storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1508,
                            "name": "_rewarders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1413,
                            "src": "28786:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                              "typeString": "contract IComplexRewarder[] calldata"
                            }
                          },
                          "src": "28759:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                            "typeString": "contract IComplexRewarder[] storage ref"
                          }
                        },
                        "id": 1510,
                        "nodeType": "ExpressionStatement",
                        "src": "28759:37:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1512,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1403,
                              "src": "28829:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1513,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1405,
                              "src": "28847:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1514,
                              "name": "_depositFeeBP",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1407,
                              "src": "28872:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              }
                            },
                            {
                              "id": 1515,
                              "name": "_harvestInterval",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1409,
                              "src": "28899:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1516,
                              "name": "_rewarders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1413,
                              "src": "28929:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                                "typeString": "contract IComplexRewarder[] calldata"
                              }
                            ],
                            "id": 1511,
                            "name": "Set",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1026,
                            "src": "28812:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint16_$_t_uint256_$_t_array$_t_contract$_IComplexRewarder_$562_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,uint256,uint16,uint256,contract IComplexRewarder[] memory)"
                            }
                          },
                          "id": 1517,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28812:137:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1518,
                        "nodeType": "EmitStatement",
                        "src": "28807:142:0"
                      }
                    ]
                  },
                  "functionSelector": "2081ccc4",
                  "id": 1520,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1416,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1415,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "27783:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "27783:9:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 1418,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1403,
                          "src": "27811:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1419,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1417,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "27793:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "27793:23:0"
                    }
                  ],
                  "name": "set",
                  "nameLocation": "27603:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1414,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1403,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "27624:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1520,
                        "src": "27616:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1402,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27616:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1405,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "27646:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1520,
                        "src": "27638:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1404,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27638:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1407,
                        "mutability": "mutable",
                        "name": "_depositFeeBP",
                        "nameLocation": "27674:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1520,
                        "src": "27667:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 1406,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "27667:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1409,
                        "mutability": "mutable",
                        "name": "_harvestInterval",
                        "nameLocation": "27705:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1520,
                        "src": "27697:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1408,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27697:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1413,
                        "mutability": "mutable",
                        "name": "_rewarders",
                        "nameLocation": "27759:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1520,
                        "src": "27731:38:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_calldata_ptr",
                          "typeString": "contract IComplexRewarder[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1411,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 1410,
                              "name": "IComplexRewarder",
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 562,
                              "src": "27731:16:0"
                            },
                            "referencedDeclaration": 562,
                            "src": "27731:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                              "typeString": "contract IComplexRewarder"
                            }
                          },
                          "id": 1412,
                          "nodeType": "ArrayTypeName",
                          "src": "27731:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage_ptr",
                            "typeString": "contract IComplexRewarder[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27606:169:0"
                  },
                  "returnParameters": {
                    "id": 1420,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "27817:0:0"
                  },
                  "scope": 3371,
                  "src": "27594:1362:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1808,
                    "nodeType": "Block",
                    "src": "29318:2118:0",
                    "statements": [
                      {
                        "assignments": [
                          1544
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1544,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "29345:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1808,
                            "src": "29328:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 1543,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1542,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "29328:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "29328:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1548,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1545,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "29352:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1547,
                          "indexExpression": {
                            "id": 1546,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1522,
                            "src": "29361:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "29352:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "29328:38:0"
                      },
                      {
                        "assignments": [
                          1551
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1551,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "29393:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1808,
                            "src": "29376:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 1550,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1549,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "29376:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "29376:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1557,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1552,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "29400:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 1554,
                            "indexExpression": {
                              "id": 1553,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1522,
                              "src": "29409:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "29400:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 1556,
                          "indexExpression": {
                            "id": 1555,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1524,
                            "src": "29415:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "29400:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "29376:45:0"
                      },
                      {
                        "assignments": [
                          1559
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1559,
                            "mutability": "mutable",
                            "name": "accEmberPerShare",
                            "nameLocation": "29439:16:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1808,
                            "src": "29431:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1558,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "29431:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1562,
                        "initialValue": {
                          "expression": {
                            "id": 1560,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1544,
                            "src": "29458:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                            }
                          },
                          "id": 1561,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "accEmberPerShare",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 923,
                          "src": "29458:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "29431:48:0"
                      },
                      {
                        "assignments": [
                          1564
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1564,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "29497:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1808,
                            "src": "29489:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1563,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "29489:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1567,
                        "initialValue": {
                          "expression": {
                            "id": 1565,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1544,
                            "src": "29508:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                            }
                          },
                          "id": 1566,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "totalLp",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 929,
                          "src": "29508:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "29489:31:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1572,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1568,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "29535:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1569,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "29535:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "expression": {
                                "id": 1570,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1544,
                                "src": "29553:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 1571,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardTimestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 921,
                              "src": "29553:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "29535:42:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1575,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1573,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1564,
                              "src": "29581:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1574,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "29593:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "29581:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "29535:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1627,
                        "nodeType": "IfStatement",
                        "src": "29531:638:0",
                        "trueBody": {
                          "id": 1626,
                          "nodeType": "Block",
                          "src": "29596:573:0",
                          "statements": [
                            {
                              "assignments": [
                                1578
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1578,
                                  "mutability": "mutable",
                                  "name": "multiplier",
                                  "nameLocation": "29618:10:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1626,
                                  "src": "29610:18:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1577,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29610:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1584,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1583,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1579,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "29631:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1580,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "29631:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1581,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1544,
                                    "src": "29649:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1582,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lastRewardTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 921,
                                  "src": "29649:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "29631:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29610:63:0"
                            },
                            {
                              "assignments": [
                                1586
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1586,
                                  "mutability": "mutable",
                                  "name": "total",
                                  "nameLocation": "29695:5:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1626,
                                  "src": "29687:13:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1585,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29687:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1588,
                              "initialValue": {
                                "hexValue": "31303030",
                                "id": 1587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "29703:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29687:20:0"
                            },
                            {
                              "assignments": [
                                1590
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1590,
                                  "mutability": "mutable",
                                  "name": "lpPercent",
                                  "nameLocation": "29729:9:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1626,
                                  "src": "29721:17:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1589,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29721:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1598,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1595,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1593,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1591,
                                      "name": "total",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1586,
                                      "src": "29741:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "id": 1592,
                                      "name": "teamPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 974,
                                      "src": "29765:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "29741:35:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 1594,
                                    "name": "treasuryPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 976,
                                    "src": "29795:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "29741:69:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 1596,
                                  "name": "investorPercent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 978,
                                  "src": "29829:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "29741:103:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29721:123:0"
                            },
                            {
                              "assignments": [
                                1600
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1600,
                                  "mutability": "mutable",
                                  "name": "emberReward",
                                  "nameLocation": "29867:11:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1626,
                                  "src": "29859:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1599,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29859:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1614,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1613,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1611,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1608,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1606,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1603,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1601,
                                              "name": "multiplier",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1578,
                                              "src": "29882:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 1602,
                                              "name": "emberPerSec",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 939,
                                              "src": "29911:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "29882:40:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "*",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 1604,
                                              "name": "pool",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1544,
                                              "src": "29941:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                              }
                                            },
                                            "id": 1605,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "allocPoint",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 919,
                                            "src": "29941:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "29882:74:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "id": 1607,
                                          "name": "lpPercent",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1590,
                                          "src": "29975:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "29882:102:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 1609,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "29881:104:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 1610,
                                    "name": "totalAllocPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 959,
                                    "src": "30004:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "29881:138:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 1612,
                                  "name": "total",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1586,
                                  "src": "30038:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "29881:162:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29859:184:0"
                            },
                            {
                              "expression": {
                                "id": 1624,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1615,
                                  "name": "accEmberPerShare",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1559,
                                  "src": "30058:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "components": [
                                    {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1621,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "components": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 1618,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 1616,
                                                  "name": "emberReward",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1600,
                                                  "src": "30098:11:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "id": 1617,
                                                  "name": "ACC_TOKEN_PRECISION",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 981,
                                                  "src": "30112:19:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "src": "30098:33:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 1619,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "30097:35:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "/",
                                          "rightExpression": {
                                            "id": 1620,
                                            "name": "lpSupply",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1564,
                                            "src": "30135:8:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "30097:46:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1622,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "30096:48:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1623,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "30078:80:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "30058:100:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1625,
                              "nodeType": "ExpressionStatement",
                              "src": "30058:100:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1629
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1629,
                            "mutability": "mutable",
                            "name": "pendingEmber",
                            "nameLocation": "30187:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1808,
                            "src": "30179:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1628,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "30179:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1645,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1640,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1636,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1633,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "id": 1630,
                                                "name": "user",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1551,
                                                "src": "30205:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                                  "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                                }
                                              },
                                              "id": 1631,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "amount",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 907,
                                              "src": "30205:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 1632,
                                              "name": "accEmberPerShare",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1559,
                                              "src": "30219:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "30205:30:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1634,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "30204:32:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "id": 1635,
                                        "name": "ACC_TOKEN_PRECISION",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 981,
                                        "src": "30251:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "30204:66:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1637,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "30203:68:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1638,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "30274:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 1639,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "rewardDebt",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 909,
                                  "src": "30274:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "30203:86:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1641,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "30202:88:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "expression": {
                              "id": 1642,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1551,
                              "src": "30293:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 1643,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "rewardLockedUp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 911,
                            "src": "30293:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30202:110:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "30179:133:0"
                      },
                      {
                        "expression": {
                          "id": 1656,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1646,
                            "name": "addresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1531,
                            "src": "30323:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1654,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1650,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1544,
                                      "src": "30349:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1651,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "30349:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1652,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "30349:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1653,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30373:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "30349:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1649,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "30335:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (address[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1647,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "30339:7:0",
                                  "stateMutability": "nonpayable",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1648,
                                "nodeType": "ArrayTypeName",
                                "src": "30339:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                  "typeString": "address[]"
                                }
                              }
                            },
                            "id": 1655,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30335:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "src": "30323:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 1657,
                        "nodeType": "ExpressionStatement",
                        "src": "30323:52:0"
                      },
                      {
                        "expression": {
                          "id": 1668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1658,
                            "name": "symbols",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1534,
                            "src": "30385:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1666,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1662,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1544,
                                      "src": "30408:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1663,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "30408:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1664,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "30408:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30432:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "30408:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "30395:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1659,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "30399:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "id": 1660,
                                "nodeType": "ArrayTypeName",
                                "src": "30399:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                  "typeString": "string[]"
                                }
                              }
                            },
                            "id": 1667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30395:39:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "src": "30385:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        },
                        "id": 1669,
                        "nodeType": "ExpressionStatement",
                        "src": "30385:49:0"
                      },
                      {
                        "expression": {
                          "id": 1680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1670,
                            "name": "amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1540,
                            "src": "30444:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1674,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1544,
                                      "src": "30468:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1675,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "30468:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1676,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "30468:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1677,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30492:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "30468:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1673,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "30454:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1671,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "30458:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1672,
                                "nodeType": "ArrayTypeName",
                                "src": "30458:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1679,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30454:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "30444:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1681,
                        "nodeType": "ExpressionStatement",
                        "src": "30444:50:0"
                      },
                      {
                        "expression": {
                          "id": 1692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1682,
                            "name": "decimals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1537,
                            "src": "30504:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1690,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1686,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1544,
                                      "src": "30529:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1687,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "30529:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1688,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "30529:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1689,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30553:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "30529:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1685,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "30515:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1683,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "30519:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1684,
                                "nodeType": "ArrayTypeName",
                                "src": "30519:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1691,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30515:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "30504:51:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1693,
                        "nodeType": "ExpressionStatement",
                        "src": "30504:51:0"
                      },
                      {
                        "expression": {
                          "id": 1701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1694,
                              "name": "addresses",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1531,
                              "src": "30566:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 1696,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1695,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "30576:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "30566:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1699,
                                "name": "ember",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 937,
                                "src": "30589:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              ],
                              "id": 1698,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "30581:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1697,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "30581:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1700,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30581:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "30566:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1702,
                        "nodeType": "ExpressionStatement",
                        "src": "30566:29:0"
                      },
                      {
                        "expression": {
                          "id": 1711,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1703,
                              "name": "symbols",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1534,
                              "src": "30605:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                "typeString": "string memory[] memory"
                              }
                            },
                            "id": 1705,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1704,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "30613:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "30605:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1707,
                                    "name": "ember",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 937,
                                    "src": "30631:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  ],
                                  "id": 1706,
                                  "name": "IBoringERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 529,
                                  "src": "30618:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "type(contract IBoringERC20)"
                                  }
                                },
                                "id": 1708,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "30618:19:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              },
                              "id": 1709,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "safeSymbol",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 697,
                              "src": "30618:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_string_memory_ptr_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                "typeString": "function (contract IBoringERC20) view returns (string memory)"
                              }
                            },
                            "id": 1710,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30618:32:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "30605:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "id": 1712,
                        "nodeType": "ExpressionStatement",
                        "src": "30605:45:0"
                      },
                      {
                        "expression": {
                          "id": 1721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1713,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1537,
                              "src": "30660:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1715,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "30669:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "30660:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1717,
                                    "name": "ember",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 937,
                                    "src": "30687:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  ],
                                  "id": 1716,
                                  "name": "IBoringERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 529,
                                  "src": "30674:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "type(contract IBoringERC20)"
                                  }
                                },
                                "id": 1718,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "30674:19:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              },
                              "id": 1719,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "safeDecimals",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 770,
                              "src": "30674:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_uint8_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                "typeString": "function (contract IBoringERC20) view returns (uint8)"
                              }
                            },
                            "id": 1720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30674:34:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "30660:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1722,
                        "nodeType": "ExpressionStatement",
                        "src": "30660:48:0"
                      },
                      {
                        "expression": {
                          "id": 1727,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1723,
                              "name": "amounts",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1540,
                              "src": "30718:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1725,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "30726:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "30718:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1726,
                            "name": "pendingEmber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1629,
                            "src": "30731:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30718:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1728,
                        "nodeType": "ExpressionStatement",
                        "src": "30718:25:0"
                      },
                      {
                        "body": {
                          "id": 1806,
                          "nodeType": "Block",
                          "src": "30879:551:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1755,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1741,
                                    "name": "addresses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1531,
                                    "src": "30893:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                      "typeString": "address[] memory"
                                    }
                                  },
                                  "id": 1745,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1744,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1742,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1730,
                                      "src": "30903:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1743,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "30916:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "30903:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "30893:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "expression": {
                                          "baseExpression": {
                                            "expression": {
                                              "id": 1748,
                                              "name": "pool",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1544,
                                              "src": "30946:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                              }
                                            },
                                            "id": 1749,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewarders",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 933,
                                            "src": "30946:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                              "typeString": "contract IComplexRewarder[] storage ref"
                                            }
                                          },
                                          "id": 1751,
                                          "indexExpression": {
                                            "id": 1750,
                                            "name": "rewarderId",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1730,
                                            "src": "30961:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "30946:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                            "typeString": "contract IComplexRewarder"
                                          }
                                        },
                                        "id": 1752,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardToken",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 554,
                                        "src": "30946:38:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "function () view external returns (contract IBoringERC20)"
                                        }
                                      },
                                      "id": 1753,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "30946:40:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 1747,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "30921:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1746,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "30921:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1754,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "30921:79:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "30893:107:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1756,
                              "nodeType": "ExpressionStatement",
                              "src": "30893:107:0"
                            },
                            {
                              "expression": {
                                "id": 1772,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1757,
                                    "name": "symbols",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1534,
                                    "src": "31015:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 1761,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1760,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1758,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1730,
                                      "src": "31023:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1759,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "31036:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "31023:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "31015:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1763,
                                                  "name": "pool",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1544,
                                                  "src": "31071:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                                  }
                                                },
                                                "id": 1764,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "rewarders",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 933,
                                                "src": "31071:14:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                                  "typeString": "contract IComplexRewarder[] storage ref"
                                                }
                                              },
                                              "id": 1766,
                                              "indexExpression": {
                                                "id": 1765,
                                                "name": "rewarderId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1730,
                                                "src": "31086:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "31071:26:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                                "typeString": "contract IComplexRewarder"
                                              }
                                            },
                                            "id": 1767,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewardToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 554,
                                            "src": "31071:38:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                              "typeString": "function () view external returns (contract IBoringERC20)"
                                            }
                                          },
                                          "id": 1768,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "31071:40:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        ],
                                        "id": 1762,
                                        "name": "IBoringERC20",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 529,
                                        "src": "31041:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "type(contract IBoringERC20)"
                                        }
                                      },
                                      "id": 1769,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "31041:84:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 1770,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "safeSymbol",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 697,
                                    "src": "31041:95:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_string_memory_ptr_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                      "typeString": "function (contract IBoringERC20) view returns (string memory)"
                                    }
                                  },
                                  "id": 1771,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "31041:97:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "src": "31015:123:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "id": 1773,
                              "nodeType": "ExpressionStatement",
                              "src": "31015:123:0"
                            },
                            {
                              "expression": {
                                "id": 1789,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1774,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1537,
                                    "src": "31153:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1778,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1777,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1775,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1730,
                                      "src": "31162:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1776,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "31175:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "31162:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "31153:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1780,
                                                  "name": "pool",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1544,
                                                  "src": "31210:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                                  }
                                                },
                                                "id": 1781,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "rewarders",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 933,
                                                "src": "31210:14:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                                  "typeString": "contract IComplexRewarder[] storage ref"
                                                }
                                              },
                                              "id": 1783,
                                              "indexExpression": {
                                                "id": 1782,
                                                "name": "rewarderId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1730,
                                                "src": "31225:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "31210:26:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                                "typeString": "contract IComplexRewarder"
                                              }
                                            },
                                            "id": 1784,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewardToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 554,
                                            "src": "31210:38:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                              "typeString": "function () view external returns (contract IBoringERC20)"
                                            }
                                          },
                                          "id": 1785,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "31210:40:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        ],
                                        "id": 1779,
                                        "name": "IBoringERC20",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 529,
                                        "src": "31180:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "type(contract IBoringERC20)"
                                        }
                                      },
                                      "id": 1786,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "31180:84:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 1787,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "safeDecimals",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 770,
                                    "src": "31180:97:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_uint8_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                      "typeString": "function (contract IBoringERC20) view returns (uint8)"
                                    }
                                  },
                                  "id": 1788,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "31180:99:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "src": "31153:126:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1790,
                              "nodeType": "ExpressionStatement",
                              "src": "31153:126:0"
                            },
                            {
                              "expression": {
                                "id": 1804,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1791,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1540,
                                    "src": "31294:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1795,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1794,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1792,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1730,
                                      "src": "31302:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1793,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "31315:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "31302:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "31294:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 1801,
                                      "name": "_pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1522,
                                      "src": "31378:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "id": 1802,
                                      "name": "_user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1524,
                                      "src": "31400:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "baseExpression": {
                                        "expression": {
                                          "id": 1796,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1544,
                                          "src": "31320:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 1797,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewarders",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 933,
                                        "src": "31320:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                          "typeString": "contract IComplexRewarder[] storage ref"
                                        }
                                      },
                                      "id": 1799,
                                      "indexExpression": {
                                        "id": 1798,
                                        "name": "rewarderId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1730,
                                        "src": "31335:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "31320:26:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                        "typeString": "contract IComplexRewarder"
                                      }
                                    },
                                    "id": 1800,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "pendingTokens",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 548,
                                    "src": "31320:40:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_uint256_$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (uint256,address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 1803,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "31320:99:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "31294:125:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1805,
                              "nodeType": "ExpressionStatement",
                              "src": "31294:125:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1737,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1733,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1730,
                            "src": "30808:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 1734,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1544,
                                "src": "30821:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 1735,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "30821:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 1736,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "30821:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "30808:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1807,
                        "initializationExpression": {
                          "assignments": [
                            1730
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1730,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "30780:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1807,
                              "src": "30772:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1729,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "30772:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1732,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1731,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30793:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "30772:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1739,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "30856:12:0",
                            "subExpression": {
                              "id": 1738,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1730,
                              "src": "30858:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1740,
                          "nodeType": "ExpressionStatement",
                          "src": "30856:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "30754:676:0"
                      }
                    ]
                  },
                  "functionSelector": "ffcd4263",
                  "id": 1809,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1527,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1522,
                          "src": "29127:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1528,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1526,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "29109:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "29109:23:0"
                    }
                  ],
                  "name": "pendingTokens",
                  "nameLocation": "29028:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1525,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1522,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "29050:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29042:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1521,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29042:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1524,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "29064:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29056:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1523,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "29056:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "29041:29:0"
                  },
                  "returnParameters": {
                    "id": 1541,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1531,
                        "mutability": "mutable",
                        "name": "addresses",
                        "nameLocation": "29180:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29163:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1529,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "29163:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1530,
                          "nodeType": "ArrayTypeName",
                          "src": "29163:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1534,
                        "mutability": "mutable",
                        "name": "symbols",
                        "nameLocation": "29219:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29203:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1532,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "29203:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 1533,
                          "nodeType": "ArrayTypeName",
                          "src": "29203:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1537,
                        "mutability": "mutable",
                        "name": "decimals",
                        "nameLocation": "29257:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29240:25:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1535,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "29240:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1536,
                          "nodeType": "ArrayTypeName",
                          "src": "29240:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1540,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nameLocation": "29296:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1809,
                        "src": "29279:24:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1538,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "29279:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1539,
                          "nodeType": "ArrayTypeName",
                          "src": "29279:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "29149:164:0"
                  },
                  "scope": 3371,
                  "src": "29019:2417:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2022,
                    "nodeType": "Block",
                    "src": "31794:1421:0",
                    "statements": [
                      {
                        "assignments": [
                          1832
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1832,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "31821:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2022,
                            "src": "31804:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 1831,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1830,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "31804:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "31804:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1836,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1833,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "31828:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1835,
                          "indexExpression": {
                            "id": 1834,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1812,
                            "src": "31837:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "31828:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31804:38:0"
                      },
                      {
                        "expression": {
                          "id": 1847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1837,
                            "name": "addresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1819,
                            "src": "31853:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1845,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1841,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1832,
                                      "src": "31879:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1842,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "31879:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1843,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "31879:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1844,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "31903:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "31879:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1840,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "31865:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (address[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1838,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "31869:7:0",
                                  "stateMutability": "nonpayable",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 1839,
                                "nodeType": "ArrayTypeName",
                                "src": "31869:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                  "typeString": "address[]"
                                }
                              }
                            },
                            "id": 1846,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "31865:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "src": "31853:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 1848,
                        "nodeType": "ExpressionStatement",
                        "src": "31853:52:0"
                      },
                      {
                        "expression": {
                          "id": 1859,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1849,
                            "name": "symbols",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1822,
                            "src": "31915:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1857,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1853,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1832,
                                      "src": "31938:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1854,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "31938:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1855,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "31938:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1856,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "31962:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "31938:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1852,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "31925:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1850,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "31929:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "id": 1851,
                                "nodeType": "ArrayTypeName",
                                "src": "31929:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                  "typeString": "string[]"
                                }
                              }
                            },
                            "id": 1858,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "31925:39:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "src": "31915:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        },
                        "id": 1860,
                        "nodeType": "ExpressionStatement",
                        "src": "31915:49:0"
                      },
                      {
                        "expression": {
                          "id": 1871,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1861,
                            "name": "decimals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1825,
                            "src": "31974:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1869,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1865,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1832,
                                      "src": "31999:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1866,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "31999:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1867,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "31999:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1868,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "32023:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "31999:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1864,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "31985:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1862,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "31989:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1863,
                                "nodeType": "ArrayTypeName",
                                "src": "31989:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1870,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "31985:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "31974:51:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1872,
                        "nodeType": "ExpressionStatement",
                        "src": "31974:51:0"
                      },
                      {
                        "expression": {
                          "id": 1883,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1873,
                            "name": "rewardsPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1828,
                            "src": "32035:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1881,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "expression": {
                                      "id": 1877,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1832,
                                      "src": "32065:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1878,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewarders",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 933,
                                    "src": "32065:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                      "typeString": "contract IComplexRewarder[] storage ref"
                                    }
                                  },
                                  "id": 1879,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "32065:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1880,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "32089:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "32065:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1876,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "32051:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1874,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "32055:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1875,
                                "nodeType": "ArrayTypeName",
                                "src": "32055:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "32051:40:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "32035:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1884,
                        "nodeType": "ExpressionStatement",
                        "src": "32035:56:0"
                      },
                      {
                        "expression": {
                          "id": 1892,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1885,
                              "name": "addresses",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1819,
                              "src": "32102:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 1887,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1886,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "32112:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "32102:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1890,
                                "name": "ember",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 937,
                                "src": "32125:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              ],
                              "id": 1889,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "32117:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1888,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "32117:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1891,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "32117:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "32102:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1893,
                        "nodeType": "ExpressionStatement",
                        "src": "32102:29:0"
                      },
                      {
                        "expression": {
                          "id": 1902,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1894,
                              "name": "symbols",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1822,
                              "src": "32141:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                "typeString": "string memory[] memory"
                              }
                            },
                            "id": 1896,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1895,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "32149:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "32141:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1898,
                                    "name": "ember",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 937,
                                    "src": "32167:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  ],
                                  "id": 1897,
                                  "name": "IBoringERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 529,
                                  "src": "32154:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "type(contract IBoringERC20)"
                                  }
                                },
                                "id": 1899,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "32154:19:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              },
                              "id": 1900,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "safeSymbol",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 697,
                              "src": "32154:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_string_memory_ptr_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                "typeString": "function (contract IBoringERC20) view returns (string memory)"
                              }
                            },
                            "id": 1901,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "32154:32:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "32141:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "id": 1903,
                        "nodeType": "ExpressionStatement",
                        "src": "32141:45:0"
                      },
                      {
                        "expression": {
                          "id": 1912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1904,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1825,
                              "src": "32196:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1906,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1905,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "32205:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "32196:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1908,
                                    "name": "ember",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 937,
                                    "src": "32223:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  ],
                                  "id": 1907,
                                  "name": "IBoringERC20",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 529,
                                  "src": "32210:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "type(contract IBoringERC20)"
                                  }
                                },
                                "id": 1909,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "32210:19:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              },
                              "id": 1910,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "safeDecimals",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 770,
                              "src": "32210:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_uint8_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                "typeString": "function (contract IBoringERC20) view returns (uint8)"
                              }
                            },
                            "id": 1911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "32210:34:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "src": "32196:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1913,
                        "nodeType": "ExpressionStatement",
                        "src": "32196:48:0"
                      },
                      {
                        "assignments": [
                          1915
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1915,
                            "mutability": "mutable",
                            "name": "total",
                            "nameLocation": "32263:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2022,
                            "src": "32255:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1914,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "32255:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1917,
                        "initialValue": {
                          "hexValue": "31303030",
                          "id": 1916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "32271:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000_by_1",
                            "typeString": "int_const 1000"
                          },
                          "value": "1000"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "32255:20:0"
                      },
                      {
                        "assignments": [
                          1919
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1919,
                            "mutability": "mutable",
                            "name": "lpPercent",
                            "nameLocation": "32293:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2022,
                            "src": "32285:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1918,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "32285:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1927,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1926,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1924,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1922,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1920,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1915,
                                "src": "32305:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 1921,
                                "name": "teamPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 974,
                                "src": "32325:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "32305:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 1923,
                              "name": "treasuryPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 976,
                              "src": "32351:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "32305:61:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 1925,
                            "name": "investorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 978,
                            "src": "32381:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32305:91:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "32285:111:0"
                      },
                      {
                        "expression": {
                          "id": 1942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1928,
                              "name": "rewardsPerSec",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1828,
                              "src": "32407:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1930,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 1929,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "32421:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "32407:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1941,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1939,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1936,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1934,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 1931,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1832,
                                          "src": "32439:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 1932,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "allocPoint",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 919,
                                        "src": "32439:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 1933,
                                        "name": "emberPerSec",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 939,
                                        "src": "32457:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "32439:29:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 1935,
                                      "name": "lpPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1919,
                                      "src": "32471:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "32439:41:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 1937,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "32438:43:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 1938,
                                "name": "totalAllocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 959,
                                "src": "32496:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "32438:73:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 1940,
                              "name": "total",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1915,
                              "src": "32526:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "32438:93:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32407:124:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1943,
                        "nodeType": "ExpressionStatement",
                        "src": "32407:124:0"
                      },
                      {
                        "body": {
                          "id": 2020,
                          "nodeType": "Block",
                          "src": "32667:542:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1970,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1956,
                                    "name": "addresses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1819,
                                    "src": "32681:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                      "typeString": "address[] memory"
                                    }
                                  },
                                  "id": 1960,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1959,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1957,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1945,
                                      "src": "32691:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1958,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32704:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "32691:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "32681:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "expression": {
                                          "baseExpression": {
                                            "expression": {
                                              "id": 1963,
                                              "name": "pool",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1832,
                                              "src": "32734:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                              }
                                            },
                                            "id": 1964,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewarders",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 933,
                                            "src": "32734:14:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                              "typeString": "contract IComplexRewarder[] storage ref"
                                            }
                                          },
                                          "id": 1966,
                                          "indexExpression": {
                                            "id": 1965,
                                            "name": "rewarderId",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1945,
                                            "src": "32749:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "32734:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                            "typeString": "contract IComplexRewarder"
                                          }
                                        },
                                        "id": 1967,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardToken",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 554,
                                        "src": "32734:38:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "function () view external returns (contract IBoringERC20)"
                                        }
                                      },
                                      "id": 1968,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "32734:40:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 1962,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "32709:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1961,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "32709:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1969,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "32709:79:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "32681:107:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 1971,
                              "nodeType": "ExpressionStatement",
                              "src": "32681:107:0"
                            },
                            {
                              "expression": {
                                "id": 1987,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1972,
                                    "name": "symbols",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1822,
                                    "src": "32803:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 1976,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1975,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1973,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1945,
                                      "src": "32811:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1974,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32824:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "32811:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "32803:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1978,
                                                  "name": "pool",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1832,
                                                  "src": "32859:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                                  }
                                                },
                                                "id": 1979,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "rewarders",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 933,
                                                "src": "32859:14:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                                  "typeString": "contract IComplexRewarder[] storage ref"
                                                }
                                              },
                                              "id": 1981,
                                              "indexExpression": {
                                                "id": 1980,
                                                "name": "rewarderId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1945,
                                                "src": "32874:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "32859:26:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                                "typeString": "contract IComplexRewarder"
                                              }
                                            },
                                            "id": 1982,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewardToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 554,
                                            "src": "32859:38:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                              "typeString": "function () view external returns (contract IBoringERC20)"
                                            }
                                          },
                                          "id": 1983,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "32859:40:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        ],
                                        "id": 1977,
                                        "name": "IBoringERC20",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 529,
                                        "src": "32829:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "type(contract IBoringERC20)"
                                        }
                                      },
                                      "id": 1984,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "32829:84:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 1985,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "safeSymbol",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 697,
                                    "src": "32829:95:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_string_memory_ptr_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                      "typeString": "function (contract IBoringERC20) view returns (string memory)"
                                    }
                                  },
                                  "id": 1986,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "32829:97:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "src": "32803:123:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "id": 1988,
                              "nodeType": "ExpressionStatement",
                              "src": "32803:123:0"
                            },
                            {
                              "expression": {
                                "id": 2004,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1989,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1825,
                                    "src": "32941:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1993,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1992,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1990,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1945,
                                      "src": "32950:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 1991,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "32963:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "32950:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "32941:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "expression": {
                                              "baseExpression": {
                                                "expression": {
                                                  "id": 1995,
                                                  "name": "pool",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1832,
                                                  "src": "32998:4:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                                  }
                                                },
                                                "id": 1996,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "rewarders",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 933,
                                                "src": "32998:14:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                                  "typeString": "contract IComplexRewarder[] storage ref"
                                                }
                                              },
                                              "id": 1998,
                                              "indexExpression": {
                                                "id": 1997,
                                                "name": "rewarderId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1945,
                                                "src": "33013:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "32998:26:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                                "typeString": "contract IComplexRewarder"
                                              }
                                            },
                                            "id": 1999,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewardToken",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 554,
                                            "src": "32998:38:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IBoringERC20_$529_$",
                                              "typeString": "function () view external returns (contract IBoringERC20)"
                                            }
                                          },
                                          "id": 2000,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "32998:40:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        ],
                                        "id": 1994,
                                        "name": "IBoringERC20",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 529,
                                        "src": "32968:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "type(contract IBoringERC20)"
                                        }
                                      },
                                      "id": 2001,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "32968:84:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 2002,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "safeDecimals",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 770,
                                    "src": "32968:97:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_uint8_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                      "typeString": "function (contract IBoringERC20) view returns (uint8)"
                                    }
                                  },
                                  "id": 2003,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "32968:99:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "src": "32941:126:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2005,
                              "nodeType": "ExpressionStatement",
                              "src": "32941:126:0"
                            },
                            {
                              "expression": {
                                "id": 2018,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 2006,
                                    "name": "rewardsPerSec",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1828,
                                    "src": "33082:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 2010,
                                  "indexExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2009,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2007,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1945,
                                      "src": "33096:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "hexValue": "31",
                                      "id": 2008,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "33109:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "src": "33096:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "33082:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 2016,
                                      "name": "_pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1812,
                                      "src": "33193:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "baseExpression": {
                                        "expression": {
                                          "id": 2011,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1832,
                                          "src": "33114:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 2012,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewarders",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 933,
                                        "src": "33114:31:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                          "typeString": "contract IComplexRewarder[] storage ref"
                                        }
                                      },
                                      "id": 2014,
                                      "indexExpression": {
                                        "id": 2013,
                                        "name": "rewarderId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1945,
                                        "src": "33146:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "33114:43:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                        "typeString": "contract IComplexRewarder"
                                      }
                                    },
                                    "id": 2015,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "poolRewardsPerSec",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 561,
                                    "src": "33114:78:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (uint256) view external returns (uint256)"
                                    }
                                  },
                                  "id": 2017,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33114:84:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33082:116:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2019,
                              "nodeType": "ExpressionStatement",
                              "src": "33082:116:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1952,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1948,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1945,
                            "src": "32596:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 1949,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1832,
                                "src": "32609:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 1950,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "32609:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 1951,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "32609:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32596:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2021,
                        "initializationExpression": {
                          "assignments": [
                            1945
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1945,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "32568:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2021,
                              "src": "32560:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1944,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "32560:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1947,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1946,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "32581:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "32560:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1954,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "32644:12:0",
                            "subExpression": {
                              "id": 1953,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1945,
                              "src": "32646:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1955,
                          "nodeType": "ExpressionStatement",
                          "src": "32644:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "32542:667:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1810,
                    "nodeType": "StructuredDocumentation",
                    "src": "31442:53:0",
                    "text": "@notice View function to see pool rewards per sec"
                  },
                  "functionSelector": "465e81ec",
                  "id": 2023,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1815,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1812,
                          "src": "31597:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1816,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1814,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "31579:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "31579:23:0"
                    }
                  ],
                  "name": "poolRewardsPerSec",
                  "nameLocation": "31509:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1813,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1812,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "31535:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2023,
                        "src": "31527:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1811,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31527:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "31526:14:0"
                  },
                  "returnParameters": {
                    "id": 1829,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1819,
                        "mutability": "mutable",
                        "name": "addresses",
                        "nameLocation": "31650:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2023,
                        "src": "31633:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1817,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "31633:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1818,
                          "nodeType": "ArrayTypeName",
                          "src": "31633:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1822,
                        "mutability": "mutable",
                        "name": "symbols",
                        "nameLocation": "31689:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2023,
                        "src": "31673:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1820,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "31673:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 1821,
                          "nodeType": "ArrayTypeName",
                          "src": "31673:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1825,
                        "mutability": "mutable",
                        "name": "decimals",
                        "nameLocation": "31727:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2023,
                        "src": "31710:25:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1823,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "31710:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1824,
                          "nodeType": "ArrayTypeName",
                          "src": "31710:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1828,
                        "mutability": "mutable",
                        "name": "rewardsPerSec",
                        "nameLocation": "31766:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2023,
                        "src": "31749:30:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1826,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "31749:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1827,
                          "nodeType": "ArrayTypeName",
                          "src": "31749:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "31619:170:0"
                  },
                  "scope": 3371,
                  "src": "31500:1715:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2077,
                    "nodeType": "Block",
                    "src": "33418:331:0",
                    "statements": [
                      {
                        "assignments": [
                          2036
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2036,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "33445:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2077,
                            "src": "33428:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2035,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2034,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "33428:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "33428:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2040,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2037,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "33452:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2039,
                          "indexExpression": {
                            "id": 2038,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2025,
                            "src": "33461:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "33452:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33428:38:0"
                      },
                      {
                        "expression": {
                          "id": 2049,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2041,
                            "name": "rewarders",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2032,
                            "src": "33476:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "expression": {
                                    "id": 2045,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2036,
                                    "src": "33502:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2046,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "rewarders",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 933,
                                  "src": "33502:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                    "typeString": "contract IComplexRewarder[] storage ref"
                                  }
                                },
                                "id": 2047,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "33502:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 2044,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "33488:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (address[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 2042,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "33492:7:0",
                                  "stateMutability": "nonpayable",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 2043,
                                "nodeType": "ArrayTypeName",
                                "src": "33492:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                                  "typeString": "address[]"
                                }
                              }
                            },
                            "id": 2048,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "33488:36:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          },
                          "src": "33476:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 2050,
                        "nodeType": "ExpressionStatement",
                        "src": "33476:48:0"
                      },
                      {
                        "body": {
                          "id": 2075,
                          "nodeType": "Block",
                          "src": "33659:84:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2073,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 2063,
                                    "name": "rewarders",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2032,
                                    "src": "33673:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                      "typeString": "address[] memory"
                                    }
                                  },
                                  "id": 2065,
                                  "indexExpression": {
                                    "id": 2064,
                                    "name": "rewarderId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2052,
                                    "src": "33683:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "33673:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "expression": {
                                          "id": 2068,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2036,
                                          "src": "33705:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 2069,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewarders",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 933,
                                        "src": "33705:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                          "typeString": "contract IComplexRewarder[] storage ref"
                                        }
                                      },
                                      "id": 2071,
                                      "indexExpression": {
                                        "id": 2070,
                                        "name": "rewarderId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2052,
                                        "src": "33720:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "33705:26:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                        "typeString": "contract IComplexRewarder"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                        "typeString": "contract IComplexRewarder"
                                      }
                                    ],
                                    "id": 2067,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "33697:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2066,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "33697:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2072,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "33697:35:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "33673:59:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 2074,
                              "nodeType": "ExpressionStatement",
                              "src": "33673:59:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2059,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2055,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2052,
                            "src": "33588:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 2056,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2036,
                                "src": "33601:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2057,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "33601:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 2058,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "33601:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33588:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2076,
                        "initializationExpression": {
                          "assignments": [
                            2052
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2052,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "33560:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2076,
                              "src": "33552:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2051,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "33552:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2054,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "33573:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "33552:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2061,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "33636:12:0",
                            "subExpression": {
                              "id": 2060,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2052,
                              "src": "33638:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2062,
                          "nodeType": "ExpressionStatement",
                          "src": "33636:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "33534:209:0"
                      }
                    ]
                  },
                  "functionSelector": "eff8976b",
                  "id": 2078,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2028,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2025,
                          "src": "33363:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2029,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2027,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "33345:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "33345:23:0"
                    }
                  ],
                  "name": "poolRewarders",
                  "nameLocation": "33279:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2026,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2025,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "33301:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2078,
                        "src": "33293:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2024,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33293:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33292:14:0"
                  },
                  "returnParameters": {
                    "id": 2033,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2032,
                        "mutability": "mutable",
                        "name": "rewarders",
                        "nameLocation": "33403:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2078,
                        "src": "33386:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2030,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "33386:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2031,
                          "nodeType": "ArrayTypeName",
                          "src": "33386:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33385:28:0"
                  },
                  "scope": 3371,
                  "src": "33270:479:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2110,
                    "nodeType": "Block",
                    "src": "33946:180:0",
                    "statements": [
                      {
                        "assignments": [
                          2092
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2092,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "33973:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2110,
                            "src": "33956:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 2091,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2090,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "33956:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "33956:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2098,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2093,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "33980:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 2095,
                            "indexExpression": {
                              "id": 2094,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2080,
                              "src": "33989:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "33980:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 2097,
                          "indexExpression": {
                            "id": 2096,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2082,
                            "src": "33995:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "33980:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33956:45:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2108,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2102,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2099,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "34030:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 2100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "34030:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 2101,
                              "name": "startTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 961,
                              "src": "34049:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "34030:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2107,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2103,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "34079:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 2104,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "34079:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "expression": {
                                "id": 2105,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2092,
                                "src": "34098:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                }
                              },
                              "id": 2106,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "nextHarvestUntil",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 913,
                              "src": "34098:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "34079:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "34030:89:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2089,
                        "id": 2109,
                        "nodeType": "Return",
                        "src": "34011:108:0"
                      }
                    ]
                  },
                  "functionSelector": "2e6c998d",
                  "id": 2111,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2085,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2080,
                          "src": "33913:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2086,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2084,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "33895:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "33895:23:0"
                    }
                  ],
                  "name": "canHarvest",
                  "nameLocation": "33819:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2083,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2080,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "33838:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2111,
                        "src": "33830:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2079,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33830:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2082,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "33852:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2111,
                        "src": "33844:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2081,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "33844:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33829:29:0"
                  },
                  "returnParameters": {
                    "id": 2089,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2088,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2111,
                        "src": "33936:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2087,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "33936:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33935:6:0"
                  },
                  "scope": 3371,
                  "src": "33810:316:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2119,
                    "nodeType": "Block",
                    "src": "34255:35:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 2116,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "34265:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 2117,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "34265:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2118,
                        "nodeType": "ExpressionStatement",
                        "src": "34265:18:0"
                      }
                    ]
                  },
                  "functionSelector": "630b5ba1",
                  "id": 2120,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2114,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2113,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "34242:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "34242:12:0"
                    }
                  ],
                  "name": "massUpdatePools",
                  "nameLocation": "34215:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2112,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34230:2:0"
                  },
                  "returnParameters": {
                    "id": 2115,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34255:0:0"
                  },
                  "scope": 3371,
                  "src": "34206:84:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2140,
                    "nodeType": "Block",
                    "src": "34376:109:0",
                    "statements": [
                      {
                        "body": {
                          "id": 2138,
                          "nodeType": "Block",
                          "src": "34438:41:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2135,
                                    "name": "pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2124,
                                    "src": "34464:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 2134,
                                  "name": "_updatePool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2318,
                                  "src": "34452:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 2136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "34452:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2137,
                              "nodeType": "ExpressionStatement",
                              "src": "34452:16:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2127,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2124,
                            "src": "34408:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 2128,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 949,
                              "src": "34414:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                              }
                            },
                            "id": 2129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "34414:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "34408:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2139,
                        "initializationExpression": {
                          "assignments": [
                            2124
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2124,
                              "mutability": "mutable",
                              "name": "pid",
                              "nameLocation": "34399:3:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2139,
                              "src": "34391:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2123,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "34391:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2126,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "34405:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "34391:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "34431:5:0",
                            "subExpression": {
                              "id": 2131,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2124,
                              "src": "34433:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2133,
                          "nodeType": "ExpressionStatement",
                          "src": "34431:5:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "34386:93:0"
                      }
                    ]
                  },
                  "id": 2141,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_massUpdatePools",
                  "nameLocation": "34348:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2121,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34364:2:0"
                  },
                  "returnParameters": {
                    "id": 2122,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34376:0:0"
                  },
                  "scope": 3371,
                  "src": "34339:146:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2152,
                    "nodeType": "Block",
                    "src": "34614:34:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2149,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2143,
                              "src": "34636:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2148,
                            "name": "_updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2318,
                            "src": "34624:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "34624:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2151,
                        "nodeType": "ExpressionStatement",
                        "src": "34624:17:0"
                      }
                    ]
                  },
                  "functionSelector": "51eb05a6",
                  "id": 2153,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2146,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2145,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "34601:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "34601:12:0"
                    }
                  ],
                  "name": "updatePool",
                  "nameLocation": "34567:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2144,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2143,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "34586:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2153,
                        "src": "34578:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2142,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34578:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34577:14:0"
                  },
                  "returnParameters": {
                    "id": 2147,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34614:0:0"
                  },
                  "scope": 3371,
                  "src": "34558:90:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2317,
                    "nodeType": "Block",
                    "src": "34761:1303:0",
                    "statements": [
                      {
                        "assignments": [
                          2163
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2163,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "34788:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "34771:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2162,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2161,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "34771:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "34771:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2167,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2164,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "34795:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2166,
                          "indexExpression": {
                            "id": 2165,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2155,
                            "src": "34804:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "34795:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34771:38:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2168,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "34824:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "34824:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "expression": {
                              "id": 2170,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2163,
                              "src": "34843:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2171,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lastRewardTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 921,
                            "src": "34843:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "34824:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2175,
                        "nodeType": "IfStatement",
                        "src": "34820:80:0",
                        "trueBody": {
                          "id": 2174,
                          "nodeType": "Block",
                          "src": "34869:31:0",
                          "statements": [
                            {
                              "functionReturnParameters": 2160,
                              "id": 2173,
                              "nodeType": "Return",
                              "src": "34883:7:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2177
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2177,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "34918:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "34910:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2176,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "34910:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2180,
                        "initialValue": {
                          "expression": {
                            "id": 2178,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2163,
                            "src": "34929:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                            }
                          },
                          "id": 2179,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "totalLp",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 929,
                          "src": "34929:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34910:31:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2183,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 2181,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2177,
                              "src": "34956:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "34968:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "34956:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2187,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2184,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2163,
                                "src": "34973:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2185,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allocPoint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 919,
                              "src": "34973:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2186,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "34992:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "34973:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "34956:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2198,
                        "nodeType": "IfStatement",
                        "src": "34952:130:0",
                        "trueBody": {
                          "id": 2197,
                          "nodeType": "Block",
                          "src": "34995:87:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2194,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2189,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2163,
                                    "src": "35009:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2191,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "lastRewardTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 921,
                                  "src": "35009:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 2192,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "35036:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 2193,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "35036:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "35009:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2195,
                              "nodeType": "ExpressionStatement",
                              "src": "35009:42:0"
                            },
                            {
                              "functionReturnParameters": 2160,
                              "id": 2196,
                              "nodeType": "Return",
                              "src": "35065:7:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2200
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2200,
                            "mutability": "mutable",
                            "name": "multiplier",
                            "nameLocation": "35100:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "35092:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2199,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35092:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2206,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2205,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 2201,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "35113:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2202,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "35113:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "expression": {
                              "id": 2203,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2163,
                              "src": "35131:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2204,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lastRewardTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 921,
                            "src": "35131:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35113:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35092:63:0"
                      },
                      {
                        "assignments": [
                          2208
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2208,
                            "mutability": "mutable",
                            "name": "emberReward",
                            "nameLocation": "35174:11:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "35166:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2207,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35166:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2219,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2215,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2211,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2209,
                                        "name": "multiplier",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2200,
                                        "src": "35190:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 2210,
                                        "name": "emberPerSec",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 939,
                                        "src": "35203:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "35190:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2212,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "35189:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "expression": {
                                    "id": 2213,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2163,
                                    "src": "35218:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2214,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "allocPoint",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 919,
                                  "src": "35218:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "35189:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2216,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "35188:46:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 2217,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "35249:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35188:76:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35166:98:0"
                      },
                      {
                        "assignments": [
                          2221
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2221,
                            "mutability": "mutable",
                            "name": "total",
                            "nameLocation": "35283:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "35275:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2220,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35275:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2223,
                        "initialValue": {
                          "hexValue": "31303030",
                          "id": 2222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "35291:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000_by_1",
                            "typeString": "int_const 1000"
                          },
                          "value": "1000"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35275:20:0"
                      },
                      {
                        "assignments": [
                          2225
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2225,
                            "mutability": "mutable",
                            "name": "lpPercent",
                            "nameLocation": "35313:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2317,
                            "src": "35305:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2224,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35305:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2233,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2226,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2221,
                                "src": "35325:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 2227,
                                "name": "teamPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 974,
                                "src": "35345:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35325:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 2229,
                              "name": "treasuryPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 976,
                              "src": "35371:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "35325:61:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 2231,
                            "name": "investorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 978,
                            "src": "35401:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35325:91:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35305:111:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2237,
                              "name": "teamAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 968,
                              "src": "35438:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2243,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2240,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2238,
                                      "name": "emberReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2208,
                                      "src": "35452:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2239,
                                      "name": "teamPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 974,
                                      "src": "35466:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "35452:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2241,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "35451:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 2242,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2221,
                                "src": "35481:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35451:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2234,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "35427:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            "id": 2236,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 464,
                            "src": "35427:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35427:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2245,
                        "nodeType": "ExpressionStatement",
                        "src": "35427:60:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2249,
                              "name": "treasuryAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 970,
                              "src": "35508:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2255,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2252,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2250,
                                      "name": "emberReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2208,
                                      "src": "35526:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2251,
                                      "name": "treasuryPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 976,
                                      "src": "35540:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "35526:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2253,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "35525:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 2254,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2221,
                                "src": "35559:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35525:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2246,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "35497:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            "id": 2248,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 464,
                            "src": "35497:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2256,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35497:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2257,
                        "nodeType": "ExpressionStatement",
                        "src": "35497:68:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2261,
                              "name": "investorAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "35586:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2267,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2264,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2262,
                                      "name": "emberReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2208,
                                      "src": "35604:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2263,
                                      "name": "investorPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 978,
                                      "src": "35618:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "35604:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2265,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "35603:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 2266,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2221,
                                "src": "35637:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35603:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2258,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "35575:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            "id": 2260,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 464,
                            "src": "35575:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35575:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2269,
                        "nodeType": "ExpressionStatement",
                        "src": "35575:68:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 2275,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "35672:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                    "typeString": "contract EmberDistributorV2"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                    "typeString": "contract EmberDistributorV2"
                                  }
                                ],
                                "id": 2274,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "35664:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2273,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "35664:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "35664:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2279,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 2277,
                                      "name": "emberReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2208,
                                      "src": "35680:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2278,
                                      "name": "lpPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2225,
                                      "src": "35694:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "35680:23:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2280,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "35679:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 2281,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2221,
                                "src": "35707:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35679:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2270,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "35653:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            "id": 2272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 464,
                            "src": "35653:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35653:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2284,
                        "nodeType": "ExpressionStatement",
                        "src": "35653:60:0"
                      },
                      {
                        "expression": {
                          "id": 2299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2285,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2163,
                              "src": "35724:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2287,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "accEmberPerShare",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 923,
                            "src": "35724:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2296,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2292,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2290,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2288,
                                        "name": "emberReward",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2208,
                                        "src": "35762:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 2289,
                                        "name": "ACC_TOKEN_PRECISION",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 981,
                                        "src": "35776:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "35762:33:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "id": 2291,
                                      "name": "lpPercent",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2225,
                                      "src": "35798:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "35762:45:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "id": 2293,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "35761:47:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "expression": {
                                  "id": 2294,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2163,
                                  "src": "35823:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2295,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalLp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 929,
                                "src": "35823:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35761:74:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 2297,
                              "name": "total",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2221,
                              "src": "35850:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "35761:94:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35724:131:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2300,
                        "nodeType": "ExpressionStatement",
                        "src": "35724:131:0"
                      },
                      {
                        "expression": {
                          "id": 2306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2301,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2163,
                              "src": "35866:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2303,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "lastRewardTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 921,
                            "src": "35866:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2304,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "35893:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2305,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "35893:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35866:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2307,
                        "nodeType": "ExpressionStatement",
                        "src": "35866:42:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 2309,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2155,
                              "src": "35948:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 2310,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2163,
                                "src": "35966:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2311,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardTimestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 921,
                              "src": "35966:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2312,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2177,
                              "src": "36004:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 2313,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2163,
                                "src": "36026:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2314,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "accEmberPerShare",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 923,
                              "src": "36026:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2308,
                            "name": "UpdatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1036,
                            "src": "35924:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,uint256)"
                            }
                          },
                          "id": 2315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35924:133:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2316,
                        "nodeType": "EmitStatement",
                        "src": "35919:138:0"
                      }
                    ]
                  },
                  "id": 2318,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2158,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2155,
                          "src": "34755:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2159,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2157,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "34737:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "34737:23:0"
                    }
                  ],
                  "name": "_updatePool",
                  "nameLocation": "34702:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2156,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2155,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "34722:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2318,
                        "src": "34714:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34714:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34713:14:0"
                  },
                  "returnParameters": {
                    "id": 2160,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34761:0:0"
                  },
                  "scope": 3371,
                  "src": "34693:1371:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2377,
                    "nodeType": "Block",
                    "src": "36272:221:0",
                    "statements": [
                      {
                        "assignments": [
                          2340
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2340,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "36299:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2377,
                            "src": "36282:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2339,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2338,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "36282:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "36282:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2344,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2341,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "36306:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2343,
                          "indexExpression": {
                            "id": 2342,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2320,
                            "src": "36315:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "36306:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36282:37:0"
                      },
                      {
                        "assignments": [
                          2347
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2347,
                            "mutability": "mutable",
                            "name": "pair",
                            "nameLocation": "36340:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2377,
                            "src": "36329:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IEmberPair_$896",
                              "typeString": "contract IEmberPair"
                            },
                            "typeName": {
                              "id": 2346,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2345,
                                "name": "IEmberPair",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 896,
                                "src": "36329:10:0"
                              },
                              "referencedDeclaration": 896,
                              "src": "36329:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberPair_$896",
                                "typeString": "contract IEmberPair"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2355,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 2351,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2340,
                                    "src": "36366:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2352,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lpToken",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 917,
                                  "src": "36366:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 2350,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "36358:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2349,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "36358:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2353,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "36358:21:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2348,
                            "name": "IEmberPair",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 896,
                            "src": "36347:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IEmberPair_$896_$",
                              "typeString": "type(contract IEmberPair)"
                            }
                          },
                          "id": 2354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36347:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IEmberPair_$896",
                            "typeString": "contract IEmberPair"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36329:51:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2359,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "36402:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2360,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "36402:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 2363,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "36422:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                    "typeString": "contract EmberDistributorV2"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                    "typeString": "contract EmberDistributorV2"
                                  }
                                ],
                                "id": 2362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "36414:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 2361,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "36414:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 2364,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "36414:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2365,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2322,
                              "src": "36429:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2366,
                              "name": "deadline",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2324,
                              "src": "36437:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2367,
                              "name": "v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2326,
                              "src": "36447:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 2368,
                              "name": "r",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2328,
                              "src": "36450:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 2369,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2330,
                              "src": "36453:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "id": 2356,
                              "name": "pair",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2347,
                              "src": "36390:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberPair_$896",
                                "typeString": "contract IEmberPair"
                              }
                            },
                            "id": 2358,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "permit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 895,
                            "src": "36390:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
                            }
                          },
                          "id": 2370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36390:65:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2371,
                        "nodeType": "ExpressionStatement",
                        "src": "36390:65:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2373,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2320,
                              "src": "36474:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2374,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2322,
                              "src": "36479:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2372,
                            "name": "_deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2587,
                            "src": "36465:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 2375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36465:21:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2376,
                        "nodeType": "ExpressionStatement",
                        "src": "36465:21:0"
                      }
                    ]
                  },
                  "functionSelector": "515bc323",
                  "id": 2378,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2333,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2332,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "36236:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36236:12:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 2335,
                          "name": "pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2320,
                          "src": "36267:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2336,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2334,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "36249:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36249:22:0"
                    }
                  ],
                  "name": "depositWithPermit",
                  "nameLocation": "36079:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2331,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2320,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "36114:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36106:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2319,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36106:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2322,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "36135:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36127:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2321,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36127:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2324,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "36159:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36151:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2323,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36151:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2326,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "36183:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36177:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 2325,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "36177:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2328,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "36202:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36194:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2327,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "36194:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2330,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "36221:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2378,
                        "src": "36213:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2329,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "36213:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "36096:132:0"
                  },
                  "returnParameters": {
                    "id": 2337,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "36272:0:0"
                  },
                  "scope": 3371,
                  "src": "36070:423:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2392,
                    "nodeType": "Block",
                    "src": "36611:40:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2388,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2380,
                              "src": "36630:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2389,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2382,
                              "src": "36636:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2387,
                            "name": "_deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2587,
                            "src": "36621:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 2390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36621:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2391,
                        "nodeType": "ExpressionStatement",
                        "src": "36621:23:0"
                      }
                    ]
                  },
                  "functionSelector": "e2bbb158",
                  "id": 2393,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2385,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2384,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "36598:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36598:12:0"
                    }
                  ],
                  "name": "deposit",
                  "nameLocation": "36552:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2383,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2380,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "36568:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2393,
                        "src": "36560:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2379,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36560:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2382,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "36582:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2393,
                        "src": "36574:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2381,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36574:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "36559:31:0"
                  },
                  "returnParameters": {
                    "id": 2386,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "36611:0:0"
                  },
                  "scope": 3371,
                  "src": "36543:108:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2586,
                    "nodeType": "Block",
                    "src": "36803:1441:0",
                    "statements": [
                      {
                        "assignments": [
                          2405
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2405,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "36830:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2586,
                            "src": "36813:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2404,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2403,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "36813:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "36813:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2409,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2406,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "36837:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2408,
                          "indexExpression": {
                            "id": 2407,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2395,
                            "src": "36846:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "36837:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36813:38:0"
                      },
                      {
                        "assignments": [
                          2412
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2412,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "36878:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2586,
                            "src": "36861:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 2411,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2410,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "36861:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "36861:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2419,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2413,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "36885:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 2415,
                            "indexExpression": {
                              "id": 2414,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2395,
                              "src": "36894:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "36885:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 2418,
                          "indexExpression": {
                            "expression": {
                              "id": 2416,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "36900:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2417,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "36900:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "36885:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36861:50:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2421,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2395,
                              "src": "36934:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2420,
                            "name": "_updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2318,
                            "src": "36922:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36922:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2423,
                        "nodeType": "ExpressionStatement",
                        "src": "36922:17:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2425,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2395,
                              "src": "36974:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2424,
                            "name": "payOrLockupPendingEmber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2995,
                            "src": "36950:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2426,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36950:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2427,
                        "nodeType": "ExpressionStatement",
                        "src": "36950:29:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2430,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2428,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2397,
                            "src": "36994:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2429,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "37004:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "36994:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2527,
                        "nodeType": "IfStatement",
                        "src": "36990:719:0",
                        "trueBody": {
                          "id": 2526,
                          "nodeType": "Block",
                          "src": "37007:702:0",
                          "statements": [
                            {
                              "assignments": [
                                2432
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2432,
                                  "mutability": "mutable",
                                  "name": "beforeDeposit",
                                  "nameLocation": "37029:13:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2526,
                                  "src": "37021:21:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 2431,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "37021:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2441,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 2438,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "37076:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      ],
                                      "id": 2437,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "37068:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 2436,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "37068:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 2439,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "37068:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2433,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2405,
                                      "src": "37045:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2434,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 917,
                                    "src": "37045:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 2435,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 476,
                                  "src": "37045:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 2440,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37045:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "37021:61:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2447,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "37126:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2448,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "37126:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 2451,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "37146:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      ],
                                      "id": 2450,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "37138:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 2449,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "37138:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 2452,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "37138:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 2453,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2397,
                                    "src": "37153:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2442,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2405,
                                      "src": "37096:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2445,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 917,
                                    "src": "37096:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 2446,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransferFrom",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 869,
                                  "src": "37096:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "function (contract IBoringERC20,address,address,uint256)"
                                  }
                                },
                                "id": 2454,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37096:65:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2455,
                              "nodeType": "ExpressionStatement",
                              "src": "37096:65:0"
                            },
                            {
                              "assignments": [
                                2457
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2457,
                                  "mutability": "mutable",
                                  "name": "afterDeposit",
                                  "nameLocation": "37183:12:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2526,
                                  "src": "37175:20:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 2456,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "37175:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2466,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 2463,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "37229:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                          "typeString": "contract EmberDistributorV2"
                                        }
                                      ],
                                      "id": 2462,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "37221:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 2461,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "37221:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 2464,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "37221:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2458,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2405,
                                      "src": "37198:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2459,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 917,
                                    "src": "37198:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 2460,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 476,
                                  "src": "37198:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 2465,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37198:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "37175:60:0"
                            },
                            {
                              "expression": {
                                "id": 2471,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2467,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2397,
                                  "src": "37250:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2470,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2468,
                                    "name": "afterDeposit",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2457,
                                    "src": "37260:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 2469,
                                    "name": "beforeDeposit",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2432,
                                    "src": "37275:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "37260:28:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "37250:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2472,
                              "nodeType": "ExpressionStatement",
                              "src": "37250:38:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                },
                                "id": 2476,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2473,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2405,
                                    "src": "37307:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2474,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "depositFeeBP",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 925,
                                  "src": "37307:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 2475,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "37327:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "37307:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2503,
                              "nodeType": "IfStatement",
                              "src": "37303:239:0",
                              "trueBody": {
                                "id": 2502,
                                "nodeType": "Block",
                                "src": "37330:212:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      2478
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 2478,
                                        "mutability": "mutable",
                                        "name": "depositFee",
                                        "nameLocation": "37356:10:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 2502,
                                        "src": "37348:18:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 2477,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "37348:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 2486,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2485,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 2482,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 2479,
                                              "name": "_amount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2397,
                                              "src": "37370:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 2480,
                                                "name": "pool",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2405,
                                                "src": "37380:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                                }
                                              },
                                              "id": 2481,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "depositFeeBP",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 925,
                                              "src": "37380:17:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            },
                                            "src": "37370:27:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 2483,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "37369:29:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "hexValue": "3130303030",
                                        "id": 2484,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "37401:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_10000_by_1",
                                          "typeString": "int_const 10000"
                                        },
                                        "value": "10000"
                                      },
                                      "src": "37369:37:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "37348:58:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 2492,
                                          "name": "treasuryAddress",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 970,
                                          "src": "37450:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 2493,
                                          "name": "depositFee",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2478,
                                          "src": "37467:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "expression": {
                                            "id": 2487,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2405,
                                            "src": "37424:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                              "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                            }
                                          },
                                          "id": 2490,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "lpToken",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 917,
                                          "src": "37424:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        },
                                        "id": 2491,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "safeTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 818,
                                        "src": "37424:25:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "function (contract IBoringERC20,address,uint256)"
                                        }
                                      },
                                      "id": 2494,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "37424:54:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2495,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37424:54:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2500,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2496,
                                        "name": "_amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2397,
                                        "src": "37497:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2499,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 2497,
                                          "name": "_amount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2397,
                                          "src": "37507:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "id": 2498,
                                          "name": "depositFee",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2478,
                                          "src": "37517:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "37507:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "37497:30:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2501,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37497:30:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 2508,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2504,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2412,
                                    "src": "37556:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2506,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 907,
                                  "src": "37556:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 2507,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2397,
                                  "src": "37571:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "37556:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2509,
                              "nodeType": "ExpressionStatement",
                              "src": "37556:22:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 2519,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2512,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2405,
                                        "src": "37605:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                          "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2513,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "lpToken",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 917,
                                      "src": "37605:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 2511,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "37597:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2510,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "37597:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2514,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "37597:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 2517,
                                      "name": "ember",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 937,
                                      "src": "37630:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 2516,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "37622:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2515,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "37622:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2518,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "37622:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "37597:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2525,
                              "nodeType": "IfStatement",
                              "src": "37593:106:0",
                              "trueBody": {
                                "id": 2524,
                                "nodeType": "Block",
                                "src": "37638:61:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 2522,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2520,
                                        "name": "totalEmberInPools",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 966,
                                        "src": "37656:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "id": 2521,
                                        "name": "_amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2397,
                                        "src": "37677:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "37656:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2523,
                                    "nodeType": "ExpressionStatement",
                                    "src": "37656:28:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 2539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2528,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2412,
                              "src": "37718:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2530,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 909,
                            "src": "37718:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2538,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2535,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 2531,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2412,
                                      "src": "37749:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2532,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 907,
                                    "src": "37749:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 2533,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2405,
                                      "src": "37763:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2534,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "accEmberPerShare",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 923,
                                    "src": "37763:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "37749:35:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 2536,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "37748:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 2537,
                              "name": "ACC_TOKEN_PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 981,
                              "src": "37800:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "37748:71:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "37718:101:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2540,
                        "nodeType": "ExpressionStatement",
                        "src": "37718:101:0"
                      },
                      {
                        "body": {
                          "id": 2566,
                          "nodeType": "Block",
                          "src": "37955:158:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2559,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2395,
                                    "src": "38027:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2560,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "38049:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2561,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "38049:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2562,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2412,
                                      "src": "38077:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2563,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 907,
                                    "src": "38077:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 2553,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2405,
                                        "src": "37969:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                          "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2556,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "rewarders",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 933,
                                      "src": "37969:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                        "typeString": "contract IComplexRewarder[] storage ref"
                                      }
                                    },
                                    "id": 2557,
                                    "indexExpression": {
                                      "id": 2555,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2542,
                                      "src": "37984:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "37969:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                      "typeString": "contract IComplexRewarder"
                                    }
                                  },
                                  "id": 2558,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "onEmberReward",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 539,
                                  "src": "37969:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,address,uint256) external"
                                  }
                                },
                                "id": 2564,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37969:133:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2565,
                              "nodeType": "ExpressionStatement",
                              "src": "37969:133:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2549,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2545,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2542,
                            "src": "37884:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 2546,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2405,
                                "src": "37897:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2547,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "37897:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 2548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "37897:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "37884:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2567,
                        "initializationExpression": {
                          "assignments": [
                            2542
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2542,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "37856:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2567,
                              "src": "37848:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2541,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "37848:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2544,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2543,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "37869:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "37848:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "37932:12:0",
                            "subExpression": {
                              "id": 2550,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2542,
                              "src": "37934:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2552,
                          "nodeType": "ExpressionStatement",
                          "src": "37932:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "37830:283:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2570,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2568,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2397,
                            "src": "38127:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2569,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "38137:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "38127:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2578,
                        "nodeType": "IfStatement",
                        "src": "38123:65:0",
                        "trueBody": {
                          "id": 2577,
                          "nodeType": "Block",
                          "src": "38140:48:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2571,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2405,
                                    "src": "38154:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2573,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "totalLp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 929,
                                  "src": "38154:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "id": 2574,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2397,
                                  "src": "38170:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "38154:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2576,
                              "nodeType": "ExpressionStatement",
                              "src": "38154:23:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2580,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "38211:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2581,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "38211:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2582,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2395,
                              "src": "38223:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2583,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2397,
                              "src": "38229:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2579,
                            "name": "Deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1044,
                            "src": "38203:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38203:34:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2585,
                        "nodeType": "EmitStatement",
                        "src": "38198:39:0"
                      }
                    ]
                  },
                  "id": 2587,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 2400,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2395,
                          "src": "36793:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2401,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2399,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "36775:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36775:23:0"
                    }
                  ],
                  "name": "_deposit",
                  "nameLocation": "36710:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2398,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2395,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "36727:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2587,
                        "src": "36719:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2394,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36719:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2397,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "36741:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2587,
                        "src": "36733:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2396,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36733:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "36718:31:0"
                  },
                  "returnParameters": {
                    "id": 2402,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "36803:0:0"
                  },
                  "scope": 3371,
                  "src": "36701:1543:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2735,
                    "nodeType": "Block",
                    "src": "38393:1246:0",
                    "statements": [
                      {
                        "assignments": [
                          2601
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2601,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "38420:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2735,
                            "src": "38403:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2600,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2599,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "38403:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "38403:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2605,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2602,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "38427:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2604,
                          "indexExpression": {
                            "id": 2603,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2589,
                            "src": "38436:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38427:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38403:38:0"
                      },
                      {
                        "assignments": [
                          2608
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2608,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "38468:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2735,
                            "src": "38451:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 2607,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2606,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "38451:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "38451:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2615,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2609,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "38475:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 2611,
                            "indexExpression": {
                              "id": 2610,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2589,
                              "src": "38484:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "38475:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 2614,
                          "indexExpression": {
                            "expression": {
                              "id": 2612,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "38490:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "38490:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38475:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38451:50:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2620,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2617,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2608,
                                  "src": "38592:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                  }
                                },
                                "id": 2618,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "amount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 907,
                                "src": "38592:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2619,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2591,
                                "src": "38607:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "38592:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "77697468647261773a207573657220616d6f756e74206e6f7420656e6f756768",
                              "id": 2621,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "38616:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_599ee9914dd56277d22fc830ffad5129bfe92aee959c102ee9fdb8a6bf4bebd4",
                                "typeString": "literal_string \"withdraw: user amount not enough\""
                              },
                              "value": "withdraw: user amount not enough"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_599ee9914dd56277d22fc830ffad5129bfe92aee959c102ee9fdb8a6bf4bebd4",
                                "typeString": "literal_string \"withdraw: user amount not enough\""
                              }
                            ],
                            "id": 2616,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "38584:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38584:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2623,
                        "nodeType": "ExpressionStatement",
                        "src": "38584:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2628,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2625,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2601,
                                  "src": "38721:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2626,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalLp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 929,
                                "src": "38721:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2627,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2591,
                                "src": "38737:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "38721:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768",
                              "id": 2629,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "38746:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3f9de20e7d75e91bb6a2a04dc57a1ad0ca72a86061492a488ec20581061520d2",
                                "typeString": "literal_string \"withdraw: pool total not enough\""
                              },
                              "value": "withdraw: pool total not enough"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3f9de20e7d75e91bb6a2a04dc57a1ad0ca72a86061492a488ec20581061520d2",
                                "typeString": "literal_string \"withdraw: pool total not enough\""
                              }
                            ],
                            "id": 2624,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "38713:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38713:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2631,
                        "nodeType": "ExpressionStatement",
                        "src": "38713:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2633,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2589,
                              "src": "38803:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2632,
                            "name": "_updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2318,
                            "src": "38791:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2634,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38791:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2635,
                        "nodeType": "ExpressionStatement",
                        "src": "38791:17:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2637,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2589,
                              "src": "38843:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2636,
                            "name": "payOrLockupPendingEmber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2995,
                            "src": "38819:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2638,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38819:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2639,
                        "nodeType": "ExpressionStatement",
                        "src": "38819:29:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2640,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2591,
                            "src": "38863:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2641,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "38873:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "38863:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2676,
                        "nodeType": "IfStatement",
                        "src": "38859:243:0",
                        "trueBody": {
                          "id": 2675,
                          "nodeType": "Block",
                          "src": "38876:226:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2647,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2643,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2608,
                                    "src": "38890:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2645,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 907,
                                  "src": "38890:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "id": 2646,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2591,
                                  "src": "38905:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "38890:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2648,
                              "nodeType": "ExpressionStatement",
                              "src": "38890:22:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 2658,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2651,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2601,
                                        "src": "38938:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                          "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2652,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "lpToken",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 917,
                                      "src": "38938:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 2650,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "38930:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2649,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "38930:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2653,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "38930:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 2656,
                                      "name": "ember",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 937,
                                      "src": "38963:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 2655,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "38955:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2654,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "38955:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2657,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "38955:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "38930:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2664,
                              "nodeType": "IfStatement",
                              "src": "38926:106:0",
                              "trueBody": {
                                "id": 2663,
                                "nodeType": "Block",
                                "src": "38971:61:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 2661,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2659,
                                        "name": "totalEmberInPools",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 966,
                                        "src": "38989:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "-=",
                                      "rightHandSide": {
                                        "id": 2660,
                                        "name": "_amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2591,
                                        "src": "39010:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "38989:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2662,
                                    "nodeType": "ExpressionStatement",
                                    "src": "38989:28:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2670,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "39071:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2671,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "39071:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 2672,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2591,
                                    "src": "39083:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2665,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2601,
                                      "src": "39045:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2668,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 917,
                                    "src": "39045:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 2669,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 818,
                                  "src": "39045:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "function (contract IBoringERC20,address,uint256)"
                                  }
                                },
                                "id": 2673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39045:46:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2674,
                              "nodeType": "ExpressionStatement",
                              "src": "39045:46:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 2688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2677,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2608,
                              "src": "39112:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2679,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 909,
                            "src": "39112:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2687,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2684,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 2680,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2608,
                                      "src": "39143:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2681,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 907,
                                    "src": "39143:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 2682,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2601,
                                      "src": "39157:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2683,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "accEmberPerShare",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 923,
                                    "src": "39157:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "39143:35:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 2685,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "39142:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 2686,
                              "name": "ACC_TOKEN_PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 981,
                              "src": "39194:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "39142:71:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "39112:101:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2689,
                        "nodeType": "ExpressionStatement",
                        "src": "39112:101:0"
                      },
                      {
                        "body": {
                          "id": 2715,
                          "nodeType": "Block",
                          "src": "39349:158:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2708,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2589,
                                    "src": "39421:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2709,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "39443:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2710,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "39443:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2711,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2608,
                                      "src": "39471:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2712,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 907,
                                    "src": "39471:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 2702,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2601,
                                        "src": "39363:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                          "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2705,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "rewarders",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 933,
                                      "src": "39363:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                        "typeString": "contract IComplexRewarder[] storage ref"
                                      }
                                    },
                                    "id": 2706,
                                    "indexExpression": {
                                      "id": 2704,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2691,
                                      "src": "39378:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "39363:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                      "typeString": "contract IComplexRewarder"
                                    }
                                  },
                                  "id": 2707,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "onEmberReward",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 539,
                                  "src": "39363:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,address,uint256) external"
                                  }
                                },
                                "id": 2713,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39363:133:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2714,
                              "nodeType": "ExpressionStatement",
                              "src": "39363:133:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2698,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2694,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2691,
                            "src": "39278:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 2695,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2601,
                                "src": "39291:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2696,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "39291:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 2697,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "39291:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "39278:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2716,
                        "initializationExpression": {
                          "assignments": [
                            2691
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2691,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "39250:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2716,
                              "src": "39242:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2690,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "39242:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2693,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2692,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "39263:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "39242:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2700,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "39326:12:0",
                            "subExpression": {
                              "id": 2699,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2691,
                              "src": "39328:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2701,
                          "nodeType": "ExpressionStatement",
                          "src": "39326:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "39224:283:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2719,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2717,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2591,
                            "src": "39521:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "39531:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "39521:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2727,
                        "nodeType": "IfStatement",
                        "src": "39517:65:0",
                        "trueBody": {
                          "id": 2726,
                          "nodeType": "Block",
                          "src": "39534:48:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2724,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2720,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2601,
                                    "src": "39548:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2722,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "totalLp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 929,
                                  "src": "39548:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "id": 2723,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2591,
                                  "src": "39564:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "39548:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2725,
                              "nodeType": "ExpressionStatement",
                              "src": "39548:23:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2729,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "39606:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2730,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "39606:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2731,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2589,
                              "src": "39618:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2732,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2591,
                              "src": "39624:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2728,
                            "name": "Withdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1052,
                            "src": "39597:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2733,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39597:35:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2734,
                        "nodeType": "EmitStatement",
                        "src": "39592:40:0"
                      }
                    ]
                  },
                  "functionSelector": "441a3e70",
                  "id": 2736,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2594,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2593,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "38344:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "38344:12:0"
                    },
                    {
                      "arguments": [
                        {
                          "id": 2596,
                          "name": "_pid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2589,
                          "src": "38383:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 2597,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2595,
                        "name": "validatePoolByPid",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 995,
                        "src": "38365:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "38365:23:0"
                    }
                  ],
                  "name": "withdraw",
                  "nameLocation": "38281:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2592,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2589,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "38298:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2736,
                        "src": "38290:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2588,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "38290:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2591,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "38312:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2736,
                        "src": "38304:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2590,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "38304:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38289:31:0"
                  },
                  "returnParameters": {
                    "id": 2598,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38393:0:0"
                  },
                  "scope": 3371,
                  "src": "38272:1367:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2862,
                    "nodeType": "Block",
                    "src": "39768:923:0",
                    "statements": [
                      {
                        "assignments": [
                          2745
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2745,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "39795:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2862,
                            "src": "39778:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2744,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2743,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "39778:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "39778:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2749,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2746,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "39802:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2748,
                          "indexExpression": {
                            "id": 2747,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2738,
                            "src": "39811:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "39802:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39778:38:0"
                      },
                      {
                        "assignments": [
                          2752
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2752,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "39843:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2862,
                            "src": "39826:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 2751,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2750,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "39826:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "39826:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2759,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2753,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "39850:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 2755,
                            "indexExpression": {
                              "id": 2754,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2738,
                              "src": "39859:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "39850:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 2758,
                          "indexExpression": {
                            "expression": {
                              "id": 2756,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "39865:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2757,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "39865:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "39850:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39826:50:0"
                      },
                      {
                        "assignments": [
                          2761
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2761,
                            "mutability": "mutable",
                            "name": "amount",
                            "nameLocation": "39894:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2862,
                            "src": "39886:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2760,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "39886:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2764,
                        "initialValue": {
                          "expression": {
                            "id": 2762,
                            "name": "user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2752,
                            "src": "39903:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                            }
                          },
                          "id": 2763,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "amount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 907,
                          "src": "39903:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39886:28:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2769,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2766,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2745,
                                  "src": "39997:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2767,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalLp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 929,
                                "src": "39997:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2768,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2761,
                                "src": "40013:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "39997:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768",
                              "id": 2770,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "40033:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7403ca24e9c0a16402bd2f7a663c2e32bacc0f20ab96bd8ecff29ea615b41a35",
                                "typeString": "literal_string \"emergency withdraw: pool total not enough\""
                              },
                              "value": "emergency withdraw: pool total not enough"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7403ca24e9c0a16402bd2f7a663c2e32bacc0f20ab96bd8ecff29ea615b41a35",
                                "typeString": "literal_string \"emergency withdraw: pool total not enough\""
                              }
                            ],
                            "id": 2765,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "39976:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39976:110:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2772,
                        "nodeType": "ExpressionStatement",
                        "src": "39976:110:0"
                      },
                      {
                        "expression": {
                          "id": 2777,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2773,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2752,
                              "src": "40097:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2775,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "amount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 907,
                            "src": "40097:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 2776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40111:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "40097:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2778,
                        "nodeType": "ExpressionStatement",
                        "src": "40097:15:0"
                      },
                      {
                        "expression": {
                          "id": 2783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2779,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2752,
                              "src": "40122:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2781,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 909,
                            "src": "40122:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 2782,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40140:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "40122:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2784,
                        "nodeType": "ExpressionStatement",
                        "src": "40122:19:0"
                      },
                      {
                        "expression": {
                          "id": 2789,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2785,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2752,
                              "src": "40151:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2787,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardLockedUp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 911,
                            "src": "40151:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 2788,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40173:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "40151:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2790,
                        "nodeType": "ExpressionStatement",
                        "src": "40151:23:0"
                      },
                      {
                        "expression": {
                          "id": 2795,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2791,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2752,
                              "src": "40184:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2793,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "nextHarvestUntil",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 913,
                            "src": "40184:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 2794,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40208:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "40184:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2796,
                        "nodeType": "ExpressionStatement",
                        "src": "40184:25:0"
                      },
                      {
                        "expression": {
                          "id": 2801,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2797,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2745,
                              "src": "40219:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2799,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "totalLp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 929,
                            "src": "40219:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 2800,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2761,
                            "src": "40235:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "40219:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2802,
                        "nodeType": "ExpressionStatement",
                        "src": "40219:22:0"
                      },
                      {
                        "body": {
                          "id": 2827,
                          "nodeType": "Block",
                          "src": "40377:86:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2821,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2738,
                                    "src": "40432:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 2822,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "40438:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 2823,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "40438:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 2824,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "40450:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "id": 2815,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2745,
                                        "src": "40391:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                          "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2818,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "rewarders",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 933,
                                      "src": "40391:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                        "typeString": "contract IComplexRewarder[] storage ref"
                                      }
                                    },
                                    "id": 2819,
                                    "indexExpression": {
                                      "id": 2817,
                                      "name": "rewarderId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2804,
                                      "src": "40406:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "40391:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IComplexRewarder_$562",
                                      "typeString": "contract IComplexRewarder"
                                    }
                                  },
                                  "id": 2820,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "onEmberReward",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 539,
                                  "src": "40391:40:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,address,uint256) external"
                                  }
                                },
                                "id": 2825,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40391:61:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2826,
                              "nodeType": "ExpressionStatement",
                              "src": "40391:61:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2807,
                            "name": "rewarderId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2804,
                            "src": "40306:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "id": 2808,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2745,
                                "src": "40319:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2809,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewarders",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 933,
                              "src": "40319:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_contract$_IComplexRewarder_$562_$dyn_storage",
                                "typeString": "contract IComplexRewarder[] storage ref"
                              }
                            },
                            "id": 2810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "40319:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "40306:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2828,
                        "initializationExpression": {
                          "assignments": [
                            2804
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2804,
                              "mutability": "mutable",
                              "name": "rewarderId",
                              "nameLocation": "40278:10:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2828,
                              "src": "40270:18:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2803,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "40270:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2806,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2805,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40291:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "40270:22:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2813,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "40354:12:0",
                            "subExpression": {
                              "id": 2812,
                              "name": "rewarderId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2804,
                              "src": "40356:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2814,
                          "nodeType": "ExpressionStatement",
                          "src": "40354:12:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "40252:211:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 2831,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2745,
                                  "src": "40485:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2832,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "lpToken",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 917,
                                "src": "40485:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              ],
                              "id": 2830,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "40477:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2829,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "40477:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "40477:21:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "id": 2836,
                                "name": "ember",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 937,
                                "src": "40510:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              ],
                              "id": 2835,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "40502:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2834,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "40502:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "40502:14:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "40477:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2844,
                        "nodeType": "IfStatement",
                        "src": "40473:97:0",
                        "trueBody": {
                          "id": 2843,
                          "nodeType": "Block",
                          "src": "40518:52:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2841,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 2839,
                                  "name": "totalEmberInPools",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 966,
                                  "src": "40532:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "id": 2840,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2761,
                                  "src": "40553:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "40532:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2842,
                              "nodeType": "ExpressionStatement",
                              "src": "40532:27:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2850,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "40606:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2851,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "40606:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2852,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2761,
                              "src": "40618:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 2845,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2745,
                                "src": "40580:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                }
                              },
                              "id": 2848,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lpToken",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 917,
                              "src": "40580:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                "typeString": "contract IBoringERC20"
                              }
                            },
                            "id": 2849,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 818,
                            "src": "40580:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                              "typeString": "function (contract IBoringERC20,address,uint256)"
                            }
                          },
                          "id": 2853,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "40580:45:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2854,
                        "nodeType": "ExpressionStatement",
                        "src": "40580:45:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2856,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "40659:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2857,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "40659:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2858,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2738,
                              "src": "40671:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2859,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2761,
                              "src": "40677:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2855,
                            "name": "EmergencyWithdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1060,
                            "src": "40641:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "40641:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2861,
                        "nodeType": "EmitStatement",
                        "src": "40636:48:0"
                      }
                    ]
                  },
                  "functionSelector": "5312ea8e",
                  "id": 2863,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2741,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2740,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "39755:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "39755:12:0"
                    }
                  ],
                  "name": "emergencyWithdraw",
                  "nameLocation": "39716:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2739,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2738,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "39742:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2863,
                        "src": "39734:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2737,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "39734:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "39733:14:0"
                  },
                  "returnParameters": {
                    "id": 2742,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "39768:0:0"
                  },
                  "scope": 3371,
                  "src": "39707:984:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2994,
                    "nodeType": "Block",
                    "src": "40789:1094:0",
                    "statements": [
                      {
                        "assignments": [
                          2870
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2870,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "40816:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2994,
                            "src": "40799:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct EmberDistributorV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2869,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2868,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "40799:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "40799:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct EmberDistributorV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2874,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2871,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "40823:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2873,
                          "indexExpression": {
                            "id": 2872,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2865,
                            "src": "40832:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "40823:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "40799:38:0"
                      },
                      {
                        "assignments": [
                          2877
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2877,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "40864:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2994,
                            "src": "40847:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                              "typeString": "struct EmberDistributorV2.UserInfo"
                            },
                            "typeName": {
                              "id": 2876,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2875,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 914,
                                "src": "40847:8:0"
                              },
                              "referencedDeclaration": 914,
                              "src": "40847:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2884,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2878,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "40871:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo storage ref))"
                              }
                            },
                            "id": 2880,
                            "indexExpression": {
                              "id": 2879,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2865,
                              "src": "40880:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "40871:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$914_storage_$",
                              "typeString": "mapping(address => struct EmberDistributorV2.UserInfo storage ref)"
                            }
                          },
                          "id": 2883,
                          "indexExpression": {
                            "expression": {
                              "id": 2881,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "40886:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "40886:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "40871:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$914_storage",
                            "typeString": "struct EmberDistributorV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "40847:50:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2888,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2885,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2877,
                                "src": "40912:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                  "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                }
                              },
                              "id": 2886,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "nextHarvestUntil",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 913,
                              "src": "40912:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2887,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "40937:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "40912:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2892,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2889,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "40942:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 2890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "40942:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 2891,
                              "name": "startTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 961,
                              "src": "40961:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "40942:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "40912:63:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2905,
                        "nodeType": "IfStatement",
                        "src": "40908:156:0",
                        "trueBody": {
                          "id": 2904,
                          "nodeType": "Block",
                          "src": "40977:87:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2902,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2894,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2877,
                                    "src": "40991:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                      "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2896,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "nextHarvestUntil",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 913,
                                  "src": "40991:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2901,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 2897,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "41015:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 2898,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "41015:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 2899,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2870,
                                      "src": "41033:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2900,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "harvestInterval",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 927,
                                    "src": "41033:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "41015:38:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "40991:62:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2903,
                              "nodeType": "ExpressionStatement",
                              "src": "40991:62:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2907
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2907,
                            "mutability": "mutable",
                            "name": "pending",
                            "nameLocation": "41082:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2994,
                            "src": "41074:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2906,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "41074:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2920,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2919,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2915,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2912,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 2908,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2877,
                                          "src": "41094:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2909,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "amount",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 907,
                                        "src": "41094:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 2910,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2870,
                                          "src": "41108:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 2911,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "accEmberPerShare",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 923,
                                        "src": "41108:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "41094:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 2913,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "41093:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 2914,
                                  "name": "ACC_TOKEN_PRECISION",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 981,
                                  "src": "41145:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "41093:71:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 2916,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "41092:73:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "expression": {
                              "id": 2917,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2877,
                              "src": "41168:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                              }
                            },
                            "id": 2918,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 909,
                            "src": "41168:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "41092:91:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41074:109:0"
                      },
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 2922,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2865,
                              "src": "41209:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 2923,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "41215:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2924,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "41215:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2921,
                            "name": "canHarvest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2111,
                            "src": "41198:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (uint256,address) view returns (bool)"
                            }
                          },
                          "id": 2925,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41198:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2973,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 2971,
                              "name": "pending",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2907,
                              "src": "41704:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2972,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "41714:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "41704:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 2992,
                          "nodeType": "IfStatement",
                          "src": "41700:177:0",
                          "trueBody": {
                            "id": 2991,
                            "nodeType": "Block",
                            "src": "41717:160:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 2976,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 2974,
                                    "name": "totalLockedUpRewards",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 963,
                                    "src": "41731:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "+=",
                                  "rightHandSide": {
                                    "id": 2975,
                                    "name": "pending",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2907,
                                    "src": "41755:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "41731:31:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2977,
                                "nodeType": "ExpressionStatement",
                                "src": "41731:31:0"
                              },
                              {
                                "expression": {
                                  "id": 2982,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "expression": {
                                      "id": 2978,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2877,
                                      "src": "41776:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2980,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "memberName": "rewardLockedUp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 911,
                                    "src": "41776:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "+=",
                                  "rightHandSide": {
                                    "id": 2981,
                                    "name": "pending",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2907,
                                    "src": "41799:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "41776:30:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2983,
                                "nodeType": "ExpressionStatement",
                                "src": "41776:30:0"
                              },
                              {
                                "eventCall": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2985,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "41840:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 2986,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "41840:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 2987,
                                      "name": "_pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2865,
                                      "src": "41852:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "id": 2988,
                                      "name": "pending",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2907,
                                      "src": "41858:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2984,
                                    "name": "RewardLockedUp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1076,
                                    "src": "41825:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256,uint256)"
                                    }
                                  },
                                  "id": 2989,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "41825:41:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 2990,
                                "nodeType": "EmitStatement",
                                "src": "41820:46:0"
                              }
                            ]
                          }
                        },
                        "id": 2993,
                        "nodeType": "IfStatement",
                        "src": "41194:683:0",
                        "trueBody": {
                          "id": 2970,
                          "nodeType": "Block",
                          "src": "41228:466:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 2933,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2928,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2926,
                                    "name": "pending",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2907,
                                    "src": "41246:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 2927,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "41256:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "41246:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2932,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 2929,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2877,
                                      "src": "41261:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                        "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2930,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewardLockedUp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 911,
                                    "src": "41261:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 2931,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "41283:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "41261:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "41246:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2969,
                              "nodeType": "IfStatement",
                              "src": "41242:442:0",
                              "trueBody": {
                                "id": 2968,
                                "nodeType": "Block",
                                "src": "41286:398:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      2935
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 2935,
                                        "mutability": "mutable",
                                        "name": "pendingRewards",
                                        "nameLocation": "41312:14:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 2968,
                                        "src": "41304:22:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 2934,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "41304:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 2940,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2939,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 2936,
                                        "name": "pending",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2907,
                                        "src": "41329:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 2937,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2877,
                                          "src": "41339:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2938,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardLockedUp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 911,
                                        "src": "41339:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "41329:29:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "41304:54:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2944,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2941,
                                        "name": "totalLockedUpRewards",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 963,
                                        "src": "41409:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "-=",
                                      "rightHandSide": {
                                        "expression": {
                                          "id": 2942,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2877,
                                          "src": "41433:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2943,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardLockedUp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 911,
                                        "src": "41433:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "41409:43:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2945,
                                    "nodeType": "ExpressionStatement",
                                    "src": "41409:43:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2950,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 2946,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2877,
                                          "src": "41470:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2948,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "rewardLockedUp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 911,
                                        "src": "41470:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "hexValue": "30",
                                        "id": 2949,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "41492:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "41470:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2951,
                                    "nodeType": "ExpressionStatement",
                                    "src": "41470:23:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2960,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 2952,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2877,
                                          "src": "41511:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$914_storage_ptr",
                                            "typeString": "struct EmberDistributorV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2954,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "nextHarvestUntil",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 913,
                                        "src": "41511:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2959,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "expression": {
                                            "id": 2955,
                                            "name": "block",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -4,
                                            "src": "41535:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_block",
                                              "typeString": "block"
                                            }
                                          },
                                          "id": 2956,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "timestamp",
                                          "nodeType": "MemberAccess",
                                          "src": "41535:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "+",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2957,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2870,
                                            "src": "41553:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                              "typeString": "struct EmberDistributorV2.PoolInfo storage pointer"
                                            }
                                          },
                                          "id": 2958,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "harvestInterval",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 927,
                                          "src": "41553:20:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "41535:38:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "41511:62:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2961,
                                    "nodeType": "ExpressionStatement",
                                    "src": "41511:62:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 2963,
                                            "name": "msg",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -15,
                                            "src": "41642:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_message",
                                              "typeString": "msg"
                                            }
                                          },
                                          "id": 2964,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "sender",
                                          "nodeType": "MemberAccess",
                                          "src": "41642:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 2965,
                                          "name": "pendingRewards",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2935,
                                          "src": "41654:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 2962,
                                        "name": "safeEmberTransfer",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3050,
                                        "src": "41624:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (address,uint256)"
                                        }
                                      },
                                      "id": 2966,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "41624:45:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2967,
                                    "nodeType": "ExpressionStatement",
                                    "src": "41624:45:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 2995,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payOrLockupPendingEmber",
                  "nameLocation": "40742:23:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2866,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2865,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "40774:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2995,
                        "src": "40766:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2864,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "40766:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "40765:14:0"
                  },
                  "returnParameters": {
                    "id": 2867,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "40789:0:0"
                  },
                  "scope": 3371,
                  "src": "40733:1150:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3049,
                    "nodeType": "Block",
                    "src": "42061:553:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3010,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 3006,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "42099:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                      "typeString": "contract EmberDistributorV2"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                      "typeString": "contract EmberDistributorV2"
                                    }
                                  ],
                                  "id": 3005,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "42091:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3004,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "42091:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3007,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42091:13:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 3002,
                                "name": "ember",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 937,
                                "src": "42075:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                  "typeString": "contract IBoringERC20"
                                }
                              },
                              "id": 3003,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 476,
                              "src": "42075:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 3008,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42075:30:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 3009,
                            "name": "totalEmberInPools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 966,
                            "src": "42108:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "42075:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3048,
                        "nodeType": "IfStatement",
                        "src": "42071:537:0",
                        "trueBody": {
                          "id": 3047,
                          "nodeType": "Block",
                          "src": "42127:481:0",
                          "statements": [
                            {
                              "assignments": [
                                3012
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 3012,
                                  "mutability": "mutable",
                                  "name": "emberBal",
                                  "nameLocation": "42328:8:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 3047,
                                  "src": "42320:16:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 3011,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "42320:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 3022,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3021,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 3017,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "42363:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                            "typeString": "contract EmberDistributorV2"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_EmberDistributorV2_$3371",
                                            "typeString": "contract EmberDistributorV2"
                                          }
                                        ],
                                        "id": 3016,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "42355:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 3015,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "42355:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 3018,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "42355:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 3013,
                                      "name": "ember",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 937,
                                      "src": "42339:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 3014,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 476,
                                    "src": "42339:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 3019,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "42339:30:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 3020,
                                  "name": "totalEmberInPools",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 966,
                                  "src": "42388:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "42339:66:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "42320:85:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3025,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 3023,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2999,
                                  "src": "42423:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "id": 3024,
                                  "name": "emberBal",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3012,
                                  "src": "42434:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "42423:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3036,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 3034,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2999,
                                    "src": "42520:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 3035,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "42530:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "42520:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 3045,
                                "nodeType": "IfStatement",
                                "src": "42516:82:0",
                                "trueBody": {
                                  "id": 3044,
                                  "nodeType": "Block",
                                  "src": "42533:65:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "id": 3040,
                                            "name": "_to",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2997,
                                            "src": "42570:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          {
                                            "id": 3041,
                                            "name": "_amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2999,
                                            "src": "42575:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 3037,
                                            "name": "ember",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 937,
                                            "src": "42551:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                              "typeString": "contract IBoringERC20"
                                            }
                                          },
                                          "id": 3039,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "safeTransfer",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 818,
                                          "src": "42551:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                            "typeString": "function (contract IBoringERC20,address,uint256)"
                                          }
                                        },
                                        "id": 3042,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "42551:32:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_tuple$__$",
                                          "typeString": "tuple()"
                                        }
                                      },
                                      "id": 3043,
                                      "nodeType": "ExpressionStatement",
                                      "src": "42551:32:0"
                                    }
                                  ]
                                }
                              },
                              "id": 3046,
                              "nodeType": "IfStatement",
                              "src": "42419:179:0",
                              "trueBody": {
                                "id": 3033,
                                "nodeType": "Block",
                                "src": "42444:66:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 3029,
                                          "name": "_to",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2997,
                                          "src": "42481:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 3030,
                                          "name": "emberBal",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3012,
                                          "src": "42486:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 3026,
                                          "name": "ember",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 937,
                                          "src": "42462:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                            "typeString": "contract IBoringERC20"
                                          }
                                        },
                                        "id": 3028,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "safeTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 818,
                                        "src": "42462:18:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                          "typeString": "function (contract IBoringERC20,address,uint256)"
                                        }
                                      },
                                      "id": 3031,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "42462:33:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 3032,
                                    "nodeType": "ExpressionStatement",
                                    "src": "42462:33:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 3050,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeEmberTransfer",
                  "nameLocation": "42004:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3000,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2997,
                        "mutability": "mutable",
                        "name": "_to",
                        "nameLocation": "42030:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3050,
                        "src": "42022:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2996,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "42022:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2999,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "42043:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3050,
                        "src": "42035:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2998,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "42035:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "42021:30:0"
                  },
                  "returnParameters": {
                    "id": 3001,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "42061:0:0"
                  },
                  "scope": 3371,
                  "src": "41995:619:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3071,
                    "nodeType": "Block",
                    "src": "42687:146:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 3057,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "42697:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 3058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42697:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3059,
                        "nodeType": "ExpressionStatement",
                        "src": "42697:18:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3061,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "42751:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3062,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "42751:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3063,
                              "name": "emberPerSec",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 939,
                              "src": "42763:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3064,
                              "name": "_emberPerSec",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3052,
                              "src": "42776:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3060,
                            "name": "EmissionRateUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1068,
                            "src": "42731:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 3065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42731:58:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3066,
                        "nodeType": "EmitStatement",
                        "src": "42726:63:0"
                      },
                      {
                        "expression": {
                          "id": 3069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3067,
                            "name": "emberPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 939,
                            "src": "42800:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3068,
                            "name": "_emberPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3052,
                            "src": "42814:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "42800:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3070,
                        "nodeType": "ExpressionStatement",
                        "src": "42800:26:0"
                      }
                    ]
                  },
                  "functionSelector": "0ba84cd2",
                  "id": 3072,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3055,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3054,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "42677:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "42677:9:0"
                    }
                  ],
                  "name": "updateEmissionRate",
                  "nameLocation": "42629:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3053,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3052,
                        "mutability": "mutable",
                        "name": "_emberPerSec",
                        "nameLocation": "42656:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3072,
                        "src": "42648:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3051,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "42648:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "42647:22:0"
                  },
                  "returnParameters": {
                    "id": 3056,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "42687:0:0"
                  },
                  "scope": 3371,
                  "src": "42620:213:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3112,
                    "nodeType": "Block",
                    "src": "42937:338:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 3081,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "42947:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 3082,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42947:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3083,
                        "nodeType": "ExpressionStatement",
                        "src": "42947:18:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3085,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "43013:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3086,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "43013:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 3087,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 949,
                                  "src": "43037:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 3089,
                                "indexExpression": {
                                  "id": 3088,
                                  "name": "_pid",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3074,
                                  "src": "43046:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "43037:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                                }
                              },
                              "id": 3090,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allocPoint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 919,
                              "src": "43037:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3091,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3076,
                              "src": "43076:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3084,
                            "name": "AllocPointsUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "42981:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 3092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42981:116:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3093,
                        "nodeType": "EmitStatement",
                        "src": "42976:121:0"
                      },
                      {
                        "expression": {
                          "id": 3103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3094,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 959,
                            "src": "43108:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 3102,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3095,
                                "name": "totalAllocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 959,
                                "src": "43138:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 3096,
                                    "name": "poolInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 949,
                                    "src": "43168:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                      "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                    }
                                  },
                                  "id": 3098,
                                  "indexExpression": {
                                    "id": 3097,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3074,
                                    "src": "43177:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "43168:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                    "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                                  }
                                },
                                "id": 3099,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allocPoint",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 919,
                                "src": "43168:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "43138:55:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 3101,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3076,
                              "src": "43208:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "43138:81:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "43108:111:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3104,
                        "nodeType": "ExpressionStatement",
                        "src": "43108:111:0"
                      },
                      {
                        "expression": {
                          "id": 3110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 3105,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 949,
                                "src": "43229:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                  "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 3107,
                              "indexExpression": {
                                "id": 3106,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3074,
                                "src": "43238:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "43229:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                              }
                            },
                            "id": 3108,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "allocPoint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 919,
                            "src": "43229:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3109,
                            "name": "_allocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3076,
                            "src": "43257:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "43229:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3111,
                        "nodeType": "ExpressionStatement",
                        "src": "43229:39:0"
                      }
                    ]
                  },
                  "functionSelector": "eddf9652",
                  "id": 3113,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3079,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3078,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "42923:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "42923:9:0"
                    }
                  ],
                  "name": "updateAllocPoint",
                  "nameLocation": "42848:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3077,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3074,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "42873:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3113,
                        "src": "42865:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3073,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "42865:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3076,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "42887:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3113,
                        "src": "42879:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3075,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "42879:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "42864:35:0"
                  },
                  "returnParameters": {
                    "id": 3080,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "42937:0:0"
                  },
                  "scope": 3371,
                  "src": "42839:436:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3125,
                    "nodeType": "Block",
                    "src": "43347:45:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 3120,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 949,
                              "src": "43364:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_PoolInfo_$934_storage_$dyn_storage",
                                "typeString": "struct EmberDistributorV2.PoolInfo storage ref[] storage ref"
                              }
                            },
                            "id": 3122,
                            "indexExpression": {
                              "id": 3121,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3115,
                              "src": "43373:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "43364:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                              "typeString": "struct EmberDistributorV2.PoolInfo storage ref"
                            }
                          },
                          "id": 3123,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "totalLp",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 929,
                          "src": "43364:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3119,
                        "id": 3124,
                        "nodeType": "Return",
                        "src": "43357:28:0"
                      }
                    ]
                  },
                  "functionSelector": "654c9ece",
                  "id": 3126,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolTotalLp",
                  "nameLocation": "43290:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3116,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3115,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "43310:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3126,
                        "src": "43302:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3114,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "43302:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "43301:13:0"
                  },
                  "returnParameters": {
                    "id": 3119,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3118,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 3126,
                        "src": "43338:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3117,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "43338:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "43337:9:0"
                  },
                  "scope": 3371,
                  "src": "43281:111:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 3162,
                    "nodeType": "Block",
                    "src": "43527:193:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3135,
                                  "name": "_pids",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3129,
                                  "src": "43545:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                    "typeString": "uint256[] calldata"
                                  }
                                },
                                "id": 3136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "43545:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "3330",
                                "id": 3137,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "43561:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_30_by_1",
                                  "typeString": "int_const 30"
                                },
                                "value": "30"
                              },
                              "src": "43545:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "68617276657374206d616e793a20746f6f206d616e7920706f6f6c20696473",
                              "id": 3139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "43565:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_32c9802382a4c9ed992955a41ef4a76d583dbf70dc166a072178738c06713616",
                                "typeString": "literal_string \"harvest many: too many pool ids\""
                              },
                              "value": "harvest many: too many pool ids"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_32c9802382a4c9ed992955a41ef4a76d583dbf70dc166a072178738c06713616",
                                "typeString": "literal_string \"harvest many: too many pool ids\""
                              }
                            ],
                            "id": 3134,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "43537:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43537:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3141,
                        "nodeType": "ExpressionStatement",
                        "src": "43537:62:0"
                      },
                      {
                        "body": {
                          "id": 3160,
                          "nodeType": "Block",
                          "src": "43664:50:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 3154,
                                      "name": "_pids",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3129,
                                      "src": "43687:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                        "typeString": "uint256[] calldata"
                                      }
                                    },
                                    "id": 3156,
                                    "indexExpression": {
                                      "id": 3155,
                                      "name": "index",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3143,
                                      "src": "43693:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "43687:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 3157,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "43701:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3153,
                                  "name": "_deposit",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2587,
                                  "src": "43678:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256,uint256)"
                                  }
                                },
                                "id": 3158,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "43678:25:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3159,
                              "nodeType": "ExpressionStatement",
                              "src": "43678:25:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3146,
                            "name": "index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3143,
                            "src": "43633:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 3147,
                              "name": "_pids",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3129,
                              "src": "43641:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                "typeString": "uint256[] calldata"
                              }
                            },
                            "id": 3148,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "43641:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "43633:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3161,
                        "initializationExpression": {
                          "assignments": [
                            3143
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 3143,
                              "mutability": "mutable",
                              "name": "index",
                              "nameLocation": "43622:5:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 3161,
                              "src": "43614:13:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 3142,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "43614:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 3145,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 3144,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "43630:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "43614:17:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 3151,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "43655:7:0",
                            "subExpression": {
                              "id": 3150,
                              "name": "index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3143,
                              "src": "43657:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3152,
                          "nodeType": "ExpressionStatement",
                          "src": "43655:7:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "43609:105:0"
                      }
                    ]
                  },
                  "functionSelector": "dc640ac9",
                  "id": 3163,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3132,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3131,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 160,
                        "src": "43514:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "43514:12:0"
                    }
                  ],
                  "name": "harvestMany",
                  "nameLocation": "43469:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3130,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3129,
                        "mutability": "mutable",
                        "name": "_pids",
                        "nameLocation": "43500:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3163,
                        "src": "43481:24:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3127,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "43481:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3128,
                          "nodeType": "ArrayTypeName",
                          "src": "43481:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "43480:26:0"
                  },
                  "returnParameters": {
                    "id": 3133,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "43527:0:0"
                  },
                  "scope": 3371,
                  "src": "43460:260:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3196,
                    "nodeType": "Block",
                    "src": "43836:370:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3169,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "43867:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3170,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "43867:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 3171,
                                "name": "teamAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 968,
                                "src": "43881:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "43867:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574207465616d20616464726573733a206f6e6c792070726576696f7573207465616d20616464726573732063616e2063616c6c2074686973206d6574686f64",
                              "id": 3173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "43906:67:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_91a6d43bc4b258f984ce3e01aeb399b7007888bfcd1e84d2cce57453a4e694c0",
                                "typeString": "literal_string \"set team address: only previous team address can call this method\""
                              },
                              "value": "set team address: only previous team address can call this method"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_91a6d43bc4b258f984ce3e01aeb399b7007888bfcd1e84d2cce57453a4e694c0",
                                "typeString": "literal_string \"set team address: only previous team address can call this method\""
                              }
                            ],
                            "id": 3168,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "43846:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43846:137:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3175,
                        "nodeType": "ExpressionStatement",
                        "src": "43846:137:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3177,
                                "name": "_teamAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3165,
                                "src": "44014:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3180,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "44038:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3179,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "44030:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3178,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "44030:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3181,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "44030:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "44014:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574207465616d20616464726573733a20696e76616c6964206e6577207465616d2061646472657373",
                              "id": 3183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "44054:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_466a2d9409e515c8e544c25da52dc1d81668c4144c9b20387a9afb8241172c9d",
                                "typeString": "literal_string \"set team address: invalid new team address\""
                              },
                              "value": "set team address: invalid new team address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_466a2d9409e515c8e544c25da52dc1d81668c4144c9b20387a9afb8241172c9d",
                                "typeString": "literal_string \"set team address: invalid new team address\""
                              }
                            ],
                            "id": 3176,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "43993:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43993:115:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3185,
                        "nodeType": "ExpressionStatement",
                        "src": "43993:115:0"
                      },
                      {
                        "expression": {
                          "id": 3188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3186,
                            "name": "teamAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "44118:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3187,
                            "name": "_teamAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3165,
                            "src": "44132:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "44118:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3189,
                        "nodeType": "ExpressionStatement",
                        "src": "44118:26:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3191,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "44174:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "44174:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3193,
                              "name": "_teamAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3165,
                              "src": "44186:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3190,
                            "name": "SetTeamAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1090,
                            "src": "44159:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 3194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44159:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3195,
                        "nodeType": "EmitStatement",
                        "src": "44154:45:0"
                      }
                    ]
                  },
                  "functionSelector": "6690864e",
                  "id": 3197,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTeamAddress",
                  "nameLocation": "43792:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3166,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3165,
                        "mutability": "mutable",
                        "name": "_teamAddress",
                        "nameLocation": "43815:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3197,
                        "src": "43807:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3164,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "43807:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "43806:22:0"
                  },
                  "returnParameters": {
                    "id": 3167,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "43836:0:0"
                  },
                  "scope": 3371,
                  "src": "43783:423:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3231,
                    "nodeType": "Block",
                    "src": "44278:380:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3207,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3205,
                                "name": "_newTeamPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3199,
                                "src": "44309:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "44328:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "44309:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574207465616d2070657263656e743a20696e76616c69642070657263656e742076616c7565",
                              "id": 3208,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "44346:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_96fa5ebfdccd5fe963a5ea957c64eb336593f70dc510dd1bca45dcd26ddb6a7c",
                                "typeString": "literal_string \"set team percent: invalid percent value\""
                              },
                              "value": "set team percent: invalid percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_96fa5ebfdccd5fe963a5ea957c64eb336593f70dc510dd1bca45dcd26ddb6a7c",
                                "typeString": "literal_string \"set team percent: invalid percent value\""
                              }
                            ],
                            "id": 3204,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "44288:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44288:109:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3210,
                        "nodeType": "ExpressionStatement",
                        "src": "44288:109:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3218,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3216,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3214,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 3212,
                                    "name": "treasuryPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 976,
                                    "src": "44428:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 3213,
                                    "name": "_newTeamPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3199,
                                    "src": "44446:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "44428:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 3215,
                                  "name": "investorPercent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 978,
                                  "src": "44464:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "44428:51:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3217,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "44483:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "44428:59:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574207465616d2070657263656e743a20746f74616c2070657263656e74206f766572206d6178",
                              "id": 3219,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "44501:42:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cad93da5b0bb30aab098be326a0ed1b2f8a79830f5cdc8241739db128d0ebe60",
                                "typeString": "literal_string \"set team percent: total percent over max\""
                              },
                              "value": "set team percent: total percent over max"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cad93da5b0bb30aab098be326a0ed1b2f8a79830f5cdc8241739db128d0ebe60",
                                "typeString": "literal_string \"set team percent: total percent over max\""
                              }
                            ],
                            "id": 3211,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "44407:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3220,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44407:146:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3221,
                        "nodeType": "ExpressionStatement",
                        "src": "44407:146:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3223,
                              "name": "teamPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 974,
                              "src": "44583:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3224,
                              "name": "_newTeamPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3199,
                              "src": "44596:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3222,
                            "name": "SetTeamPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1108,
                            "src": "44568:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 3225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44568:44:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3226,
                        "nodeType": "EmitStatement",
                        "src": "44563:49:0"
                      },
                      {
                        "expression": {
                          "id": 3229,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3227,
                            "name": "teamPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 974,
                            "src": "44622:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3228,
                            "name": "_newTeamPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3199,
                            "src": "44636:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "44622:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3230,
                        "nodeType": "ExpressionStatement",
                        "src": "44622:29:0"
                      }
                    ]
                  },
                  "functionSelector": "949e6302",
                  "id": 3232,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3202,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3201,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "44268:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "44268:9:0"
                    }
                  ],
                  "name": "setTeamPercent",
                  "nameLocation": "44221:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3200,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3199,
                        "mutability": "mutable",
                        "name": "_newTeamPercent",
                        "nameLocation": "44244:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3232,
                        "src": "44236:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3198,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "44236:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "44235:25:0"
                  },
                  "returnParameters": {
                    "id": 3203,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "44278:0:0"
                  },
                  "scope": 3371,
                  "src": "44212:446:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3265,
                    "nodeType": "Block",
                    "src": "44782:410:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3238,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "44813:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3239,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "44813:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 3240,
                                "name": "treasuryAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 970,
                                "src": "44827:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "44813:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420747265617375727920616464726573733a206f6e6c792070726576696f757320747265617375727920616464726573732063616e2063616c6c2074686973206d6574686f64",
                              "id": 3242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "44856:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_96c0ae7ae9c516fb014da861fa3c99fa20f93a17066e621a7fe9942d11857748",
                                "typeString": "literal_string \"set treasury address: only previous treasury address can call this method\""
                              },
                              "value": "set treasury address: only previous treasury address can call this method"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_96c0ae7ae9c516fb014da861fa3c99fa20f93a17066e621a7fe9942d11857748",
                                "typeString": "literal_string \"set treasury address: only previous treasury address can call this method\""
                              }
                            ],
                            "id": 3237,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "44792:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44792:149:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3244,
                        "nodeType": "ExpressionStatement",
                        "src": "44792:149:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3251,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3246,
                                "name": "_treasuryAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3234,
                                "src": "44972:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3249,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "45000:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3248,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "44992:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3247,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "44992:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3250,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "44992:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "44972:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420747265617375727920616464726573733a20696e76616c6964206e65772074726561737572792061646472657373",
                              "id": 3252,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45016:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_78c2848d97f42f206b1d04161d95b25d6b31f76a68d7784dbfd771f0dc4545cc",
                                "typeString": "literal_string \"set treasury address: invalid new treasury address\""
                              },
                              "value": "set treasury address: invalid new treasury address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_78c2848d97f42f206b1d04161d95b25d6b31f76a68d7784dbfd771f0dc4545cc",
                                "typeString": "literal_string \"set treasury address: invalid new treasury address\""
                              }
                            ],
                            "id": 3245,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "44951:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3253,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44951:127:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3254,
                        "nodeType": "ExpressionStatement",
                        "src": "44951:127:0"
                      },
                      {
                        "expression": {
                          "id": 3257,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3255,
                            "name": "treasuryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "45088:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3256,
                            "name": "_treasuryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3234,
                            "src": "45106:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "45088:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3258,
                        "nodeType": "ExpressionStatement",
                        "src": "45088:34:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3260,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "45156:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3261,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "45156:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3262,
                              "name": "_treasuryAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3234,
                              "src": "45168:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3259,
                            "name": "SetTreasuryAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1096,
                            "src": "45137:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 3263,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45137:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3264,
                        "nodeType": "EmitStatement",
                        "src": "45132:53:0"
                      }
                    ]
                  },
                  "functionSelector": "6605bfda",
                  "id": 3266,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTreasuryAddress",
                  "nameLocation": "44730:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3235,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3234,
                        "mutability": "mutable",
                        "name": "_treasuryAddress",
                        "nameLocation": "44757:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3266,
                        "src": "44749:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3233,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "44749:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "44748:26:0"
                  },
                  "returnParameters": {
                    "id": 3236,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "44782:0:0"
                  },
                  "scope": 3371,
                  "src": "44721:471:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3300,
                    "nodeType": "Block",
                    "src": "45272:412:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3274,
                                "name": "_newTreasuryPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3268,
                                "src": "45303:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3275,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "45326:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "45303:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7365742074726561737572792070657263656e743a20696e76616c69642070657263656e742076616c7565",
                              "id": 3277,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45344:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_84267f5f030648d2a2d39881f366a3558c44ac903693a027d1331806eb1fa2e2",
                                "typeString": "literal_string \"set treasury percent: invalid percent value\""
                              },
                              "value": "set treasury percent: invalid percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_84267f5f030648d2a2d39881f366a3558c44ac903693a027d1331806eb1fa2e2",
                                "typeString": "literal_string \"set treasury percent: invalid percent value\""
                              }
                            ],
                            "id": 3273,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45282:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45282:117:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3279,
                        "nodeType": "ExpressionStatement",
                        "src": "45282:117:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3287,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3285,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3283,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 3281,
                                    "name": "teamPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 974,
                                    "src": "45430:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 3282,
                                    "name": "_newTreasuryPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3268,
                                    "src": "45444:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "45430:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 3284,
                                  "name": "investorPercent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 978,
                                  "src": "45466:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "45430:51:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3286,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "45485:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "45430:59:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "7365742074726561737572792070657263656e743a20746f74616c2070657263656e74206f766572206d6178",
                              "id": 3288,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45503:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f12d4402c9e19767dab0140cfb8c969d344e6f7feec765de3989d4ede066c2a8",
                                "typeString": "literal_string \"set treasury percent: total percent over max\""
                              },
                              "value": "set treasury percent: total percent over max"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f12d4402c9e19767dab0140cfb8c969d344e6f7feec765de3989d4ede066c2a8",
                                "typeString": "literal_string \"set treasury percent: total percent over max\""
                              }
                            ],
                            "id": 3280,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45409:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3289,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45409:150:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3290,
                        "nodeType": "ExpressionStatement",
                        "src": "45409:150:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3292,
                              "name": "treasuryPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 976,
                              "src": "45593:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3293,
                              "name": "_newTreasuryPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3268,
                              "src": "45610:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3291,
                            "name": "SetTreasuryPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1114,
                            "src": "45574:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 3294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45574:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3295,
                        "nodeType": "EmitStatement",
                        "src": "45569:61:0"
                      },
                      {
                        "expression": {
                          "id": 3298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3296,
                            "name": "treasuryPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 976,
                            "src": "45640:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3297,
                            "name": "_newTreasuryPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3268,
                            "src": "45658:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "45640:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3299,
                        "nodeType": "ExpressionStatement",
                        "src": "45640:37:0"
                      }
                    ]
                  },
                  "functionSelector": "89a2bc25",
                  "id": 3301,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3271,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3270,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "45262:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "45262:9:0"
                    }
                  ],
                  "name": "setTreasuryPercent",
                  "nameLocation": "45207:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3269,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3268,
                        "mutability": "mutable",
                        "name": "_newTreasuryPercent",
                        "nameLocation": "45234:19:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3301,
                        "src": "45226:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3267,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "45226:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "45225:29:0"
                  },
                  "returnParameters": {
                    "id": 3272,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "45272:0:0"
                  },
                  "scope": 3371,
                  "src": "45198:486:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3334,
                    "nodeType": "Block",
                    "src": "45812:402:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3310,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 3307,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "45843:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3308,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "45843:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 3309,
                                "name": "investorAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 972,
                                "src": "45857:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "45843:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420696e766573746f7220616464726573733a206f6e6c792070726576696f757320696e766573746f722063616e2063616c6c2074686973206d6574686f64",
                              "id": 3311,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45886:67:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_61012611393fb96084817e9de1a723747c469c9c404b4980d22828ca24da88e6",
                                "typeString": "literal_string \"set investor address: only previous investor can call this method\""
                              },
                              "value": "set investor address: only previous investor can call this method"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_61012611393fb96084817e9de1a723747c469c9c404b4980d22828ca24da88e6",
                                "typeString": "literal_string \"set investor address: only previous investor can call this method\""
                              }
                            ],
                            "id": 3306,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45822:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45822:141:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3313,
                        "nodeType": "ExpressionStatement",
                        "src": "45822:141:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3315,
                                "name": "_investorAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3303,
                                "src": "45994:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 3318,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "46022:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3317,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "46014:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 3316,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "46014:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 3319,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "46014:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "45994:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420696e766573746f7220616464726573733a20696e76616c6964206e657720696e766573746f722061646472657373",
                              "id": 3321,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46038:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_11bcca43384175ff9ab4e366096ea276cc200d4f4e96ec7cf10af4e3c23a6718",
                                "typeString": "literal_string \"set investor address: invalid new investor address\""
                              },
                              "value": "set investor address: invalid new investor address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_11bcca43384175ff9ab4e366096ea276cc200d4f4e96ec7cf10af4e3c23a6718",
                                "typeString": "literal_string \"set investor address: invalid new investor address\""
                              }
                            ],
                            "id": 3314,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45973:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45973:127:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3323,
                        "nodeType": "ExpressionStatement",
                        "src": "45973:127:0"
                      },
                      {
                        "expression": {
                          "id": 3326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3324,
                            "name": "investorAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 972,
                            "src": "46110:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3325,
                            "name": "_investorAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3303,
                            "src": "46128:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "46110:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 3327,
                        "nodeType": "ExpressionStatement",
                        "src": "46110:34:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3329,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "46178:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3330,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "46178:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3331,
                              "name": "_investorAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3303,
                              "src": "46190:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3328,
                            "name": "SetInvestorAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1102,
                            "src": "46159:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 3332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46159:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3333,
                        "nodeType": "EmitStatement",
                        "src": "46154:53:0"
                      }
                    ]
                  },
                  "functionSelector": "42602f1e",
                  "id": 3335,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setInvestorAddress",
                  "nameLocation": "45760:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3304,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3303,
                        "mutability": "mutable",
                        "name": "_investorAddress",
                        "nameLocation": "45787:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3335,
                        "src": "45779:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3302,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "45779:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "45778:26:0"
                  },
                  "returnParameters": {
                    "id": 3305,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "45812:0:0"
                  },
                  "scope": 3371,
                  "src": "45751:463:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3369,
                    "nodeType": "Block",
                    "src": "46294:412:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3345,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3343,
                                "name": "_newInvestorPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3337,
                                "src": "46325:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3344,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "46348:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "46325:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420696e766573746f722070657263656e743a20696e76616c69642070657263656e742076616c7565",
                              "id": 3346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46366:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ec06cbd2d38a14b6ce78ac7101f6ae40faca0a2abc38858d8cdc766a500f0e19",
                                "typeString": "literal_string \"set investor percent: invalid percent value\""
                              },
                              "value": "set investor percent: invalid percent value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ec06cbd2d38a14b6ce78ac7101f6ae40faca0a2abc38858d8cdc766a500f0e19",
                                "typeString": "literal_string \"set investor percent: invalid percent value\""
                              }
                            ],
                            "id": 3342,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "46304:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46304:117:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3348,
                        "nodeType": "ExpressionStatement",
                        "src": "46304:117:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3356,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3354,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3352,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 3350,
                                    "name": "teamPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 974,
                                    "src": "46452:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "id": 3351,
                                    "name": "_newInvestorPercent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3337,
                                    "src": "46466:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "46452:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 3353,
                                  "name": "treasuryPercent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 976,
                                  "src": "46488:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "46452:51:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "hexValue": "31303030",
                                "id": 3355,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "46507:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "46452:59:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "73657420696e766573746f722070657263656e743a20746f74616c2070657263656e74206f766572206d6178",
                              "id": 3357,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46525:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_57f763a7e357b0bf03b24cf48523df8c706c86b5e4585baefd3683f53aa23ea4",
                                "typeString": "literal_string \"set investor percent: total percent over max\""
                              },
                              "value": "set investor percent: total percent over max"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_57f763a7e357b0bf03b24cf48523df8c706c86b5e4585baefd3683f53aa23ea4",
                                "typeString": "literal_string \"set investor percent: total percent over max\""
                              }
                            ],
                            "id": 3349,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "46431:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46431:150:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3359,
                        "nodeType": "ExpressionStatement",
                        "src": "46431:150:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3361,
                              "name": "investorPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 978,
                              "src": "46615:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 3362,
                              "name": "_newInvestorPercent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3337,
                              "src": "46632:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3360,
                            "name": "SetInvestorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "46596:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 3363,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46596:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3364,
                        "nodeType": "EmitStatement",
                        "src": "46591:61:0"
                      },
                      {
                        "expression": {
                          "id": 3367,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 3365,
                            "name": "investorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 978,
                            "src": "46662:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 3366,
                            "name": "_newInvestorPercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3337,
                            "src": "46680:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "46662:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3368,
                        "nodeType": "ExpressionStatement",
                        "src": "46662:37:0"
                      }
                    ]
                  },
                  "functionSelector": "876d3c9c",
                  "id": 3370,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 3340,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 3339,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 65,
                        "src": "46284:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "46284:9:0"
                    }
                  ],
                  "name": "setInvestorPercent",
                  "nameLocation": "46229:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3338,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3337,
                        "mutability": "mutable",
                        "name": "_newInvestorPercent",
                        "nameLocation": "46256:19:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 3370,
                        "src": "46248:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3336,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "46248:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "46247:29:0"
                  },
                  "returnParameters": {
                    "id": 3341,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46294:0:0"
                  },
                  "scope": 3371,
                  "src": "46220:486:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 3372,
              "src": "19258:27450:0",
              "usedErrors": []
            }
          ],
          "src": "152:46557:0"
        },
        "id": 0
      }
    }
  }
}
