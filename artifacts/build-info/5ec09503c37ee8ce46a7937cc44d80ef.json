{
  "id": "5ec09503c37ee8ce46a7937cc44d80ef",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.7",
  "solcLongVersion": "0.8.7+commit.e28d00a7",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/farm/EmberVault.sol": {
        "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\npragma solidity ^0.8.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n\n// File contracts/farm/IEmberERC20.sol\npragma solidity ^0.8.2;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IEmberERC20 is IERC20, IERC20Permit {\n    function mint(address to, uint256 amount) external;\n}\n\n\n// File contracts/farm/EmberVault.sol\npragma solidity ^0.8.2;\n\n\n\n\n\n\ncontract EmberVault is Ownable, ReentrancyGuard {\n    address constant _trustedForwarder =\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardLockedUp; // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\n        uint16 depositFeeBP; // Deposit fee in basis points\n        uint256 harvestInterval; // Harvest interval in seconds\n        uint256 totalLp; // Total token in Pool\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\n    }\n\n    IEmberERC20 public ember;\n\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\n    //i.e some wrong setting and a pools get too much allocation accidentally\n    address private _operator;\n\n    // Dev address.\n    address public devAddress;\n\n    // Deposit Fee address\n    address public feeAddress;\n\n    // Ember tokens created per block\n    uint256 public emberPerBlock;\n\n    // Max harvest interval: 14 days\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    // Maximum deposit fee rate: 10%\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The block number when Ember mining starts.\n    uint256 public startBlock;\n\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n\n    // Total Ember in Ember Pools (can be multiple pools)\n    uint256 public totalEmberInPools = 0;\n\n    // Control support for EIP-2771 Meta Transactions\n    bool public metaTxnsEnabled = false;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n    event EmissionRateUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n    event RewardLockedUp(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amountLockedUp\n    );\n    event OperatorTransferred(\n        address indexed previousOperator,\n        address indexed newOperator\n    );\n    event DevAddressChanged(\n        address indexed caller,\n        address oldAddress,\n        address newAddress\n    );\n    event FeeAddressChanged(\n        address indexed caller,\n        address oldAddress,\n        address newAddress\n    );\n    event AllocPointsUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n    event MetaTxnsEnabled(address indexed caller);\n    event MetaTxnsDisabled(address indexed caller);\n\n    modifier onlyOperator() {\n        require(\n            _operator == msg.sender,\n            \"Operator: caller is not the operator\"\n        );\n        _;\n    }\n\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\n\n        ember = _ember;\n        emberPerBlock = _emberPerBlock;\n\n        devAddress = msg.sender;\n        feeAddress = msg.sender;\n        _operator = msg.sender;\n        emit OperatorTransferred(address(0), _operator);\n    }\n\n    function isTrustedForwarder(address forwarder)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override\n        returns (address sender)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override\n        returns (bytes calldata)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to)\n        public\n        pure\n        returns (uint256)\n    {\n        return _to.sub(_from);\n    }\n\n    function transferOperator(address newOperator) public onlyOperator {\n        require(\n            newOperator != address(0),\n            \"TransferOperator: new operator is the zero address\"\n        );\n        emit OperatorTransferred(_operator, newOperator);\n        _operator = newOperator;\n    }\n\n    // Set farming start, can call only once\n    function startFarming() public onlyOwner {\n        require(block.number < startBlock, \"Error: farm started already\");\n\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            pool.lastRewardBlock = block.number;\n        }\n\n        startBlock = block.number;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        uint256 _lockupDuration,\n        bool _withUpdate\n    ) public onlyOwner {\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"Add: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"Add: invalid harvest interval\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock\n            ? block.number\n            : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accEmberPerShare: 0,\n                depositFeeBP: _depositFeeBP,\n                harvestInterval: _harvestInterval,\n                totalLp: 0,\n                lockupDuration: _lockupDuration\n            })\n        );\n    }\n\n    // View function to see pending Ember on frontend.\n    function pendingEmber(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEmberPerShare = pool.accEmberPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(\n                pool.lastRewardBlock,\n                block.number\n            );\n            uint256 emberReward = multiplier\n                .mul(emberPerBlock)\n                .mul(pool.allocPoint)\n                .div(totalAllocPoint);\n            accEmberPerShare = accEmberPerShare.add(\n                emberReward.mul(1e12).div(lpSupply)\n            );\n        }\n\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        return pending.add(user.rewardLockedUp);\n    }\n\n    // View function to see when user will be unlocked from pool\n    function userLockedUntil(uint256 _pid, address _user)\n        public\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = userInfo[_pid][_user];\n        PoolInfo storage pool = poolInfo[_pid];\n\n        return user.lastInteraction + pool.lockupDuration;\n    }\n\n    // View function to see if user can harvest Ember.\n    function canHarvest(uint256 _pid, address _user)\n        public\n        view\n        returns (bool)\n    {\n        UserInfo storage user = userInfo[_pid][_user];\n        return\n            block.number >= startBlock &&\n            block.timestamp >= user.nextHarvestUntil;\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n\n        uint256 lpSupply = pool.totalLp;\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 emberReward = multiplier\n            .mul(emberPerBlock)\n            .mul(pool.allocPoint)\n            .div(totalAllocPoint);\n\n        ember.mint(devAddress, emberReward.div(10));\n        ember.mint(address(this), emberReward);\n\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\n            emberReward.mul(1e12).div(pool.totalLp)\n        );\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to EmberVault for Ember allocation\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        require(\n            block.number >= startBlock,\n            \"EmberVault: cannot deposit before farming start\"\n        );\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\n\n            _amount = afterDeposit.sub(beforeDeposit);\n\n            if (pool.depositFeeBP > 0) {\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\n\n                _amount = _amount.sub(depositFee);\n            }\n\n            user.amount = user.amount.add(_amount);\n            pool.totalLp = pool.totalLp.add(_amount);\n\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools = totalEmberInPools.add(_amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\n        user.lastInteraction = block.timestamp;\n        emit Deposit(_msgSender(), _pid, _amount);\n    }\n\n    // Withdraw tokens\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        //this will make sure that user can only withdraw from his pool\n        require(user.amount >= _amount, \"Withdraw: user amount is not enough\");\n\n        //Cannot withdraw more than pool's balance\n        require(pool.totalLp >= _amount, \"Withdraw: pool total is not enough\");\n\n        //Cannot withdraw before lock time\n        require(\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\n            \"Withdraw: you cannot withdraw yet\"\n        );\n\n        updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.totalLp = pool.totalLp.sub(_amount);\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools = totalEmberInPools.sub(_amount);\n            }\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\n        user.lastInteraction = block.timestamp;\n        emit Withdraw(_msgSender(), _pid, _amount);\n    }\n\n    // Pay or lockup pending Ember.\n    function payOrLockupPendingEmber(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n        }\n\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        if (canHarvest(_pid, _msgSender())) {\n            if (pending > 0 || user.rewardLockedUp > 0) {\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\n\n                // reset lockup\n                totalLockedUpRewards = totalLockedUpRewards.sub(\n                    user.rewardLockedUp\n                );\n                user.rewardLockedUp = 0;\n                user.lastInteraction = block.timestamp;\n                user.nextHarvestUntil = block.timestamp.add(\n                    pool.harvestInterval\n                );\n\n                // send rewards\n                safeEmberTransfer(_msgSender(), totalRewards);\n            }\n        } else if (pending > 0) {\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\n            user.lastInteraction = block.timestamp;\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\n            emit RewardLockedUp(_msgSender(), _pid, pending);\n        }\n    }\n\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\n                totalEmberInPools\n            );\n            if (_amount >= EmberBal) {\n                ember.transfer(_to, EmberBal);\n            } else if (_amount > 0) {\n                ember.transfer(_to, _amount);\n            }\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devAddress) public {\n        require(_msgSender() == devAddress, \"setDevAddress: FORBIDDEN\");\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\n\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\n\n        devAddress = _devAddress;\n    }\n\n    function setFeeAddress(address _feeAddress) public {\n        require(_msgSender() == feeAddress, \"setFeeAddress: FORBIDDEN\");\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\n\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\n\n        feeAddress = _feeAddress;\n    }\n\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\n        massUpdatePools();\n\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\n        emberPerBlock = _emberPerBlock;\n    }\n\n    function updateAllocPoint(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOperator {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        emit AllocPointsUpdated(\n            _msgSender(),\n            poolInfo[_pid].allocPoint,\n            _allocPoint\n        );\n\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Enable support for meta transactions\n    function enableMetaTxns() public onlyOperator {\n        require(\n            !metaTxnsEnabled,\n            \"EmberVault: meta transactions are already enabled\"\n        );\n\n        metaTxnsEnabled = true;\n        emit MetaTxnsEnabled(_msgSender());\n    }\n\n    // Disable support for meta transactions\n    function disableMetaTxns() public onlyOperator {\n        require(\n            metaTxnsEnabled,\n            \"EmberVault: meta transactions are already disabled\"\n        );\n\n        metaTxnsEnabled = false;\n        emit MetaTxnsDisabled(_msgSender());\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/farm/EmberVault.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016d17036e58dca3fcd51fbfb6dd6648438030477eff4a359596ffa48d232aea064736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND 0xD1 PUSH17 0x36E58DCA3FCD51FBFB6DD6648438030477 0xEF DELEGATECALL LOG3 MSIZE MSIZE PUSH16 0xFA48D232AEA064736F6C634300080700 CALLER ",
              "sourceMap": "3001:7518:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;3001:7518:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122016d17036e58dca3fcd51fbfb6dd6648438030477eff4a359596ffa48d232aea064736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND 0xD1 PUSH17 0x36E58DCA3FCD51FBFB6DD6648438030477 0xEF DELEGATECALL LOG3 MSIZE MSIZE PUSH16 0xFA48D232AEA064736F6C634300080700 CALLER ",
              "sourceMap": "3001:7518:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "_verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Context": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "EmberVault": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract IEmberERC20",
                  "name": "_ember",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_emberPerBlock",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "previousAmount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newAmount",
                  "type": "uint256"
                }
              ],
              "name": "AllocPointsUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Deposit",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "oldAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAddress",
                  "type": "address"
                }
              ],
              "name": "DevAddressChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "EmergencyWithdraw",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "previousAmount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newAmount",
                  "type": "uint256"
                }
              ],
              "name": "EmissionRateUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "oldAddress",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAddress",
                  "type": "address"
                }
              ],
              "name": "FeeAddressChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                }
              ],
              "name": "MetaTxnsDisabled",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "caller",
                  "type": "address"
                }
              ],
              "name": "MetaTxnsEnabled",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOperator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOperator",
                  "type": "address"
                }
              ],
              "name": "OperatorTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amountLockedUp",
                  "type": "uint256"
                }
              ],
              "name": "RewardLockedUp",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Withdraw",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "MAXIMUM_DEPOSIT_FEE_RATE",
              "outputs": [
                {
                  "internalType": "uint16",
                  "name": "",
                  "type": "uint16"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "MAXIMUM_HARVEST_INTERVAL",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "_lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "_depositFeeBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "_harvestInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_lockupDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "_withUpdate",
                  "type": "bool"
                }
              ],
              "name": "add",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "canHarvest",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "devAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "disableMetaTxns",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "ember",
              "outputs": [
                {
                  "internalType": "contract IEmberERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "emberPerBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "enableMetaTxns",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "feeAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_from",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_to",
                  "type": "uint256"
                }
              ],
              "name": "getMultiplier",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                }
              ],
              "name": "isTrustedForwarder",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "massUpdatePools",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "metaTxnsEnabled",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "operator",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "pendingEmber",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "poolInfo",
              "outputs": [
                {
                  "internalType": "contract IERC20",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accEmberPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint16",
                  "name": "depositFeeBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "harvestInterval",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalLp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockupDuration",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "poolLength",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_devAddress",
                  "type": "address"
                }
              ],
              "name": "setDevAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_feeAddress",
                  "type": "address"
                }
              ],
              "name": "setFeeAddress",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "startBlock",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "startFarming",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalAllocPoint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalEmberInPools",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalLockedUpRewards",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOperator",
                  "type": "address"
                }
              ],
              "name": "transferOperator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "_withUpdate",
                  "type": "bool"
                }
              ],
              "name": "updateAllocPoint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_emberPerBlock",
                  "type": "uint256"
                }
              ],
              "name": "updateEmissionRate",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "updatePool",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardDebt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardLockedUp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nextHarvestUntil",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastInteraction",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "userLockedUntil",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "withdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_1345": {
                  "entryPoint": null,
                  "id": 1345,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@_635": {
                  "entryPoint": null,
                  "id": 635,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_733": {
                  "entryPoint": null,
                  "id": 733,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_msgSender_1378": {
                  "entryPoint": 236,
                  "id": 1378,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_msgSender_603": {
                  "entryPoint": 430,
                  "id": 603,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_setOwner_714": {
                  "entryPoint": 294,
                  "id": 714,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@isTrustedForwarder_1359": {
                  "entryPoint": 374,
                  "id": 1359,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IEmberERC20_$1114t_uint256_fromMemory": {
                  "entryPoint": 434,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "checked_add_t_uint256": {
                  "entryPoint": 494,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:617:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "132:253:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "178:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "187:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "190:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "180:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "180:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "180:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "153:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "162:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "149:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "149:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "174:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "145:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "145:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "142:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "203:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "222:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "216:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "216:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "207:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "295:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "304:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "307:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "297:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "297:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "297:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "254:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "265:5:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "280:3:1",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "285:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "276:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "276:11:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "289:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "272:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "272:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "261:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "261:31:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "251:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "251:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "244:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "244:50:1"
                              },
                              "nodeType": "YulIf",
                              "src": "241:70:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "320:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "330:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "320:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "344:35:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "364:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "375:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "360:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "360:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "354:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "354:25:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "344:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IEmberERC20_$1114t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "90:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "101:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "113:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "121:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:371:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "438:177:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "473:111:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "494:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "501:3:1",
                                              "type": "",
                                              "value": "224"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "506:10:1",
                                              "type": "",
                                              "value": "0x4e487b71"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "497:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "497:20:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "487:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "487:31:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "487:31:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "538:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "541:4:1",
                                          "type": "",
                                          "value": "0x11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "531:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "531:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "531:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "566:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "569:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "559:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "559:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "559:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "454:1:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "461:1:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "457:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "457:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "451:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "451:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "448:136:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "593:16:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "604:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "607:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "600:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "600:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nodeType": "YulIdentifier",
                                  "src": "593:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "421:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "424:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nodeType": "YulTypedName",
                            "src": "430:3:1",
                            "type": ""
                          }
                        ],
                        "src": "390:225:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IEmberERC20_$1114t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := mload(add(headStart, 32))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "608060405260006009819055600c55600d805460ff191690553480156200002557600080fd5b5060405162003504380380620035048339810160408190526200004891620001b2565b6200005c62000056620000ec565b62000126565b6001805562000070436312cc0300620001ee565b600a55600280546001600160a01b0384166001600160a01b031991821617909155600682905560048054821633908117909155600580548316821790556003805490921681179091556040516000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3505062000215565b6000620000f93362000176565b156200010c575060131936013560601c90565b62000121620001ae60201b620026481760201c565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600d5460009060ff168015620001a857506001600160a01b038216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b3390565b60008060408385031215620001c657600080fd5b82516001600160a01b0381168114620001de57600080fd5b6020939093015192949293505050565b600082198211156200021057634e487b7160e01b600052601160045260246000fd5b500190565b6132df80620002256000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c8063578bb42d11610145578063afbcfea1116100bd578063d0d41fe11161008c578063de73149d11610071578063de73149d14610599578063e2bbb158146105a3578063f2fde38b146105b657600080fd5b8063d0d41fe114610573578063d1593bc81461058657600080fd5b8063afbcfea11461053c578063bc83ee2214610544578063bde4aeca14610557578063c9e118521461056a57600080fd5b80638705fcd4116101145780638dbb1e3a116100f95780638dbb1e3a146104ac57806393f1a40b146104bf578063a8c95dc01461052f57600080fd5b80638705fcd41461047b5780638da5cb5b1461048e57600080fd5b8063578bb42d14610447578063630b5ba11461044f578063715018a614610457578063812c64f11461045f57600080fd5b8063330ae003116101d8578063474fa630116101a757806351eb05a61161018c57806351eb05a614610403578063570ca73514610416578063572b6c051461043457600080fd5b8063474fa630146103f157806348cd4cb1146103fa57600080fd5b8063330ae0031461038b5780633ad10ef61461039e57806341275358146103be578063441a3e70146103de57600080fd5b806317caf6f11161022f57806329605e771161021457806329605e771461034c5780632a22bc431461035f5780632e6c998d1461036857600080fd5b806317caf6f1146102fe5780631f1b9a7c1461030757600080fd5b8063081e3eda1461026157806308383640146102785780630ba84cd2146102825780631526fe2714610295575b600080fd5b6007545b6040519081526020015b60405180910390f35b6102806105c9565b005b610280610290366004612f77565b61077a565b6102a86102a3366004612f77565b61086b565b6040805173ffffffffffffffffffffffffffffffffffffffff9099168952602089019790975295870194909452606086019290925261ffff16608085015260a084015260c083015260e08201526101000161026f565b61026560095481565b6002546103279073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026f565b61028061035a366004612f3d565b6108dd565b610265600c5481565b61037b610376366004612fa9565b610ab4565b604051901515815260200161026f565b610280610399366004612fd9565b610b01565b6004546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6102806103ec366004613047565b610ec7565b610265600b5481565b610265600a5481565b610280610411366004612f77565b6112ae565b60035473ffffffffffffffffffffffffffffffffffffffff16610327565b61037b610442366004612f3d565b6114c0565b610280611504565b6102806116b4565b6102806116df565b6104686103e881565b60405161ffff909116815260200161026f565b610280610489366004612f3d565b6117a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610327565b6102656104ba366004613047565b611968565b6105076104cd366004612fa9565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161026f565b600d5461037b9060ff1681565b61028061197b565b610265610552366004612fa9565b611af6565b610280610565366004613069565b611ca8565b61026560065481565b610280610581366004612f3d565b611e57565b610265610594366004612fa9565b61201a565b6102656212750081565b6102806105b1366004613047565b61208d565b6102806105c4366004612f3d565b6124df565b60035473ffffffffffffffffffffffffffffffffffffffff163314610674576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c72656164792064697361626c65640000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905561073661264c565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b6108286116b4565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061087b57600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff909616975093959294919361ffff90911692909188565b60035473ffffffffffffffffffffffffffffffffffffffff163314610983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b73ffffffffffffffffffffffffffffffffffffffff8116610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161066b565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610af9575080600301544210155b949350505050565b610b0961264c565b73ffffffffffffffffffffffffffffffffffffffff16610b3e60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6103e861ffff85161115610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161066b565b62127500831115610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161066b565b8015610ca657610ca66116b4565b6000600a544311610cb957600a54610cbb565b435b600954909150610ccb908861268c565b600955604080516101008101825273ffffffffffffffffffffffffffffffffffffffff97881681526020810198895290810191825260006060820181815261ffff9788166080840190815260a0840197885260c0840183815260e0850197885260078054600181018255945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600890940293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b161790995598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015596517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015594517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016919095161790935590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d84015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68f90910155565b60026001541415610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600181905550600060078381548110610f5157610f5161324a565b906000526020600020906008020190506000600860008581526020019081526020016000206000610f8061264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f60448201527f7567680000000000000000000000000000000000000000000000000000000000606482015260840161066b565b82826006015410156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f7560448201527f6768000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b816007015481600401546110f8919061310f565b4211611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f57697468647261773a20796f752063616e6e6f7420776974686472617720796560448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b61118f846112ae565b61119884612698565b82156112205780546111aa90846128a3565b815560068201546111bb90846128a3565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff908116911614156111f657600c546111f290846128a3565b600c555b61122061120161264c565b835473ffffffffffffffffffffffffffffffffffffffff1690856128af565b600382015481546112419164e8d4a510009161123b91612988565b90612994565b60018201554260048201558361125561264c565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161129c91815260200190565b60405180910390a35050600180555050565b6000600782815481106112c3576112c361324a565b90600052602060002090600802019050806002015443116112e2575050565b60068101548015806112f657506001820154155b1561130657504360029091015550565b6000611316836002015443611968565b9050600061134360095461123b866001015461133d6006548761298890919063ffffffff16565b90612988565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661137784600a612994565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50505060068501546114ab91506114a09061123b8464e8d4a51000612988565b60038601549061268c565b60038501555050436002909201919091555050565b600d5460009060ff1680156114fe575073ffffffffffffffffffffffffffffffffffffffff8216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b600d5460ff161561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c726561647920656e61626c6564000000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561167061264c565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b818110156116db576116cb816112ae565b6116d4816131e2565b90506116ba565b5050565b6116e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661171c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6117a360006129a0565b565b60055473ffffffffffffffffffffffffffffffffffffffff166117c661264c565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff81166118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b6118c861264c565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061197482846128a3565b9392505050565b61198361264c565b73ffffffffffffffffffffffffffffffffffffffff166119b860005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600a544310611aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a206661726d207374617274656420616c72656164790000000000604482015260640161066b565b60075460005b81811015611aee57600060078281548110611ac357611ac361324a565b906000526020600020906008020190504381600201819055505080611ae7906131e2565b9050611aa6565b505043600a55565b60008060078481548110611b0c57611b0c61324a565b600091825260208083208784526008808352604080862073ffffffffffffffffffffffffffffffffffffffff8a811688529452808620949091029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612f90565b9050836002015443118015611bf357508015155b15611c53576000611c08856002015443611968565b90506000611c2f60095461123b886001015461133d6006548761298890919063ffffffff16565b9050611c4e611c478461123b8464e8d4a51000612988565b859061268c565b935050505b6000611c838460010154611c7d64e8d4a5100061123b87896000015461298890919063ffffffff16565b906128a3565b9050611c9c84600201548261268c90919063ffffffff16565b98975050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b8015611d5c57611d5c6116b4565b611d6461264c565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110611dae57611dae61324a565b90600052602060002090600802016001015484604051611dd8929190918252602082015260400190565b60405180910390a2611e2382611e1d60078681548110611dfa57611dfa61324a565b9060005260206000209060080201600101546009546128a390919063ffffffff16565b9061268c565b6009819055508160078481548110611e3d57611e3d61324a565b906000526020600020906008020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff16611e7861264c565b73ffffffffffffffffffffffffffffffffffffffff1614611ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff8116611f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b611f7a61264c565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812060078054839190869081106120605761206061324a565b9060005260206000209060080201905080600701548260040154612084919061310f565b95945050505050565b600260015414156120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600155600a54431015612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f456d6265725661756c743a2063616e6e6f74206465706f736974206265666f7260448201527f65206661726d696e672073746172740000000000000000000000000000000000606482015260840161066b565b6000600783815481106121a6576121a661324a565b9060005260206000209060080201905060006008600085815260200190815260200160002060006121d561264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061221a846112ae565b61222384612698565b82156124695781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca9190612f90565b90506122f76122d761264c565b845473ffffffffffffffffffffffffffffffffffffffff16903087612a15565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190612f90565b90506123a481836128a3565b600485015490955061ffff161561240e5760048401546000906123d4906127109061123b90899061ffff16612988565b60055486549192506124009173ffffffffffffffffffffffffffffffffffffffff9081169116836128af565b61240a86826128a3565b9550505b825461241a908661268c565b8355600684015461242b908661268c565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561246657600c54612462908661268c565b600c555b50505b600382015481546124849164e8d4a510009161123b91612988565b60018201554260048201558361249861264c565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161129c91815260200190565b6124e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661251c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff811661263c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b612645816129a0565b50565b3390565b6000612657336114c0565b1561268757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000611974828461310f565b6000600782815481106126ad576126ad61324a565b9060005260206000209060080201905060006008600084815260200190815260200160002060006126dc61264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154600014801561272e5750600a544310155b1561274957600582015461274390429061268c565b60038201555b60006127778260010154611c7d64e8d4a5100061123b8760030154876000015461298890919063ffffffff16565b90506127858461037661264c565b1561281457600081118061279d575060008260020154115b1561280f5760006127bb83600201548361268c90919063ffffffff16565b90506127d68360020154600b546128a390919063ffffffff16565b600b5560006002840155426004840181905560058501546127f7919061268c565b600384015561280d61280761264c565b82612a73565b505b61289d565b801561289d576002820154612829908261268c565b6002830155426004830155600b54612841908261268c565b600b558361284d61264c565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c18360405161289491815260200190565b60405180910390a35b50505050565b6000611974828461319f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526129839084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ce5565b505050565b60006119748284613162565b60006119748284613127565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261289d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612901565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190612f90565b11156116db57600c546002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092612bca92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612b9257600080fd5b505afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190612f90565b9050808210612c80576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015612c4857600080fd5b505af1158015612c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190612f5a565b8115612983576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401612c2e565b6000612d47826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612df19092919063ffffffff16565b8051909150156129835780806020019051810190612d659190612f5a565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161066b565b6060610af9848460008585843b612e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e8d91906130a2565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612edf828286612eea565b979650505050505050565b60608315612ef9575081611974565b825115612f095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b91906130be565b600060208284031215612f4f57600080fd5b813561197481613279565b600060208284031215612f6c57600080fd5b81516119748161329b565b600060208284031215612f8957600080fd5b5035919050565b600060208284031215612fa257600080fd5b5051919050565b60008060408385031215612fbc57600080fd5b823591506020830135612fce81613279565b809150509250929050565b60008060008060008060c08789031215612ff257600080fd5b86359550602087013561300481613279565b9450604087013561ffff8116811461301b57600080fd5b9350606087013592506080870135915060a08701356130398161329b565b809150509295509295509295565b6000806040838503121561305a57600080fd5b50508035926020909101359150565b60008060006060848603121561307e57600080fd5b833592506020840135915060408401356130978161329b565b809150509250925092565b600082516130b48184602087016131b6565b9190910192915050565b60208152600082518060208401526130dd8160408501602087016131b6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156131225761312261321b565b500190565b60008261315d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561319a5761319a61321b565b500290565b6000828210156131b1576131b161321b565b500390565b60005b838110156131d15781810151838201526020016131b9565b8381111561289d5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132145761321461321b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461264557600080fd5b801515811461264557600080fdfea26469706673582212207dc5611a2fb5fc7e9275fc2459a49ad85d99823e7cc290c1204308ea6bbe435064736f6c63430008070033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x9 DUP2 SWAP1 SSTORE PUSH1 0xC SSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3504 CODESIZE SUB DUP1 PUSH3 0x3504 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x48 SWAP2 PUSH3 0x1B2 JUMP JUMPDEST PUSH3 0x5C PUSH3 0x56 PUSH3 0xEC JUMP JUMPDEST PUSH3 0x126 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH3 0x70 NUMBER PUSH4 0x12CC0300 PUSH3 0x1EE JUMP JUMPDEST PUSH1 0xA SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP3 SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP1 SLOAD DUP4 AND DUP3 OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP3 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 DUP3 SWAP1 LOG3 POP POP PUSH3 0x215 JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF9 CALLER PUSH3 0x176 JUMP JUMPDEST ISZERO PUSH3 0x10C JUMPI POP PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH3 0x121 PUSH3 0x1AE PUSH1 0x20 SHL PUSH3 0x2648 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH3 0x1A8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xD998DDA948C62A4FECA7355E46D6B801A1AEDD6 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD MLOAD SWAP3 SWAP5 SWAP3 SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x210 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH2 0x32DF DUP1 PUSH3 0x225 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x578BB42D GT PUSH2 0x145 JUMPI DUP1 PUSH4 0xAFBCFEA1 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD0D41FE1 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDE73149D GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDE73149D EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xE2BBB158 EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD0D41FE1 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xD1593BC8 EQ PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFBCFEA1 EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0xBC83EE22 EQ PUSH2 0x544 JUMPI DUP1 PUSH4 0xBDE4AECA EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0xC9E11852 EQ PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8705FCD4 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x8DBB1E3A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0x8DBB1E3A EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0xA8C95DC0 EQ PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x578BB42D EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x812C64F1 EQ PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x330AE003 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x474FA630 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x51EB05A6 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x474FA630 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x48CD4CB1 EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x330AE003 EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x3AD10EF6 EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17CAF6F1 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x29605E77 GT PUSH2 0x214 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x2A22BC43 EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x2E6C998D EQ PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x1F1B9A7C EQ PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81E3EDA EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x8383640 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xBA84CD2 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x295 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x280 PUSH2 0x5C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x280 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST PUSH2 0x2A8 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP10 AND DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0xFFFF AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x265 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x265 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH2 0x37B PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FD9 JUMP JUMPDEST PUSH2 0xB01 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x265 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x265 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x327 JUMP JUMPDEST PUSH2 0x37B PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x14C0 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1504 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x16DF JUMP JUMPDEST PUSH2 0x468 PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x327 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0x1968 JUMP JUMPDEST PUSH2 0x507 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x26F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x37B SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x197B JUMP JUMPDEST PUSH2 0x265 PUSH2 0x552 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0x1AF6 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x3069 JUMP JUMPDEST PUSH2 0x1CA8 JUMP JUMPDEST PUSH2 0x265 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x1E57 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0x201A JUMP JUMPDEST PUSH2 0x265 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0x208D JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x24DF JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A206D657461207472616E73616374696F6E73206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520616C72656164792064697361626C65640000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH2 0x736 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96BE170CCC67847E55535E7D8334B2AFEDD95805BAEDC160005ADDB91447450 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x820 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x828 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0xEEDC6338C9C1AD8F3CD6C90DD09DBE98DBD57E610D3E59A17996D07ACB0D9511 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 SWAP1 SWAP8 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND SWAP8 POP SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F70657261746F723A206E6577206F70657261746F722069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7320746865207A65726F20616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0xA SLOAD NUMBER LT DUP1 ISZERO SWAP1 PUSH2 0xAF9 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB09 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3E PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP6 AND GT ISZERO PUSH2 0xC2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4164643A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH3 0x127500 DUP4 GT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4164643A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD NUMBER GT PUSH2 0xCB9 JUMPI PUSH1 0xA SLOAD PUSH2 0xCBB JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x9 SLOAD SWAP1 SWAP2 POP PUSH2 0xCCB SWAP1 DUP9 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP9 DUP10 MSTORE SWAP1 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP2 DUP2 MSTORE PUSH2 0xFFFF SWAP8 DUP9 AND PUSH1 0x80 DUP5 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP5 ADD SWAP8 DUP9 MSTORE PUSH1 0xC0 DUP5 ADD DUP4 DUP2 MSTORE PUSH1 0xE0 DUP6 ADD SWAP8 DUP9 MSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP5 MSTORE SWAP4 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x8 SWAP1 SWAP5 MUL SWAP4 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 SWAP1 SWAP12 AND OR SWAP1 SWAP10 SSTORE SWAP9 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C689 DUP3 ADD SSTORE SWAP2 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68A DUP4 ADD SSTORE SWAP7 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68B DUP3 ADD SSTORE SWAP5 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68C DUP7 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND SWAP2 SWAP1 SWAP6 AND OR SWAP1 SWAP4 SSTORE SWAP1 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68D DUP5 ADD SSTORE SWAP3 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68E DUP4 ADD SSTORE POP SWAP1 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68F SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xF51 JUMPI PUSH2 0xF51 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0xF80 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A207573657220616D6F756E74206973206E6F7420656E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7567680000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP3 DUP3 PUSH1 0x6 ADD SLOAD LT ISZERO PUSH2 0x10E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A20706F6F6C20746F74616C206973206E6F7420656E6F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP2 PUSH1 0x7 ADD SLOAD DUP2 PUSH1 0x4 ADD SLOAD PUSH2 0x10F8 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST TIMESTAMP GT PUSH2 0x1186 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A20796F752063616E6E6F74207769746864726177207965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x118F DUP5 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x1198 DUP5 PUSH2 0x2698 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x1220 JUMPI DUP1 SLOAD PUSH2 0x11AA SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST DUP2 SSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH2 0x11BB SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x6 DUP4 ADD SSTORE PUSH1 0x2 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x11F6 JUMPI PUSH1 0xC SLOAD PUSH2 0x11F2 SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0xC SSTORE JUMPDEST PUSH2 0x1220 PUSH2 0x1201 PUSH2 0x264C JUMP JUMPDEST DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP6 PUSH2 0x28AF JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH2 0x1241 SWAP2 PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x123B SWAP2 PUSH2 0x2988 JUMP JUMPDEST SWAP1 PUSH2 0x2994 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE DUP4 PUSH2 0x1255 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 DUP6 PUSH1 0x40 MLOAD PUSH2 0x129C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x12C3 JUMPI PUSH2 0x12C3 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD NUMBER GT PUSH2 0x12E2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 ADD SLOAD DUP1 ISZERO DUP1 PUSH2 0x12F6 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1306 JUMPI POP NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1316 DUP4 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x1968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1343 PUSH1 0x9 SLOAD PUSH2 0x123B DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x133D PUSH1 0x6 SLOAD DUP8 PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 SLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 PUSH4 0x40C10F19 SWAP2 AND PUSH2 0x1377 DUP5 PUSH1 0xA PUSH2 0x2994 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x40C10F19 SWAP2 POP PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x146C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1480 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x6 DUP6 ADD SLOAD PUSH2 0x14AB SWAP2 POP PUSH2 0x14A0 SWAP1 PUSH2 0x123B DUP5 PUSH5 0xE8D4A51000 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE POP POP NUMBER PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x14FE JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xD998DDA948C62A4FECA7355E46D6B801A1AEDD6 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x15AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x163D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A206D657461207472616E73616374696F6E73206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520616C726561647920656E61626C6564000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1670 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x92E4C08D47B71E8DC051232B8E475EC296489A67A4BA5CCA88FF20FB6AC499E6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16CB DUP2 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x16D4 DUP2 PUSH2 0x31E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x16BA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16E7 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171C PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1799 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x17A3 PUSH1 0x0 PUSH2 0x29A0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17C6 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1843 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574466565416464726573733A20464F5242494444454E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x18C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574466565416464726573733A205A45524F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x18C8 PUSH2 0x264C JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE DUP5 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x6690A53895B5691C039238B384BD857E65C42ADCC727775381E02CB90A122613 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x5 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x28A3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1983 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19B8 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xA SLOAD NUMBER LT PUSH2 0x1AA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A206661726D207374617274656420616C72656164790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AEE JUMPI PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1AC3 JUMPI PUSH2 0x1AC3 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP NUMBER DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP DUP1 PUSH2 0x1AE7 SWAP1 PUSH2 0x31E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1AA6 JUMP JUMPDEST POP POP NUMBER PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1B0C JUMPI PUSH2 0x1B0C PUSH2 0x324A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x8 DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP7 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND DUP9 MSTORE SWAP5 MSTORE DUP1 DUP7 KECCAK256 SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD PUSH1 0x3 DUP2 ADD SLOAD DUP2 SLOAD SWAP3 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP7 POP SWAP4 SWAP5 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BBB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BDF SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x2 ADD SLOAD NUMBER GT DUP1 ISZERO PUSH2 0x1BF3 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C53 JUMPI PUSH1 0x0 PUSH2 0x1C08 DUP6 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x1968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C2F PUSH1 0x9 SLOAD PUSH2 0x123B DUP9 PUSH1 0x1 ADD SLOAD PUSH2 0x133D PUSH1 0x6 SLOAD DUP8 PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1C4E PUSH2 0x1C47 DUP5 PUSH2 0x123B DUP5 PUSH5 0xE8D4A51000 PUSH2 0x2988 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x268C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x1C83 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x1C7D PUSH5 0xE8D4A51000 PUSH2 0x123B DUP8 DUP10 PUSH1 0x0 ADD SLOAD PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x28A3 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C9C DUP5 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x268C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1D4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D5C JUMPI PUSH2 0x1D5C PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x1D64 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x802633C8D26237616D81BDAC01BC40FCDF36E098832601582EC19D7E431C5EF3 PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x1DAE JUMPI PUSH2 0x1DAE PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x1DD8 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x1E23 DUP3 PUSH2 0x1E1D PUSH1 0x7 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x1DFA JUMPI PUSH2 0x1DFA PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x9 SLOAD PUSH2 0x28A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1E3D JUMPI PUSH2 0x1E3D PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E78 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1EF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574446576416464726573733A20464F5242494444454E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1F72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574446576416464726573733A205A45524F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x1F7A PUSH2 0x264C JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE DUP5 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0xD36D63F6C513A911D7912853DE740AF476B0FBB569AA769E1A4F5BFA37A325C4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP4 SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x2060 JUMPI PUSH2 0x2060 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD SLOAD DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x2084 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x20FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0xA SLOAD NUMBER LT ISZERO PUSH2 0x2191 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A2063616E6E6F74206465706F736974206265666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65206661726D696E672073746172740000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x21A6 JUMPI PUSH2 0x21A6 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x21D5 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x221A DUP5 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x2223 DUP5 PUSH2 0x2698 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x2469 JUMPI DUP2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CA SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP PUSH2 0x22F7 PUSH2 0x22D7 PUSH2 0x264C JUMP JUMPDEST DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 ADDRESS DUP8 PUSH2 0x2A15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2374 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2398 SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP PUSH2 0x23A4 DUP2 DUP4 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD SWAP1 SWAP6 POP PUSH2 0xFFFF AND ISZERO PUSH2 0x240E JUMPI PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x23D4 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x123B SWAP1 DUP10 SWAP1 PUSH2 0xFFFF AND PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP7 SLOAD SWAP2 SWAP3 POP PUSH2 0x2400 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x28AF JUMP JUMPDEST PUSH2 0x240A DUP7 DUP3 PUSH2 0x28A3 JUMP JUMPDEST SWAP6 POP POP JUMPDEST DUP3 SLOAD PUSH2 0x241A SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST DUP4 SSTORE PUSH1 0x6 DUP5 ADD SLOAD PUSH2 0x242B SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0x2 SLOAD DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2466 JUMPI PUSH1 0xC SLOAD PUSH2 0x2462 SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST PUSH1 0xC SSTORE JUMPDEST POP POP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH2 0x2484 SWAP2 PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x123B SWAP2 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE DUP4 PUSH2 0x2498 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 DUP6 PUSH1 0x40 MLOAD PUSH2 0x129C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x24E7 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x251C PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2599 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x263C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x2645 DUP2 PUSH2 0x29A0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2657 CALLER PUSH2 0x14C0 JUMP JUMPDEST ISZERO PUSH2 0x2687 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x310F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x26AD JUMPI PUSH2 0x26AD PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x26DC PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x272E JUMPI POP PUSH1 0xA SLOAD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x2749 JUMPI PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x2743 SWAP1 TIMESTAMP SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x2777 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1C7D PUSH5 0xE8D4A51000 PUSH2 0x123B DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2785 DUP5 PUSH2 0x376 PUSH2 0x264C JUMP JUMPDEST ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 DUP2 GT DUP1 PUSH2 0x279D JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x280F JUMPI PUSH1 0x0 PUSH2 0x27BB DUP4 PUSH1 0x2 ADD SLOAD DUP4 PUSH2 0x268C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x27D6 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0xB SLOAD PUSH2 0x28A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP5 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP6 ADD SLOAD PUSH2 0x27F7 SWAP2 SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x280D PUSH2 0x2807 PUSH2 0x264C JUMP JUMPDEST DUP3 PUSH2 0x2A73 JUMP JUMPDEST POP JUMPDEST PUSH2 0x289D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x289D JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x2829 SWAP1 DUP3 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x2841 SWAP1 DUP3 PUSH2 0x268C JUMP JUMPDEST PUSH1 0xB SSTORE DUP4 PUSH2 0x284D PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEE470483107F579A55C754FA00613C45A9A3B617A418B39CB0BE97E5381BA7C1 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2894 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x319F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2983 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2CE5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x3162 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x3127 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x289D SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x2901 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B17 SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST GT ISZERO PUSH2 0x16DB JUMPI PUSH1 0xC SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 PUSH2 0x2BCA SWAP3 SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C7D SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x2C80 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x289D SWAP2 SWAP1 PUSH2 0x2F5A JUMP JUMPDEST DUP2 ISZERO PUSH2 0x2983 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D47 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2DF1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2983 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2D65 SWAP2 SWAP1 PUSH2 0x2F5A JUMP JUMPDEST PUSH2 0x2983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAF9 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 DUP5 EXTCODESIZE PUSH2 0x2E64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2E8D SWAP2 SWAP1 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2ECA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2ECF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2EDF DUP3 DUP3 DUP7 PUSH2 0x2EEA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2EF9 JUMPI POP DUP2 PUSH2 0x1974 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x2F09 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x30BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1974 DUP2 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1974 DUP2 PUSH2 0x329B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2FCE DUP2 PUSH2 0x3279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3004 DUP2 PUSH2 0x3279 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x301B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH2 0x3039 DUP2 PUSH2 0x329B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x305A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x3097 DUP2 PUSH2 0x329B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x30B4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x31B6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x30DD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x31B6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3122 JUMPI PUSH2 0x3122 PUSH2 0x321B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x315D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x319A JUMPI PUSH2 0x319A PUSH2 0x321B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x31B1 JUMPI PUSH2 0x31B1 PUSH2 0x321B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31D1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x31B9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x289D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3214 JUMPI PUSH2 0x3214 PUSH2 0x321B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2645 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xC5611A2FB5FC7E9275FC2459A49AD85D99823E7CC290C1204308EA6BBE43 POP PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "29275:17742:0:-:0;;;31534:1;31501:34;;;;31755:36;;31852:35;;;-1:-1:-1;;31852:35:0;;;33177:460;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16027:23;16037:12;:10;:12::i;:::-;16027:9;:23::i;:::-;19047:1;19152:22;;33369:40;:12;33385:23;33369:40;:::i;:::-;33356:10;:53;33420:5;:14;;-1:-1:-1;;;;;33420:14:0;;-1:-1:-1;;;;;;33420:14:0;;;;;;;33444:13;:30;;;-1:-1:-1;33485:23:0;;;;33498:10;33485:23;;;;;;33518:10;:23;;;;;;;;33551:9;:22;;;;;;;;;;33588:42;;33420:5;;33588:42;;33420:5;;33588:42;33177:460;;29275:17742;;33840:445;33942:14;33976:30;33995:10;33976:18;:30::i;:::-;33972:307;;;-1:-1:-1;;;34178:14:0;34174:23;34161:37;34157:2;34153:46;33840:445;:::o;33972:307::-;34250:18;:16;;;;;:18;;:::i;:::-;34243:25;;33840:445;:::o;17201:169::-;17256:16;17275:6;;-1:-1:-1;;;;;17291:17:0;;;-1:-1:-1;;;;;;17291:17:0;;;;;;17323:40;;17275:6;;;;;;;17323:40;;17256:16;17323:40;17246:124;17201:169;:::o;33643:191::-;33778:15;;33751:4;;33778:15;;:49;;;;-1:-1:-1;;;;;;33797:30:0;;29374:42;33797:30;33778:49;33771:56;33643:191;-1:-1:-1;;33643:191:0:o;14961:96::-;15040:10;;14961:96::o;14:371:1:-;113:6;121;174:2;162:9;153:7;149:23;145:32;142:52;;;190:1;187;180:12;142:52;216:16;;-1:-1:-1;;;;;261:31:1;;251:42;;241:70;;307:1;304;297:12;241:70;375:2;360:18;;;;354:25;330:5;;354:25;;-1:-1:-1;;;14:371:1:o;390:225::-;430:3;461:1;457:6;454:1;451:13;448:136;;;506:10;501:3;497:20;494:1;487:31;541:4;538:1;531:15;569:4;566:1;559:15;448:136;-1:-1:-1;600:9:1;;390:225::o;:::-;29275:17742:0;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@MAXIMUM_DEPOSIT_FEE_RATE_1175": {
                  "entryPoint": null,
                  "id": 1175,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@MAXIMUM_HARVEST_INTERVAL_1172": {
                  "entryPoint": null,
                  "id": 1172,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_callOptionalReturn_592": {
                  "entryPoint": 11493,
                  "id": 592,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@_msgSender_1378": {
                  "entryPoint": 9804,
                  "id": 1378,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_msgSender_603": {
                  "entryPoint": 9800,
                  "id": 603,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_setOwner_714": {
                  "entryPoint": 10656,
                  "id": 714,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_verifyCallResult_371": {
                  "entryPoint": 12010,
                  "id": 371,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@add_1586": {
                  "entryPoint": 2817,
                  "id": 1586,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "@add_929": {
                  "entryPoint": 9868,
                  "id": 929,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@canHarvest_1758": {
                  "entryPoint": 2740,
                  "id": 1758,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@deposit_2085": {
                  "entryPoint": 8333,
                  "id": 2085,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@devAddress_1165": {
                  "entryPoint": null,
                  "id": 1165,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@disableMetaTxns_2627": {
                  "entryPoint": 1481,
                  "id": 2627,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@div_974": {
                  "entryPoint": 10644,
                  "id": 974,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@emberPerBlock_1169": {
                  "entryPoint": null,
                  "id": 1169,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@ember_1161": {
                  "entryPoint": null,
                  "id": 1161,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@enableMetaTxns_2607": {
                  "entryPoint": 5380,
                  "id": 2607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@feeAddress_1167": {
                  "entryPoint": null,
                  "id": 1167,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@functionCallWithValue_237": {
                  "entryPoint": null,
                  "id": 237,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@functionCall_167": {
                  "entryPoint": 11761,
                  "id": 167,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@getMultiplier_1428": {
                  "entryPoint": 6504,
                  "id": 1428,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@isContract_96": {
                  "entryPoint": null,
                  "id": 96,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@isTrustedForwarder_1359": {
                  "entryPoint": 5312,
                  "id": 1359,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@massUpdatePools_1783": {
                  "entryPoint": 5812,
                  "id": 1783,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@metaTxnsEnabled_1199": {
                  "entryPoint": null,
                  "id": 1199,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@mul_959": {
                  "entryPoint": 10632,
                  "id": 959,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@operator_1413": {
                  "entryPoint": null,
                  "id": 1413,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@owner_644": {
                  "entryPoint": null,
                  "id": 644,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@payOrLockupPendingEmber_2390": {
                  "entryPoint": 9880,
                  "id": 2390,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@pendingEmber_1696": {
                  "entryPoint": 6902,
                  "id": 1696,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@poolInfo_1179": {
                  "entryPoint": 2155,
                  "id": 1179,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@poolLength_1514": {
                  "entryPoint": null,
                  "id": 1514,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@renounceOwnership_672": {
                  "entryPoint": 5855,
                  "id": 672,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@safeEmberTransfer_2446": {
                  "entryPoint": 10867,
                  "id": 2446,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "@safeTransferFrom_426": {
                  "entryPoint": 10773,
                  "id": 426,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "@safeTransfer_400": {
                  "entryPoint": 10415,
                  "id": 400,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@setDevAddress_2481": {
                  "entryPoint": 7767,
                  "id": 2481,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@setFeeAddress_2516": {
                  "entryPoint": 6053,
                  "id": 2516,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@startBlock_1191": {
                  "entryPoint": null,
                  "id": 1191,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@startFarming_1505": {
                  "entryPoint": 6523,
                  "id": 1505,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@sub_944": {
                  "entryPoint": 10403,
                  "id": 944,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@totalAllocPoint_1189": {
                  "entryPoint": null,
                  "id": 1189,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@totalEmberInPools_1196": {
                  "entryPoint": null,
                  "id": 1196,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@totalLockedUpRewards_1193": {
                  "entryPoint": null,
                  "id": 1193,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@transferOperator_1455": {
                  "entryPoint": 2269,
                  "id": 1455,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@transferOwnership_695": {
                  "entryPoint": 9439,
                  "id": 695,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@updateAllocPoint_2586": {
                  "entryPoint": 7336,
                  "id": 2586,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@updateEmissionRate_2538": {
                  "entryPoint": 1914,
                  "id": 2538,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@updatePool_1894": {
                  "entryPoint": 4782,
                  "id": 1894,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@userInfo_1186": {
                  "entryPoint": null,
                  "id": 1186,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@userLockedUntil_1728": {
                  "entryPoint": 8218,
                  "id": 1728,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@withdraw_2230": {
                  "entryPoint": 3783,
                  "id": 2230,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_tuple_t_address": {
                  "entryPoint": 12093,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 12122,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 12151,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 12176,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256t_address": {
                  "entryPoint": 12201,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_contract$_IERC20_$77t_uint16t_uint256t_uint256t_bool": {
                  "entryPoint": 12249,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_uint256t_uint256": {
                  "entryPoint": 12359,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_uint256t_bool": {
                  "entryPoint": 12393,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12450,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IERC20_$77_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 9,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IEmberERC20_$1114__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12478,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_14388fda96a52968be65b2db2069f8659b8e83481598954c2a007b87d97ce360__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_17259bccd9651166f265fb5cf22c1d143b40ce2c5c793d6a97ee5cef63c8416b__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2135bd7a71e1ea126d853a1cc8c34707e4a82417f6097a0ca255ae1f628b3c99__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2ccf24bd4623988e8895731fc5360356fd4ddc1cf9889b4a2ccd0c3b70522c65__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_3afb489d0fdedbdd1ea85eac9ddbe1364eb6d65afbae3ba5fa8e9d567276c114__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_4e105e48bc57fa1f9f10e21dee10153614e3c8266381c0ad0a4f81964d866911__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_5a4574cf2dd94075c748b0d042c4221045543d20dbe58cdb533e3d8b27443e41__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_9f66a192bb5d380bb715d3d82ea63bf5d4388b25b62a93d324aeeb6c14e6eb61__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_a2691faa528f91a9a4ab590a0f4add1231978d30e5fbe4f7fec95c435f971f02__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_aa29c5d02e4b14ac5b4ea75153718e48aad4840c3193d2806e90029a1265c0ee__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ba64c516c254a120233aaa428082e6914b9161ad7a71857ef2335c77b6f968ae__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_c29470218040786bec09c4b09d87a994f98f856bb1a5be1258add468877c6524__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_d4b2eb0827e71ee18958471ff450fe4680022dd427d5a87a7a424434363e4c1a__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_da4f311a5e250fb4fd8b87717b1f43ebce463027dd51c15764cfb0ed8afa4ccf__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_f74c1fe070a1fae0251f1a0d5c2164736dc17ea9652a99ba9bed887eec6e820e__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": {
                  "entryPoint": 12559,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_div_t_uint256": {
                  "entryPoint": 12583,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 12642,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 12703,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "copy_memory_to_memory": {
                  "entryPoint": 12726,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "increment_t_uint256": {
                  "entryPoint": 12770,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 12827,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 12874,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 12921,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bool": {
                  "entryPoint": 12955,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:16865:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "84:177:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "130:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "139:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "142:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "132:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "132:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "132:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "105:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "114:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "101:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "101:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "126:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "97:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "97:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "94:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "155:36:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "181:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "168:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "168:23:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "159:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "225:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "200:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "200:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "200:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "240:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "250:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "240:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "50:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "61:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "73:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:247:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "344:167:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "390:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "399:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "402:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "392:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "392:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "392:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "365:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "374:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "361:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "361:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "386:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "357:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "357:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "354:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "415:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "434:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "428:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "428:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "419:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "475:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "453:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "453:28:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "453:28:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "490:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "500:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "490:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "310:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "321:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "333:6:1",
                            "type": ""
                          }
                        ],
                        "src": "266:245:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "586:110:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "632:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "641:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "644:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "634:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "634:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "634:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "607:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "616:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "603:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "603:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "628:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "599:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "599:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "596:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "657:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "680:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "667:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "667:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "657:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "552:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "563:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "575:6:1",
                            "type": ""
                          }
                        ],
                        "src": "516:180:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "782:103:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "828:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "837:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "840:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "830:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "830:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "830:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "803:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "812:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "799:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "799:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "824:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "795:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "795:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "792:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "853:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "869:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "863:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "863:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "853:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "748:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "759:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "771:6:1",
                            "type": ""
                          }
                        ],
                        "src": "701:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "977:228:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1023:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1032:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1035:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1025:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1025:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1025:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "998:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1007:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "994:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "994:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1019:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "990:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "990:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "987:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1048:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1071:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1058:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1058:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1048:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1090:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1120:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1131:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1116:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1116:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1103:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1103:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "1094:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1169:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1144:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1144:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1144:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1184:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1194:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1184:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "935:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "946:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "958:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "966:6:1",
                            "type": ""
                          }
                        ],
                        "src": "890:315:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1374:606:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1421:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1430:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1433:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1423:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1423:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1423:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1395:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1404:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1391:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1391:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1416:3:1",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1387:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1387:33:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1384:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1446:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1469:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1456:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1456:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1446:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1488:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1518:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1529:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1514:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1514:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1501:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1501:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "1492:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1567:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1542:24:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1542:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1542:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1582:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1592:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1582:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1606:47:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1638:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1649:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1634:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1634:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1621:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1621:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "1610:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1707:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1716:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1719:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1709:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1709:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1709:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1675:7:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1688:7:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1697:6:1",
                                            "type": "",
                                            "value": "0xffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "1684:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1684:20:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "1672:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1672:33:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1665:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1665:41:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1662:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1732:17:1",
                              "value": {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "1742:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1732:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1758:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1785:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1796:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1781:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1781:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1768:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1768:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "1758:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1809:43:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1836:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1847:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1832:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1832:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1819:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1819:33:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "1809:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1861:48:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1893:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1904:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1889:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1889:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1876:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1876:33:1"
                              },
                              "variables": [
                                {
                                  "name": "value_2",
                                  "nodeType": "YulTypedName",
                                  "src": "1865:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1940:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "1918:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1918:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1918:30:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1957:17:1",
                              "value": {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "1967:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "1957:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_contract$_IERC20_$77t_uint16t_uint256t_uint256t_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1300:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1311:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1323:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1331:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "1339:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "1347:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "1355:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "1363:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1210:770:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2072:161:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2118:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2127:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2130:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2120:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2120:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2120:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2093:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2102:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2089:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2089:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2114:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2085:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2085:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2082:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2143:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2166:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2153:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2153:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2143:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2185:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2212:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2223:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2208:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2208:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2195:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2195:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2185:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2030:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2041:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2053:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "2061:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1985:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2339:276:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2385:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2394:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2397:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2387:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2387:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2387:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2360:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2369:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2356:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2356:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2381:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2352:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2352:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2349:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2410:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2433:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2420:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2420:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2410:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2452:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2479:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2490:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2475:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2475:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2462:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2462:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2452:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2503:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2533:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2544:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2529:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2529:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2516:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2516:32:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "2507:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2579:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "2557:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2557:28:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2557:28:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2594:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2604:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "2594:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256t_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2289:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2300:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2312:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "2320:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "2328:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2238:377:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2757:137:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2767:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2787:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2781:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2781:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "2771:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "2829:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2837:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2825:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2825:17:1"
                                  },
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2844:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2849:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "2803:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2803:53:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2803:53:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2865:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2876:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2881:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2872:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2872:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "2865:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "2733:3:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2738:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "2749:3:1",
                            "type": ""
                          }
                        ],
                        "src": "2620:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3000:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3010:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3022:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3033:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3018:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3018:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3010:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3052:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3067:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3075:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3063:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3063:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3045:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3045:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3045:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2969:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2980:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "2991:4:1",
                            "type": ""
                          }
                        ],
                        "src": "2899:226:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3259:198:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3269:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3281:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3292:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3277:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3277:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3269:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3304:52:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3314:42:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3308:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3372:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3387:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3395:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3383:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3383:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3365:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3365:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3365:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3419:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3430:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3415:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3415:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3439:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3447:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3435:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3435:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3408:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3408:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3408:43:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3220:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3231:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3239:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3250:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3130:327:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3619:241:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3629:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3641:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3652:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3637:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3637:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3629:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3664:52:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3674:42:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3668:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3732:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3747:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3755:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3743:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3743:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3725:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3725:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3725:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3779:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3790:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3775:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3775:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3799:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3807:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3795:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3795:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3768:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3768:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3768:43:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "3831:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3842:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3827:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3827:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "3847:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3820:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3820:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3820:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3572:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "3583:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3591:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3599:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3610:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3462:398:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3994:168:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4004:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4016:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4027:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4012:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4012:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4004:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4046:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "4061:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4069:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4057:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4057:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4039:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4039:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4039:74:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4133:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4144:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4129:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4129:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4149:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4122:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4122:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4122:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3955:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3966:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3974:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3985:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3865:297:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4262:92:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4272:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4284:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4295:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4280:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4280:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4272:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4314:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "4339:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "4332:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4332:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4325:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4325:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4307:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4307:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4307:41:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4231:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4242:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4253:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4167:187:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4667:444:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4677:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4689:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4700:3:1",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4685:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4685:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4677:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4720:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "4735:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4743:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4731:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4731:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4713:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4713:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4713:74:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4807:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4818:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4803:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4803:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4823:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4796:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4796:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4796:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4850:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4861:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4846:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4846:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4866:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4839:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4839:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4839:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4893:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4904:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4889:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4889:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "4909:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4882:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4882:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4882:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4936:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4947:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4932:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4932:19:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "4957:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4965:6:1",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4953:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4953:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4925:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4925:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4925:48:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4993:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5004:3:1",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4989:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4989:19:1"
                                  },
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "5010:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4982:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4982:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4982:35:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5037:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5048:3:1",
                                        "type": "",
                                        "value": "192"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5033:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5033:19:1"
                                  },
                                  {
                                    "name": "value6",
                                    "nodeType": "YulIdentifier",
                                    "src": "5054:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5026:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5026:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5026:35:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5081:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5092:3:1",
                                        "type": "",
                                        "value": "224"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5077:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5077:19:1"
                                  },
                                  {
                                    "name": "value7",
                                    "nodeType": "YulIdentifier",
                                    "src": "5098:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5070:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5070:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5070:35:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IERC20_$77_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4580:9:1",
                            "type": ""
                          },
                          {
                            "name": "value7",
                            "nodeType": "YulTypedName",
                            "src": "4591:6:1",
                            "type": ""
                          },
                          {
                            "name": "value6",
                            "nodeType": "YulTypedName",
                            "src": "4599:6:1",
                            "type": ""
                          },
                          {
                            "name": "value5",
                            "nodeType": "YulTypedName",
                            "src": "4607:6:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "4615:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "4623:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "4631:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "4639:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4647:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4658:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4359:752:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5237:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5247:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5259:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5270:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5255:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5255:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5247:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5289:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "5304:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5312:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5300:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5300:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5282:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5282:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5282:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IEmberERC20_$1114__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5206:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5217:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5228:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5116:246:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5488:321:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5505:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5516:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5498:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5498:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5498:21:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5528:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5548:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5542:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5542:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "5532:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5575:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5586:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5571:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5571:18:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5591:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5564:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5564:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5564:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "5633:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5641:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5629:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5629:15:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5650:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5661:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5646:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5646:18:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5666:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory",
                                  "nodeType": "YulIdentifier",
                                  "src": "5607:21:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5607:66:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5607:66:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5682:121:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5698:9:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nodeType": "YulIdentifier",
                                                "src": "5717:6:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "5725:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "5713:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "5713:15:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "5730:66:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "5709:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5709:88:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5694:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5694:104:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5800:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5690:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5690:113:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5682:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5457:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "5468:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5479:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5367:442:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5988:224:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6005:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6016:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5998:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5998:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5998:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6039:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6050:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6035:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6035:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6055:2:1",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6028:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6028:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6028:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6078:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6089:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6074:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6074:18:1"
                                  },
                                  {
                                    "hexValue": "57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f75",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6094:34:1",
                                    "type": "",
                                    "value": "Withdraw: pool total is not enou"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6067:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6067:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6067:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6149:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6160:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6145:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6145:18:1"
                                  },
                                  {
                                    "hexValue": "6768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6165:4:1",
                                    "type": "",
                                    "value": "gh"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6138:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6138:32:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6138:32:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6179:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6191:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6202:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6187:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6187:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6179:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_14388fda96a52968be65b2db2069f8659b8e83481598954c2a007b87d97ce360__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5965:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5979:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5814:398:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6391:175:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6408:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6419:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6401:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6401:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6401:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6442:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6453:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6438:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6438:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6458:2:1",
                                    "type": "",
                                    "value": "25"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6431:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6431:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6431:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6481:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6492:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6477:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6477:18:1"
                                  },
                                  {
                                    "hexValue": "4164643a206465706f7369742066656520746f6f2068696768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6497:27:1",
                                    "type": "",
                                    "value": "Add: deposit fee too high"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6470:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6470:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6470:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6534:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6546:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6557:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6542:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6542:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6534:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_17259bccd9651166f265fb5cf22c1d143b40ce2c5c793d6a97ee5cef63c8416b__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6368:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6382:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6217:349:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6745:174:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6762:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6773:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6755:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6755:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6755:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6796:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6807:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6792:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6792:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6812:2:1",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6785:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6785:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6785:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6835:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6846:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6831:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6831:18:1"
                                  },
                                  {
                                    "hexValue": "736574446576416464726573733a20464f5242494444454e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6851:26:1",
                                    "type": "",
                                    "value": "setDevAddress: FORBIDDEN"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6824:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6824:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6824:54:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6887:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6899:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6910:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6895:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6895:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6887:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2135bd7a71e1ea126d853a1cc8c34707e4a82417f6097a0ca255ae1f628b3c99__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6722:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6736:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6571:348:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7098:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7115:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7126:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7108:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7108:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7108:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7149:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7160:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7145:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7145:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7165:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7138:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7138:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7138:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7188:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7199:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7184:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7184:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7204:34:1",
                                    "type": "",
                                    "value": "Ownable: new owner is the zero a"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7177:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7177:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7177:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7259:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7270:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7255:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7255:18:1"
                                  },
                                  {
                                    "hexValue": "646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7275:8:1",
                                    "type": "",
                                    "value": "ddress"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7248:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7248:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7248:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7293:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7305:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7316:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7301:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7301:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7293:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7075:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7089:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6924:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7505:169:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7522:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7533:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7515:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7515:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7515:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7556:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7567:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7552:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7552:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7572:2:1",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7545:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7545:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7545:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7595:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7606:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7591:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7591:18:1"
                                  },
                                  {
                                    "hexValue": "736574446576416464726573733a205a45524f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7611:21:1",
                                    "type": "",
                                    "value": "setDevAddress: ZERO"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7584:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7584:49:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7584:49:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7642:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7654:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7665:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7650:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7650:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7642:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2ccf24bd4623988e8895731fc5360356fd4ddc1cf9889b4a2ccd0c3b70522c65__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7482:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7496:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7331:343:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7853:169:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7870:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7881:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7863:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7863:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7863:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7904:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7915:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7900:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7900:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7920:2:1",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7893:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7893:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7893:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7943:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7954:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7939:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7939:18:1"
                                  },
                                  {
                                    "hexValue": "736574466565416464726573733a205a45524f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7959:21:1",
                                    "type": "",
                                    "value": "setFeeAddress: ZERO"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7932:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7932:49:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7932:49:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7990:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8002:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8013:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7998:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7998:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7990:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3afb489d0fdedbdd1ea85eac9ddbe1364eb6d65afbae3ba5fa8e9d567276c114__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7830:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7844:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7679:343:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8201:223:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8218:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8229:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8211:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8211:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8211:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8252:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8263:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8248:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8248:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8268:2:1",
                                    "type": "",
                                    "value": "33"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8241:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8241:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8241:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8291:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8302:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8287:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8287:18:1"
                                  },
                                  {
                                    "hexValue": "57697468647261773a20796f752063616e6e6f74207769746864726177207965",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8307:34:1",
                                    "type": "",
                                    "value": "Withdraw: you cannot withdraw ye"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8280:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8280:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8280:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8362:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8373:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8358:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8358:18:1"
                                  },
                                  {
                                    "hexValue": "74",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8378:3:1",
                                    "type": "",
                                    "value": "t"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8351:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8351:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8351:31:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8391:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8403:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8414:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8399:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8399:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8391:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_4e105e48bc57fa1f9f10e21dee10153614e3c8266381c0ad0a4f81964d866911__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8178:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8192:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8027:397:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8603:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8620:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8631:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8613:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8613:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8613:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8654:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8665:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8650:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8650:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8670:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8643:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8643:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8643:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8693:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8704:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8689:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8689:18:1"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8709:34:1",
                                    "type": "",
                                    "value": "Address: insufficient balance fo"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8682:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8682:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8682:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8764:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8775:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8760:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8760:18:1"
                                  },
                                  {
                                    "hexValue": "722063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8780:8:1",
                                    "type": "",
                                    "value": "r call"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8753:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8753:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8753:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8798:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8810:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8821:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8806:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8806:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8798:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8580:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8594:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8429:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9010:239:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9027:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9038:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9020:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9020:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9020:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9061:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9072:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9057:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9057:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9077:2:1",
                                    "type": "",
                                    "value": "49"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9050:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9050:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9050:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9100:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9111:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9096:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9096:18:1"
                                  },
                                  {
                                    "hexValue": "456d6265725661756c743a206d657461207472616e73616374696f6e73206172",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9116:34:1",
                                    "type": "",
                                    "value": "EmberVault: meta transactions ar"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9089:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9089:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9089:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9171:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9182:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9167:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9167:18:1"
                                  },
                                  {
                                    "hexValue": "6520616c726561647920656e61626c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9187:19:1",
                                    "type": "",
                                    "value": "e already enabled"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9160:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9160:47:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9160:47:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9216:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9228:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9239:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9224:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9224:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9216:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_5a4574cf2dd94075c748b0d042c4221045543d20dbe58cdb533e3d8b27443e41__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8987:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9001:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8836:413:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9428:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9445:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9456:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9438:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9438:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9438:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9479:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9490:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9475:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9475:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9495:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9468:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9468:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9468:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9518:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9529:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9514:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9514:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9534:34:1",
                                    "type": "",
                                    "value": "Ownable: caller is not the owner"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9507:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9507:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9507:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9578:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9590:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9601:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9586:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9586:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9578:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9405:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9419:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9254:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9789:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9806:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9817:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9799:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9799:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9799:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9840:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9851:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9836:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9836:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9856:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9829:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9829:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9829:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9879:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9890:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9875:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9875:18:1"
                                  },
                                  {
                                    "hexValue": "456d6265725661756c743a206d657461207472616e73616374696f6e73206172",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9895:34:1",
                                    "type": "",
                                    "value": "EmberVault: meta transactions ar"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9868:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9868:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9868:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9950:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9961:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9946:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9946:18:1"
                                  },
                                  {
                                    "hexValue": "6520616c72656164792064697361626c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9966:20:1",
                                    "type": "",
                                    "value": "e already disabled"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9939:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9939:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9939:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9996:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10008:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10019:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10004:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10004:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9996:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9f66a192bb5d380bb715d3d82ea63bf5d4388b25b62a93d324aeeb6c14e6eb61__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9766:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9780:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9615:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10208:177:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10225:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10236:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10218:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10218:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10218:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10259:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10270:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10255:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10255:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10275:2:1",
                                    "type": "",
                                    "value": "27"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10248:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10248:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10248:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10298:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10309:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10294:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10294:18:1"
                                  },
                                  {
                                    "hexValue": "4572726f723a206661726d207374617274656420616c7265616479",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10314:29:1",
                                    "type": "",
                                    "value": "Error: farm started already"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10287:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10287:57:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10287:57:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10353:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10365:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10376:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10361:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10361:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10353:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_a2691faa528f91a9a4ab590a0f4add1231978d30e5fbe4f7fec95c435f971f02__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10185:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10199:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10034:351:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10564:237:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10581:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10592:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10574:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10574:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10574:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10615:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10626:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10611:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10611:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10631:2:1",
                                    "type": "",
                                    "value": "47"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10604:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10604:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10604:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10654:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10665:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10650:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10650:18:1"
                                  },
                                  {
                                    "hexValue": "456d6265725661756c743a2063616e6e6f74206465706f736974206265666f72",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10670:34:1",
                                    "type": "",
                                    "value": "EmberVault: cannot deposit befor"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10643:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10643:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10643:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10725:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10736:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10721:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10721:18:1"
                                  },
                                  {
                                    "hexValue": "65206661726d696e67207374617274",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10741:17:1",
                                    "type": "",
                                    "value": "e farming start"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10714:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10714:45:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10714:45:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10768:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10780:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10791:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10776:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10776:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10768:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_aa29c5d02e4b14ac5b4ea75153718e48aad4840c3193d2806e90029a1265c0ee__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10541:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10555:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10390:411:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10980:225:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10997:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11008:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10990:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10990:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10990:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11031:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11042:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11027:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11027:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11047:2:1",
                                    "type": "",
                                    "value": "35"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11020:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11020:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11020:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11070:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11081:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11066:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11066:18:1"
                                  },
                                  {
                                    "hexValue": "57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11086:34:1",
                                    "type": "",
                                    "value": "Withdraw: user amount is not eno"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11059:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11059:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11059:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11141:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11152:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11137:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11137:18:1"
                                  },
                                  {
                                    "hexValue": "756768",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11157:5:1",
                                    "type": "",
                                    "value": "ugh"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11130:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11130:33:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11130:33:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11172:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11184:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11195:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11180:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11180:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11172:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ba64c516c254a120233aaa428082e6914b9161ad7a71857ef2335c77b6f968ae__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10957:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10971:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10806:399:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11384:179:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11401:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11412:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11394:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11394:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11394:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11435:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11446:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11431:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11431:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11451:2:1",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11424:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11424:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11424:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11474:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11485:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11470:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11470:18:1"
                                  },
                                  {
                                    "hexValue": "4164643a20696e76616c6964206861727665737420696e74657276616c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11490:31:1",
                                    "type": "",
                                    "value": "Add: invalid harvest interval"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11463:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11463:59:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11463:59:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11531:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11543:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11554:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11539:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11539:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11531:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c29470218040786bec09c4b09d87a994f98f856bb1a5be1258add468877c6524__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11361:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11375:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11210:353:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11742:179:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11759:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11770:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11752:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11752:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11752:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11793:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11804:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11789:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11789:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11809:2:1",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11782:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11782:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11782:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11832:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11843:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11828:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11828:18:1"
                                  },
                                  {
                                    "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11848:31:1",
                                    "type": "",
                                    "value": "Address: call to non-contract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11821:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11821:59:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11821:59:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11889:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11901:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11912:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11897:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11897:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11889:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11719:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11733:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11568:353:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12100:174:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12117:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12128:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12110:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12110:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12110:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12151:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12162:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12147:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12147:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12167:2:1",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12140:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12140:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12140:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12190:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12201:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12186:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12186:18:1"
                                  },
                                  {
                                    "hexValue": "736574466565416464726573733a20464f5242494444454e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12206:26:1",
                                    "type": "",
                                    "value": "setFeeAddress: FORBIDDEN"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12179:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12179:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12179:54:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12242:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12254:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12265:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12250:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12250:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12242:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_d4b2eb0827e71ee18958471ff450fe4680022dd427d5a87a7a424434363e4c1a__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12077:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12091:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11926:348:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12453:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12470:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12481:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12463:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12463:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12463:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12504:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12515:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12500:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12500:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12520:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12493:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12493:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12493:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12543:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12554:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12539:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12539:18:1"
                                  },
                                  {
                                    "hexValue": "5472616e736665724f70657261746f723a206e6577206f70657261746f722069",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12559:34:1",
                                    "type": "",
                                    "value": "TransferOperator: new operator i"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12532:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12532:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12532:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12614:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12625:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12610:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12610:18:1"
                                  },
                                  {
                                    "hexValue": "7320746865207a65726f2061646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12630:20:1",
                                    "type": "",
                                    "value": "s the zero address"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12603:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12603:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12603:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12660:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12672:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12683:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12668:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12668:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12660:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_da4f311a5e250fb4fd8b87717b1f43ebce463027dd51c15764cfb0ed8afa4ccf__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12430:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12444:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12279:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12872:232:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12889:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12900:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12882:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12882:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12882:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12923:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12934:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12919:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12919:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12939:2:1",
                                    "type": "",
                                    "value": "42"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12912:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12912:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12912:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12962:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12973:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12958:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12958:18:1"
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12978:34:1",
                                    "type": "",
                                    "value": "SafeERC20: ERC20 operation did n"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12951:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12951:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12951:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13033:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13044:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13029:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13029:18:1"
                                  },
                                  {
                                    "hexValue": "6f742073756363656564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13049:12:1",
                                    "type": "",
                                    "value": "ot succeed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13022:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13022:40:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13022:40:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13071:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13083:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13094:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13079:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13079:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13071:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "12849:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12863:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12698:406:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13283:181:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13300:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13311:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13293:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13293:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13293:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13334:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13345:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13330:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13330:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13350:2:1",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13323:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13323:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13323:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13373:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13384:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13369:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13369:18:1"
                                  },
                                  {
                                    "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13389:33:1",
                                    "type": "",
                                    "value": "ReentrancyGuard: reentrant call"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13362:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13362:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13362:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13432:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13444:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13455:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13440:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13440:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13432:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13260:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13274:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13109:355:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13643:226:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13660:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13671:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13653:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13653:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13653:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13694:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13705:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13690:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13690:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13710:2:1",
                                    "type": "",
                                    "value": "36"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13683:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13683:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13683:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13733:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13744:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13729:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13729:18:1"
                                  },
                                  {
                                    "hexValue": "4f70657261746f723a2063616c6c6572206973206e6f7420746865206f706572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13749:34:1",
                                    "type": "",
                                    "value": "Operator: caller is not the oper"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13722:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13722:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13722:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13804:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13815:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13800:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13800:18:1"
                                  },
                                  {
                                    "hexValue": "61746f72",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13820:6:1",
                                    "type": "",
                                    "value": "ator"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13793:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13793:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13793:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13836:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13848:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13859:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13844:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13844:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13836:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_f74c1fe070a1fae0251f1a0d5c2164736dc17ea9652a99ba9bed887eec6e820e__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13620:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13634:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13469:400:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13973:89:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13983:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13995:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14006:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13991:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13991:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "13983:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14025:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "14040:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14048:6:1",
                                        "type": "",
                                        "value": "0xffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "14036:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14036:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14018:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14018:38:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14018:38:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "13942:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "13953:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "13964:4:1",
                            "type": ""
                          }
                        ],
                        "src": "13874:188:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14168:76:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14178:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14190:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14201:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14186:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14186:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14178:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14220:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14231:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14213:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14213:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14213:25:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "14137:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "14148:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "14159:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14067:177:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14378:119:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14388:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14400:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14411:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14396:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14396:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14388:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14430:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14441:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14423:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14423:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14423:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14468:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14479:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14464:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14464:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14484:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14457:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14457:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14457:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "14339:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "14350:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "14358:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "14369:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14249:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14715:250:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14725:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14737:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14748:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14733:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14733:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "14725:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14768:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14779:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14761:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14761:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14761:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14806:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14817:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14802:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14802:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14822:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14795:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14795:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14795:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14849:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14860:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14845:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14845:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "14865:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14838:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14838:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14838:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14892:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14903:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14888:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14888:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "14908:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14881:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14881:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14881:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "14935:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14946:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14931:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14931:19:1"
                                  },
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "14952:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "14924:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14924:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14924:35:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "14652:9:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "14663:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "14671:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "14679:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "14687:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "14695:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "14706:4:1",
                            "type": ""
                          }
                        ],
                        "src": "14502:463:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15018:80:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15045:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "15047:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15047:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15047:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15034:1:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "15041:1:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "15037:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15037:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15031:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15031:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "15028:39:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15076:16:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15087:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15090:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15083:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15083:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nodeType": "YulIdentifier",
                                  "src": "15076:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "15001:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "15004:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nodeType": "YulTypedName",
                            "src": "15010:3:1",
                            "type": ""
                          }
                        ],
                        "src": "14970:128:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15149:228:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15180:168:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15201:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15204:77:1",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15194:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15194:88:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15194:88:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15302:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15305:4:1",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15295:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15295:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15295:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15330:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15333:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15323:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15323:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15323:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15169:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "15162:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15162:9:1"
                              },
                              "nodeType": "YulIf",
                              "src": "15159:189:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15357:14:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15366:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15369:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "15362:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15362:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "15357:1:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "15134:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "15137:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "r",
                            "nodeType": "YulTypedName",
                            "src": "15143:1:1",
                            "type": ""
                          }
                        ],
                        "src": "15103:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15434:176:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15553:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "15555:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15555:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15555:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "15465:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "15458:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15458:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "15451:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15451:17:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "15473:1:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15480:66:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "15548:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "15476:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15476:74:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "15470:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15470:81:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15447:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15447:105:1"
                              },
                              "nodeType": "YulIf",
                              "src": "15444:131:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15584:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15599:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15602:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "15595:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15595:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "15584:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "15413:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "15416:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "15422:7:1",
                            "type": ""
                          }
                        ],
                        "src": "15382:228:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15664:76:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15686:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "15688:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15688:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15688:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15680:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15683:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15677:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15677:8:1"
                              },
                              "nodeType": "YulIf",
                              "src": "15674:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15717:17:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "15729:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "15732:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15725:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15725:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "15717:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "15646:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "15649:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "15655:4:1",
                            "type": ""
                          }
                        ],
                        "src": "15615:125:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15798:205:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "15808:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15817:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "15812:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15877:63:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "15902:3:1"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "15907:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15898:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15898:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15921:3:1"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15926:1:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "15917:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "15917:11:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "15911:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15911:18:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15891:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15891:39:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15891:39:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "15838:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "15841:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15835:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15835:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "15849:19:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "15851:15:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "15860:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15863:2:1",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "15856:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15856:10:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "15851:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "15831:3:1",
                                "statements": []
                              },
                              "src": "15827:113:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15966:31:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nodeType": "YulIdentifier",
                                              "src": "15979:3:1"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "15984:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15975:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15975:16:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15993:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15968:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15968:27:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15968:27:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "15955:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "15958:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "15952:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15952:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "15949:48:1"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nodeType": "YulTypedName",
                            "src": "15776:3:1",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nodeType": "YulTypedName",
                            "src": "15781:3:1",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nodeType": "YulTypedName",
                            "src": "15786:6:1",
                            "type": ""
                          }
                        ],
                        "src": "15745:258:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16055:148:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16146:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "16148:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16148:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16148:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "16071:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16078:66:1",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "16068:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16068:77:1"
                              },
                              "nodeType": "YulIf",
                              "src": "16065:103:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16177:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "16188:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16195:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16184:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16184:13:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "16177:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "16037:5:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "16047:3:1",
                            "type": ""
                          }
                        ],
                        "src": "16008:195:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16240:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16257:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16260:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16250:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16250:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16250:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16354:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16357:4:1",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16347:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16347:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16347:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16378:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16381:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "16371:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16371:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16371:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "16208:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16429:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16446:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16449:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16439:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16439:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16439:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16543:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16546:4:1",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "16536:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16536:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16536:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16567:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16570:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "16560:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16560:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16560:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "16397:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16631:109:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16718:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16727:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16730:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "16720:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16720:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16720:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "16654:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "16665:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "16672:42:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "16661:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "16661:54:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "16651:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16651:65:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16644:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16644:73:1"
                              },
                              "nodeType": "YulIf",
                              "src": "16641:93:1"
                            }
                          ]
                        },
                        "name": "validator_revert_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "16620:5:1",
                            "type": ""
                          }
                        ],
                        "src": "16586:154:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16787:76:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16841:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16850:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16853:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "16843:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16843:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16843:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "16810:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nodeType": "YulIdentifier",
                                                "src": "16831:5:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "16824:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "16824:13:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "16817:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "16817:21:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "16807:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16807:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16800:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16800:40:1"
                              },
                              "nodeType": "YulIf",
                              "src": "16797:60:1"
                            }
                          ]
                        },
                        "name": "validator_revert_bool",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "16776:5:1",
                            "type": ""
                          }
                        ],
                        "src": "16745:118:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_uint256t_contract$_IERC20_$77t_uint16t_uint256t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        if iszero(eq(value_1, and(value_1, 0xffff))) { revert(0, 0) }\n        value2 := value_1\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        let value_2 := calldataload(add(headStart, 160))\n        validator_revert_bool(value_2)\n        value5 := value_2\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_bool(value)\n        value2 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$77_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256_t_uint16_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, 0xffff))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n    }\n    function abi_encode_tuple_t_contract$_IEmberERC20_$1114__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_14388fda96a52968be65b2db2069f8659b8e83481598954c2a007b87d97ce360__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Withdraw: pool total is not enou\")\n        mstore(add(headStart, 96), \"gh\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_17259bccd9651166f265fb5cf22c1d143b40ce2c5c793d6a97ee5cef63c8416b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Add: deposit fee too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2135bd7a71e1ea126d853a1cc8c34707e4a82417f6097a0ca255ae1f628b3c99__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"setDevAddress: FORBIDDEN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2ccf24bd4623988e8895731fc5360356fd4ddc1cf9889b4a2ccd0c3b70522c65__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"setDevAddress: ZERO\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3afb489d0fdedbdd1ea85eac9ddbe1364eb6d65afbae3ba5fa8e9d567276c114__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"setFeeAddress: ZERO\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4e105e48bc57fa1f9f10e21dee10153614e3c8266381c0ad0a4f81964d866911__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Withdraw: you cannot withdraw ye\")\n        mstore(add(headStart, 96), \"t\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5a4574cf2dd94075c748b0d042c4221045543d20dbe58cdb533e3d8b27443e41__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"EmberVault: meta transactions ar\")\n        mstore(add(headStart, 96), \"e already enabled\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9f66a192bb5d380bb715d3d82ea63bf5d4388b25b62a93d324aeeb6c14e6eb61__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"EmberVault: meta transactions ar\")\n        mstore(add(headStart, 96), \"e already disabled\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a2691faa528f91a9a4ab590a0f4add1231978d30e5fbe4f7fec95c435f971f02__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Error: farm started already\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_aa29c5d02e4b14ac5b4ea75153718e48aad4840c3193d2806e90029a1265c0ee__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"EmberVault: cannot deposit befor\")\n        mstore(add(headStart, 96), \"e farming start\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ba64c516c254a120233aaa428082e6914b9161ad7a71857ef2335c77b6f968ae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Withdraw: user amount is not eno\")\n        mstore(add(headStart, 96), \"ugh\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c29470218040786bec09c4b09d87a994f98f856bb1a5be1258add468877c6524__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Add: invalid harvest interval\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d4b2eb0827e71ee18958471ff450fe4680022dd427d5a87a7a424434363e4c1a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"setFeeAddress: FORBIDDEN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_da4f311a5e250fb4fd8b87717b1f43ebce463027dd51c15764cfb0ed8afa4ccf__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"TransferOperator: new operator i\")\n        mstore(add(headStart, 96), \"s the zero address\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f74c1fe070a1fae0251f1a0d5c2164736dc17ea9652a99ba9bed887eec6e820e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Operator: caller is not the oper\")\n        mstore(add(headStart, 96), \"ator\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061025c5760003560e01c8063578bb42d11610145578063afbcfea1116100bd578063d0d41fe11161008c578063de73149d11610071578063de73149d14610599578063e2bbb158146105a3578063f2fde38b146105b657600080fd5b8063d0d41fe114610573578063d1593bc81461058657600080fd5b8063afbcfea11461053c578063bc83ee2214610544578063bde4aeca14610557578063c9e118521461056a57600080fd5b80638705fcd4116101145780638dbb1e3a116100f95780638dbb1e3a146104ac57806393f1a40b146104bf578063a8c95dc01461052f57600080fd5b80638705fcd41461047b5780638da5cb5b1461048e57600080fd5b8063578bb42d14610447578063630b5ba11461044f578063715018a614610457578063812c64f11461045f57600080fd5b8063330ae003116101d8578063474fa630116101a757806351eb05a61161018c57806351eb05a614610403578063570ca73514610416578063572b6c051461043457600080fd5b8063474fa630146103f157806348cd4cb1146103fa57600080fd5b8063330ae0031461038b5780633ad10ef61461039e57806341275358146103be578063441a3e70146103de57600080fd5b806317caf6f11161022f57806329605e771161021457806329605e771461034c5780632a22bc431461035f5780632e6c998d1461036857600080fd5b806317caf6f1146102fe5780631f1b9a7c1461030757600080fd5b8063081e3eda1461026157806308383640146102785780630ba84cd2146102825780631526fe2714610295575b600080fd5b6007545b6040519081526020015b60405180910390f35b6102806105c9565b005b610280610290366004612f77565b61077a565b6102a86102a3366004612f77565b61086b565b6040805173ffffffffffffffffffffffffffffffffffffffff9099168952602089019790975295870194909452606086019290925261ffff16608085015260a084015260c083015260e08201526101000161026f565b61026560095481565b6002546103279073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161026f565b61028061035a366004612f3d565b6108dd565b610265600c5481565b61037b610376366004612fa9565b610ab4565b604051901515815260200161026f565b610280610399366004612fd9565b610b01565b6004546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6005546103279073ffffffffffffffffffffffffffffffffffffffff1681565b6102806103ec366004613047565b610ec7565b610265600b5481565b610265600a5481565b610280610411366004612f77565b6112ae565b60035473ffffffffffffffffffffffffffffffffffffffff16610327565b61037b610442366004612f3d565b6114c0565b610280611504565b6102806116b4565b6102806116df565b6104686103e881565b60405161ffff909116815260200161026f565b610280610489366004612f3d565b6117a5565b60005473ffffffffffffffffffffffffffffffffffffffff16610327565b6102656104ba366004613047565b611968565b6105076104cd366004612fa9565b6008602090815260009283526040808420909152908252902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a00161026f565b600d5461037b9060ff1681565b61028061197b565b610265610552366004612fa9565b611af6565b610280610565366004613069565b611ca8565b61026560065481565b610280610581366004612f3d565b611e57565b610265610594366004612fa9565b61201a565b6102656212750081565b6102806105b1366004613047565b61208d565b6102806105c4366004612f3d565b6124df565b60035473ffffffffffffffffffffffffffffffffffffffff163314610674576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f720000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600d5460ff16610706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c72656164792064697361626c65640000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905561073661264c565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b60035473ffffffffffffffffffffffffffffffffffffffff163314610820576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b6108286116b4565b600654604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600655565b6007818154811061087b57600080fd5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff909616975093959294919361ffff90911692909188565b60035473ffffffffffffffffffffffffffffffffffffffff163314610983576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b73ffffffffffffffffffffffffffffffffffffffff8116610a26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f5472616e736665724f70657261746f723a206e6577206f70657261746f72206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161066b565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed90600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091528120600a544310801590610af9575080600301544210155b949350505050565b610b0961264c565b73ffffffffffffffffffffffffffffffffffffffff16610b3e60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6103e861ffff85161115610c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161066b565b62127500831115610c98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161066b565b8015610ca657610ca66116b4565b6000600a544311610cb957600a54610cbb565b435b600954909150610ccb908861268c565b600955604080516101008101825273ffffffffffffffffffffffffffffffffffffffff97881681526020810198895290810191825260006060820181815261ffff9788166080840190815260a0840197885260c0840183815260e0850197885260078054600181018255945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600890940293840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909b161790995598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a83015596517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b82015594517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c860180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016919095161790935590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d84015592517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68e8301555090517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68f90910155565b60026001541415610f34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600181905550600060078381548110610f5157610f5161324a565b906000526020600020906008020190506000600860008581526020019081526020016000206000610f8061264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508281600001541015611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f60448201527f7567680000000000000000000000000000000000000000000000000000000000606482015260840161066b565b82826006015410156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f7560448201527f6768000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b816007015481600401546110f8919061310f565b4211611186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f57697468647261773a20796f752063616e6e6f7420776974686472617720796560448201527f7400000000000000000000000000000000000000000000000000000000000000606482015260840161066b565b61118f846112ae565b61119884612698565b82156112205780546111aa90846128a3565b815560068201546111bb90846128a3565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff908116911614156111f657600c546111f290846128a3565b600c555b61122061120161264c565b835473ffffffffffffffffffffffffffffffffffffffff1690856128af565b600382015481546112419164e8d4a510009161123b91612988565b90612994565b60018201554260048201558361125561264c565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161129c91815260200190565b60405180910390a35050600180555050565b6000600782815481106112c3576112c361324a565b90600052602060002090600802019050806002015443116112e2575050565b60068101548015806112f657506001820154155b1561130657504360029091015550565b6000611316836002015443611968565b9050600061134360095461123b866001015461133d6006548761298890919063ffffffff16565b90612988565b60025460045491925073ffffffffffffffffffffffffffffffffffffffff908116916340c10f19911661137784600a612994565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b50506002546040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff90911692506340c10f199150604401600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50505060068501546114ab91506114a09061123b8464e8d4a51000612988565b60038601549061268c565b60038501555050436002909201919091555050565b600d5460009060ff1680156114fe575073ffffffffffffffffffffffffffffffffffffffff8216730d998dda948c62a4feca7355e46d6b801a1aedd6145b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146115aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b600d5460ff161561163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f456d6265725661756c743a206d657461207472616e73616374696f6e7320617260448201527f6520616c726561647920656e61626c6564000000000000000000000000000000606482015260840161066b565b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561167061264c565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b60075460005b818110156116db576116cb816112ae565b6116d4816131e2565b90506116ba565b5050565b6116e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661171c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b6117a360006129a0565b565b60055473ffffffffffffffffffffffffffffffffffffffff166117c661264c565b73ffffffffffffffffffffffffffffffffffffffff1614611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574466565416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff81166118c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574466565416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b6118c861264c565b6005546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917f6690a53895b5691c039238b384bd857e65c42adcc727775381e02cb90a122613910160405180910390a2600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600061197482846128a3565b9392505050565b61198361264c565b73ffffffffffffffffffffffffffffffffffffffff166119b860005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614611a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b600a544310611aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4572726f723a206661726d207374617274656420616c72656164790000000000604482015260640161066b565b60075460005b81811015611aee57600060078281548110611ac357611ac361324a565b906000526020600020906008020190504381600201819055505080611ae7906131e2565b9050611aa6565b505043600a55565b60008060078481548110611b0c57611b0c61324a565b600091825260208083208784526008808352604080862073ffffffffffffffffffffffffffffffffffffffff8a811688529452808620949091029091016003810154815492517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf9190612f90565b9050836002015443118015611bf357508015155b15611c53576000611c08856002015443611968565b90506000611c2f60095461123b886001015461133d6006548761298890919063ffffffff16565b9050611c4e611c478461123b8464e8d4a51000612988565b859061268c565b935050505b6000611c838460010154611c7d64e8d4a5100061123b87896000015461298890919063ffffffff16565b906128a3565b9050611c9c84600201548261268c90919063ffffffff16565b98975050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260448201527f61746f7200000000000000000000000000000000000000000000000000000000606482015260840161066b565b8015611d5c57611d5c6116b4565b611d6461264c565b73ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360078581548110611dae57611dae61324a565b90600052602060002090600802016001015484604051611dd8929190918252602082015260400190565b60405180910390a2611e2382611e1d60078681548110611dfa57611dfa61324a565b9060005260206000209060080201600101546009546128a390919063ffffffff16565b9061268c565b6009819055508160078481548110611e3d57611e3d61324a565b906000526020600020906008020160010181905550505050565b60045473ffffffffffffffffffffffffffffffffffffffff16611e7861264c565b73ffffffffffffffffffffffffffffffffffffffff1614611ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f736574446576416464726573733a20464f5242494444454e0000000000000000604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff8116611f72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f736574446576416464726573733a205a45524f00000000000000000000000000604482015260640161066b565b611f7a61264c565b6004546040805173ffffffffffffffffffffffffffffffffffffffff9283168152848316602082015292909116917fd36d63f6c513a911d7912853de740af476b0fbb569aa769e1a4f5bfa37a325c4910160405180910390a2600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152812060078054839190869081106120605761206061324a565b9060005260206000209060080201905080600701548260040154612084919061310f565b95945050505050565b600260015414156120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066b565b6002600155600a54431015612191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f456d6265725661756c743a2063616e6e6f74206465706f736974206265666f7260448201527f65206661726d696e672073746172740000000000000000000000000000000000606482015260840161066b565b6000600783815481106121a6576121a661324a565b9060005260206000209060080201905060006008600085815260200190815260200160002060006121d561264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061221a846112ae565b61222384612698565b82156124695781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561229257600080fd5b505afa1580156122a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ca9190612f90565b90506122f76122d761264c565b845473ffffffffffffffffffffffffffffffffffffffff16903087612a15565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561236057600080fd5b505afa158015612374573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123989190612f90565b90506123a481836128a3565b600485015490955061ffff161561240e5760048401546000906123d4906127109061123b90899061ffff16612988565b60055486549192506124009173ffffffffffffffffffffffffffffffffffffffff9081169116836128af565b61240a86826128a3565b9550505b825461241a908661268c565b8355600684015461242b908661268c565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff9081169116141561246657600c54612462908661268c565b600c555b50505b600382015481546124849164e8d4a510009161123b91612988565b60018201554260048201558361249861264c565b73ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161129c91815260200190565b6124e761264c565b73ffffffffffffffffffffffffffffffffffffffff1661251c60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b73ffffffffffffffffffffffffffffffffffffffff811661263c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b612645816129a0565b50565b3390565b6000612657336114c0565b1561268757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b6000611974828461310f565b6000600782815481106126ad576126ad61324a565b9060005260206000209060080201905060006008600084815260200190815260200160002060006126dc61264c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060030154600014801561272e5750600a544310155b1561274957600582015461274390429061268c565b60038201555b60006127778260010154611c7d64e8d4a5100061123b8760030154876000015461298890919063ffffffff16565b90506127858461037661264c565b1561281457600081118061279d575060008260020154115b1561280f5760006127bb83600201548361268c90919063ffffffff16565b90506127d68360020154600b546128a390919063ffffffff16565b600b5560006002840155426004840181905560058501546127f7919061268c565b600384015561280d61280761264c565b82612a73565b505b61289d565b801561289d576002820154612829908261268c565b6002830155426004830155600b54612841908261268c565b600b558361284d61264c565b73ffffffffffffffffffffffffffffffffffffffff167fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c18360405161289491815260200190565b60405180910390a35b50505050565b6000611974828461319f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526129839084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612ce5565b505050565b60006119748284613162565b60006119748284613127565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201526064810182905261289d9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612901565b600c546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612adf57600080fd5b505afa158015612af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b179190612f90565b11156116db57600c546002546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092612bca92909173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015612b9257600080fd5b505afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d9190612f90565b9050808210612c80576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b158015612c4857600080fd5b505af1158015612c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289d9190612f5a565b8115612983576002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb90604401612c2e565b6000612d47826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612df19092919063ffffffff16565b8051909150156129835780806020019051810190612d659190612f5a565b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161066b565b6060610af9848460008585843b612e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161066b565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e8d91906130a2565b60006040518083038185875af1925050503d8060008114612eca576040519150601f19603f3d011682016040523d82523d6000602084013e612ecf565b606091505b5091509150612edf828286612eea565b979650505050505050565b60608315612ef9575081611974565b825115612f095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066b91906130be565b600060208284031215612f4f57600080fd5b813561197481613279565b600060208284031215612f6c57600080fd5b81516119748161329b565b600060208284031215612f8957600080fd5b5035919050565b600060208284031215612fa257600080fd5b5051919050565b60008060408385031215612fbc57600080fd5b823591506020830135612fce81613279565b809150509250929050565b60008060008060008060c08789031215612ff257600080fd5b86359550602087013561300481613279565b9450604087013561ffff8116811461301b57600080fd5b9350606087013592506080870135915060a08701356130398161329b565b809150509295509295509295565b6000806040838503121561305a57600080fd5b50508035926020909101359150565b60008060006060848603121561307e57600080fd5b833592506020840135915060408401356130978161329b565b809150509250925092565b600082516130b48184602087016131b6565b9190910192915050565b60208152600082518060208401526130dd8160408501602087016131b6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156131225761312261321b565b500190565b60008261315d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561319a5761319a61321b565b500290565b6000828210156131b1576131b161321b565b500390565b60005b838110156131d15781810151838201526020016131b9565b8381111561289d5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132145761321461321b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461264557600080fd5b801515811461264557600080fdfea26469706673582212207dc5611a2fb5fc7e9275fc2459a49ad85d99823e7cc290c1204308ea6bbe435064736f6c63430008070033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x25C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x578BB42D GT PUSH2 0x145 JUMPI DUP1 PUSH4 0xAFBCFEA1 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD0D41FE1 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDE73149D GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDE73149D EQ PUSH2 0x599 JUMPI DUP1 PUSH4 0xE2BBB158 EQ PUSH2 0x5A3 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD0D41FE1 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xD1593BC8 EQ PUSH2 0x586 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFBCFEA1 EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0xBC83EE22 EQ PUSH2 0x544 JUMPI DUP1 PUSH4 0xBDE4AECA EQ PUSH2 0x557 JUMPI DUP1 PUSH4 0xC9E11852 EQ PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8705FCD4 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0x8DBB1E3A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0x8DBB1E3A EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0xA8C95DC0 EQ PUSH2 0x52F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8705FCD4 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x578BB42D EQ PUSH2 0x447 JUMPI DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x457 JUMPI DUP1 PUSH4 0x812C64F1 EQ PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x330AE003 GT PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x474FA630 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x51EB05A6 GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x570CA735 EQ PUSH2 0x416 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x434 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x474FA630 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x48CD4CB1 EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x330AE003 EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x3AD10EF6 EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0x41275358 EQ PUSH2 0x3BE JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17CAF6F1 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x29605E77 GT PUSH2 0x214 JUMPI DUP1 PUSH4 0x29605E77 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x2A22BC43 EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x2E6C998D EQ PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x1F1B9A7C EQ PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x81E3EDA EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0x8383640 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0xBA84CD2 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x295 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x280 PUSH2 0x5C9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x280 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST PUSH2 0x2A8 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP10 AND DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0xFFFF AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x265 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x8DD JUMP JUMPDEST PUSH2 0x265 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH2 0x37B PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0xAB4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FD9 JUMP JUMPDEST PUSH2 0xB01 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x327 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x265 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH2 0x265 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F77 JUMP JUMPDEST PUSH2 0x12AE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x327 JUMP JUMPDEST PUSH2 0x37B PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x14C0 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x1504 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x16DF JUMP JUMPDEST PUSH2 0x468 PUSH2 0x3E8 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x26F JUMP JUMPDEST PUSH2 0x280 PUSH2 0x489 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x17A5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x327 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0x1968 JUMP JUMPDEST PUSH2 0x507 PUSH2 0x4CD CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x26F JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x37B SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x197B JUMP JUMPDEST PUSH2 0x265 PUSH2 0x552 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0x1AF6 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x3069 JUMP JUMPDEST PUSH2 0x1CA8 JUMP JUMPDEST PUSH2 0x265 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x1E57 JUMP JUMPDEST PUSH2 0x265 PUSH2 0x594 CALLDATASIZE PUSH1 0x4 PUSH2 0x2FA9 JUMP JUMPDEST PUSH2 0x201A JUMP JUMPDEST PUSH2 0x265 PUSH3 0x127500 DUP2 JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5B1 CALLDATASIZE PUSH1 0x4 PUSH2 0x3047 JUMP JUMPDEST PUSH2 0x208D JUMP JUMPDEST PUSH2 0x280 PUSH2 0x5C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F3D JUMP JUMPDEST PUSH2 0x24DF JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A206D657461207472616E73616374696F6E73206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520616C72656164792064697361626C65640000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE PUSH2 0x736 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96BE170CCC67847E55535E7D8334B2AFEDD95805BAEDC160005ADDB91447450 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x820 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x828 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0xEEDC6338C9C1AD8F3CD6C90DD09DBE98DBD57E610D3E59A17996D07ACB0D9511 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x7 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x8 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD PUSH1 0x5 DUP7 ADD SLOAD PUSH1 0x6 DUP8 ADD SLOAD PUSH1 0x7 SWAP1 SWAP8 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP7 AND SWAP8 POP SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 PUSH2 0xFFFF SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 DUP9 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA26 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E736665724F70657261746F723A206E6577206F70657261746F722069 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7320746865207A65726F20616464726573730000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x74DA04524D50C64947F5DD5381EF1A4DCA5CBA8ED1D816243F9E48AA0B5617ED SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0xA SLOAD NUMBER LT DUP1 ISZERO SWAP1 PUSH2 0xAF9 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xB09 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3E PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0xFFFF DUP6 AND GT ISZERO PUSH2 0xC2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4164643A206465706F7369742066656520746F6F206869676800000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH3 0x127500 DUP4 GT ISZERO PUSH2 0xC98 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4164643A20696E76616C6964206861727665737420696E74657276616C000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCA6 JUMPI PUSH2 0xCA6 PUSH2 0x16B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SLOAD NUMBER GT PUSH2 0xCB9 JUMPI PUSH1 0xA SLOAD PUSH2 0xCBB JUMP JUMPDEST NUMBER JUMPDEST PUSH1 0x9 SLOAD SWAP1 SWAP2 POP PUSH2 0xCCB SWAP1 DUP9 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP9 DUP10 MSTORE SWAP1 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP2 DUP2 MSTORE PUSH2 0xFFFF SWAP8 DUP9 AND PUSH1 0x80 DUP5 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP5 ADD SWAP8 DUP9 MSTORE PUSH1 0xC0 DUP5 ADD DUP4 DUP2 MSTORE PUSH1 0xE0 DUP6 ADD SWAP8 DUP9 MSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP5 MSTORE SWAP4 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C688 PUSH1 0x8 SWAP1 SWAP5 MUL SWAP4 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP2 SWAP1 SWAP12 AND OR SWAP1 SWAP10 SSTORE SWAP9 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C689 DUP3 ADD SSTORE SWAP2 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68A DUP4 ADD SSTORE SWAP7 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68B DUP3 ADD SSTORE SWAP5 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68C DUP7 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND SWAP2 SWAP1 SWAP6 AND OR SWAP1 SWAP4 SSTORE SWAP1 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68D DUP5 ADD SSTORE SWAP3 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68E DUP4 ADD SSTORE POP SWAP1 MLOAD PUSH32 0xA66CC928B5EDB82AF9BD49922954155AB7B0942694BEA4CE44661D9A8736C68F SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xF34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xF51 JUMPI PUSH2 0xF51 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0xF80 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SLOAD LT ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A207573657220616D6F756E74206973206E6F7420656E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7567680000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP3 DUP3 PUSH1 0x6 ADD SLOAD LT ISZERO PUSH2 0x10E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A20706F6F6C20746F74616C206973206E6F7420656E6F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6768000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP2 PUSH1 0x7 ADD SLOAD DUP2 PUSH1 0x4 ADD SLOAD PUSH2 0x10F8 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST TIMESTAMP GT PUSH2 0x1186 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57697468647261773A20796F752063616E6E6F74207769746864726177207965 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7400000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x118F DUP5 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x1198 DUP5 PUSH2 0x2698 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x1220 JUMPI DUP1 SLOAD PUSH2 0x11AA SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST DUP2 SSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH2 0x11BB SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x6 DUP4 ADD SSTORE PUSH1 0x2 SLOAD DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x11F6 JUMPI PUSH1 0xC SLOAD PUSH2 0x11F2 SWAP1 DUP5 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0xC SSTORE JUMPDEST PUSH2 0x1220 PUSH2 0x1201 PUSH2 0x264C JUMP JUMPDEST DUP4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP6 PUSH2 0x28AF JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH2 0x1241 SWAP2 PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x123B SWAP2 PUSH2 0x2988 JUMP JUMPDEST SWAP1 PUSH2 0x2994 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE DUP4 PUSH2 0x1255 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 DUP6 PUSH1 0x40 MLOAD PUSH2 0x129C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 DUP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x12C3 JUMPI PUSH2 0x12C3 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD NUMBER GT PUSH2 0x12E2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 ADD SLOAD DUP1 ISZERO DUP1 PUSH2 0x12F6 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1306 JUMPI POP NUMBER PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1316 DUP4 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x1968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1343 PUSH1 0x9 SLOAD PUSH2 0x123B DUP7 PUSH1 0x1 ADD SLOAD PUSH2 0x133D PUSH1 0x6 SLOAD DUP8 PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x4 SLOAD SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 PUSH4 0x40C10F19 SWAP2 AND PUSH2 0x1377 DUP5 PUSH1 0xA PUSH2 0x2994 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x40C10F1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP3 POP PUSH4 0x40C10F19 SWAP2 POP PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x146C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1480 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x6 DUP6 ADD SLOAD PUSH2 0x14AB SWAP2 POP PUSH2 0x14A0 SWAP1 PUSH2 0x123B DUP5 PUSH5 0xE8D4A51000 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x3 DUP7 ADD SLOAD SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP6 ADD SSTORE POP POP NUMBER PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND DUP1 ISZERO PUSH2 0x14FE JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH20 0xD998DDA948C62A4FECA7355E46D6B801A1AEDD6 EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x15AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x163D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A206D657461207472616E73616374696F6E73206172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520616C726561647920656E61626C6564000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1670 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x92E4C08D47B71E8DC051232B8E475EC296489A67A4BA5CCA88FF20FB6AC499E6 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16CB DUP2 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x16D4 DUP2 PUSH2 0x31E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x16BA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16E7 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x171C PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1799 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x17A3 PUSH1 0x0 PUSH2 0x29A0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x17C6 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1843 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574466565416464726573733A20464F5242494444454E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x18C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574466565416464726573733A205A45524F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x18C8 PUSH2 0x264C JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE DUP5 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0x6690A53895B5691C039238B384BD857E65C42ADCC727775381E02CB90A122613 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x5 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x28A3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1983 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19B8 PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0xA SLOAD NUMBER LT PUSH2 0x1AA0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4572726F723A206661726D207374617274656420616C72656164790000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AEE JUMPI PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1AC3 JUMPI PUSH2 0x1AC3 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP NUMBER DUP2 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP POP DUP1 PUSH2 0x1AE7 SWAP1 PUSH2 0x31E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1AA6 JUMP JUMPDEST POP POP NUMBER PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1B0C JUMPI PUSH2 0x1B0C PUSH2 0x324A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP8 DUP5 MSTORE PUSH1 0x8 DUP1 DUP4 MSTORE PUSH1 0x40 DUP1 DUP7 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP2 AND DUP9 MSTORE SWAP5 MSTORE DUP1 DUP7 KECCAK256 SWAP5 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD PUSH1 0x3 DUP2 ADD SLOAD DUP2 SLOAD SWAP3 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP7 POP SWAP4 SWAP5 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BBB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BDF SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x2 ADD SLOAD NUMBER GT DUP1 ISZERO PUSH2 0x1BF3 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1C53 JUMPI PUSH1 0x0 PUSH2 0x1C08 DUP6 PUSH1 0x2 ADD SLOAD NUMBER PUSH2 0x1968 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1C2F PUSH1 0x9 SLOAD PUSH2 0x123B DUP9 PUSH1 0x1 ADD SLOAD PUSH2 0x133D PUSH1 0x6 SLOAD DUP8 PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x1C4E PUSH2 0x1C47 DUP5 PUSH2 0x123B DUP5 PUSH5 0xE8D4A51000 PUSH2 0x2988 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x268C JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST PUSH1 0x0 PUSH2 0x1C83 DUP5 PUSH1 0x1 ADD SLOAD PUSH2 0x1C7D PUSH5 0xE8D4A51000 PUSH2 0x123B DUP8 DUP10 PUSH1 0x0 ADD SLOAD PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x28A3 JUMP JUMPDEST SWAP1 POP PUSH2 0x1C9C DUP5 PUSH1 0x2 ADD SLOAD DUP3 PUSH2 0x268C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1D4E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4F70657261746F723A2063616C6C6572206973206E6F7420746865206F706572 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61746F7200000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D5C JUMPI PUSH2 0x1D5C PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x1D64 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x802633C8D26237616D81BDAC01BC40FCDF36E098832601582EC19D7E431C5EF3 PUSH1 0x7 DUP6 DUP2 SLOAD DUP2 LT PUSH2 0x1DAE JUMPI PUSH2 0x1DAE PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x1DD8 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0x1E23 DUP3 PUSH2 0x1E1D PUSH1 0x7 DUP7 DUP2 SLOAD DUP2 LT PUSH2 0x1DFA JUMPI PUSH2 0x1DFA PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x9 SLOAD PUSH2 0x28A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x9 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x7 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1E3D JUMPI PUSH2 0x1E3D PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1E78 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1EF5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574446576416464726573733A20464F5242494444454E0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1F72 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736574446576416464726573733A205A45524F00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x1F7A PUSH2 0x264C JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE DUP5 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH32 0xD36D63F6C513A911D7912853DE740AF476B0FBB569AA769E1A4F5BFA37A325C4 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP4 SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x2060 JUMPI PUSH2 0x2060 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP DUP1 PUSH1 0x7 ADD SLOAD DUP3 PUSH1 0x4 ADD SLOAD PUSH2 0x2084 SWAP2 SWAP1 PUSH2 0x310F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x20FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0xA SLOAD NUMBER LT ISZERO PUSH2 0x2191 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x456D6265725661756C743A2063616E6E6F74206465706F736974206265666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65206661726D696E672073746172740000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x21A6 JUMPI PUSH2 0x21A6 PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x21D5 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x221A DUP5 PUSH2 0x12AE JUMP JUMPDEST PUSH2 0x2223 DUP5 PUSH2 0x2698 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x2469 JUMPI DUP2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CA SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP PUSH2 0x22F7 PUSH2 0x22D7 PUSH2 0x264C JUMP JUMPDEST DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 ADDRESS DUP8 PUSH2 0x2A15 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2374 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2398 SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP PUSH2 0x23A4 DUP2 DUP4 PUSH2 0x28A3 JUMP JUMPDEST PUSH1 0x4 DUP6 ADD SLOAD SWAP1 SWAP6 POP PUSH2 0xFFFF AND ISZERO PUSH2 0x240E JUMPI PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x0 SWAP1 PUSH2 0x23D4 SWAP1 PUSH2 0x2710 SWAP1 PUSH2 0x123B SWAP1 DUP10 SWAP1 PUSH2 0xFFFF AND PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP7 SLOAD SWAP2 SWAP3 POP PUSH2 0x2400 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 0x28AF JUMP JUMPDEST PUSH2 0x240A DUP7 DUP3 PUSH2 0x28A3 JUMP JUMPDEST SWAP6 POP POP JUMPDEST DUP3 SLOAD PUSH2 0x241A SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST DUP4 SSTORE PUSH1 0x6 DUP5 ADD SLOAD PUSH2 0x242B SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x6 DUP6 ADD SSTORE PUSH1 0x2 SLOAD DUP5 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x2466 JUMPI PUSH1 0xC SLOAD PUSH2 0x2462 SWAP1 DUP7 PUSH2 0x268C JUMP JUMPDEST PUSH1 0xC SSTORE JUMPDEST POP POP JUMPDEST PUSH1 0x3 DUP3 ADD SLOAD DUP2 SLOAD PUSH2 0x2484 SWAP2 PUSH5 0xE8D4A51000 SWAP2 PUSH2 0x123B SWAP2 PUSH2 0x2988 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE DUP4 PUSH2 0x2498 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 DUP6 PUSH1 0x40 MLOAD PUSH2 0x129C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x24E7 PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x251C PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2599 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x263C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x2645 DUP2 PUSH2 0x29A0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2657 CALLER PUSH2 0x14C0 JUMP JUMPDEST ISZERO PUSH2 0x2687 JUMPI POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x310F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x26AD JUMPI PUSH2 0x26AD PUSH2 0x324A JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x8 MUL ADD SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x26DC PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD SLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x272E JUMPI POP PUSH1 0xA SLOAD NUMBER LT ISZERO JUMPDEST ISZERO PUSH2 0x2749 JUMPI PUSH1 0x5 DUP3 ADD SLOAD PUSH2 0x2743 SWAP1 TIMESTAMP SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x0 PUSH2 0x2777 DUP3 PUSH1 0x1 ADD SLOAD PUSH2 0x1C7D PUSH5 0xE8D4A51000 PUSH2 0x123B DUP8 PUSH1 0x3 ADD SLOAD DUP8 PUSH1 0x0 ADD SLOAD PUSH2 0x2988 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2785 DUP5 PUSH2 0x376 PUSH2 0x264C JUMP JUMPDEST ISZERO PUSH2 0x2814 JUMPI PUSH1 0x0 DUP2 GT DUP1 PUSH2 0x279D JUMPI POP PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x280F JUMPI PUSH1 0x0 PUSH2 0x27BB DUP4 PUSH1 0x2 ADD SLOAD DUP4 PUSH2 0x268C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x27D6 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0xB SLOAD PUSH2 0x28A3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0x0 PUSH1 0x2 DUP5 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP5 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP6 ADD SLOAD PUSH2 0x27F7 SWAP2 SWAP1 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x280D PUSH2 0x2807 PUSH2 0x264C JUMP JUMPDEST DUP3 PUSH2 0x2A73 JUMP JUMPDEST POP JUMPDEST PUSH2 0x289D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x289D JUMPI PUSH1 0x2 DUP3 ADD SLOAD PUSH2 0x2829 SWAP1 DUP3 PUSH2 0x268C JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SSTORE TIMESTAMP PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x2841 SWAP1 DUP3 PUSH2 0x268C JUMP JUMPDEST PUSH1 0xB SSTORE DUP4 PUSH2 0x284D PUSH2 0x264C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xEE470483107F579A55C754FA00613C45A9A3B617A418B39CB0BE97E5381BA7C1 DUP4 PUSH1 0x40 MLOAD PUSH2 0x2894 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x319F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x2983 SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x2CE5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x3162 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1974 DUP3 DUP5 PUSH2 0x3127 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x289D SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x2901 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B17 SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST GT ISZERO PUSH2 0x16DB JUMPI PUSH1 0xC SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 PUSH2 0x2BCA SWAP3 SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2BA6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C7D SWAP2 SWAP1 PUSH2 0x2F90 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x2C80 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x289D SWAP2 SWAP1 PUSH2 0x2F5A JUMP JUMPDEST DUP2 ISZERO PUSH2 0x2983 JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D47 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2DF1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2983 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2D65 SWAP2 SWAP1 PUSH2 0x2F5A JUMP JUMPDEST PUSH2 0x2983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAF9 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 DUP5 EXTCODESIZE PUSH2 0x2E64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x2E8D SWAP2 SWAP1 PUSH2 0x30A2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2ECA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2ECF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2EDF DUP3 DUP3 DUP7 PUSH2 0x2EEA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2EF9 JUMPI POP DUP2 PUSH2 0x1974 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x2F09 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x30BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1974 DUP2 PUSH2 0x3279 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1974 DUP2 PUSH2 0x329B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2FCE DUP2 PUSH2 0x3279 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x3004 DUP2 PUSH2 0x3279 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x301B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD PUSH2 0x3039 DUP2 PUSH2 0x329B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x305A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x3097 DUP2 PUSH2 0x329B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x30B4 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x31B6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x30DD DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x31B6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3122 JUMPI PUSH2 0x3122 PUSH2 0x321B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x315D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x319A JUMPI PUSH2 0x319A PUSH2 0x321B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x31B1 JUMPI PUSH2 0x31B1 PUSH2 0x321B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x31D1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x31B9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x289D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3214 JUMPI PUSH2 0x3214 PUSH2 0x321B JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2645 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xC5611A2FB5FC7E9275FC2459A49AD85D99823E7CC290C1204308EA6BBE43 POP PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "29275:17742:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35614:93;35685:8;:15;35614:93;;;14213:25:1;;;14201:2;14186:18;35614:93:0;;;;;;;;46760:255;;;:::i;:::-;;45676:224;;;;;;:::i;:::-;;:::i;31262:26::-;;;;;;:::i;:::-;;:::i;:::-;;;;4743:42:1;4731:55;;;4713:74;;4818:2;4803:18;;4796:34;;;;4846:18;;;4839:34;;;;4904:2;4889:18;;4882:34;;;;4965:6;4953:19;4947:3;4932:19;;4925:48;5004:3;4989:19;;4982:35;5048:3;5033:19;;5026:35;5092:3;5077:19;;5070:35;4700:3;4685:19;31262:26:0;4359:752:1;31501:34:0;;;;;;30626:24;;;;;;;;;;;;3075:42:1;3063:55;;;3045:74;;3033:2;3018:18;30626:24:0;2899:226:1;34895:297:0;;;;;;:::i;:::-;;:::i;31755:36::-;;;;;;38508:277;;;;;;:::i;:::-;;:::i;:::-;;;4332:14:1;;4325:22;4307:41;;4295:2;4280:18;38508:277:0;4167:187:1;35916:1121:0;;;;;;:::i;:::-;;:::i;30873:25::-;;;;;;;;;30932;;;;;;;;;41439:1255;;;;;;:::i;:::-;;:::i;31655:35::-;;;;;;31592:25;;;;;;39113:845;;;;;;:::i;:::-;;:::i;34586:83::-;34653:9;;;;34586:83;;33643:191;;;;;;:::i;:::-;;:::i;46457:252::-;;;:::i;38865:175::-;;;:::i;16765:92::-;;;:::i;31176:54::-;;31226:4;31176:54;;;;;14048:6:1;14036:19;;;14018:38;;14006:2;13991:18;31176:54:0;13874:188:1;45241:305:0;;;;;;:::i;:::-;;:::i;16133:85::-;16179:7;16205:6;;;16133:85;;34742:147;;;;;;:::i;:::-;;:::i;31343:64::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14761:25:1;;;14817:2;14802:18;;14795:34;;;;14845:18;;;14838:34;;;;14903:2;14888:18;;14881:34;14946:3;14931:19;;14924:35;14748:3;14733:19;31343:64:0;14502:463:1;31852:35:0;;;;;;;;;35243:365;;;:::i;37098:996::-;;;;;;:::i;:::-;;:::i;45906:501::-;;;;;;:::i;:::-;;:::i;31002:28::-;;;;;;44930:305;;;;;;:::i;:::-;;:::i;38165:282::-;;;;;;:::i;:::-;;:::i;31074:58::-;;31125:7;31074:58;;40024:1386;;;;;;:::i;:::-;;:::i;17006:189::-;;;;;;:::i;:::-;;:::i;46760:255::-;33068:9;;:23;:9;33081:10;33068:23;33047:106;;;;;;;13671:2:1;33047:106:0;;;13653:21:1;13710:2;13690:18;;;13683:30;13749:34;13729:18;;;13722:62;13820:6;13800:18;;;13793:34;13844:19;;33047:106:0;;;;;;;;;46838:15:::1;::::0;::::1;;46817:112;;;::::0;::::1;::::0;;9817:2:1;46817:112:0::1;::::0;::::1;9799:21:1::0;9856:2;9836:18;;;9829:30;9895:34;9875:18;;;9868:62;9966:20;9946:18;;;9939:48;10004:19;;46817:112:0::1;9615:414:1::0;46817:112:0::1;46940:15;:23:::0;;;::::1;::::0;;46995:12:::1;:10;:12::i;:::-;46978:30;;;;;;;;;;;;46760:255::o:0;45676:224::-;33068:9;;:23;:9;33081:10;33068:23;33047:106;;;;;;;13671:2:1;33047:106:0;;;13653:21:1;13710:2;13690:18;;;13683:30;13749:34;13729:18;;;13722:62;13820:6;13800:18;;;13793:34;13844:19;;33047:106:0;13469:400:1;33047:106:0;45758:17:::1;:15;:17::i;:::-;45823:13;::::0;45791:62:::1;::::0;;14423:25:1;;;14479:2;14464:18;;14457:34;;;45811:10:0::1;::::0;45791:62:::1;::::0;14396:18:1;45791:62:0::1;;;;;;;45863:13;:30:::0;45676:224::o;31262:26::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;31262:26:0;;;;;;;;;;;;;;:::o;34895:297::-;33068:9;;:23;:9;33081:10;33068:23;33047:106;;;;;;;13671:2:1;33047:106:0;;;13653:21:1;13710:2;13690:18;;;13683:30;13749:34;13729:18;;;13722:62;13820:6;13800:18;;;13793:34;13844:19;;33047:106:0;13469:400:1;33047:106:0;34993:25:::1;::::0;::::1;34972:122;;;::::0;::::1;::::0;;12481:2:1;34972:122:0::1;::::0;::::1;12463:21:1::0;12520:2;12500:18;;;12493:30;12559:34;12539:18;;;12532:62;12630:20;12610:18;;;12603:48;12668:19;;34972:122:0::1;12279:414:1::0;34972:122:0::1;35129:9;::::0;35109:43:::1;::::0;::::1;::::0;;::::1;::::0;35129:9:::1;::::0;35109:43:::1;::::0;35129:9:::1;::::0;35109:43:::1;35162:9;:23:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;34895:297::o;38508:277::-;38602:4;38646:14;;;:8;:14;;;;;;;;:21;;;;;;;;;;38712:10;;38696:12;:26;;;;:82;;;38757:4;:21;;;38738:15;:40;;38696:82;38677:101;38508:277;-1:-1:-1;;;;38508:277:0:o;35916:1121::-;16356:12;:10;:12::i;:::-;16345:23;;:7;16179;16205:6;;;;16133:85;16345:7;:23;;;16337:68;;;;;;;9456:2:1;16337:68:0;;;9438:21:1;;;9475:18;;;9468:30;9534:34;9514:18;;;9507:62;9586:18;;16337:68:0;9254:356:1;16337:68:0;31226:4:::1;36160:41;::::0;::::1;;;36139:113;;;::::0;::::1;::::0;;6419:2:1;36139:113:0::1;::::0;::::1;6401:21:1::0;6458:2;6438:18;;;6431:30;6497:27;6477:18;;;6470:55;6542:18;;36139:113:0::1;6217:349:1::0;36139:113:0::1;31125:7;36283:16;:44;;36262:120;;;::::0;::::1;::::0;;11412:2:1;36262:120:0::1;::::0;::::1;11394:21:1::0;11451:2;11431:18;;;11424:30;11490:31;11470:18;;;11463:59;11539:18;;36262:120:0::1;11210:353:1::0;36262:120:0::1;36396:11;36392:59;;;36423:17;:15;:17::i;:::-;36460:23;36501:10;;36486:12;:25;:77;;36553:10;;36486:77;;;36526:12;36486:77;36591:15;::::0;36460:103;;-1:-1:-1;36591:32:0::1;::::0;36611:11;36591:19:::1;:32::i;:::-;36573:15;:50:::0;36660:360:::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;-1:-1:-1;36660:360:0;;;;;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;;;;;;;;36633:8:::1;:397:::0;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;::::1;;::::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::1;::::0;;;::::1;;::::0;;;;;;;;;;;;;;;-1:-1:-1;36633:397:0;;;;;;;35916:1121::o;41439:1255::-;19090:1;19669:7;;:19;;19661:63;;;;;;;13311:2:1;19661:63:0;;;13293:21:1;13350:2;13330:18;;;13323:30;13389:33;13369:18;;;13362:61;13440:18;;19661:63:0;13109:355:1;19661:63:0;19090:1;19799:7;:18;;;;41518:21:::1;41542:8;41551:4;41542:14;;;;;;;;:::i;:::-;;;;;;;;;;;41518:38;;41566:21;41590:8;:14;41599:4;41590:14;;;;;;;;;;;:28;41605:12;:10;:12::i;:::-;41590:28;;;;;;;;;;;;;;;41566:52;;41724:7;41709:4;:11;;;:22;;41701:70;;;::::0;::::1;::::0;;11008:2:1;41701:70:0::1;::::0;::::1;10990:21:1::0;11047:2;11027:18;;;11020:30;11086:34;11066:18;;;11059:62;11157:5;11137:18;;;11130:33;11180:19;;41701:70:0::1;10806:399:1::0;41701:70:0::1;41857:7;41841:4;:12;;;:23;;41833:70;;;::::0;::::1;::::0;;6016:2:1;41833:70:0::1;::::0;::::1;5998:21:1::0;6055:2;6035:18;;;6028:30;6094:34;6074:18;;;6067:62;6165:4;6145:18;;;6138:32;6187:19;;41833:70:0::1;5814:398:1::0;41833:70:0::1;42019:4;:19;;;41996:4;:20;;;:42;;;;:::i;:::-;41978:15;:60;41957:140;;;::::0;::::1;::::0;;8229:2:1;41957:140:0::1;::::0;::::1;8211:21:1::0;8268:2;8248:18;;;8241:30;8307:34;8287:18;;;8280:62;8378:3;8358:18;;;8351:31;8399:19;;41957:140:0::1;8027:397:1::0;41957:140:0::1;42108:16;42119:4;42108:10;:16::i;:::-;42135:29;42159:4;42135:23;:29::i;:::-;42179:11:::0;;42175:337:::1;;42220:11:::0;;:24:::1;::::0;42236:7;42220:15:::1;:24::i;:::-;42206:38:::0;;42273:12:::1;::::0;::::1;::::0;:25:::1;::::0;42290:7;42273:16:::1;:25::i;:::-;42258:12;::::0;::::1;:40:::0;42349:5:::1;::::0;42324:12;;42349:5:::1;42324:12:::0;;::::1;42349:5:::0;::::1;42316:39;42312:128;;;42395:17;::::0;:30:::1;::::0;42417:7;42395:21:::1;:30::i;:::-;42375:17;:50:::0;42312:128:::1;42453:48;42479:12;:10;:12::i;:::-;42453::::0;;::::1;;::::0;42493:7;42453:25:::1;:48::i;:::-;42555:21;::::0;::::1;::::0;42539:11;;:48:::1;::::0;42582:4:::1;::::0;42539:38:::1;::::0;:15:::1;:38::i;:::-;:42:::0;::::1;:48::i;:::-;42521:15;::::0;::::1;:66:::0;42620:15:::1;42597:20;::::0;::::1;:38:::0;42673:4;42659:12:::1;:10;:12::i;:::-;42650:37;;;42679:7;42650:37;;;;14213:25:1::0;;14201:2;14186:18;;14067:177;42650:37:0::1;;;;;;;;-1:-1:-1::0;;19047:1:0;19972:22;;-1:-1:-1;;41439:1255:0:o;39113:845::-;39164:21;39188:8;39197:4;39188:14;;;;;;;;:::i;:::-;;;;;;;;;;;39164:38;;39232:4;:20;;;39216:12;:36;39212:73;;39268:7;39113:845;:::o;39212:73::-;39314:12;;;;39340:13;;;:37;;-1:-1:-1;39357:15:0;;;;:20;39340:37;39336:123;;;-1:-1:-1;39416:12:0;39393:20;;;;:35;-1:-1:-1;39113:845:0:o;39336:123::-;39469:18;39490:49;39504:4;:20;;;39526:12;39490:13;:49::i;:::-;39469:70;;39549:19;39571:110;39665:15;;39571:76;39631:4;:15;;;39571:42;39599:13;;39571:10;:27;;:42;;;;:::i;:::-;:59;;:76::i;:110::-;39692:5;;39703:10;;39549:132;;-1:-1:-1;39692:5:0;;;;;:10;;39703;39715:19;39549:132;39731:2;39715:15;:19::i;:::-;39692:43;;;;;;;;;;4069:42:1;4057:55;;;39692:43:0;;;4039:74:1;4129:18;;;4122:34;4012:18;;39692:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;39745:5:0;;:38;;;;;39764:4;39745:38;;;4039:74:1;4129:18;;;4122:34;;;39745:5:0;;;;;-1:-1:-1;39745:10:0;;-1:-1:-1;4012:18:1;;39745:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;39883:12:0;;;;39818:88;;-1:-1:-1;39857:39:0;;:21;:11;39873:4;39857:15;:21::i;:39::-;39818:21;;;;;:25;:88::i;:::-;39794:21;;;:112;-1:-1:-1;;39939:12:0;39916:20;;;;:35;;;;-1:-1:-1;;39113:845:0:o;33643:191::-;33778:15;;33751:4;;33778:15;;:49;;;;-1:-1:-1;33797:30:0;;;29374:42;33797:30;33778:49;33771:56;33643:191;-1:-1:-1;;33643:191:0:o;46457:252::-;33068:9;;:23;:9;33081:10;33068:23;33047:106;;;;;;;13671:2:1;33047:106:0;;;13653:21:1;13710:2;13690:18;;;13683:30;13749:34;13729:18;;;13722:62;13820:6;13800:18;;;13793:34;13844:19;;33047:106:0;13469:400:1;33047:106:0;46535:15:::1;::::0;::::1;;46534:16;46513:112;;;::::0;::::1;::::0;;9038:2:1;46513:112:0::1;::::0;::::1;9020:21:1::0;9077:2;9057:18;;;9050:30;9116:34;9096:18;;;9089:62;9187:19;9167:18;;;9160:47;9224:19;;46513:112:0::1;8836:413:1::0;46513:112:0::1;46636:15;:22:::0;;;::::1;46654:4;46636:22;::::0;;46689:12:::1;:10;:12::i;:::-;46673:29;;;;;;;;;;;;46457:252::o:0;38865:175::-;38926:8;:15;38909:14;38951:83;38979:6;38973:3;:12;38951:83;;;39008:15;39019:3;39008:10;:15::i;:::-;38987:5;;;:::i;:::-;;;38951:83;;;;38899:141;38865:175::o;16765:92::-;16356:12;:10;:12::i;:::-;16345:23;;:7;16179;16205:6;;;;16133:85;16345:7;:23;;;16337:68;;;;;;;9456:2:1;16337:68:0;;;9438:21:1;;;9475:18;;;9468:30;9534:34;9514:18;;;9507:62;9586:18;;16337:68:0;9254:356:1;16337:68:0;16829:21:::1;16847:1;16829:9;:21::i;:::-;16765:92::o:0;45241:305::-;45326:10;;;;45310:12;:10;:12::i;:::-;:26;;;45302:63;;;;;;;12128:2:1;45302:63:0;;;12110:21:1;12167:2;12147:18;;;12140:30;12206:26;12186:18;;;12179:54;12250:18;;45302:63:0;11926:348:1;45302:63:0;45383:25;;;45375:57;;;;;;;7881:2:1;45375:57:0;;;7863:21:1;7920:2;7900:18;;;7893:30;7959:21;7939:18;;;7932:49;7998:18;;45375:57:0;7679:343:1;45375:57:0;45466:12;:10;:12::i;:::-;45480:10;;45448:56;;;;45480:10;;;3365:34:1;;3435:15;;;3430:2;3415:18;;3408:43;45448:56:0;;;;;;;3277:18:1;45448:56:0;;;;;;;45515:10;:24;;;;;;;;;;;;;;;45241:305::o;34742:147::-;34838:7;34868:14;:3;34876:5;34868:7;:14::i;:::-;34861:21;34742:147;-1:-1:-1;;;34742:147:0:o;35243:365::-;16356:12;:10;:12::i;:::-;16345:23;;:7;16179;16205:6;;;;16133:85;16345:7;:23;;;16337:68;;;;;;;9456:2:1;16337:68:0;;;9438:21:1;;;9475:18;;;9468:30;9534:34;9514:18;;;9507:62;9586:18;;16337:68:0;9254:356:1;16337:68:0;35317:10:::1;;35302:12;:25;35294:65;;;::::0;::::1;::::0;;10236:2:1;35294:65:0::1;::::0;::::1;10218:21:1::0;10275:2;10255:18;;;10248:30;10314:29;10294:18;;;10287:57;10361:18;;35294:65:0::1;10034:351:1::0;35294:65:0::1;35387:8;:15:::0;35370:14:::1;35412:154;35440:6;35434:3;:12;35412:154;;;35469:21;35493:8;35502:3;35493:13;;;;;;;;:::i;:::-;;;;;;;;;;;35469:37;;35543:12;35520:4;:20;;:35;;;;35455:111;35448:5;;;;:::i;:::-;;;35412:154;;;-1:-1:-1::0;;35589:12:0::1;35576:10;:25:::0;35243:365::o;37098:996::-;37196:7;37219:21;37243:8;37252:4;37243:14;;;;;;;;:::i;:::-;;;;;;;;;37291;;;37243;37291;;;;;;;:21;;;;;;;;;;;37243:14;;;;;;;37349:21;;;;37399:12;;:37;;;;;37430:4;37399:37;;;3045:74:1;37243:14:0;;-1:-1:-1;37291:21:0;;37243:14;37399:12;;;;;:22;;3018:18:1;;37399:37:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;37380:56;;37466:4;:20;;;37451:12;:35;:52;;;;-1:-1:-1;37490:13:0;;;37451:52;37447:477;;;37519:18;37540:95;37571:4;:20;;;37609:12;37540:13;:95::i;:::-;37519:116;;37649:19;37671:122;37777:15;;37671:84;37739:4;:15;;;37671:46;37703:13;;37671:10;:31;;:46;;;;:::i;:122::-;37649:144;-1:-1:-1;37826:87:0;37864:35;37890:8;37864:21;37649:144;37880:4;37864:15;:21::i;:35::-;37826:16;;:20;:87::i;:::-;37807:106;;37505:419;;37447:477;37934:15;37952:86;38013:4;:15;;;37952:43;37990:4;37952:33;37968:16;37952:4;:11;;;:15;;:33;;;;:::i;:43::-;:47;;:86::i;:::-;37934:104;;38055:32;38067:4;:19;;;38055:7;:11;;:32;;;;:::i;:::-;38048:39;37098:996;-1:-1:-1;;;;;;;;37098:996:0:o;45906:501::-;33068:9;;:23;:9;33081:10;33068:23;33047:106;;;;;;;13671:2:1;33047:106:0;;;13653:21:1;13710:2;13690:18;;;13683:30;13749:34;13729:18;;;13722:62;13820:6;13800:18;;;13793:34;13844:19;;33047:106:0;13469:400:1;33047:106:0;46049:11:::1;46045:59;;;46076:17;:15;:17::i;:::-;46151:12;:10;:12::i;:::-;46119:118;;;46177:8;46186:4;46177:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;;46216:11;46119:118;;;;;;14423:25:1::0;;;14479:2;14464:18;;14457:34;14411:2;14396:18;;14249:248;46119:118:0::1;;;;;;;;46266:85;46330:11;46266:46;46286:8;46295:4;46286:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;;46266:15;;:19;;:46;;;;:::i;:::-;:50:::0;::::1;:85::i;:::-;46248:15;:103;;;;46389:11;46361:8;46370:4;46361:14;;;;;;;;:::i;:::-;;;;;;;;;;;:25;;:39;;;;45906:501:::0;;;:::o;44930:305::-;45015:10;;;;44999:12;:10;:12::i;:::-;:26;;;44991:63;;;;;;;6773:2:1;44991:63:0;;;6755:21:1;6812:2;6792:18;;;6785:30;6851:26;6831:18;;;6824:54;6895:18;;44991:63:0;6571:348:1;44991:63:0;45072:25;;;45064:57;;;;;;;7533:2:1;45064:57:0;;;7515:21:1;7572:2;7552:18;;;7545:30;7611:21;7591:18;;;7584:49;7650:18;;45064:57:0;7331:343:1;45064:57:0;45155:12;:10;:12::i;:::-;45169:10;;45137:56;;;;45169:10;;;3365:34:1;;3435:15;;;3430:2;3415:18;;3408:43;45137:56:0;;;;;;;3277:18:1;45137:56:0;;;;;;;45204:10;:24;;;;;;;;;;;;;;;44930:305::o;38165:282::-;38264:7;38311:14;;;:8;:14;;;;;;;;:21;;;;;;;;;;38366:8;:14;;38264:7;;38366:8;38320:4;;38366:14;;;;;;:::i;:::-;;;;;;;;;;;38342:38;;38421:4;:19;;;38398:4;:20;;;:42;;;;:::i;:::-;38391:49;38165:282;-1:-1:-1;;;;;38165:282:0:o;40024:1386::-;19090:1;19669:7;;:19;;19661:63;;;;;;;13311:2:1;19661:63:0;;;13293:21:1;13350:2;13330:18;;;13323:30;13389:33;13369:18;;;13362:61;13440:18;;19661:63:0;13109:355:1;19661:63:0;19090:1;19799:7;:18;40139:10:::1;::::0;40123:12:::1;:26;;40102:120;;;::::0;::::1;::::0;;10592:2:1;40102:120:0::1;::::0;::::1;10574:21:1::0;10631:2;10611:18;;;10604:30;10670:34;10650:18;;;10643:62;10741:17;10721:18;;;10714:45;10776:19;;40102:120:0::1;10390:411:1::0;40102:120:0::1;40233:21;40257:8;40266:4;40257:14;;;;;;;;:::i;:::-;;;;;;;;;;;40233:38;;40281:21;40305:8;:14;40314:4;40305:14;;;;;;;;;;;:28;40320:12;:10;:12::i;:::-;40305:28;;;;;;;;;;;;;;;40281:52;;40344:16;40355:4;40344:10;:16::i;:::-;40371:29;40395:4;40371:23;:29::i;:::-;40415:11:::0;;40411:818:::1;;40466:12:::0;;:37:::1;::::0;;;;40497:4:::1;40466:37;::::0;::::1;3045:74:1::0;40442:21:0::1;::::0;40466:12:::1;;::::0;:22:::1;::::0;3018:18:1;;40466:37:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;40442:61;;40517:67;40547:12;:10;:12::i;:::-;40517::::0;;::::1;;::::0;40569:4:::1;40576:7:::0;40517:29:::1;:67::i;:::-;40621:12:::0;;:37:::1;::::0;;;;40652:4:::1;40621:37;::::0;::::1;3045:74:1::0;40598:20:0::1;::::0;40621:12:::1;;::::0;:22:::1;::::0;3018:18:1;;40621:37:0::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;40598:60:::0;-1:-1:-1;40683:31:0::1;40598:60:::0;40700:13;40683:16:::1;:31::i;:::-;40733:17;::::0;::::1;::::0;40673:41;;-1:-1:-1;40733:17:0::1;;:21:::0;40729:241:::1;;40807:17;::::0;::::1;::::0;40774:18:::1;::::0;40795:41:::1;::::0;40830:5:::1;::::0;40795:30:::1;::::0;:7;;40807:17:::1;;40795:11;:30::i;:41::-;40880:10;::::0;40854:12;;40774:62;;-1:-1:-1;40854:49:0::1;::::0;40880:10:::1;40854:12:::0;;::::1;::::0;40880:10:::1;40774:62:::0;40854:25:::1;:49::i;:::-;40932:23;:7:::0;40944:10;40932:11:::1;:23::i;:::-;40922:33;;40756:214;40729:241;40998:11:::0;;:24:::1;::::0;41014:7;40998:15:::1;:24::i;:::-;40984:38:::0;;41051:12:::1;::::0;::::1;::::0;:25:::1;::::0;41068:7;41051:16:::1;:25::i;:::-;41036:12;::::0;::::1;:40:::0;41128:5:::1;::::0;41103:12;;41128:5:::1;41103:12:::0;;::::1;41128:5:::0;::::1;41095:39;41091:128;;;41174:17;::::0;:30:::1;::::0;41196:7;41174:21:::1;:30::i;:::-;41154:17;:50:::0;41091:128:::1;40428:801;;40411:818;41272:21;::::0;::::1;::::0;41256:11;;:48:::1;::::0;41299:4:::1;::::0;41256:38:::1;::::0;:15:::1;:38::i;:48::-;41238:15;::::0;::::1;:66:::0;41337:15:::1;41314:20;::::0;::::1;:38:::0;41389:4;41375:12:::1;:10;:12::i;:::-;41367:36;;;41395:7;41367:36;;;;14213:25:1::0;;14201:2;14186:18;;14067:177;17006:189:0;16356:12;:10;:12::i;:::-;16345:23;;:7;16179;16205:6;;;;16133:85;16345:7;:23;;;16337:68;;;;;;;9456:2:1;16337:68:0;;;9438:21:1;;;9475:18;;;9468:30;9534:34;9514:18;;;9507:62;9586:18;;16337:68:0;9254:356:1;16337:68:0;17094:22:::1;::::0;::::1;17086:73;;;::::0;::::1;::::0;;7126:2:1;17086:73:0::1;::::0;::::1;7108:21:1::0;7165:2;7145:18;;;7138:30;7204:34;7184:18;;;7177:62;7275:8;7255:18;;;7248:36;7301:19;;17086:73:0::1;6924:402:1::0;17086:73:0::1;17169:19;17179:8;17169:9;:19::i;:::-;17006:189:::0;:::o;14961:96::-;15040:10;;14961:96::o;33840:445::-;33942:14;33976:30;33995:10;33976:18;:30::i;:::-;33972:307;;;-1:-1:-1;34174:23:0;34178:14;34174:23;34161:37;34157:2;34153:46;33840:445;:::o;33972:307::-;-1:-1:-1;15040:10:0;;33840:445::o;22708:96::-;22766:7;22792:5;22796:1;22792;:5;:::i;42736:1413::-;42802:21;42826:8;42835:4;42826:14;;;;;;;;:::i;:::-;;;;;;;;;;;42802:38;;42850:21;42874:8;:14;42883:4;42874:14;;;;;;;;;;;:28;42889:12;:10;:12::i;:::-;42874:28;;;;;;;;;;;;;;;42850:52;;42917:4;:21;;;42942:1;42917:26;:56;;;;;42963:10;;42947:12;:26;;42917:56;42913:152;;;43033:20;;;;43013:41;;:15;;:19;:41::i;:::-;42989:21;;;:65;42913:152;43075:15;43093:91;43159:4;:15;;;43093:48;43136:4;43093:38;43109:4;:21;;;43093:4;:11;;;:15;;:38;;;;:::i;:91::-;43075:109;;43198:30;43209:4;43215:12;:10;:12::i;43198:30::-;43194:949;;;43258:1;43248:7;:11;:38;;;;43285:1;43263:4;:19;;;:23;43248:38;43244:603;;;43306:20;43329:32;43341:4;:19;;;43329:7;:11;;:32;;;;:::i;:::-;43306:55;;43435:83;43481:4;:19;;;43435:20;;:24;;:83;;;;:::i;:::-;43412:20;:106;43558:1;43536:19;;;:23;43600:15;43577:20;;;:38;;;43698:20;;;;43657:79;;43600:15;43657:19;:79::i;:::-;43633:21;;;:103;43787:45;43805:12;:10;:12::i;:::-;43819;43787:17;:45::i;:::-;43288:559;43244:603;43194:949;;;43867:11;;43863:280;;43916:19;;;;:32;;43940:7;43916:23;:32::i;:::-;43894:19;;;:54;43985:15;43962:20;;;:38;44037:20;;:33;;44062:7;44037:24;:33::i;:::-;44014:20;:56;44118:4;44104:12;:10;:12::i;:::-;44089:43;;;44124:7;44089:43;;;;14213:25:1;;14201:2;14186:18;;14067:177;44089:43:0;;;;;;;;43863:280;42792:1357;;;42736:1413;:::o;23075:96::-;23133:7;23159:5;23163:1;23159;:5;:::i;11133:205::-;11272:58;;4069:42:1;4057:55;;11272:58:0;;;4039:74:1;4129:18;;;4122:34;;;11245:86:0;;11265:5;;11295:23;;4012:18:1;;11272:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11245:19;:86::i;:::-;11133:205;;;:::o;23418:96::-;23476:7;23502:5;23506:1;23502;:5;:::i;23803:96::-;23861:7;23887:5;23891:1;23887;:5;:::i;17201:169::-;17256:16;17275:6;;;17291:17;;;;;;;;;;17323:40;;17275:6;;;;;;;17323:40;;17256:16;17323:40;17246:124;17201:169;:::o;11344:241::-;11509:68;;3674:42:1;3743:15;;;11509:68:0;;;3725:34:1;3795:15;;3775:18;;;3768:43;3827:18;;;3820:34;;;11482:96:0;;11502:5;;11532:27;;3637:18:1;;11509:68:0;3462:398:1;44261:616:0;44374:17;;44341:5;;:30;;;;;44365:4;44341:30;;;3045:74:1;44341:5:0;;;;;:15;;3018:18:1;;44341:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:50;44337:534;;;44645:17;;44593:5;;:30;;;;;44617:4;44593:30;;;3045:74:1;44574:16:0;;44593:83;;44645:17;;44593:5;;;;;:15;;3018:18:1;;44593:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:83::-;44574:102;;44705:8;44694:7;:19;44690:171;;44733:5;;:29;;;;;:5;4057:55:1;;;44733:29:0;;;4039:74:1;4129:18;;;4122:34;;;44733:5:0;;;;:14;;4012:18:1;;44733:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;44690:171::-;44787:11;;44783:78;;44818:5;;:28;;;;;:5;4057:55:1;;;44818:28:0;;;4039:74:1;4129:18;;;4122:34;;;44818:5:0;;;;:14;;4012:18:1;;44818:28:0;3865:297:1;13639:706:0;14058:23;14084:69;14112:4;14084:69;;;;;;;;;;;;;;;;;14092:5;14084:27;;;;:69;;;;;:::i;:::-;14167:17;;14058:95;;-1:-1:-1;14167:21:0;14163:176;;14262:10;14251:30;;;;;;;;;;;;:::i;:::-;14243:85;;;;;;;12900:2:1;14243:85:0;;;12882:21:1;12939:2;12919:18;;;12912:30;12978:34;12958:18;;;12951:62;13049:12;13029:18;;;13022:40;13079:19;;14243:85:0;12698:406:1;6336:223:0;6469:12;6500:52;6522:6;6530:4;6536:1;6539:12;6469;3909:20;;7703:60;;;;;;;11770:2:1;7703:60:0;;;11752:21:1;11809:2;11789:18;;;11782:30;11848:31;11828:18;;;11821:59;11897:18;;7703:60:0;11568:353:1;7703:60:0;7775:12;7789:23;7816:6;:11;;7835:5;7842:4;7816:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7774:73;;;;7864:52;7882:7;7891:10;7903:12;7864:17;:52::i;:::-;7857:59;7423:500;-1:-1:-1;;;;;;;7423:500:0:o;9825:692::-;9971:12;9999:7;9995:516;;;-1:-1:-1;10029:10:0;10022:17;;9995:516;10140:17;;:21;10136:365;;10334:10;10328:17;10394:15;10381:10;10377:2;10373:19;10366:44;10136:365;10473:12;10466:20;;;;;;;;;;;:::i;14:247:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;181:9;168:23;200:31;225:5;200:31;:::i;266:245::-;333:6;386:2;374:9;365:7;361:23;357:32;354:52;;;402:1;399;392:12;354:52;434:9;428:16;453:28;475:5;453:28;:::i;516:180::-;575:6;628:2;616:9;607:7;603:23;599:32;596:52;;;644:1;641;634:12;596:52;-1:-1:-1;667:23:1;;516:180;-1:-1:-1;516:180:1:o;701:184::-;771:6;824:2;812:9;803:7;799:23;795:32;792:52;;;840:1;837;830:12;792:52;-1:-1:-1;863:16:1;;701:184;-1:-1:-1;701:184:1:o;890:315::-;958:6;966;1019:2;1007:9;998:7;994:23;990:32;987:52;;;1035:1;1032;1025:12;987:52;1071:9;1058:23;1048:33;;1131:2;1120:9;1116:18;1103:32;1144:31;1169:5;1144:31;:::i;:::-;1194:5;1184:15;;;890:315;;;;;:::o;1210:770::-;1323:6;1331;1339;1347;1355;1363;1416:3;1404:9;1395:7;1391:23;1387:33;1384:53;;;1433:1;1430;1423:12;1384:53;1469:9;1456:23;1446:33;;1529:2;1518:9;1514:18;1501:32;1542:31;1567:5;1542:31;:::i;:::-;1592:5;-1:-1:-1;1649:2:1;1634:18;;1621:32;1697:6;1684:20;;1672:33;;1662:61;;1719:1;1716;1709:12;1662:61;1742:7;-1:-1:-1;1796:2:1;1781:18;;1768:32;;-1:-1:-1;1847:3:1;1832:19;;1819:33;;-1:-1:-1;1904:3:1;1889:19;;1876:33;1918:30;1876:33;1918:30;:::i;:::-;1967:7;1957:17;;;1210:770;;;;;;;;:::o;1985:248::-;2053:6;2061;2114:2;2102:9;2093:7;2089:23;2085:32;2082:52;;;2130:1;2127;2120:12;2082:52;-1:-1:-1;;2153:23:1;;;2223:2;2208:18;;;2195:32;;-1:-1:-1;1985:248:1:o;2238:377::-;2312:6;2320;2328;2381:2;2369:9;2360:7;2356:23;2352:32;2349:52;;;2397:1;2394;2387:12;2349:52;2433:9;2420:23;2410:33;;2490:2;2479:9;2475:18;2462:32;2452:42;;2544:2;2533:9;2529:18;2516:32;2557:28;2579:5;2557:28;:::i;:::-;2604:5;2594:15;;;2238:377;;;;;:::o;2620:274::-;2749:3;2787:6;2781:13;2803:53;2849:6;2844:3;2837:4;2829:6;2825:17;2803:53;:::i;:::-;2872:16;;;;;2620:274;-1:-1:-1;;2620:274:1:o;5367:442::-;5516:2;5505:9;5498:21;5479:4;5548:6;5542:13;5591:6;5586:2;5575:9;5571:18;5564:34;5607:66;5666:6;5661:2;5650:9;5646:18;5641:2;5633:6;5629:15;5607:66;:::i;:::-;5725:2;5713:15;5730:66;5709:88;5694:104;;;;5800:2;5690:113;;5367:442;-1:-1:-1;;5367:442:1:o;14970:128::-;15010:3;15041:1;15037:6;15034:1;15031:13;15028:39;;;15047:18;;:::i;:::-;-1:-1:-1;15083:9:1;;14970:128::o;15103:274::-;15143:1;15169;15159:189;;15204:77;15201:1;15194:88;15305:4;15302:1;15295:15;15333:4;15330:1;15323:15;15159:189;-1:-1:-1;15362:9:1;;15103:274::o;15382:228::-;15422:7;15548:1;15480:66;15476:74;15473:1;15470:81;15465:1;15458:9;15451:17;15447:105;15444:131;;;15555:18;;:::i;:::-;-1:-1:-1;15595:9:1;;15382:228::o;15615:125::-;15655:4;15683:1;15680;15677:8;15674:34;;;15688:18;;:::i;:::-;-1:-1:-1;15725:9:1;;15615:125::o;15745:258::-;15817:1;15827:113;15841:6;15838:1;15835:13;15827:113;;;15917:11;;;15911:18;15898:11;;;15891:39;15863:2;15856:10;15827:113;;;15958:6;15955:1;15952:13;15949:48;;;-1:-1:-1;;15993:1:1;15975:16;;15968:27;15745:258::o;16008:195::-;16047:3;16078:66;16071:5;16068:77;16065:103;;;16148:18;;:::i;:::-;-1:-1:-1;16195:1:1;16184:13;;16008:195::o;16208:184::-;16260:77;16257:1;16250:88;16357:4;16354:1;16347:15;16381:4;16378:1;16371:15;16397:184;16449:77;16446:1;16439:88;16546:4;16543:1;16536:15;16570:4;16567:1;16560:15;16586:154;16672:42;16665:5;16661:54;16654:5;16651:65;16641:93;;16730:1;16727;16720:12;16745:118;16831:5;16824:13;16817:21;16810:5;16807:32;16797:60;;16853:1;16850;16843:12"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2604600",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "MAXIMUM_DEPOSIT_FEE_RATE()": "316",
                "MAXIMUM_HARVEST_INTERVAL()": "250",
                "add(uint256,address,uint16,uint256,uint256,bool)": "infinite",
                "canHarvest(uint256,address)": "4901",
                "deposit(uint256,uint256)": "infinite",
                "devAddress()": "2381",
                "disableMetaTxns()": "32059",
                "ember()": "2404",
                "emberPerBlock()": "2395",
                "enableMetaTxns()": "32076",
                "feeAddress()": "2403",
                "getMultiplier(uint256,uint256)": "infinite",
                "isTrustedForwarder(address)": "2620",
                "massUpdatePools()": "infinite",
                "metaTxnsEnabled()": "2421",
                "operator()": "2396",
                "owner()": "2397",
                "pendingEmber(uint256,address)": "infinite",
                "poolInfo(uint256)": "19672",
                "poolLength()": "2317",
                "renounceOwnership()": "30443",
                "setDevAddress(address)": "infinite",
                "setFeeAddress(address)": "infinite",
                "startBlock()": "2374",
                "startFarming()": "infinite",
                "totalAllocPoint()": "2353",
                "totalEmberInPools()": "2374",
                "totalLockedUpRewards()": "2352",
                "transferOperator(address)": "30387",
                "transferOwnership(address)": "infinite",
                "updateAllocPoint(uint256,uint256,bool)": "infinite",
                "updateEmissionRate(uint256)": "infinite",
                "updatePool(uint256)": "infinite",
                "userInfo(uint256,address)": "11237",
                "userLockedUntil(uint256,address)": "7112",
                "withdraw(uint256,uint256)": "infinite"
              },
              "internal": {
                "_msgData()": "infinite",
                "_msgSender()": "2238",
                "payOrLockupPendingEmber(uint256)": "infinite",
                "safeEmberTransfer(address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "MAXIMUM_DEPOSIT_FEE_RATE()": "812c64f1",
              "MAXIMUM_HARVEST_INTERVAL()": "de73149d",
              "add(uint256,address,uint16,uint256,uint256,bool)": "330ae003",
              "canHarvest(uint256,address)": "2e6c998d",
              "deposit(uint256,uint256)": "e2bbb158",
              "devAddress()": "3ad10ef6",
              "disableMetaTxns()": "08383640",
              "ember()": "1f1b9a7c",
              "emberPerBlock()": "c9e11852",
              "enableMetaTxns()": "578bb42d",
              "feeAddress()": "41275358",
              "getMultiplier(uint256,uint256)": "8dbb1e3a",
              "isTrustedForwarder(address)": "572b6c05",
              "massUpdatePools()": "630b5ba1",
              "metaTxnsEnabled()": "a8c95dc0",
              "operator()": "570ca735",
              "owner()": "8da5cb5b",
              "pendingEmber(uint256,address)": "bc83ee22",
              "poolInfo(uint256)": "1526fe27",
              "poolLength()": "081e3eda",
              "renounceOwnership()": "715018a6",
              "setDevAddress(address)": "d0d41fe1",
              "setFeeAddress(address)": "8705fcd4",
              "startBlock()": "48cd4cb1",
              "startFarming()": "afbcfea1",
              "totalAllocPoint()": "17caf6f1",
              "totalEmberInPools()": "2a22bc43",
              "totalLockedUpRewards()": "474fa630",
              "transferOperator(address)": "29605e77",
              "transferOwnership(address)": "f2fde38b",
              "updateAllocPoint(uint256,uint256,bool)": "bde4aeca",
              "updateEmissionRate(uint256)": "0ba84cd2",
              "updatePool(uint256)": "51eb05a6",
              "userInfo(uint256,address)": "93f1a40b",
              "userLockedUntil(uint256,address)": "d1593bc8",
              "withdraw(uint256,uint256)": "441a3e70"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEmberERC20\",\"name\":\"_ember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emberPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DevAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MetaTxnsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ember\",\"outputs\":[{\"internalType\":\"contract IEmberERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emberPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMetaTxns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaTxnsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingEmber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmberInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emberPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"EmberVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 619,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 725,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "_status",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 1161,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "ember",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(IEmberERC20)1114"
              },
              {
                "astId": 1163,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "_operator",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
              },
              {
                "astId": 1165,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "devAddress",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
              },
              {
                "astId": 1167,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "feeAddress",
                "offset": 0,
                "slot": "5",
                "type": "t_address"
              },
              {
                "astId": 1169,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "emberPerBlock",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 1179,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "poolInfo",
                "offset": 0,
                "slot": "7",
                "type": "t_array(t_struct(PoolInfo)1158_storage)dyn_storage"
              },
              {
                "astId": 1186,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "userInfo",
                "offset": 0,
                "slot": "8",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1140_storage))"
              },
              {
                "astId": 1189,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "totalAllocPoint",
                "offset": 0,
                "slot": "9",
                "type": "t_uint256"
              },
              {
                "astId": 1191,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "startBlock",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
              },
              {
                "astId": 1193,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "totalLockedUpRewards",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
              },
              {
                "astId": 1196,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "totalEmberInPools",
                "offset": 0,
                "slot": "12",
                "type": "t_uint256"
              },
              {
                "astId": 1199,
                "contract": "contracts/farm/EmberVault.sol:EmberVault",
                "label": "metaTxnsEnabled",
                "offset": 0,
                "slot": "13",
                "type": "t_bool"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_struct(PoolInfo)1158_storage)dyn_storage": {
                "base": "t_struct(PoolInfo)1158_storage",
                "encoding": "dynamic_array",
                "label": "struct EmberVault.PoolInfo[]",
                "numberOfBytes": "32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_contract(IERC20)77": {
                "encoding": "inplace",
                "label": "contract IERC20",
                "numberOfBytes": "20"
              },
              "t_contract(IEmberERC20)1114": {
                "encoding": "inplace",
                "label": "contract IEmberERC20",
                "numberOfBytes": "20"
              },
              "t_mapping(t_address,t_struct(UserInfo)1140_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct EmberVault.UserInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(UserInfo)1140_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1140_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(UserInfo)1140_storage)"
              },
              "t_struct(PoolInfo)1158_storage": {
                "encoding": "inplace",
                "label": "struct EmberVault.PoolInfo",
                "members": [
                  {
                    "astId": 1143,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "lpToken",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_contract(IERC20)77"
                  },
                  {
                    "astId": 1145,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "allocPoint",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1147,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "lastRewardBlock",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1149,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "accEmberPerShare",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1151,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "depositFeeBP",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint16"
                  },
                  {
                    "astId": 1153,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "harvestInterval",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1155,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "totalLp",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1157,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "lockupDuration",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "256"
              },
              "t_struct(UserInfo)1140_storage": {
                "encoding": "inplace",
                "label": "struct EmberVault.UserInfo",
                "members": [
                  {
                    "astId": 1131,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "amount",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1133,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "rewardDebt",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1135,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "rewardLockedUp",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1137,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "nextHarvestUntil",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 1139,
                    "contract": "contracts/farm/EmberVault.sol:EmberVault",
                    "label": "lastInteraction",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "160"
              },
              "t_uint16": {
                "encoding": "inplace",
                "label": "uint16",
                "numberOfBytes": "2"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IERC20Permit": {
          "abi": [
            {
              "inputs": [],
              "name": "DOMAIN_SEPARATOR",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "nonces",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
            "kind": "dev",
            "methods": {
              "DOMAIN_SEPARATOR()": {
                "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
              },
              "nonces(address)": {
                "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
              },
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "DOMAIN_SEPARATOR()": "3644e515",
              "nonces(address)": "7ecebe00",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IEmberERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DOMAIN_SEPARATOR",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "nonces",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "kind": "dev",
            "methods": {
              "DOMAIN_SEPARATOR()": {
                "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
              },
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "nonces(address)": {
                "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
              },
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "DOMAIN_SEPARATOR()": "3644e515",
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "mint(address,uint256)": "40c10f19",
              "nonces(address)": "7ecebe00",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"IEmberERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 619,
                "contract": "contracts/farm/EmberVault.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "ReentrancyGuard": {
          "abi": [],
          "devdoc": {
            "details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 725,
                "contract": "contracts/farm/EmberVault.sol:ReentrancyGuard",
                "label": "_status",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "SafeERC20": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
            "kind": "dev",
            "methods": {},
            "title": "SafeERC20",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012b70475dab761252e56b0004ef436e94304eebb30cdc652efbe7ce7ce55719864736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xB7 DIV PUSH22 0xDAB761252E56B0004EF436E94304EEBB30CDC652EFBE PUSH29 0xE7CE55719864736F6C6343000807003300000000000000000000000000 ",
              "sourceMap": "11077:3270:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;11077:3270:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012b70475dab761252e56b0004ef436e94304eebb30cdc652efbe7ce7ce55719864736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xB7 DIV PUSH22 0xDAB761252E56B0004EF436E94304EEBB30CDC652EFBE PUSH29 0xE7CE55719864736F6C6343000807003300000000000000000000000000 ",
              "sourceMap": "11077:3270:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
                "safeApprove(contract IERC20,address,uint256)": "infinite",
                "safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safeTransfer(contract IERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "SafeMath": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler now has built in overflow checking.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204fe0759638bab16fb48dfd1ebba990785a17658bb9a9a4f7abaefec43c89e64864736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xE0 PUSH22 0x9638BAB16FB48DFD1EBBA990785A17658BB9A9A4F7AB 0xAE INVALID 0xC4 EXTCODECOPY DUP10 0xE6 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "20434:6301:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;20434:6301:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204fe0759638bab16fb48dfd1ebba990785a17658bb9a9a4f7abaefec43c89e64864736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F 0xE0 PUSH22 0x9638BAB16FB48DFD1EBBA990785A17658BB9A9A4F7AB 0xAE INVALID 0xC4 EXTCODECOPY DUP10 0xE6 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
              "sourceMap": "20434:6301:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "add(uint256,uint256)": "infinite",
                "div(uint256,uint256)": "infinite",
                "div(uint256,uint256,string memory)": "infinite",
                "mod(uint256,uint256)": "infinite",
                "mod(uint256,uint256,string memory)": "infinite",
                "mul(uint256,uint256)": "infinite",
                "sub(uint256,uint256)": "infinite",
                "sub(uint256,uint256,string memory)": "infinite",
                "tryAdd(uint256,uint256)": "infinite",
                "tryDiv(uint256,uint256)": "infinite",
                "tryMod(uint256,uint256)": "infinite",
                "tryMul(uint256,uint256)": "infinite",
                "trySub(uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberVault.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberVault.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\\n\\n// File contracts/farm/IEmberERC20.sol\\npragma solidity ^0.8.2;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IEmberERC20 is IERC20, IERC20Permit {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n\\n// File contracts/farm/EmberVault.sol\\npragma solidity ^0.8.2;\\n\\n\\n\\n\\n\\n\\ncontract EmberVault is Ownable, ReentrancyGuard {\\n    address constant _trustedForwarder =\\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //Trusted forwarder\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\n    }\\n\\n    IEmberERC20 public ember;\\n\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\n    address private _operator;\\n\\n    // Dev address.\\n    address public devAddress;\\n\\n    // Deposit Fee address\\n    address public feeAddress;\\n\\n    // Ember tokens created per block\\n    uint256 public emberPerBlock;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The block number when Ember mining starts.\\n    uint256 public startBlock;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n    event DevAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event FeeAddressChanged(\\n        address indexed caller,\\n        address oldAddress,\\n        address newAddress\\n    );\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == msg.sender,\\n            \\\"Operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\n\\n        ember = _ember;\\n        emberPerBlock = _emberPerBlock;\\n\\n        devAddress = msg.sender;\\n        feeAddress = msg.sender;\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address sender)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return _to.sub(_from);\\n    }\\n\\n    function transferOperator(address newOperator) public onlyOperator {\\n        require(\\n            newOperator != address(0),\\n            \\\"TransferOperator: new operator is the zero address\\\"\\n        );\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = block.number;\\n        }\\n\\n        startBlock = block.number;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        uint256 _lockupDuration,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"Add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"Add: invalid harvest interval\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                lockupDuration: _lockupDuration\\n            })\\n        );\\n    }\\n\\n    // View function to see pending Ember on frontend.\\n    function pendingEmber(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 emberReward = multiplier\\n                .mul(emberPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accEmberPerShare = accEmberPerShare.add(\\n                emberReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        return pending.add(user.rewardLockedUp);\\n    }\\n\\n    // View function to see when user will be unlocked from pool\\n    function userLockedUntil(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        return user.lastInteraction + pool.lockupDuration;\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.number >= startBlock &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 emberReward = multiplier\\n            .mul(emberPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        ember.mint(devAddress, emberReward.div(10));\\n        ember.mint(address(this), emberReward);\\n\\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\\n            emberReward.mul(1e12).div(pool.totalLp)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to EmberVault for Ember allocation\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        require(\\n            block.number >= startBlock,\\n            \\\"EmberVault: cannot deposit before farming start\\\"\\n        );\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\n\\n                _amount = _amount.sub(depositFee);\\n            }\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.add(_amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Deposit(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\n\\n        //Cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\n\\n        //Cannot withdraw before lock time\\n        require(\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\n        );\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools = totalEmberInPools.sub(_amount);\\n            }\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\\n        user.lastInteraction = block.timestamp;\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\n        }\\n\\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (canHarvest(_pid, _msgSender())) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\n                    user.rewardLockedUp\\n                );\\n                user.rewardLockedUp = 0;\\n                user.lastInteraction = block.timestamp;\\n                user.nextHarvestUntil = block.timestamp.add(\\n                    pool.harvestInterval\\n                );\\n\\n                // send rewards\\n                safeEmberTransfer(_msgSender(), totalRewards);\\n            }\\n        } else if (pending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\n            user.lastInteraction = block.timestamp;\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //EmberBal = total Ember in EmberVault - total Ember in Ember pools, this will make sure that EmberVault never transfer rewards from deposited Ember pools\\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\\n                totalEmberInPools\\n            );\\n            if (_amount >= EmberBal) {\\n                ember.transfer(_to, EmberBal);\\n            } else if (_amount > 0) {\\n                ember.transfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddress(address _devAddress) public {\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\n\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\n\\n        devAddress = _devAddress;\\n    }\\n\\n    function setFeeAddress(address _feeAddress) public {\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\n\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\n\\n        feeAddress = _feeAddress;\\n    }\\n\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\\n        massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\\n        emberPerBlock = _emberPerBlock;\\n    }\\n\\n    function updateAllocPoint(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOperator {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        emit AllocPointsUpdated(\\n            _msgSender(),\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Enable support for meta transactions\\n    function enableMetaTxns() public onlyOperator {\\n        require(\\n            !metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already enabled\\\"\\n        );\\n\\n        metaTxnsEnabled = true;\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n\\n    // Disable support for meta transactions\\n    function disableMetaTxns() public onlyOperator {\\n        require(\\n            metaTxnsEnabled,\\n            \\\"EmberVault: meta transactions are already disabled\\\"\\n        );\\n\\n        metaTxnsEnabled = false;\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9de40d16765d6b583d935ec355666620a29bea0e7ee260b2d49795a25e0b62ee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/farm/EmberVault.sol": {
        "ast": {
          "absolutePath": "contracts/farm/EmberVault.sol",
          "exportedSymbols": {
            "Address": [
              372
            ],
            "Context": [
              613
            ],
            "EmberVault": [
              2628
            ],
            "IERC20": [
              77
            ],
            "IERC20Permit": [
              1100
            ],
            "IEmberERC20": [
              1114
            ],
            "Ownable": [
              715
            ],
            "ReentrancyGuard": [
              754
            ],
            "SafeERC20": [
              593
            ],
            "SafeMath": [
              1065
            ]
          },
          "id": 2629,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "156:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "181:70:0",
                "text": " @dev Interface of the ERC20 standard as defined in the EIP."
              },
              "fullyImplemented": false,
              "id": 77,
              "linearizedBaseContracts": [
                77
              ],
              "name": "IERC20",
              "nameLocation": "262:6:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "275:66:0",
                    "text": " @dev Returns the amount of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 8,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "355:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "366:2:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 8,
                        "src": "392:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "392:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "391:9:0"
                  },
                  "scope": 77,
                  "src": "346:55:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 9,
                    "nodeType": "StructuredDocumentation",
                    "src": "407:72:0",
                    "text": " @dev Returns the amount of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 16,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "493:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 12,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "511:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "503:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "503:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "502:17:0"
                  },
                  "returnParameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 16,
                        "src": "543:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "543:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "542:9:0"
                  },
                  "scope": 77,
                  "src": "484:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "558:209:0",
                    "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 26,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "781:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 22,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "798:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "790:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "790:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 21,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "817:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "809:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 20,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "809:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "789:35:0"
                  },
                  "returnParameters": {
                    "id": 25,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 26,
                        "src": "843:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "843:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "842:6:0"
                  },
                  "scope": 77,
                  "src": "772:77:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 27,
                    "nodeType": "StructuredDocumentation",
                    "src": "855:264:0",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 36,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "1133:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 32,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 29,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1151:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "1143:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 28,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1143:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 31,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1166:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "1158:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 30,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1158:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1142:32:0"
                  },
                  "returnParameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 34,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "1198:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 33,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1198:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1197:9:0"
                  },
                  "scope": 77,
                  "src": "1124:83:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 37,
                    "nodeType": "StructuredDocumentation",
                    "src": "1213:642:0",
                    "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 46,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "1869:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 42,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 39,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1885:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "1877:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 38,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1877:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 41,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1902:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "1894:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1894:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1876:33:0"
                  },
                  "returnParameters": {
                    "id": 45,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 44,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "1928:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 43,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1928:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1927:6:0"
                  },
                  "scope": 77,
                  "src": "1860:74:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 47,
                    "nodeType": "StructuredDocumentation",
                    "src": "1940:296:0",
                    "text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 58,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2250:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 54,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 49,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "2280:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 58,
                        "src": "2272:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 48,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2272:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 51,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "2304:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 58,
                        "src": "2296:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 50,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2296:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 53,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2331:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 58,
                        "src": "2323:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 52,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2323:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2262:81:0"
                  },
                  "returnParameters": {
                    "id": 57,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 56,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 58,
                        "src": "2362:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 55,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2362:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2361:6:0"
                  },
                  "scope": 77,
                  "src": "2241:127:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 59,
                    "nodeType": "StructuredDocumentation",
                    "src": "2374:158:0",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "id": 67,
                  "name": "Transfer",
                  "nameLocation": "2543:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 66,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 61,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2568:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "2552:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 60,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2552:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 63,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2590:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "2574:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 62,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2574:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 65,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2602:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 67,
                        "src": "2594:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 64,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2594:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2551:57:0"
                  },
                  "src": "2537:72:0"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 68,
                    "nodeType": "StructuredDocumentation",
                    "src": "2615:148:0",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "id": 76,
                  "name": "Approval",
                  "nameLocation": "2774:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 75,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 70,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2799:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 76,
                        "src": "2783:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 69,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2783:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 72,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2822:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 76,
                        "src": "2806:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 71,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2806:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 74,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2839:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 76,
                        "src": "2831:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 73,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2831:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2782:63:0"
                  },
                  "src": "2768:78:0"
                }
              ],
              "scope": 2629,
              "src": "252:2596:0",
              "usedErrors": []
            },
            {
              "id": 78,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "2908:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 79,
                "nodeType": "StructuredDocumentation",
                "src": "2933:67:0",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 372,
              "linearizedBaseContracts": [
                372
              ],
              "name": "Address",
              "nameLocation": "3009:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 95,
                    "nodeType": "Block",
                    "src": "3659:311:0",
                    "statements": [
                      {
                        "assignments": [
                          88
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 88,
                            "mutability": "mutable",
                            "name": "size",
                            "nameLocation": "3864:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 95,
                            "src": "3856:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 87,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3856:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 89,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3856:12:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3887:52:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3901:28:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "account",
                                    "nodeType": "YulIdentifier",
                                    "src": "3921:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "3909:11:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3909:20:0"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "3901:4:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 82,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3921:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 88,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3901:4:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 90,
                        "nodeType": "InlineAssembly",
                        "src": "3878:61:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 91,
                            "name": "size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 88,
                            "src": "3955:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 92,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3962:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3955:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 86,
                        "id": 94,
                        "nodeType": "Return",
                        "src": "3948:15:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 80,
                    "nodeType": "StructuredDocumentation",
                    "src": "3023:565:0",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
                  },
                  "id": 96,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "3602:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 83,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 82,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3621:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 96,
                        "src": "3613:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 81,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3613:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3612:17:0"
                  },
                  "returnParameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 85,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 96,
                        "src": "3653:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 84,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3653:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3652:6:0"
                  },
                  "scope": 372,
                  "src": "3593:377:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 129,
                    "nodeType": "Block",
                    "src": "4958:241:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 107,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4984:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$372",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$372",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 106,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4976:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 105,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4976:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 108,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4976:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 109,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "4976:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 110,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 101,
                                "src": "5001:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4976:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 112,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5009:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 104,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4968:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4968:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 114,
                        "nodeType": "ExpressionStatement",
                        "src": "4968:73:0"
                      },
                      {
                        "assignments": [
                          116,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 116,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5058:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 129,
                            "src": "5053:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 115,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5053:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 123,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 121,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5101:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 117,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 99,
                                "src": "5071:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 118,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "5071:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 120,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 119,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 101,
                                "src": "5093:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "5071:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5071:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5052:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 125,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "5122:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 126,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5131:60:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 124,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5114:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5114:78:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 128,
                        "nodeType": "ExpressionStatement",
                        "src": "5114:78:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 97,
                    "nodeType": "StructuredDocumentation",
                    "src": "3976:906:0",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 130,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "4896:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 102,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 99,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "4922:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 130,
                        "src": "4906:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 98,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4906:15:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 101,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "4941:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 130,
                        "src": "4933:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4933:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4905:43:0"
                  },
                  "returnParameters": {
                    "id": 103,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4958:0:0"
                  },
                  "scope": 372,
                  "src": "4887:312:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 146,
                    "nodeType": "Block",
                    "src": "6030:84:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 141,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 133,
                              "src": "6060:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 142,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 135,
                              "src": "6068:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 143,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6074:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 140,
                            "name": "functionCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              147,
                              167
                            ],
                            "referencedDeclaration": 167,
                            "src": "6047:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 144,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6047:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 139,
                        "id": 145,
                        "nodeType": "Return",
                        "src": "6040:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 131,
                    "nodeType": "StructuredDocumentation",
                    "src": "5205:731:0",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 147,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "5950:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 133,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5971:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "5963:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5963:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 135,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5992:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "5979:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5979:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5962:35:0"
                  },
                  "returnParameters": {
                    "id": 139,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 138,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 147,
                        "src": "6016:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 137,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6016:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6015:14:0"
                  },
                  "scope": 372,
                  "src": "5941:173:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 166,
                    "nodeType": "Block",
                    "src": "6483:76:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 160,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 150,
                              "src": "6522:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 161,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 152,
                              "src": "6530:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6536:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 163,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 154,
                              "src": "6539:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 159,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              187,
                              237
                            ],
                            "referencedDeclaration": 237,
                            "src": "6500:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 164,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6500:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 158,
                        "id": 165,
                        "nodeType": "Return",
                        "src": "6493:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 148,
                    "nodeType": "StructuredDocumentation",
                    "src": "6120:211:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 167,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "6345:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 155,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 150,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6375:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 167,
                        "src": "6367:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 149,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6367:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 152,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6404:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 167,
                        "src": "6391:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 151,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6391:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 154,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6432:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 167,
                        "src": "6418:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6418:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6357:93:0"
                  },
                  "returnParameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 157,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 167,
                        "src": "6469:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 156,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6469:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6468:14:0"
                  },
                  "scope": 372,
                  "src": "6336:223:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 186,
                    "nodeType": "Block",
                    "src": "7064:111:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 180,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 170,
                              "src": "7103:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 181,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 172,
                              "src": "7111:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 182,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 174,
                              "src": "7117:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7124:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 179,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              187,
                              237
                            ],
                            "referencedDeclaration": 237,
                            "src": "7081:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7081:87:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 178,
                        "id": 185,
                        "nodeType": "Return",
                        "src": "7074:94:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 168,
                    "nodeType": "StructuredDocumentation",
                    "src": "6565:351:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 187,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "6930:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 175,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 170,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6969:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 187,
                        "src": "6961:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 169,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6961:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 172,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6998:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 187,
                        "src": "6985:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 171,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6985:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 174,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "7020:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 187,
                        "src": "7012:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 173,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7012:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6951:80:0"
                  },
                  "returnParameters": {
                    "id": 178,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 177,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 187,
                        "src": "7050:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 176,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7050:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7049:14:0"
                  },
                  "scope": 372,
                  "src": "6921:254:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 236,
                    "nodeType": "Block",
                    "src": "7602:321:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 208,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 204,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "7628:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$372",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$372",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 203,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7620:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 202,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "7620:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 205,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7620:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 206,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "7620:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 207,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 194,
                                "src": "7645:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7620:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 209,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7652:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 201,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7612:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7612:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 211,
                        "nodeType": "ExpressionStatement",
                        "src": "7612:81:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 214,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 190,
                                  "src": "7722:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 213,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 96,
                                "src": "7711:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 215,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7711:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7731:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              },
                              "value": "Address: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              }
                            ],
                            "id": 212,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "7703:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7703:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 218,
                        "nodeType": "ExpressionStatement",
                        "src": "7703:60:0"
                      },
                      {
                        "assignments": [
                          220,
                          222
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 220,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "7780:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 236,
                            "src": "7775:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 219,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "7775:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 222,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "7802:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 236,
                            "src": "7789:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 221,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "7789:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 229,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 227,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 192,
                              "src": "7842:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 223,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 190,
                                "src": "7816:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 224,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "7816:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 226,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 225,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 194,
                                "src": "7835:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "7816:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 228,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7816:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7774:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 231,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 220,
                              "src": "7882:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 232,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 222,
                              "src": "7891:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 233,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 196,
                              "src": "7903:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 230,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 371,
                            "src": "7864:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7864:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 200,
                        "id": 235,
                        "nodeType": "Return",
                        "src": "7857:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 188,
                    "nodeType": "StructuredDocumentation",
                    "src": "7181:237:0",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 237,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "7432:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 197,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 190,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "7471:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "7463:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 189,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7463:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 192,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "7500:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "7487:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7487:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 194,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "7522:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "7514:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 193,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7514:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 196,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "7551:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "7537:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 195,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7537:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7453:116:0"
                  },
                  "returnParameters": {
                    "id": 200,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 199,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "7588:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 198,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7588:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7587:14:0"
                  },
                  "scope": 372,
                  "src": "7423:500:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 253,
                    "nodeType": "Block",
                    "src": "8200:97:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 248,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 240,
                              "src": "8236:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 249,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 242,
                              "src": "8244:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 250,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8250:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 247,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              254,
                              289
                            ],
                            "referencedDeclaration": 289,
                            "src": "8217:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 251,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8217:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 246,
                        "id": 252,
                        "nodeType": "Return",
                        "src": "8210:80:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 238,
                    "nodeType": "StructuredDocumentation",
                    "src": "7929:166:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 254,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "8109:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 243,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 240,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "8136:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "8128:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 239,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8128:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 242,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "8157:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "8144:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 241,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8144:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8127:35:0"
                  },
                  "returnParameters": {
                    "id": 246,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 245,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "8186:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 244,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8186:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8185:14:0"
                  },
                  "scope": 372,
                  "src": "8100:197:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 288,
                    "nodeType": "Block",
                    "src": "8639:229:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 268,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 257,
                                  "src": "8668:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 267,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 96,
                                "src": "8657:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 269,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8657:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 270,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8677:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              },
                              "value": "Address: static call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              }
                            ],
                            "id": 266,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "8649:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8649:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 272,
                        "nodeType": "ExpressionStatement",
                        "src": "8649:67:0"
                      },
                      {
                        "assignments": [
                          274,
                          276
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 274,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "8733:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 288,
                            "src": "8728:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 273,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "8728:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 276,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "8755:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 288,
                            "src": "8742:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 275,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "8742:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 281,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 279,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 259,
                              "src": "8787:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 277,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 257,
                              "src": "8769:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 278,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "8769:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 280,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8769:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8727:65:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 283,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 274,
                              "src": "8827:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 284,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 276,
                              "src": "8836:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 285,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 261,
                              "src": "8848:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 282,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 371,
                            "src": "8809:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 286,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8809:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 265,
                        "id": 287,
                        "nodeType": "Return",
                        "src": "8802:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 255,
                    "nodeType": "StructuredDocumentation",
                    "src": "8303:173:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 289,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "8490:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 257,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "8526:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "8518:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 256,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8518:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 259,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "8555:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "8542:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 258,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8542:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 261,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "8583:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "8569:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8569:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8508:93:0"
                  },
                  "returnParameters": {
                    "id": 265,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 264,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 289,
                        "src": "8625:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 263,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8625:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8624:14:0"
                  },
                  "scope": 372,
                  "src": "8481:387:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 305,
                    "nodeType": "Block",
                    "src": "9144:101:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 300,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 292,
                              "src": "9182:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 301,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "9190:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 302,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9196:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 299,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              306,
                              341
                            ],
                            "referencedDeclaration": 341,
                            "src": "9161:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9161:77:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 298,
                        "id": 304,
                        "nodeType": "Return",
                        "src": "9154:84:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 290,
                    "nodeType": "StructuredDocumentation",
                    "src": "8874:168:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 306,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "9056:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 295,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 292,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "9085:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "9077:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 291,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9077:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 294,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "9106:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "9093:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 293,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9093:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9076:35:0"
                  },
                  "returnParameters": {
                    "id": 298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 297,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "9130:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 296,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9130:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9129:14:0"
                  },
                  "scope": 372,
                  "src": "9047:198:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 340,
                    "nodeType": "Block",
                    "src": "9586:233:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 320,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 309,
                                  "src": "9615:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 319,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 96,
                                "src": "9604:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 321,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9604:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 322,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9624:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              },
                              "value": "Address: delegate call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              }
                            ],
                            "id": 318,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9596:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 323,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9596:69:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 324,
                        "nodeType": "ExpressionStatement",
                        "src": "9596:69:0"
                      },
                      {
                        "assignments": [
                          326,
                          328
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 326,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "9682:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 340,
                            "src": "9677:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 325,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "9677:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 328,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "9704:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 340,
                            "src": "9691:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 327,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "9691:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 333,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 331,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 311,
                              "src": "9738:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 329,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 309,
                              "src": "9718:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "9718:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 332,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9718:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9676:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 335,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 326,
                              "src": "9778:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 336,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 328,
                              "src": "9787:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 337,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 313,
                              "src": "9799:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 334,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 371,
                            "src": "9760:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9760:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 317,
                        "id": 339,
                        "nodeType": "Return",
                        "src": "9753:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 307,
                    "nodeType": "StructuredDocumentation",
                    "src": "9251:175:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 341,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "9440:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 314,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 309,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "9478:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "9470:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 308,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9470:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 311,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "9507:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "9494:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 310,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9494:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 313,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "9535:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "9521:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 312,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "9521:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9460:93:0"
                  },
                  "returnParameters": {
                    "id": 317,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 316,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "9572:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 315,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9572:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9571:14:0"
                  },
                  "scope": 372,
                  "src": "9431:388:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 370,
                    "nodeType": "Block",
                    "src": "9985:532:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 352,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 343,
                          "src": "9999:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 368,
                          "nodeType": "Block",
                          "src": "10056:455:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 356,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 345,
                                    "src": "10140:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 357,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "10140:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 358,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10160:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "10140:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 366,
                                "nodeType": "Block",
                                "src": "10448:53:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 363,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 347,
                                          "src": "10473:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 362,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "10466:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 364,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "10466:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 365,
                                    "nodeType": "ExpressionStatement",
                                    "src": "10466:20:0"
                                  }
                                ]
                              },
                              "id": 367,
                              "nodeType": "IfStatement",
                              "src": "10136:365:0",
                              "trueBody": {
                                "id": 361,
                                "nodeType": "Block",
                                "src": "10163:279:0",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "10283:145:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "10305:40:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "10334:10:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "10328:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "10328:17:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "10309:15:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "10377:2:0",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "10381:10:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "10373:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "10373:19:0"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "10394:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "10366:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "10366:44:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "10366:44:0"
                                        }
                                      ]
                                    },
                                    "evmVersion": "london",
                                    "externalReferences": [
                                      {
                                        "declaration": 345,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10334:10:0",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 345,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10381:10:0",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 360,
                                    "nodeType": "InlineAssembly",
                                    "src": "10274:154:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 369,
                        "nodeType": "IfStatement",
                        "src": "9995:516:0",
                        "trueBody": {
                          "id": 355,
                          "nodeType": "Block",
                          "src": "10008:42:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 353,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 345,
                                "src": "10029:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 351,
                              "id": 354,
                              "nodeType": "Return",
                              "src": "10022:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 371,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_verifyCallResult",
                  "nameLocation": "9834:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 348,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 343,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "9866:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 371,
                        "src": "9861:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "9861:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 345,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "9896:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 371,
                        "src": "9883:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 344,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9883:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 347,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "9930:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 371,
                        "src": "9916:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 346,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "9916:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9851:97:0"
                  },
                  "returnParameters": {
                    "id": 351,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 350,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 371,
                        "src": "9971:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 349,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "9971:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9970:14:0"
                  },
                  "scope": 372,
                  "src": "9825:692:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2629,
              "src": "3001:7518:0",
              "usedErrors": []
            },
            {
              "id": 373,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "10593:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 374,
                "nodeType": "StructuredDocumentation",
                "src": "10619:457:0",
                "text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
              },
              "fullyImplemented": true,
              "id": 593,
              "linearizedBaseContracts": [
                593
              ],
              "name": "SafeERC20",
              "nameLocation": "11085:9:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 377,
                  "libraryName": {
                    "id": 375,
                    "name": "Address",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 372,
                    "src": "11107:7:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "11101:26:0",
                  "typeName": {
                    "id": 376,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11119:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                },
                {
                  "body": {
                    "id": 399,
                    "nodeType": "Block",
                    "src": "11235:103:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 388,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 380,
                              "src": "11265:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 391,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 380,
                                      "src": "11295:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 392,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transfer",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 26,
                                    "src": "11295:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 393,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "11295:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 394,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 382,
                                  "src": "11320:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 395,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 384,
                                  "src": "11324:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 389,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "11272:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 390,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "11272:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 396,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11272:58:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 387,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 592,
                            "src": "11245:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 397,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11245:86:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 398,
                        "nodeType": "ExpressionStatement",
                        "src": "11245:86:0"
                      }
                    ]
                  },
                  "id": 400,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nameLocation": "11142:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 385,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 380,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "11171:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "11164:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 379,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 378,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "11164:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "11164:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 382,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "11194:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "11186:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 381,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11186:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "11214:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 400,
                        "src": "11206:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11206:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11154:71:0"
                  },
                  "returnParameters": {
                    "id": 386,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11235:0:0"
                  },
                  "scope": 593,
                  "src": "11133:205:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 425,
                    "nodeType": "Block",
                    "src": "11472:113:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 413,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 403,
                              "src": "11502:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 416,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 403,
                                      "src": "11532:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 417,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "transferFrom",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 58,
                                    "src": "11532:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 418,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "11532:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 419,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 405,
                                  "src": "11561:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 420,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 407,
                                  "src": "11567:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 421,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 409,
                                  "src": "11571:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 414,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "11509:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 415,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "11509:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 422,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11509:68:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 412,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 592,
                            "src": "11482:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11482:96:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 424,
                        "nodeType": "ExpressionStatement",
                        "src": "11482:96:0"
                      }
                    ]
                  },
                  "id": 426,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "11353:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 410,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 403,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "11386:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 426,
                        "src": "11379:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 402,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 401,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "11379:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "11379:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 405,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "11409:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 426,
                        "src": "11401:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 404,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11401:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 407,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "11431:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 426,
                        "src": "11423:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 406,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11423:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 409,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "11451:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 426,
                        "src": "11443:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 408,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11443:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11369:93:0"
                  },
                  "returnParameters": {
                    "id": 411,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11472:0:0"
                  },
                  "scope": 593,
                  "src": "11344:241:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 469,
                    "nodeType": "Block",
                    "src": "11951:497:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 453,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 440,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 438,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 434,
                                      "src": "12200:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 439,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12209:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "12200:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 441,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "12199:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 451,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 446,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -28,
                                              "src": "12240:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_SafeERC20_$593",
                                                "typeString": "library SafeERC20"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_SafeERC20_$593",
                                                "typeString": "library SafeERC20"
                                              }
                                            ],
                                            "id": 445,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "12232:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": {
                                              "id": 444,
                                              "name": "address",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "12232:7:0",
                                              "typeDescriptions": {}
                                            }
                                          },
                                          "id": 447,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "12232:13:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 448,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 432,
                                          "src": "12247:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "expression": {
                                          "id": 442,
                                          "name": "token",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 430,
                                          "src": "12216:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$77",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 443,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "allowance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 36,
                                        "src": "12216:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                          "typeString": "function (address,address) view external returns (uint256)"
                                        }
                                      },
                                      "id": 449,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "12216:39:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 450,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12259:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "12216:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 452,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "12215:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "12199:62:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
                              "id": 454,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12275:56:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              },
                              "value": "SafeERC20: approve from non-zero to non-zero allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              }
                            ],
                            "id": 437,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "12178:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 455,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12178:163:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 456,
                        "nodeType": "ExpressionStatement",
                        "src": "12178:163:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 458,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 430,
                              "src": "12371:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 461,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 430,
                                      "src": "12401:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 462,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 46,
                                    "src": "12401:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 463,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "12401:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 464,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 432,
                                  "src": "12425:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 465,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 434,
                                  "src": "12434:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 459,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "12378:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 460,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "12378:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 466,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12378:62:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 457,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 592,
                            "src": "12351:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 467,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12351:90:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 468,
                        "nodeType": "ExpressionStatement",
                        "src": "12351:90:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 427,
                    "nodeType": "StructuredDocumentation",
                    "src": "11591:249:0",
                    "text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
                  },
                  "id": 470,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeApprove",
                  "nameLocation": "11854:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 430,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "11882:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "11875:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 429,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 428,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "11875:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "11875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 432,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "11905:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "11897:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 431,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11897:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 434,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "11930:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 470,
                        "src": "11922:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 433,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11922:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11865:76:0"
                  },
                  "returnParameters": {
                    "id": 436,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11951:0:0"
                  },
                  "scope": 593,
                  "src": "11845:603:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 505,
                    "nodeType": "Block",
                    "src": "12570:194:0",
                    "statements": [
                      {
                        "assignments": [
                          481
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 481,
                            "mutability": "mutable",
                            "name": "newAllowance",
                            "nameLocation": "12588:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 505,
                            "src": "12580:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 480,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "12580:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 492,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 486,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "12627:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_SafeERC20_$593",
                                      "typeString": "library SafeERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_SafeERC20_$593",
                                      "typeString": "library SafeERC20"
                                    }
                                  ],
                                  "id": 485,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "12619:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 484,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "12619:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 487,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12619:13:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 488,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 475,
                                "src": "12634:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 482,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 473,
                                "src": "12603:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$77",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 483,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allowance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 36,
                              "src": "12603:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address,address) view external returns (uint256)"
                              }
                            },
                            "id": 489,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12603:39:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 490,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 477,
                            "src": "12645:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12603:47:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12580:70:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 494,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 473,
                              "src": "12680:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 497,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 473,
                                      "src": "12710:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 498,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 46,
                                    "src": "12710:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 499,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "12710:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 500,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 475,
                                  "src": "12734:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 501,
                                  "name": "newAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 481,
                                  "src": "12743:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 495,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "12687:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 496,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "12687:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 502,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12687:69:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 493,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 592,
                            "src": "12660:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 503,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12660:97:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 504,
                        "nodeType": "ExpressionStatement",
                        "src": "12660:97:0"
                      }
                    ]
                  },
                  "id": 506,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeIncreaseAllowance",
                  "nameLocation": "12463:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 478,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 473,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "12501:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 506,
                        "src": "12494:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 472,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 471,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "12494:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "12494:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 475,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "12524:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 506,
                        "src": "12516:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 474,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12516:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 477,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "12549:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 506,
                        "src": "12541:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 476,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12541:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12484:76:0"
                  },
                  "returnParameters": {
                    "id": 479,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12570:0:0"
                  },
                  "scope": 593,
                  "src": "12454:310:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 553,
                    "nodeType": "Block",
                    "src": "12886:370:0",
                    "statements": [
                      {
                        "id": 552,
                        "nodeType": "UncheckedBlock",
                        "src": "12896:354:0",
                        "statements": [
                          {
                            "assignments": [
                              517
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 517,
                                "mutability": "mutable",
                                "name": "oldAllowance",
                                "nameLocation": "12928:12:0",
                                "nodeType": "VariableDeclaration",
                                "scope": 552,
                                "src": "12920:20:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 516,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "12920:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 526,
                            "initialValue": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 522,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "12967:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_SafeERC20_$593",
                                        "typeString": "library SafeERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_SafeERC20_$593",
                                        "typeString": "library SafeERC20"
                                      }
                                    ],
                                    "id": 521,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "12959:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 520,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "12959:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 523,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12959:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 524,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 511,
                                  "src": "12974:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 518,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 509,
                                  "src": "12943:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 519,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allowance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 36,
                                "src": "12943:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address,address) view external returns (uint256)"
                                }
                              },
                              "id": 525,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12943:39:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "12920:62:0"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 530,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 528,
                                    "name": "oldAllowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 517,
                                    "src": "13004:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">=",
                                  "rightExpression": {
                                    "id": 529,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 513,
                                    "src": "13020:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "13004:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                                  "id": 531,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13027:43:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                    "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                  },
                                  "value": "SafeERC20: decreased allowance below zero"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                    "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                  }
                                ],
                                "id": 527,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "12996:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 532,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12996:75:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 533,
                            "nodeType": "ExpressionStatement",
                            "src": "12996:75:0"
                          },
                          {
                            "assignments": [
                              535
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 535,
                                "mutability": "mutable",
                                "name": "newAllowance",
                                "nameLocation": "13093:12:0",
                                "nodeType": "VariableDeclaration",
                                "scope": 552,
                                "src": "13085:20:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 534,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "13085:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 539,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 536,
                                "name": "oldAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 517,
                                "src": "13108:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 537,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 513,
                                "src": "13123:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "13108:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "13085:43:0"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 541,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 509,
                                  "src": "13162:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "expression": {
                                          "id": 544,
                                          "name": "token",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 509,
                                          "src": "13192:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$77",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 545,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "approve",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 46,
                                        "src": "13192:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                          "typeString": "function (address,uint256) external returns (bool)"
                                        }
                                      },
                                      "id": 546,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "13192:22:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      }
                                    },
                                    {
                                      "id": 547,
                                      "name": "spender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 511,
                                      "src": "13216:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 548,
                                      "name": "newAllowance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 535,
                                      "src": "13225:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes4",
                                        "typeString": "bytes4"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 542,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "13169:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 543,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberName": "encodeWithSelector",
                                    "nodeType": "MemberAccess",
                                    "src": "13169:22:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes4) pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 549,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "13169:69:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "id": 540,
                                "name": "_callOptionalReturn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 592,
                                "src": "13142:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
                                  "typeString": "function (contract IERC20,bytes memory)"
                                }
                              },
                              "id": 550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13142:97:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 551,
                            "nodeType": "ExpressionStatement",
                            "src": "13142:97:0"
                          }
                        ]
                      }
                    ]
                  },
                  "id": 554,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeDecreaseAllowance",
                  "nameLocation": "12779:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 514,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 509,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "12817:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "12810:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 508,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 507,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "12810:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "12810:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 511,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "12840:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "12832:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 510,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12832:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 513,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "12865:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "12857:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 512,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "12857:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "12800:76:0"
                  },
                  "returnParameters": {
                    "id": 515,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12886:0:0"
                  },
                  "scope": 593,
                  "src": "12770:486:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 591,
                    "nodeType": "Block",
                    "src": "13709:636:0",
                    "statements": [
                      {
                        "assignments": [
                          564
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 564,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "14071:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 591,
                            "src": "14058:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 563,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "14058:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 573,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 570,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 560,
                              "src": "14112:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14118:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              },
                              "value": "SafeERC20: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 567,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 558,
                                  "src": "14092:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  }
                                ],
                                "id": 566,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "14084:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 565,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "14084:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 568,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14084:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 569,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "functionCall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 167,
                            "src": "14084:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14084:69:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14058:95:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 577,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 574,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 564,
                              "src": "14167:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 575,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "14167:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14187:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "14167:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 590,
                        "nodeType": "IfStatement",
                        "src": "14163:176:0",
                        "trueBody": {
                          "id": 589,
                          "nodeType": "Block",
                          "src": "14190:149:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 581,
                                        "name": "returndata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 564,
                                        "src": "14262:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "components": [
                                          {
                                            "id": 583,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "14275:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 582,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "14275:4:0",
                                              "typeDescriptions": {}
                                            }
                                          }
                                        ],
                                        "id": 584,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "14274:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "id": 579,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "14251:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 580,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "src": "14251:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 585,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "14251:30:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
                                    "id": 586,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "14283:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    },
                                    "value": "SafeERC20: ERC20 operation did not succeed"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    }
                                  ],
                                  "id": 578,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "14243:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14243:85:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 588,
                              "nodeType": "ExpressionStatement",
                              "src": "14243:85:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 555,
                    "nodeType": "StructuredDocumentation",
                    "src": "13262:372:0",
                    "text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
                  },
                  "id": 592,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_callOptionalReturn",
                  "nameLocation": "13648:19:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 561,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 558,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "13675:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "13668:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 557,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 556,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "13668:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "13668:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 560,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "13695:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 592,
                        "src": "13682:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 559,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "13682:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13667:33:0"
                  },
                  "returnParameters": {
                    "id": 562,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13709:0:0"
                  },
                  "scope": 593,
                  "src": "13639:706:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2629,
              "src": "11077:3270:0",
              "usedErrors": []
            },
            {
              "id": 594,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "14408:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 613,
              "linearizedBaseContracts": [
                613
              ],
              "name": "Context",
              "nameLocation": "14947:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 602,
                    "nodeType": "Block",
                    "src": "15023:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 599,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "15040:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 600,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "15040:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 598,
                        "id": 601,
                        "nodeType": "Return",
                        "src": "15033:17:0"
                      }
                    ]
                  },
                  "id": 603,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "14970:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 595,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14980:2:0"
                  },
                  "returnParameters": {
                    "id": 598,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 597,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 603,
                        "src": "15014:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 596,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15014:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15013:9:0"
                  },
                  "scope": 613,
                  "src": "14961:96:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 611,
                    "nodeType": "Block",
                    "src": "15130:32:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 608,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "15147:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 609,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "15147:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 607,
                        "id": 610,
                        "nodeType": "Return",
                        "src": "15140:15:0"
                      }
                    ]
                  },
                  "id": 612,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "15072:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 604,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15080:2:0"
                  },
                  "returnParameters": {
                    "id": 607,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 606,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 612,
                        "src": "15114:14:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 605,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "15114:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15113:16:0"
                  },
                  "scope": 613,
                  "src": "15063:99:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 2629,
              "src": "14929:235:0",
              "usedErrors": []
            },
            {
              "id": 614,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "15225:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 616,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 613,
                    "src": "15774:7:0"
                  },
                  "id": 617,
                  "nodeType": "InheritanceSpecifier",
                  "src": "15774:7:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 615,
                "nodeType": "StructuredDocumentation",
                "src": "15250:494:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 715,
              "linearizedBaseContracts": [
                715,
                613
              ],
              "name": "Ownable",
              "nameLocation": "15763:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 619,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "15804:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "15788:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 618,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15788:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 625,
                  "name": "OwnershipTransferred",
                  "nameLocation": "15823:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 624,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 621,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "15860:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 625,
                        "src": "15844:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 620,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15844:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 623,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "15891:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 625,
                        "src": "15875:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 622,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "15875:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15843:57:0"
                  },
                  "src": "15817:84:0"
                },
                {
                  "body": {
                    "id": 634,
                    "nodeType": "Block",
                    "src": "16017:40:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 630,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 603,
                                "src": "16037:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16037:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 629,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "16027:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16027:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 633,
                        "nodeType": "ExpressionStatement",
                        "src": "16027:23:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 626,
                    "nodeType": "StructuredDocumentation",
                    "src": "15907:91:0",
                    "text": " @dev Initializes the contract setting the deployer as the initial owner."
                  },
                  "id": 635,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 627,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16014:2:0"
                  },
                  "returnParameters": {
                    "id": 628,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16017:0:0"
                  },
                  "scope": 715,
                  "src": "16003:54:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 643,
                    "nodeType": "Block",
                    "src": "16188:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 641,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 619,
                          "src": "16205:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 640,
                        "id": 642,
                        "nodeType": "Return",
                        "src": "16198:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 636,
                    "nodeType": "StructuredDocumentation",
                    "src": "16063:65:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 644,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "16142:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 637,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16147:2:0"
                  },
                  "returnParameters": {
                    "id": 640,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 639,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 644,
                        "src": "16179:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 638,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "16179:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16178:9:0"
                  },
                  "scope": 715,
                  "src": "16133:85:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 657,
                    "nodeType": "Block",
                    "src": "16327:96:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 648,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 644,
                                  "src": "16345:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 649,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "16345:7:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 650,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 603,
                                  "src": "16356:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 651,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "16356:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "16345:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 653,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16370:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 647,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "16337:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 654,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16337:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 655,
                        "nodeType": "ExpressionStatement",
                        "src": "16337:68:0"
                      },
                      {
                        "id": 656,
                        "nodeType": "PlaceholderStatement",
                        "src": "16415:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 645,
                    "nodeType": "StructuredDocumentation",
                    "src": "16224:77:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 658,
                  "name": "onlyOwner",
                  "nameLocation": "16315:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 646,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16324:2:0"
                  },
                  "src": "16306:117:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 671,
                    "nodeType": "Block",
                    "src": "16819:38:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 667,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "16847:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 666,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "16839:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 665,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "16839:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16839:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 664,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "16829:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 669,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16829:21:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 670,
                        "nodeType": "ExpressionStatement",
                        "src": "16829:21:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 659,
                    "nodeType": "StructuredDocumentation",
                    "src": "16429:331:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 672,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 662,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 661,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 658,
                        "src": "16809:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "16809:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "16774:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 660,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16791:2:0"
                  },
                  "returnParameters": {
                    "id": 663,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "16819:0:0"
                  },
                  "scope": 715,
                  "src": "16765:92:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 694,
                    "nodeType": "Block",
                    "src": "17076:119:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 686,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 681,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 675,
                                "src": "17094:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 684,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17114:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 683,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "17106:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 682,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "17106:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 685,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "17106:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "17094:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 687,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17118:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 680,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "17086:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17086:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 689,
                        "nodeType": "ExpressionStatement",
                        "src": "17086:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 691,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 675,
                              "src": "17179:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 690,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "17169:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17169:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 693,
                        "nodeType": "ExpressionStatement",
                        "src": "17169:19:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 673,
                    "nodeType": "StructuredDocumentation",
                    "src": "16863:138:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 695,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 678,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 677,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 658,
                        "src": "17066:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "17066:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "17015:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 676,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 675,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "17041:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 695,
                        "src": "17033:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 674,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17033:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17032:18:0"
                  },
                  "returnParameters": {
                    "id": 679,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "17076:0:0"
                  },
                  "scope": 715,
                  "src": "17006:189:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 713,
                    "nodeType": "Block",
                    "src": "17246:124:0",
                    "statements": [
                      {
                        "assignments": [
                          701
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 701,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "17264:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 713,
                            "src": "17256:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 700,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "17256:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 703,
                        "initialValue": {
                          "id": 702,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 619,
                          "src": "17275:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17256:25:0"
                      },
                      {
                        "expression": {
                          "id": 706,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 704,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 619,
                            "src": "17291:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 705,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 697,
                            "src": "17300:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "17291:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 707,
                        "nodeType": "ExpressionStatement",
                        "src": "17291:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 709,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 701,
                              "src": "17344:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 710,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 697,
                              "src": "17354:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 708,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 625,
                            "src": "17323:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 711,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17323:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 712,
                        "nodeType": "EmitStatement",
                        "src": "17318:45:0"
                      }
                    ]
                  },
                  "id": 714,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setOwner",
                  "nameLocation": "17210:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 698,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 697,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "17228:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 714,
                        "src": "17220:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 696,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "17220:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17219:18:0"
                  },
                  "returnParameters": {
                    "id": 699,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "17246:0:0"
                  },
                  "scope": 715,
                  "src": "17201:169:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2629,
              "src": "15745:1627:0",
              "usedErrors": []
            },
            {
              "id": 716,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "17443:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 717,
                "nodeType": "StructuredDocumentation",
                "src": "17468:750:0",
                "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
              },
              "fullyImplemented": true,
              "id": 754,
              "linearizedBaseContracts": [
                754
              ],
              "name": "ReentrancyGuard",
              "nameLocation": "18237:15:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 720,
                  "mutability": "constant",
                  "name": "_NOT_ENTERED",
                  "nameLocation": "19032:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 754,
                  "src": "19007:41:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 718,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19007:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "19047:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 723,
                  "mutability": "constant",
                  "name": "_ENTERED",
                  "nameLocation": "19079:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 754,
                  "src": "19054:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 721,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19054:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 722,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "19090:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 725,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "19114:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 754,
                  "src": "19098:23:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 724,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19098:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 732,
                    "nodeType": "Block",
                    "src": "19142:39:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 730,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 728,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 725,
                            "src": "19152:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 729,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 720,
                            "src": "19162:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19152:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 731,
                        "nodeType": "ExpressionStatement",
                        "src": "19152:22:0"
                      }
                    ]
                  },
                  "id": 733,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 726,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19139:2:0"
                  },
                  "returnParameters": {
                    "id": 727,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19142:0:0"
                  },
                  "scope": 754,
                  "src": "19128:53:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 752,
                    "nodeType": "Block",
                    "src": "19580:421:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 739,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 737,
                                "name": "_status",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 725,
                                "src": "19669:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 738,
                                "name": "_ENTERED",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 723,
                                "src": "19680:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "19669:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                              "id": 740,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "19690:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              },
                              "value": "ReentrancyGuard: reentrant call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              }
                            ],
                            "id": 736,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "19661:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19661:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 742,
                        "nodeType": "ExpressionStatement",
                        "src": "19661:63:0"
                      },
                      {
                        "expression": {
                          "id": 745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 743,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 725,
                            "src": "19799:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 744,
                            "name": "_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 723,
                            "src": "19809:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19799:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 746,
                        "nodeType": "ExpressionStatement",
                        "src": "19799:18:0"
                      },
                      {
                        "id": 747,
                        "nodeType": "PlaceholderStatement",
                        "src": "19828:1:0"
                      },
                      {
                        "expression": {
                          "id": 750,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 748,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 725,
                            "src": "19972:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 749,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 720,
                            "src": "19982:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "19972:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 751,
                        "nodeType": "ExpressionStatement",
                        "src": "19972:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 734,
                    "nodeType": "StructuredDocumentation",
                    "src": "19187:364:0",
                    "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
                  },
                  "id": 753,
                  "name": "nonReentrant",
                  "nameLocation": "19565:12:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 735,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "19577:2:0"
                  },
                  "src": "19556:445:0",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2629,
              "src": "18219:1784:0",
              "usedErrors": []
            },
            {
              "id": 755,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "20069:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 756,
                "nodeType": "StructuredDocumentation",
                "src": "20247:186:0",
                "text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n now has built in overflow checking."
              },
              "fullyImplemented": true,
              "id": 1065,
              "linearizedBaseContracts": [
                1065
              ],
              "name": "SafeMath",
              "nameLocation": "20442:8:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 787,
                    "nodeType": "Block",
                    "src": "20669:140:0",
                    "statements": [
                      {
                        "id": 786,
                        "nodeType": "UncheckedBlock",
                        "src": "20679:124:0",
                        "statements": [
                          {
                            "assignments": [
                              769
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 769,
                                "mutability": "mutable",
                                "name": "c",
                                "nameLocation": "20711:1:0",
                                "nodeType": "VariableDeclaration",
                                "scope": 786,
                                "src": "20703:9:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 768,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "20703:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 773,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 772,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 770,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 759,
                                "src": "20715:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "id": 771,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 761,
                                "src": "20719:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "20715:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "20703:17:0"
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 774,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 769,
                                "src": "20738:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 775,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 759,
                                "src": "20742:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "20738:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 781,
                            "nodeType": "IfStatement",
                            "src": "20734:28:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "66616c7365",
                                    "id": 777,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "20753:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 778,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "20760:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 779,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "20752:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 767,
                              "id": 780,
                              "nodeType": "Return",
                              "src": "20745:17:0"
                            }
                          },
                          {
                            "expression": {
                              "components": [
                                {
                                  "hexValue": "74727565",
                                  "id": 782,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "20784:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                {
                                  "id": 783,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 769,
                                  "src": "20790:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 784,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "20783:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
                                "typeString": "tuple(bool,uint256)"
                              }
                            },
                            "functionReturnParameters": 767,
                            "id": 785,
                            "nodeType": "Return",
                            "src": "20776:16:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 757,
                    "nodeType": "StructuredDocumentation",
                    "src": "20457:131:0",
                    "text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
                  },
                  "id": 788,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tryAdd",
                  "nameLocation": "20602:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 759,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "20617:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 788,
                        "src": "20609:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 758,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20609:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 761,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "20628:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 788,
                        "src": "20620:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 760,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20620:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "20608:22:0"
                  },
                  "returnParameters": {
                    "id": 767,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 764,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 788,
                        "src": "20654:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 763,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "20654:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 766,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 788,
                        "src": "20660:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 765,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20660:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "20653:15:0"
                  },
                  "scope": 1065,
                  "src": "20593:216:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 815,
                    "nodeType": "Block",
                    "src": "21031:113:0",
                    "statements": [
                      {
                        "id": 814,
                        "nodeType": "UncheckedBlock",
                        "src": "21041:97:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 802,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 800,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 793,
                                "src": "21069:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "id": 801,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 791,
                                "src": "21073:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "21069:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 807,
                            "nodeType": "IfStatement",
                            "src": "21065:28:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "66616c7365",
                                    "id": 803,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21084:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 804,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21091:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 805,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "21083:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 799,
                              "id": 806,
                              "nodeType": "Return",
                              "src": "21076:17:0"
                            }
                          },
                          {
                            "expression": {
                              "components": [
                                {
                                  "hexValue": "74727565",
                                  "id": 808,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21115:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 811,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 809,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 791,
                                    "src": "21121:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 810,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 793,
                                    "src": "21125:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "21121:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 812,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "21114:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
                                "typeString": "tuple(bool,uint256)"
                              }
                            },
                            "functionReturnParameters": 799,
                            "id": 813,
                            "nodeType": "Return",
                            "src": "21107:20:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 789,
                    "nodeType": "StructuredDocumentation",
                    "src": "20815:135:0",
                    "text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
                  },
                  "id": 816,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "trySub",
                  "nameLocation": "20964:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 794,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 791,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "20979:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 816,
                        "src": "20971:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 790,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20971:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 793,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "20990:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 816,
                        "src": "20982:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 792,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "20982:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "20970:22:0"
                  },
                  "returnParameters": {
                    "id": 799,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 796,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 816,
                        "src": "21016:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 795,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "21016:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 798,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 816,
                        "src": "21022:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 797,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21022:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21015:15:0"
                  },
                  "scope": 1065,
                  "src": "20955:189:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 857,
                    "nodeType": "Block",
                    "src": "21368:417:0",
                    "statements": [
                      {
                        "id": 856,
                        "nodeType": "UncheckedBlock",
                        "src": "21378:401:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 830,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 828,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 819,
                                "src": "21636:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 829,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "21641:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "21636:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 835,
                            "nodeType": "IfStatement",
                            "src": "21632:28:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "74727565",
                                    "id": 831,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21652:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "true"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 832,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21658:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 833,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "21651:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 827,
                              "id": 834,
                              "nodeType": "Return",
                              "src": "21644:16:0"
                            }
                          },
                          {
                            "assignments": [
                              837
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 837,
                                "mutability": "mutable",
                                "name": "c",
                                "nameLocation": "21682:1:0",
                                "nodeType": "VariableDeclaration",
                                "scope": 856,
                                "src": "21674:9:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 836,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "21674:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 841,
                            "initialValue": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 840,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 838,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 819,
                                "src": "21686:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "id": 839,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 821,
                                "src": "21690:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "21686:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "21674:17:0"
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 846,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 844,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 842,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 837,
                                  "src": "21709:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 843,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 819,
                                  "src": "21713:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "21709:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 845,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 821,
                                "src": "21718:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "21709:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 851,
                            "nodeType": "IfStatement",
                            "src": "21705:33:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "66616c7365",
                                    "id": 847,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21729:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 848,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "21736:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 849,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "21728:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 827,
                              "id": 850,
                              "nodeType": "Return",
                              "src": "21721:17:0"
                            }
                          },
                          {
                            "expression": {
                              "components": [
                                {
                                  "hexValue": "74727565",
                                  "id": 852,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21760:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                {
                                  "id": 853,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 837,
                                  "src": "21766:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 854,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "21759:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
                                "typeString": "tuple(bool,uint256)"
                              }
                            },
                            "functionReturnParameters": 827,
                            "id": 855,
                            "nodeType": "Return",
                            "src": "21752:16:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 817,
                    "nodeType": "StructuredDocumentation",
                    "src": "21150:137:0",
                    "text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
                  },
                  "id": 858,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tryMul",
                  "nameLocation": "21301:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 822,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 819,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "21316:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 858,
                        "src": "21308:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 818,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21308:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 821,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "21327:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 858,
                        "src": "21319:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 820,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21319:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21307:22:0"
                  },
                  "returnParameters": {
                    "id": 827,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 824,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 858,
                        "src": "21353:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 823,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "21353:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 826,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 858,
                        "src": "21359:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 825,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21359:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21352:15:0"
                  },
                  "scope": 1065,
                  "src": "21292:493:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 885,
                    "nodeType": "Block",
                    "src": "22010:114:0",
                    "statements": [
                      {
                        "id": 884,
                        "nodeType": "UncheckedBlock",
                        "src": "22020:98:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 872,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 870,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 863,
                                "src": "22048:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 871,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "22053:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "22048:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 877,
                            "nodeType": "IfStatement",
                            "src": "22044:29:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "66616c7365",
                                    "id": 873,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "22064:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 874,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "22071:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 875,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "22063:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 869,
                              "id": 876,
                              "nodeType": "Return",
                              "src": "22056:17:0"
                            }
                          },
                          {
                            "expression": {
                              "components": [
                                {
                                  "hexValue": "74727565",
                                  "id": 878,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "22095:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 881,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 879,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 861,
                                    "src": "22101:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 880,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 863,
                                    "src": "22105:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "22101:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 882,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "22094:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
                                "typeString": "tuple(bool,uint256)"
                              }
                            },
                            "functionReturnParameters": 869,
                            "id": 883,
                            "nodeType": "Return",
                            "src": "22087:20:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 859,
                    "nodeType": "StructuredDocumentation",
                    "src": "21791:138:0",
                    "text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
                  },
                  "id": 886,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tryDiv",
                  "nameLocation": "21943:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 864,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 861,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "21958:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 886,
                        "src": "21950:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 860,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21950:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 863,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "21969:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 886,
                        "src": "21961:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 862,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "21961:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21949:22:0"
                  },
                  "returnParameters": {
                    "id": 869,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 866,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 886,
                        "src": "21995:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 865,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "21995:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 868,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 886,
                        "src": "22001:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 867,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22001:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "21994:15:0"
                  },
                  "scope": 1065,
                  "src": "21934:190:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 913,
                    "nodeType": "Block",
                    "src": "22359:114:0",
                    "statements": [
                      {
                        "id": 912,
                        "nodeType": "UncheckedBlock",
                        "src": "22369:98:0",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 900,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 898,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 891,
                                "src": "22397:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 899,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "22402:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "22397:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 905,
                            "nodeType": "IfStatement",
                            "src": "22393:29:0",
                            "trueBody": {
                              "expression": {
                                "components": [
                                  {
                                    "hexValue": "66616c7365",
                                    "id": 901,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "22413:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  },
                                  {
                                    "hexValue": "30",
                                    "id": 902,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "22420:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "id": 903,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "22412:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
                                  "typeString": "tuple(bool,int_const 0)"
                                }
                              },
                              "functionReturnParameters": 897,
                              "id": 904,
                              "nodeType": "Return",
                              "src": "22405:17:0"
                            }
                          },
                          {
                            "expression": {
                              "components": [
                                {
                                  "hexValue": "74727565",
                                  "id": 906,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "22444:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 909,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 907,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 889,
                                    "src": "22450:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "%",
                                  "rightExpression": {
                                    "id": 908,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 891,
                                    "src": "22454:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "22450:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 910,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "22443:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
                                "typeString": "tuple(bool,uint256)"
                              }
                            },
                            "functionReturnParameters": 897,
                            "id": 911,
                            "nodeType": "Return",
                            "src": "22436:20:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 887,
                    "nodeType": "StructuredDocumentation",
                    "src": "22130:148:0",
                    "text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
                  },
                  "id": 914,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tryMod",
                  "nameLocation": "22292:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 892,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 889,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "22307:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 914,
                        "src": "22299:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 888,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22299:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 891,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "22318:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 914,
                        "src": "22310:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 890,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22310:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22298:22:0"
                  },
                  "returnParameters": {
                    "id": 897,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 894,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 914,
                        "src": "22344:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 893,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "22344:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 896,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 914,
                        "src": "22350:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 895,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22350:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22343:15:0"
                  },
                  "scope": 1065,
                  "src": "22283:190:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 928,
                    "nodeType": "Block",
                    "src": "22775:29:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 926,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 924,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 917,
                            "src": "22792:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 925,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 919,
                            "src": "22796:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "22792:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 923,
                        "id": 927,
                        "nodeType": "Return",
                        "src": "22785:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 915,
                    "nodeType": "StructuredDocumentation",
                    "src": "22479:224:0",
                    "text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
                  },
                  "id": 929,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "add",
                  "nameLocation": "22717:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 920,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 917,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "22729:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 929,
                        "src": "22721:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 916,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22721:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 919,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "22740:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 929,
                        "src": "22732:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 918,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22732:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22720:22:0"
                  },
                  "returnParameters": {
                    "id": 923,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 922,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 929,
                        "src": "22766:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 921,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22766:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22765:9:0"
                  },
                  "scope": 1065,
                  "src": "22708:96:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 943,
                    "nodeType": "Block",
                    "src": "23142:29:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 941,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 939,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 932,
                            "src": "23159:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 940,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 934,
                            "src": "23163:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23159:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 938,
                        "id": 942,
                        "nodeType": "Return",
                        "src": "23152:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 930,
                    "nodeType": "StructuredDocumentation",
                    "src": "22810:260:0",
                    "text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
                  },
                  "id": 944,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nameLocation": "23084:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 935,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 932,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "23096:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 944,
                        "src": "23088:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 931,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23088:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 934,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "23107:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 944,
                        "src": "23099:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 933,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23099:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23087:22:0"
                  },
                  "returnParameters": {
                    "id": 938,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 937,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 944,
                        "src": "23133:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 936,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23133:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23132:9:0"
                  },
                  "scope": 1065,
                  "src": "23075:96:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 958,
                    "nodeType": "Block",
                    "src": "23485:29:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 954,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 947,
                            "src": "23502:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 955,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 949,
                            "src": "23506:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23502:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 953,
                        "id": 957,
                        "nodeType": "Return",
                        "src": "23495:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 945,
                    "nodeType": "StructuredDocumentation",
                    "src": "23177:236:0",
                    "text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
                  },
                  "id": 959,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mul",
                  "nameLocation": "23427:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 950,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 947,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "23439:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "23431:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 946,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23431:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 949,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "23450:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "23442:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 948,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23442:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23430:22:0"
                  },
                  "returnParameters": {
                    "id": 953,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 952,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 959,
                        "src": "23476:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 951,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23476:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23475:9:0"
                  },
                  "scope": 1065,
                  "src": "23418:96:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 973,
                    "nodeType": "Block",
                    "src": "23870:29:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 971,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 969,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 962,
                            "src": "23887:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 970,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 964,
                            "src": "23891:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23887:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 968,
                        "id": 972,
                        "nodeType": "Return",
                        "src": "23880:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 960,
                    "nodeType": "StructuredDocumentation",
                    "src": "23520:278:0",
                    "text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
                  },
                  "id": 974,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nameLocation": "23812:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 965,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 962,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "23824:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 974,
                        "src": "23816:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 961,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23816:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 964,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "23835:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 974,
                        "src": "23827:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 963,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23827:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23815:22:0"
                  },
                  "returnParameters": {
                    "id": 968,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 967,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 974,
                        "src": "23861:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 966,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23861:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23860:9:0"
                  },
                  "scope": 1065,
                  "src": "23803:96:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 988,
                    "nodeType": "Block",
                    "src": "24419:29:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 986,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 984,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "24436:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "%",
                          "rightExpression": {
                            "id": 985,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 979,
                            "src": "24440:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24436:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 983,
                        "id": 987,
                        "nodeType": "Return",
                        "src": "24429:12:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 975,
                    "nodeType": "StructuredDocumentation",
                    "src": "23905:442:0",
                    "text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                  },
                  "id": 989,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mod",
                  "nameLocation": "24361:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 980,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 977,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "24373:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 989,
                        "src": "24365:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24365:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 979,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "24384:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 989,
                        "src": "24376:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 978,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24376:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24364:22:0"
                  },
                  "returnParameters": {
                    "id": 983,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 982,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 989,
                        "src": "24410:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 981,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24410:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24409:9:0"
                  },
                  "scope": 1065,
                  "src": "24352:96:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1013,
                    "nodeType": "Block",
                    "src": "25037:106:0",
                    "statements": [
                      {
                        "id": 1012,
                        "nodeType": "UncheckedBlock",
                        "src": "25047:90:0",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1004,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1002,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 994,
                                    "src": "25079:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<=",
                                  "rightExpression": {
                                    "id": 1003,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 992,
                                    "src": "25084:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "25079:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "id": 1005,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 996,
                                  "src": "25087:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1001,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "25071:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 1006,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "25071:29:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1007,
                            "nodeType": "ExpressionStatement",
                            "src": "25071:29:0"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1010,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1008,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 992,
                                "src": "25121:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 1009,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 994,
                                "src": "25125:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "25121:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 1000,
                            "id": 1011,
                            "nodeType": "Return",
                            "src": "25114:12:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 990,
                    "nodeType": "StructuredDocumentation",
                    "src": "24454:453:0",
                    "text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
                  },
                  "id": 1014,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nameLocation": "24921:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 997,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 992,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "24942:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "24934:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 991,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24934:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 994,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "24961:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "24953:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 993,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24953:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 996,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "24986:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "24972:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 995,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "24972:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24924:80:0"
                  },
                  "returnParameters": {
                    "id": 1000,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 999,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1014,
                        "src": "25028:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 998,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25028:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25027:9:0"
                  },
                  "scope": 1065,
                  "src": "24912:231:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1038,
                    "nodeType": "Block",
                    "src": "25752:105:0",
                    "statements": [
                      {
                        "id": 1037,
                        "nodeType": "UncheckedBlock",
                        "src": "25762:89:0",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1029,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1027,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1019,
                                    "src": "25794:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 1028,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "25798:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "25794:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "id": 1030,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1021,
                                  "src": "25801:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1026,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "25786:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 1031,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "25786:28:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1032,
                            "nodeType": "ExpressionStatement",
                            "src": "25786:28:0"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1035,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1033,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1017,
                                "src": "25835:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "id": 1034,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1019,
                                "src": "25839:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "25835:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 1025,
                            "id": 1036,
                            "nodeType": "Return",
                            "src": "25828:12:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1015,
                    "nodeType": "StructuredDocumentation",
                    "src": "25149:473:0",
                    "text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                  },
                  "id": 1039,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nameLocation": "25636:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1022,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1017,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "25657:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1039,
                        "src": "25649:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1016,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25649:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1019,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "25676:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1039,
                        "src": "25668:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1018,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25668:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1021,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "25701:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1039,
                        "src": "25687:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1020,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "25687:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25639:80:0"
                  },
                  "returnParameters": {
                    "id": 1025,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1024,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1039,
                        "src": "25743:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1023,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "25743:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "25742:9:0"
                  },
                  "scope": 1065,
                  "src": "25627:230:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1063,
                    "nodeType": "Block",
                    "src": "26628:105:0",
                    "statements": [
                      {
                        "id": 1062,
                        "nodeType": "UncheckedBlock",
                        "src": "26638:89:0",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1054,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1052,
                                    "name": "b",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1044,
                                    "src": "26670:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 1053,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "26674:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "26670:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "id": 1055,
                                  "name": "errorMessage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1046,
                                  "src": "26677:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 1051,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "26662:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 1056,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "26662:28:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1057,
                            "nodeType": "ExpressionStatement",
                            "src": "26662:28:0"
                          },
                          {
                            "expression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1060,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1058,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1042,
                                "src": "26711:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "id": 1059,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1044,
                                "src": "26715:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "26711:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 1050,
                            "id": 1061,
                            "nodeType": "Return",
                            "src": "26704:12:0"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1040,
                    "nodeType": "StructuredDocumentation",
                    "src": "25863:635:0",
                    "text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                  },
                  "id": 1064,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mod",
                  "nameLocation": "26512:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1047,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1042,
                        "mutability": "mutable",
                        "name": "a",
                        "nameLocation": "26533:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1064,
                        "src": "26525:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1041,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26525:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1044,
                        "mutability": "mutable",
                        "name": "b",
                        "nameLocation": "26552:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1064,
                        "src": "26544:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1043,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26544:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1046,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "26577:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1064,
                        "src": "26563:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1045,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "26563:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26515:80:0"
                  },
                  "returnParameters": {
                    "id": 1050,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1049,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1064,
                        "src": "26619:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1048,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26619:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26618:9:0"
                  },
                  "scope": 1065,
                  "src": "26503:230:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2629,
              "src": "20434:6301:0",
              "usedErrors": []
            },
            {
              "id": 1066,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "26823:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1067,
                "nodeType": "StructuredDocumentation",
                "src": "26848:480:0",
                "text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
              },
              "fullyImplemented": false,
              "id": 1100,
              "linearizedBaseContracts": [
                1100
              ],
              "name": "IERC20Permit",
              "nameLocation": "27339:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 1068,
                    "nodeType": "StructuredDocumentation",
                    "src": "27358:792:0",
                    "text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
                  },
                  "functionSelector": "d505accf",
                  "id": 1085,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "permit",
                  "nameLocation": "28164:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1083,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1070,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "28188:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28180:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1069,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "28180:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1072,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "28211:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28203:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1071,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "28203:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1074,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "28236:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28228:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1073,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28228:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1076,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "28259:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28251:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1075,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28251:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1078,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "28283:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28277:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1077,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "28277:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1080,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "28302:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28294:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1079,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "28294:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1082,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "28321:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "28313:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1081,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "28313:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28170:158:0"
                  },
                  "returnParameters": {
                    "id": 1084,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "28337:0:0"
                  },
                  "scope": 1100,
                  "src": "28155:183:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1086,
                    "nodeType": "StructuredDocumentation",
                    "src": "28344:294:0",
                    "text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
                  },
                  "functionSelector": "7ecebe00",
                  "id": 1093,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nonces",
                  "nameLocation": "28652:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1089,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1088,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "28667:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1093,
                        "src": "28659:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1087,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "28659:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28658:15:0"
                  },
                  "returnParameters": {
                    "id": 1092,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1091,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1093,
                        "src": "28697:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1090,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28697:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28696:9:0"
                  },
                  "scope": 1100,
                  "src": "28643:63:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 1094,
                    "nodeType": "StructuredDocumentation",
                    "src": "28712:128:0",
                    "text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
                  },
                  "functionSelector": "3644e515",
                  "id": 1099,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "DOMAIN_SEPARATOR",
                  "nameLocation": "28907:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1095,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "28923:2:0"
                  },
                  "returnParameters": {
                    "id": 1098,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1097,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1099,
                        "src": "28949:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 1096,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "28949:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28948:9:0"
                  },
                  "scope": 1100,
                  "src": "28898:60:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2629,
              "src": "27329:1631:0",
              "usedErrors": []
            },
            {
              "id": 1101,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".2"
              ],
              "nodeType": "PragmaDirective",
              "src": "29002:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1103,
                    "name": "IERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 77,
                    "src": "29124:6:0"
                  },
                  "id": 1104,
                  "nodeType": "InheritanceSpecifier",
                  "src": "29124:6:0"
                },
                {
                  "baseName": {
                    "id": 1105,
                    "name": "IERC20Permit",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1100,
                    "src": "29132:12:0"
                  },
                  "id": 1106,
                  "nodeType": "InheritanceSpecifier",
                  "src": "29132:12:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 1102,
                "nodeType": "StructuredDocumentation",
                "src": "29028:70:0",
                "text": " @dev Interface of the ERC20 standard as defined in the EIP."
              },
              "fullyImplemented": false,
              "id": 1114,
              "linearizedBaseContracts": [
                1114,
                1100,
                77
              ],
              "name": "IEmberERC20",
              "nameLocation": "29109:11:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "40c10f19",
                  "id": 1113,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "29160:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1111,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1108,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "29173:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1113,
                        "src": "29165:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1107,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "29165:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1110,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "29185:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1113,
                        "src": "29177:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1109,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "29177:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "29164:28:0"
                  },
                  "returnParameters": {
                    "id": 1112,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "29201:0:0"
                  },
                  "scope": 1114,
                  "src": "29151:51:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2629,
              "src": "29099:105:0",
              "usedErrors": []
            },
            {
              "id": 1115,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".2"
              ],
              "nodeType": "PragmaDirective",
              "src": "29245:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1116,
                    "name": "Ownable",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 715,
                    "src": "29298:7:0"
                  },
                  "id": 1117,
                  "nodeType": "InheritanceSpecifier",
                  "src": "29298:7:0"
                },
                {
                  "baseName": {
                    "id": 1118,
                    "name": "ReentrancyGuard",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 754,
                    "src": "29307:15:0"
                  },
                  "id": 1119,
                  "nodeType": "InheritanceSpecifier",
                  "src": "29307:15:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 2628,
              "linearizedBaseContracts": [
                2628,
                754,
                715,
                613
              ],
              "name": "EmberVault",
              "nameLocation": "29284:10:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 1122,
                  "mutability": "constant",
                  "name": "_trustedForwarder",
                  "nameLocation": "29346:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "29329:87:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1120,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "29329:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": {
                    "hexValue": "307830643939386444613934386336326134666543413733353545343644364238303141314145446436",
                    "id": 1121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "29374:42:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "value": "0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6"
                  },
                  "visibility": "internal"
                },
                {
                  "id": 1125,
                  "libraryName": {
                    "id": 1123,
                    "name": "SafeMath",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1065,
                    "src": "29449:8:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "29443:27:0",
                  "typeName": {
                    "id": 1124,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "29462:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 1129,
                  "libraryName": {
                    "id": 1126,
                    "name": "SafeERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 593,
                    "src": "29481:9:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "29475:27:0",
                  "typeName": {
                    "id": 1128,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1127,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 77,
                      "src": "29495:6:0"
                    },
                    "referencedDeclaration": 77,
                    "src": "29495:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$77",
                      "typeString": "contract IERC20"
                    }
                  }
                },
                {
                  "canonicalName": "EmberVault.UserInfo",
                  "id": 1140,
                  "members": [
                    {
                      "constant": false,
                      "id": 1131,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "29568:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1140,
                      "src": "29560:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1130,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29560:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1133,
                      "mutability": "mutable",
                      "name": "rewardDebt",
                      "nameLocation": "29637:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1140,
                      "src": "29629:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1132,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29629:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1135,
                      "mutability": "mutable",
                      "name": "rewardLockedUp",
                      "nameLocation": "29704:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1140,
                      "src": "29696:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1134,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29696:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1137,
                      "mutability": "mutable",
                      "name": "nextHarvestUntil",
                      "nameLocation": "29757:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1140,
                      "src": "29749:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1136,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29749:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1139,
                      "mutability": "mutable",
                      "name": "lastInteraction",
                      "nameLocation": "29827:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1140,
                      "src": "29819:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1138,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29819:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserInfo",
                  "nameLocation": "29541:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 2628,
                  "src": "29534:386:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "EmberVault.PoolInfo",
                  "id": 1158,
                  "members": [
                    {
                      "constant": false,
                      "id": 1143,
                      "mutability": "mutable",
                      "name": "lpToken",
                      "nameLocation": "29985:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "29978:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$77",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 1142,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1141,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 77,
                          "src": "29978:6:0"
                        },
                        "referencedDeclaration": 77,
                        "src": "29978:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1145,
                      "mutability": "mutable",
                      "name": "allocPoint",
                      "nameLocation": "30042:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30034:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1144,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30034:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1147,
                      "mutability": "mutable",
                      "name": "lastRewardBlock",
                      "nameLocation": "30154:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30146:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1146,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30146:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1149,
                      "mutability": "mutable",
                      "name": "accEmberPerShare",
                      "nameLocation": "30240:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30232:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1148,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30232:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1151,
                      "mutability": "mutable",
                      "name": "depositFeeBP",
                      "nameLocation": "30328:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30321:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      },
                      "typeName": {
                        "id": 1150,
                        "name": "uint16",
                        "nodeType": "ElementaryTypeName",
                        "src": "30321:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1153,
                      "mutability": "mutable",
                      "name": "harvestInterval",
                      "nameLocation": "30389:15:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30381:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1152,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30381:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1155,
                      "mutability": "mutable",
                      "name": "totalLp",
                      "nameLocation": "30453:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30445:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1154,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30445:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1157,
                      "mutability": "mutable",
                      "name": "lockupDuration",
                      "nameLocation": "30501:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 1158,
                      "src": "30493:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1156,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30493:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "PoolInfo",
                  "nameLocation": "29959:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 2628,
                  "src": "29952:668:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1f1b9a7c",
                  "id": 1161,
                  "mutability": "mutable",
                  "name": "ember",
                  "nameLocation": "30645:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "30626:24:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                    "typeString": "contract IEmberERC20"
                  },
                  "typeName": {
                    "id": 1160,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 1159,
                      "name": "IEmberERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1114,
                      "src": "30626:11:0"
                    },
                    "referencedDeclaration": 1114,
                    "src": "30626:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                      "typeString": "contract IEmberERC20"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 1163,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "30837:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "30821:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1162,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30821:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "3ad10ef6",
                  "id": 1165,
                  "mutability": "mutable",
                  "name": "devAddress",
                  "nameLocation": "30888:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "30873:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1164,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30873:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "41275358",
                  "id": 1167,
                  "mutability": "mutable",
                  "name": "feeAddress",
                  "nameLocation": "30947:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "30932:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1166,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30932:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "c9e11852",
                  "id": 1169,
                  "mutability": "mutable",
                  "name": "emberPerBlock",
                  "nameLocation": "31017:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31002:28:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1168,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31002:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "de73149d",
                  "id": 1172,
                  "mutability": "constant",
                  "name": "MAXIMUM_HARVEST_INTERVAL",
                  "nameLocation": "31098:24:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31074:58:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1170,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31074:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3134",
                    "id": 1171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31125:7:0",
                    "subdenomination": "days",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1209600_by_1",
                      "typeString": "int_const 1209600"
                    },
                    "value": "14"
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "functionSelector": "812c64f1",
                  "id": 1175,
                  "mutability": "constant",
                  "name": "MAXIMUM_DEPOSIT_FEE_RATE",
                  "nameLocation": "31199:24:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31176:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 1173,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "31176:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "value": {
                    "hexValue": "31303030",
                    "id": 1174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31226:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000_by_1",
                      "typeString": "int_const 1000"
                    },
                    "value": "1000"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "1526fe27",
                  "id": 1179,
                  "mutability": "mutable",
                  "name": "poolInfo",
                  "nameLocation": "31280:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31262:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                    "typeString": "struct EmberVault.PoolInfo[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1177,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 1176,
                        "name": "PoolInfo",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1158,
                        "src": "31262:8:0"
                      },
                      "referencedDeclaration": 1158,
                      "src": "31262:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                        "typeString": "struct EmberVault.PoolInfo"
                      }
                    },
                    "id": 1178,
                    "nodeType": "ArrayTypeName",
                    "src": "31262:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage_ptr",
                      "typeString": "struct EmberVault.PoolInfo[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "93f1a40b",
                  "id": 1186,
                  "mutability": "mutable",
                  "name": "userInfo",
                  "nameLocation": "31399:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31343:64:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                    "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo))"
                  },
                  "typeName": {
                    "id": 1185,
                    "keyType": {
                      "id": 1180,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "31351:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "31343:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                      "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo))"
                    },
                    "valueType": {
                      "id": 1184,
                      "keyType": {
                        "id": 1181,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31370:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "31362:28:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                        "typeString": "mapping(address => struct EmberVault.UserInfo)"
                      },
                      "valueType": {
                        "id": 1183,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1182,
                          "name": "UserInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1140,
                          "src": "31381:8:0"
                        },
                        "referencedDeclaration": 1140,
                        "src": "31381:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                          "typeString": "struct EmberVault.UserInfo"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "17caf6f1",
                  "id": 1189,
                  "mutability": "mutable",
                  "name": "totalAllocPoint",
                  "nameLocation": "31516:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31501:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1187,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31501:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 1188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31534:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "48cd4cb1",
                  "id": 1191,
                  "mutability": "mutable",
                  "name": "startBlock",
                  "nameLocation": "31607:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31592:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1190,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31592:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "474fa630",
                  "id": 1193,
                  "mutability": "mutable",
                  "name": "totalLockedUpRewards",
                  "nameLocation": "31670:20:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31655:35:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1192,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31655:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "2a22bc43",
                  "id": 1196,
                  "mutability": "mutable",
                  "name": "totalEmberInPools",
                  "nameLocation": "31770:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31755:36:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1194,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "31755:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 1195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31790:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "a8c95dc0",
                  "id": 1199,
                  "mutability": "mutable",
                  "name": "metaTxnsEnabled",
                  "nameLocation": "31864:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2628,
                  "src": "31852:35:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1197,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "31852:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "hexValue": "66616c7365",
                    "id": 1198,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31882:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "id": 1207,
                  "name": "Deposit",
                  "nameLocation": "31900:7:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1206,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1201,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "31924:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1207,
                        "src": "31908:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1200,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "31908:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1203,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "31946:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1207,
                        "src": "31930:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1202,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31930:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1205,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "31959:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1207,
                        "src": "31951:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1204,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31951:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "31907:59:0"
                  },
                  "src": "31894:73:0"
                },
                {
                  "anonymous": false,
                  "id": 1215,
                  "name": "Withdraw",
                  "nameLocation": "31978:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1214,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1209,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "32003:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "31987:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1208,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "31987:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1211,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "32025:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "32009:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1210,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32009:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1213,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "32038:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1215,
                        "src": "32030:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1212,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32030:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "31986:59:0"
                  },
                  "src": "31972:74:0"
                },
                {
                  "anonymous": false,
                  "id": 1223,
                  "name": "EmergencyWithdraw",
                  "nameLocation": "32057:17:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1222,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1217,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "32100:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1223,
                        "src": "32084:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1216,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32084:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1219,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "32130:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1223,
                        "src": "32114:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1218,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32114:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1221,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "32151:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1223,
                        "src": "32143:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1220,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32143:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32074:89:0"
                  },
                  "src": "32051:113:0"
                },
                {
                  "anonymous": false,
                  "id": 1231,
                  "name": "EmissionRateUpdated",
                  "nameLocation": "32175:19:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1230,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1225,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32220:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1231,
                        "src": "32204:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1224,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32204:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1227,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "previousAmount",
                        "nameLocation": "32244:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1231,
                        "src": "32236:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1226,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32236:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1229,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newAmount",
                        "nameLocation": "32276:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1231,
                        "src": "32268:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1228,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32268:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32194:97:0"
                  },
                  "src": "32169:123:0"
                },
                {
                  "anonymous": false,
                  "id": 1239,
                  "name": "RewardLockedUp",
                  "nameLocation": "32303:14:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1238,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1233,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "32343:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1239,
                        "src": "32327:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1232,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32327:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1235,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "32373:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1239,
                        "src": "32357:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1234,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32357:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1237,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amountLockedUp",
                        "nameLocation": "32394:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1239,
                        "src": "32386:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1236,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32386:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32317:97:0"
                  },
                  "src": "32297:118:0"
                },
                {
                  "anonymous": false,
                  "id": 1245,
                  "name": "OperatorTransferred",
                  "nameLocation": "32426:19:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1244,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1241,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOperator",
                        "nameLocation": "32471:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1245,
                        "src": "32455:32:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1240,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32455:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1243,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOperator",
                        "nameLocation": "32513:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1245,
                        "src": "32497:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1242,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32497:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32445:85:0"
                  },
                  "src": "32420:111:0"
                },
                {
                  "anonymous": false,
                  "id": 1253,
                  "name": "DevAddressChanged",
                  "nameLocation": "32542:17:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1252,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1247,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32585:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1253,
                        "src": "32569:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1246,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32569:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1249,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldAddress",
                        "nameLocation": "32609:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1253,
                        "src": "32601:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1248,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32601:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1251,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newAddress",
                        "nameLocation": "32637:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1253,
                        "src": "32629:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1250,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32629:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32559:94:0"
                  },
                  "src": "32536:118:0"
                },
                {
                  "anonymous": false,
                  "id": 1261,
                  "name": "FeeAddressChanged",
                  "nameLocation": "32665:17:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1260,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1255,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32708:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1261,
                        "src": "32692:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1254,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32692:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1257,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldAddress",
                        "nameLocation": "32732:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1261,
                        "src": "32724:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1256,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32724:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1259,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newAddress",
                        "nameLocation": "32760:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1261,
                        "src": "32752:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1258,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32752:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32682:94:0"
                  },
                  "src": "32659:118:0"
                },
                {
                  "anonymous": false,
                  "id": 1269,
                  "name": "AllocPointsUpdated",
                  "nameLocation": "32788:18:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1268,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1263,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32832:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1269,
                        "src": "32816:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1262,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32816:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1265,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "previousAmount",
                        "nameLocation": "32856:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1269,
                        "src": "32848:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1264,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32848:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1267,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newAmount",
                        "nameLocation": "32888:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1269,
                        "src": "32880:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1266,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "32880:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32806:97:0"
                  },
                  "src": "32782:122:0"
                },
                {
                  "anonymous": false,
                  "id": 1273,
                  "name": "MetaTxnsEnabled",
                  "nameLocation": "32915:15:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1272,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1271,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32947:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1273,
                        "src": "32931:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1270,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32931:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32930:24:0"
                  },
                  "src": "32909:46:0"
                },
                {
                  "anonymous": false,
                  "id": 1277,
                  "name": "MetaTxnsDisabled",
                  "nameLocation": "32966:16:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1276,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1275,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "caller",
                        "nameLocation": "32999:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1277,
                        "src": "32983:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1274,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "32983:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "32982:24:0"
                  },
                  "src": "32960:47:0"
                },
                {
                  "body": {
                    "id": 1288,
                    "nodeType": "Block",
                    "src": "33037:134:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1283,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1280,
                                "name": "_operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1163,
                                "src": "33068:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 1281,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "33081:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1282,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "33081:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "33068:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657261746f72",
                              "id": 1284,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "33105:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f74c1fe070a1fae0251f1a0d5c2164736dc17ea9652a99ba9bed887eec6e820e",
                                "typeString": "literal_string \"Operator: caller is not the operator\""
                              },
                              "value": "Operator: caller is not the operator"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f74c1fe070a1fae0251f1a0d5c2164736dc17ea9652a99ba9bed887eec6e820e",
                                "typeString": "literal_string \"Operator: caller is not the operator\""
                              }
                            ],
                            "id": 1279,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "33047:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1285,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33047:106:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1286,
                        "nodeType": "ExpressionStatement",
                        "src": "33047:106:0"
                      },
                      {
                        "id": 1287,
                        "nodeType": "PlaceholderStatement",
                        "src": "33163:1:0"
                      }
                    ]
                  },
                  "id": 1289,
                  "name": "onlyOperator",
                  "nameLocation": "33022:12:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1278,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "33034:2:0"
                  },
                  "src": "33013:158:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1344,
                    "nodeType": "Block",
                    "src": "33233:404:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1297,
                            "name": "startBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1191,
                            "src": "33356:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1298,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "33369:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1299,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "33369:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_rational_315360000_by_1",
                                    "typeString": "int_const 315360000"
                                  },
                                  "id": 1308,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_rational_5256000_by_1",
                                      "typeString": "int_const 5256000"
                                    },
                                    "id": 1306,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_87600_by_1",
                                        "typeString": "int_const 87600"
                                      },
                                      "id": 1304,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_rational_3650_by_1",
                                          "typeString": "int_const 3650"
                                        },
                                        "id": 1302,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "hexValue": "3130",
                                          "id": 1300,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "33385:2:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_10_by_1",
                                            "typeString": "int_const 10"
                                          },
                                          "value": "10"
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "hexValue": "333635",
                                          "id": 1301,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "33390:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_365_by_1",
                                            "typeString": "int_const 365"
                                          },
                                          "value": "365"
                                        },
                                        "src": "33385:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_3650_by_1",
                                          "typeString": "int_const 3650"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "3234",
                                        "id": 1303,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "33396:2:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_24_by_1",
                                          "typeString": "int_const 24"
                                        },
                                        "value": "24"
                                      },
                                      "src": "33385:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_87600_by_1",
                                        "typeString": "int_const 87600"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "hexValue": "3630",
                                      "id": 1305,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "33401:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_60_by_1",
                                        "typeString": "int_const 60"
                                      },
                                      "value": "60"
                                    },
                                    "src": "33385:18:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_5256000_by_1",
                                      "typeString": "int_const 5256000"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "hexValue": "3630",
                                    "id": 1307,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "33406:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_60_by_1",
                                      "typeString": "int_const 60"
                                    },
                                    "value": "60"
                                  },
                                  "src": "33385:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_315360000_by_1",
                                    "typeString": "int_const 315360000"
                                  }
                                }
                              ],
                              "id": 1309,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "33384:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_315360000_by_1",
                                "typeString": "int_const 315360000"
                              }
                            },
                            "src": "33369:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33356:53:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1312,
                        "nodeType": "ExpressionStatement",
                        "src": "33356:53:0"
                      },
                      {
                        "expression": {
                          "id": 1315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1313,
                            "name": "ember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1161,
                            "src": "33420:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                              "typeString": "contract IEmberERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1314,
                            "name": "_ember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1292,
                            "src": "33428:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                              "typeString": "contract IEmberERC20"
                            }
                          },
                          "src": "33420:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                            "typeString": "contract IEmberERC20"
                          }
                        },
                        "id": 1316,
                        "nodeType": "ExpressionStatement",
                        "src": "33420:14:0"
                      },
                      {
                        "expression": {
                          "id": 1319,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1317,
                            "name": "emberPerBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1169,
                            "src": "33444:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1318,
                            "name": "_emberPerBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1294,
                            "src": "33460:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33444:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1320,
                        "nodeType": "ExpressionStatement",
                        "src": "33444:30:0"
                      },
                      {
                        "expression": {
                          "id": 1324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1321,
                            "name": "devAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1165,
                            "src": "33485:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1322,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "33498:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1323,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "33498:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "33485:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1325,
                        "nodeType": "ExpressionStatement",
                        "src": "33485:23:0"
                      },
                      {
                        "expression": {
                          "id": 1329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1326,
                            "name": "feeAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1167,
                            "src": "33518:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1327,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "33531:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1328,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "33531:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "33518:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1330,
                        "nodeType": "ExpressionStatement",
                        "src": "33518:23:0"
                      },
                      {
                        "expression": {
                          "id": 1334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1331,
                            "name": "_operator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1163,
                            "src": "33551:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1332,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "33563:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "33563:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "33551:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1335,
                        "nodeType": "ExpressionStatement",
                        "src": "33551:22:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 1339,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "33616:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1338,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "33608:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1337,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "33608:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1340,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "33608:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1341,
                              "name": "_operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1163,
                              "src": "33620:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1336,
                            "name": "OperatorTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1245,
                            "src": "33588:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 1342,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33588:42:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1343,
                        "nodeType": "EmitStatement",
                        "src": "33583:47:0"
                      }
                    ]
                  },
                  "id": 1345,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1295,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1292,
                        "mutability": "mutable",
                        "name": "_ember",
                        "nameLocation": "33201:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1345,
                        "src": "33189:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                          "typeString": "contract IEmberERC20"
                        },
                        "typeName": {
                          "id": 1291,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1290,
                            "name": "IEmberERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1114,
                            "src": "33189:11:0"
                          },
                          "referencedDeclaration": 1114,
                          "src": "33189:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                            "typeString": "contract IEmberERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1294,
                        "mutability": "mutable",
                        "name": "_emberPerBlock",
                        "nameLocation": "33217:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1345,
                        "src": "33209:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1293,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33209:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33188:44:0"
                  },
                  "returnParameters": {
                    "id": 1296,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "33233:0:0"
                  },
                  "scope": 2628,
                  "src": "33177:460:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1358,
                    "nodeType": "Block",
                    "src": "33761:73:0",
                    "statements": [
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1352,
                            "name": "metaTxnsEnabled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1199,
                            "src": "33778:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1355,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1353,
                              "name": "forwarder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1347,
                              "src": "33797:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 1354,
                              "name": "_trustedForwarder",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1122,
                              "src": "33810:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "33797:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "33778:49:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1351,
                        "id": 1357,
                        "nodeType": "Return",
                        "src": "33771:56:0"
                      }
                    ]
                  },
                  "functionSelector": "572b6c05",
                  "id": 1359,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isTrustedForwarder",
                  "nameLocation": "33652:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1348,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1347,
                        "mutability": "mutable",
                        "name": "forwarder",
                        "nameLocation": "33679:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1359,
                        "src": "33671:17:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1346,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "33671:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33670:19:0"
                  },
                  "returnParameters": {
                    "id": 1351,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1350,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1359,
                        "src": "33751:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1349,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "33751:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33750:6:0"
                  },
                  "scope": 2628,
                  "src": "33643:191:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [
                    603
                  ],
                  "body": {
                    "id": 1377,
                    "nodeType": "Block",
                    "src": "33962:323:0",
                    "statements": [
                      {
                        "condition": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1366,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "33995:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1367,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "33995:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1365,
                            "name": "isTrustedForwarder",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1359,
                            "src": "33976:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 1368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33976:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1375,
                          "nodeType": "Block",
                          "src": "34229:50:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 1371,
                                    "name": "super",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -25,
                                    "src": "34250:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_super$_EmberVault_$2628_$",
                                      "typeString": "type(contract super EmberVault)"
                                    }
                                  },
                                  "id": 1372,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "_msgSender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 603,
                                  "src": "34250:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 1373,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "34250:18:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "functionReturnParameters": 1364,
                              "id": 1374,
                              "nodeType": "Return",
                              "src": "34243:25:0"
                            }
                          ]
                        },
                        "id": 1376,
                        "nodeType": "IfStatement",
                        "src": "33972:307:0",
                        "trueBody": {
                          "id": 1370,
                          "nodeType": "Block",
                          "src": "34008:215:0",
                          "statements": [
                            {
                              "AST": {
                                "nodeType": "YulBlock",
                                "src": "34125:88:0",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "34143:56:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "34157:2:0",
                                          "type": "",
                                          "value": "96"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [],
                                                  "functionName": {
                                                    "name": "calldatasize",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "34178:12:0"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "34178:14:0"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "34194:2:0",
                                                  "type": "",
                                                  "value": "20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "34174:3:0"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "34174:23:0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "calldataload",
                                            "nodeType": "YulIdentifier",
                                            "src": "34161:12:0"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "34161:37:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "34153:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "34153:46:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "sender",
                                        "nodeType": "YulIdentifier",
                                        "src": "34143:6:0"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "evmVersion": "london",
                              "externalReferences": [
                                {
                                  "declaration": 1363,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "34143:6:0",
                                  "valueSize": 1
                                }
                              ],
                              "id": 1369,
                              "nodeType": "InlineAssembly",
                              "src": "34116:97:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1378,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "33849:10:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1361,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "33916:8:0"
                  },
                  "parameters": {
                    "id": 1360,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "33859:2:0"
                  },
                  "returnParameters": {
                    "id": 1364,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1363,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "33950:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1378,
                        "src": "33942:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1362,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "33942:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33941:16:0"
                  },
                  "scope": 2628,
                  "src": "33840:445:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    612
                  ],
                  "body": {
                    "id": 1404,
                    "nodeType": "Block",
                    "src": "34411:169:0",
                    "statements": [
                      {
                        "condition": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1385,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "34444:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1386,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "34444:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1384,
                            "name": "isTrustedForwarder",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1359,
                            "src": "34425:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 1387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "34425:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1402,
                          "nodeType": "Block",
                          "src": "34526:48:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 1398,
                                    "name": "super",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -25,
                                    "src": "34547:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_super$_EmberVault_$2628_$",
                                      "typeString": "type(contract super EmberVault)"
                                    }
                                  },
                                  "id": 1399,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "_msgData",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 612,
                                  "src": "34547:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$",
                                    "typeString": "function () view returns (bytes calldata)"
                                  }
                                },
                                "id": 1400,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "34547:16:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                }
                              },
                              "functionReturnParameters": 1383,
                              "id": 1401,
                              "nodeType": "Return",
                              "src": "34540:23:0"
                            }
                          ]
                        },
                        "id": 1403,
                        "nodeType": "IfStatement",
                        "src": "34421:153:0",
                        "trueBody": {
                          "id": 1397,
                          "nodeType": "Block",
                          "src": "34457:63:0",
                          "statements": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "expression": {
                                    "id": 1388,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "34478:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1389,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "data",
                                  "nodeType": "MemberAccess",
                                  "src": "34478:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_calldata_ptr",
                                    "typeString": "bytes calldata"
                                  }
                                },
                                "endExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1394,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "expression": {
                                        "id": 1390,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "34488:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1391,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "data",
                                      "nodeType": "MemberAccess",
                                      "src": "34488:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_calldata_ptr",
                                        "typeString": "bytes calldata"
                                      }
                                    },
                                    "id": 1392,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "src": "34488:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "3230",
                                    "id": 1393,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "34506:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_20_by_1",
                                      "typeString": "int_const 20"
                                    },
                                    "value": "20"
                                  },
                                  "src": "34488:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1395,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexRangeAccess",
                                "src": "34478:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_calldata_ptr_slice",
                                  "typeString": "bytes calldata slice"
                                }
                              },
                              "functionReturnParameters": 1383,
                              "id": 1396,
                              "nodeType": "Return",
                              "src": "34471:38:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1405,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "34300:8:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1380,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "34365:8:0"
                  },
                  "parameters": {
                    "id": 1379,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34308:2:0"
                  },
                  "returnParameters": {
                    "id": 1383,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1382,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1405,
                        "src": "34391:14:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 1381,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "34391:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34390:16:0"
                  },
                  "scope": 2628,
                  "src": "34291:289:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1412,
                    "nodeType": "Block",
                    "src": "34636:33:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1410,
                          "name": "_operator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1163,
                          "src": "34653:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 1409,
                        "id": 1411,
                        "nodeType": "Return",
                        "src": "34646:16:0"
                      }
                    ]
                  },
                  "functionSelector": "570ca735",
                  "id": 1413,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "operator",
                  "nameLocation": "34595:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1406,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34603:2:0"
                  },
                  "returnParameters": {
                    "id": 1409,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1408,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1413,
                        "src": "34627:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1407,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "34627:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34626:9:0"
                  },
                  "scope": 2628,
                  "src": "34586:83:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1427,
                    "nodeType": "Block",
                    "src": "34851:38:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1424,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1415,
                              "src": "34876:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1422,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1417,
                              "src": "34868:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 944,
                            "src": "34868:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "34868:14:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1421,
                        "id": 1426,
                        "nodeType": "Return",
                        "src": "34861:21:0"
                      }
                    ]
                  },
                  "functionSelector": "8dbb1e3a",
                  "id": 1428,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMultiplier",
                  "nameLocation": "34751:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1418,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1415,
                        "mutability": "mutable",
                        "name": "_from",
                        "nameLocation": "34773:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "34765:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1414,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34765:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1417,
                        "mutability": "mutable",
                        "name": "_to",
                        "nameLocation": "34788:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "34780:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1416,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34780:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34764:28:0"
                  },
                  "returnParameters": {
                    "id": 1421,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1420,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "34838:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1419,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34838:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34837:9:0"
                  },
                  "scope": 2628,
                  "src": "34742:147:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1454,
                    "nodeType": "Block",
                    "src": "34962:230:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1441,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1436,
                                "name": "newOperator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1430,
                                "src": "34993:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 1439,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "35016:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 1438,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "35008:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1437,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "35008:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1440,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "35008:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "34993:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5472616e736665724f70657261746f723a206e6577206f70657261746f7220697320746865207a65726f2061646472657373",
                              "id": 1442,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "35032:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_da4f311a5e250fb4fd8b87717b1f43ebce463027dd51c15764cfb0ed8afa4ccf",
                                "typeString": "literal_string \"TransferOperator: new operator is the zero address\""
                              },
                              "value": "TransferOperator: new operator is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_da4f311a5e250fb4fd8b87717b1f43ebce463027dd51c15764cfb0ed8afa4ccf",
                                "typeString": "literal_string \"TransferOperator: new operator is the zero address\""
                              }
                            ],
                            "id": 1435,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "34972:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1443,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "34972:122:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1444,
                        "nodeType": "ExpressionStatement",
                        "src": "34972:122:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1446,
                              "name": "_operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1163,
                              "src": "35129:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1447,
                              "name": "newOperator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1430,
                              "src": "35140:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1445,
                            "name": "OperatorTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1245,
                            "src": "35109:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 1448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35109:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1449,
                        "nodeType": "EmitStatement",
                        "src": "35104:48:0"
                      },
                      {
                        "expression": {
                          "id": 1452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1450,
                            "name": "_operator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1163,
                            "src": "35162:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1451,
                            "name": "newOperator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1430,
                            "src": "35174:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "35162:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1453,
                        "nodeType": "ExpressionStatement",
                        "src": "35162:23:0"
                      }
                    ]
                  },
                  "functionSelector": "29605e77",
                  "id": 1455,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1433,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1432,
                        "name": "onlyOperator",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1289,
                        "src": "34949:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "34949:12:0"
                    }
                  ],
                  "name": "transferOperator",
                  "nameLocation": "34904:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1430,
                        "mutability": "mutable",
                        "name": "newOperator",
                        "nameLocation": "34929:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1455,
                        "src": "34921:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1429,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "34921:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34920:21:0"
                  },
                  "returnParameters": {
                    "id": 1434,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "34962:0:0"
                  },
                  "scope": 2628,
                  "src": "34895:297:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1504,
                    "nodeType": "Block",
                    "src": "35284:324:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1464,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1461,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "35302:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 1462,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "number",
                                "nodeType": "MemberAccess",
                                "src": "35302:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 1463,
                                "name": "startBlock",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1191,
                                "src": "35317:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35302:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4572726f723a206661726d207374617274656420616c7265616479",
                              "id": 1465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "35329:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a2691faa528f91a9a4ab590a0f4add1231978d30e5fbe4f7fec95c435f971f02",
                                "typeString": "literal_string \"Error: farm started already\""
                              },
                              "value": "Error: farm started already"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a2691faa528f91a9a4ab590a0f4add1231978d30e5fbe4f7fec95c435f971f02",
                                "typeString": "literal_string \"Error: farm started already\""
                              }
                            ],
                            "id": 1460,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "35294:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1466,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35294:65:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1467,
                        "nodeType": "ExpressionStatement",
                        "src": "35294:65:0"
                      },
                      {
                        "assignments": [
                          1469
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1469,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "35378:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1504,
                            "src": "35370:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1468,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35370:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1472,
                        "initialValue": {
                          "expression": {
                            "id": 1470,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "35387:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "35387:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35370:32:0"
                      },
                      {
                        "body": {
                          "id": 1497,
                          "nodeType": "Block",
                          "src": "35455:111:0",
                          "statements": [
                            {
                              "assignments": [
                                1485
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1485,
                                  "mutability": "mutable",
                                  "name": "pool",
                                  "nameLocation": "35486:4:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1497,
                                  "src": "35469:21:0",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                    "typeString": "struct EmberVault.PoolInfo"
                                  },
                                  "typeName": {
                                    "id": 1484,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1483,
                                      "name": "PoolInfo",
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 1158,
                                      "src": "35469:8:0"
                                    },
                                    "referencedDeclaration": 1158,
                                    "src": "35469:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1489,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 1486,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1179,
                                  "src": "35493:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                                    "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 1488,
                                "indexExpression": {
                                  "id": 1487,
                                  "name": "pid",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1474,
                                  "src": "35502:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "35493:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                                  "typeString": "struct EmberVault.PoolInfo storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "35469:37:0"
                            },
                            {
                              "expression": {
                                "id": 1495,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1490,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1485,
                                    "src": "35520:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1492,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "lastRewardBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1147,
                                  "src": "35520:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1493,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "35543:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1494,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "number",
                                  "nodeType": "MemberAccess",
                                  "src": "35543:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "35520:35:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1496,
                              "nodeType": "ExpressionStatement",
                              "src": "35520:35:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1477,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1474,
                            "src": "35434:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1478,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1469,
                            "src": "35440:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35434:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1498,
                        "initializationExpression": {
                          "assignments": [
                            1474
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1474,
                              "mutability": "mutable",
                              "name": "pid",
                              "nameLocation": "35425:3:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1498,
                              "src": "35417:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1473,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "35417:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1476,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1475,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "35431:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "35417:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1481,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "35448:5:0",
                            "subExpression": {
                              "id": 1480,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1474,
                              "src": "35450:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1482,
                          "nodeType": "ExpressionStatement",
                          "src": "35448:5:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "35412:154:0"
                      },
                      {
                        "expression": {
                          "id": 1502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1499,
                            "name": "startBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1191,
                            "src": "35576:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1500,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "35589:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1501,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "35589:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35576:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1503,
                        "nodeType": "ExpressionStatement",
                        "src": "35576:25:0"
                      }
                    ]
                  },
                  "functionSelector": "afbcfea1",
                  "id": 1505,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1458,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1457,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 658,
                        "src": "35274:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "35274:9:0"
                    }
                  ],
                  "name": "startFarming",
                  "nameLocation": "35252:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1456,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "35264:2:0"
                  },
                  "returnParameters": {
                    "id": 1459,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "35284:0:0"
                  },
                  "scope": 2628,
                  "src": "35243:365:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1513,
                    "nodeType": "Block",
                    "src": "35668:39:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1510,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "35685:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "35685:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1509,
                        "id": 1512,
                        "nodeType": "Return",
                        "src": "35678:22:0"
                      }
                    ]
                  },
                  "functionSelector": "081e3eda",
                  "id": 1514,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolLength",
                  "nameLocation": "35623:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1506,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "35633:2:0"
                  },
                  "returnParameters": {
                    "id": 1509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1508,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1514,
                        "src": "35659:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1507,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35659:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35658:9:0"
                  },
                  "scope": 2628,
                  "src": "35614:93:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1585,
                    "nodeType": "Block",
                    "src": "36129:908:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint16",
                                "typeString": "uint16"
                              },
                              "id": 1535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1533,
                                "name": "_depositFeeBP",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1521,
                                "src": "36160:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1534,
                                "name": "MAXIMUM_DEPOSIT_FEE_RATE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1175,
                                "src": "36177:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                }
                              },
                              "src": "36160:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4164643a206465706f7369742066656520746f6f2068696768",
                              "id": 1536,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "36215:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_17259bccd9651166f265fb5cf22c1d143b40ce2c5c793d6a97ee5cef63c8416b",
                                "typeString": "literal_string \"Add: deposit fee too high\""
                              },
                              "value": "Add: deposit fee too high"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_17259bccd9651166f265fb5cf22c1d143b40ce2c5c793d6a97ee5cef63c8416b",
                                "typeString": "literal_string \"Add: deposit fee too high\""
                              }
                            ],
                            "id": 1532,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "36139:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36139:113:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1538,
                        "nodeType": "ExpressionStatement",
                        "src": "36139:113:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1542,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1540,
                                "name": "_harvestInterval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1523,
                                "src": "36283:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "id": 1541,
                                "name": "MAXIMUM_HARVEST_INTERVAL",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1172,
                                "src": "36303:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "36283:44:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4164643a20696e76616c6964206861727665737420696e74657276616c",
                              "id": 1543,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "36341:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c29470218040786bec09c4b09d87a994f98f856bb1a5be1258add468877c6524",
                                "typeString": "literal_string \"Add: invalid harvest interval\""
                              },
                              "value": "Add: invalid harvest interval"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c29470218040786bec09c4b09d87a994f98f856bb1a5be1258add468877c6524",
                                "typeString": "literal_string \"Add: invalid harvest interval\""
                              }
                            ],
                            "id": 1539,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "36262:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1544,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36262:120:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1545,
                        "nodeType": "ExpressionStatement",
                        "src": "36262:120:0"
                      },
                      {
                        "condition": {
                          "id": 1546,
                          "name": "_withUpdate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1527,
                          "src": "36396:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1551,
                        "nodeType": "IfStatement",
                        "src": "36392:59:0",
                        "trueBody": {
                          "id": 1550,
                          "nodeType": "Block",
                          "src": "36409:42:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 1547,
                                  "name": "massUpdatePools",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1783,
                                  "src": "36423:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                    "typeString": "function ()"
                                  }
                                },
                                "id": 1548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "36423:17:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1549,
                              "nodeType": "ExpressionStatement",
                              "src": "36423:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1553
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1553,
                            "mutability": "mutable",
                            "name": "lastRewardBlock",
                            "nameLocation": "36468:15:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1585,
                            "src": "36460:23:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1552,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "36460:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1562,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1557,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1554,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "36486:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "36486:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "id": 1556,
                              "name": "startBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1191,
                              "src": "36501:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "36486:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "id": 1560,
                            "name": "startBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1191,
                            "src": "36553:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1561,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "36486:77:0",
                          "trueExpression": {
                            "expression": {
                              "id": 1558,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "36526:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1559,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "36526:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36460:103:0"
                      },
                      {
                        "expression": {
                          "id": 1568,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1563,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1189,
                            "src": "36573:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1566,
                                "name": "_allocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1516,
                                "src": "36611:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 1564,
                                "name": "totalAllocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1189,
                                "src": "36591:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1565,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 929,
                              "src": "36591:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1567,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "36591:32:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "36573:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1569,
                        "nodeType": "ExpressionStatement",
                        "src": "36573:50:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1574,
                                  "name": "_lpToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1519,
                                  "src": "36696:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                {
                                  "id": 1575,
                                  "name": "_allocPoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1516,
                                  "src": "36734:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1576,
                                  "name": "lastRewardBlock",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1553,
                                  "src": "36780:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 1577,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "36831:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 1578,
                                  "name": "_depositFeeBP",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1521,
                                  "src": "36864:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                {
                                  "id": 1579,
                                  "name": "_harvestInterval",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1523,
                                  "src": "36912:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 1580,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "36955:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                {
                                  "id": 1581,
                                  "name": "_lockupDuration",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1525,
                                  "src": "36990:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IERC20_$77",
                                    "typeString": "contract IERC20"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1573,
                                "name": "PoolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1158,
                                "src": "36660:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_PoolInfo_$1158_storage_ptr_$",
                                  "typeString": "type(struct EmberVault.PoolInfo storage pointer)"
                                }
                              },
                              "id": 1582,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "lpToken",
                                "allocPoint",
                                "lastRewardBlock",
                                "accEmberPerShare",
                                "depositFeeBP",
                                "harvestInterval",
                                "totalLp",
                                "lockupDuration"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "36660:360:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_memory_ptr",
                                "typeString": "struct EmberVault.PoolInfo memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_memory_ptr",
                                "typeString": "struct EmberVault.PoolInfo memory"
                              }
                            ],
                            "expression": {
                              "id": 1570,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1179,
                              "src": "36633:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                                "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                              }
                            },
                            "id": 1572,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "36633:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage_ptr_$_t_struct$_PoolInfo_$1158_storage_$returns$__$bound_to$_t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct EmberVault.PoolInfo storage ref[] storage pointer,struct EmberVault.PoolInfo storage ref)"
                            }
                          },
                          "id": 1583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36633:397:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1584,
                        "nodeType": "ExpressionStatement",
                        "src": "36633:397:0"
                      }
                    ]
                  },
                  "functionSelector": "330ae003",
                  "id": 1586,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1530,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1529,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 658,
                        "src": "36119:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "36119:9:0"
                    }
                  ],
                  "name": "add",
                  "nameLocation": "35925:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1528,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1516,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "35946:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "35938:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1515,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35938:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1519,
                        "mutability": "mutable",
                        "name": "_lpToken",
                        "nameLocation": "35974:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "35967:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$77",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 1518,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1517,
                            "name": "IERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 77,
                            "src": "35967:6:0"
                          },
                          "referencedDeclaration": 77,
                          "src": "35967:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$77",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1521,
                        "mutability": "mutable",
                        "name": "_depositFeeBP",
                        "nameLocation": "35999:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "35992:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint16",
                          "typeString": "uint16"
                        },
                        "typeName": {
                          "id": 1520,
                          "name": "uint16",
                          "nodeType": "ElementaryTypeName",
                          "src": "35992:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1523,
                        "mutability": "mutable",
                        "name": "_harvestInterval",
                        "nameLocation": "36030:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "36022:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1522,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36022:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1525,
                        "mutability": "mutable",
                        "name": "_lockupDuration",
                        "nameLocation": "36064:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "36056:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1524,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "36056:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1527,
                        "mutability": "mutable",
                        "name": "_withUpdate",
                        "nameLocation": "36094:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1586,
                        "src": "36089:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1526,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "36089:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35928:183:0"
                  },
                  "returnParameters": {
                    "id": 1531,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "36129:0:0"
                  },
                  "scope": 2628,
                  "src": "35916:1121:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1695,
                    "nodeType": "Block",
                    "src": "37209:885:0",
                    "statements": [
                      {
                        "assignments": [
                          1597
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1597,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "37236:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "37219:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 1596,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1595,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "37219:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "37219:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1601,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1598,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "37243:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1600,
                          "indexExpression": {
                            "id": 1599,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1588,
                            "src": "37252:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "37243:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "37219:38:0"
                      },
                      {
                        "assignments": [
                          1604
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1604,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "37284:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "37267:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 1603,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1602,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "37267:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "37267:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1610,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1605,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "37291:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 1607,
                            "indexExpression": {
                              "id": 1606,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1588,
                              "src": "37300:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "37291:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 1609,
                          "indexExpression": {
                            "id": 1608,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1590,
                            "src": "37306:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "37291:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "37267:45:0"
                      },
                      {
                        "assignments": [
                          1612
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1612,
                            "mutability": "mutable",
                            "name": "accEmberPerShare",
                            "nameLocation": "37330:16:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "37322:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1611,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "37322:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1615,
                        "initialValue": {
                          "expression": {
                            "id": 1613,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1597,
                            "src": "37349:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo storage pointer"
                            }
                          },
                          "id": 1614,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "accEmberPerShare",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1149,
                          "src": "37349:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "37322:48:0"
                      },
                      {
                        "assignments": [
                          1617
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1617,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "37388:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "37380:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1616,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "37380:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1626,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1623,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "37430:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_EmberVault_$2628",
                                    "typeString": "contract EmberVault"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_EmberVault_$2628",
                                    "typeString": "contract EmberVault"
                                  }
                                ],
                                "id": 1622,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "37422:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1621,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "37422:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1624,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "37422:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "id": 1618,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1597,
                                "src": "37399:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                  "typeString": "struct EmberVault.PoolInfo storage pointer"
                                }
                              },
                              "id": 1619,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lpToken",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1143,
                              "src": "37399:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$77",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 1620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 16,
                            "src": "37399:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "37399:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "37380:56:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1631,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1627,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "37451:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1628,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "37451:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "expression": {
                                "id": 1629,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1597,
                                "src": "37466:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                  "typeString": "struct EmberVault.PoolInfo storage pointer"
                                }
                              },
                              "id": 1630,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardBlock",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1147,
                              "src": "37466:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "37451:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1634,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1632,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1617,
                              "src": "37490:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1633,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "37502:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "37490:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "37451:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1673,
                        "nodeType": "IfStatement",
                        "src": "37447:477:0",
                        "trueBody": {
                          "id": 1672,
                          "nodeType": "Block",
                          "src": "37505:419:0",
                          "statements": [
                            {
                              "assignments": [
                                1637
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1637,
                                  "mutability": "mutable",
                                  "name": "multiplier",
                                  "nameLocation": "37527:10:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1672,
                                  "src": "37519:18:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1636,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "37519:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1644,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1639,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1597,
                                      "src": "37571:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1640,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastRewardBlock",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1147,
                                    "src": "37571:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 1641,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "37609:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 1642,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "number",
                                    "nodeType": "MemberAccess",
                                    "src": "37609:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1638,
                                  "name": "getMultiplier",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1428,
                                  "src": "37540:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1643,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37540:95:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "37519:116:0"
                            },
                            {
                              "assignments": [
                                1646
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1646,
                                  "mutability": "mutable",
                                  "name": "emberReward",
                                  "nameLocation": "37657:11:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1672,
                                  "src": "37649:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1645,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "37649:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1658,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 1656,
                                    "name": "totalAllocPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1189,
                                    "src": "37777:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "id": 1652,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1597,
                                          "src": "37739:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                            "typeString": "struct EmberVault.PoolInfo storage pointer"
                                          }
                                        },
                                        "id": 1653,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "allocPoint",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1145,
                                        "src": "37739:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "arguments": [
                                          {
                                            "id": 1649,
                                            "name": "emberPerBlock",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1169,
                                            "src": "37703:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 1647,
                                            "name": "multiplier",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1637,
                                            "src": "37671:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 1648,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "mul",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 959,
                                          "src": "37671:31:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 1650,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "37671:46:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1651,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "mul",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 959,
                                      "src": "37671:67:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 1654,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "37671:84:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "div",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 974,
                                  "src": "37671:105:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1657,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "37671:122:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "37649:144:0"
                            },
                            {
                              "expression": {
                                "id": 1670,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1659,
                                  "name": "accEmberPerShare",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1612,
                                  "src": "37807:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 1667,
                                          "name": "lpSupply",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1617,
                                          "src": "37890:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "hexValue": "31653132",
                                              "id": 1664,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "37880:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1000000000000_by_1",
                                                "typeString": "int_const 1000000000000"
                                              },
                                              "value": "1e12"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_rational_1000000000000_by_1",
                                                "typeString": "int_const 1000000000000"
                                              }
                                            ],
                                            "expression": {
                                              "id": 1662,
                                              "name": "emberReward",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1646,
                                              "src": "37864:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 1663,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "mul",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 959,
                                            "src": "37864:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                                            }
                                          },
                                          "id": 1665,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "37864:21:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1666,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "div",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 974,
                                        "src": "37864:25:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1668,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "37864:35:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1660,
                                      "name": "accEmberPerShare",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1612,
                                      "src": "37826:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1661,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 929,
                                    "src": "37826:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1669,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "37826:87:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "37807:106:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1671,
                              "nodeType": "ExpressionStatement",
                              "src": "37807:106:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1675
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1675,
                            "mutability": "mutable",
                            "name": "pending",
                            "nameLocation": "37942:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1695,
                            "src": "37934:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1674,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "37934:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1688,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1685,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1604,
                                "src": "38013:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                  "typeString": "struct EmberVault.UserInfo storage pointer"
                                }
                              },
                              "id": 1686,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewardDebt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1133,
                              "src": "38013:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "hexValue": "31653132",
                                  "id": 1682,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "37990:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  },
                                  "value": "1e12"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1679,
                                      "name": "accEmberPerShare",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1612,
                                      "src": "37968:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 1676,
                                        "name": "user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1604,
                                        "src": "37952:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                          "typeString": "struct EmberVault.UserInfo storage pointer"
                                        }
                                      },
                                      "id": 1677,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "amount",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1131,
                                      "src": "37952:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1678,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 959,
                                    "src": "37952:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1680,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "37952:33:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1681,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 974,
                                "src": "37952:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "37952:43:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 944,
                            "src": "37952:47:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1687,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "37952:86:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "37934:104:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1691,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1604,
                                "src": "38067:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                  "typeString": "struct EmberVault.UserInfo storage pointer"
                                }
                              },
                              "id": 1692,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewardLockedUp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1135,
                              "src": "38067:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1689,
                              "name": "pending",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1675,
                              "src": "38055:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1690,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 929,
                            "src": "38055:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "38055:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1594,
                        "id": 1694,
                        "nodeType": "Return",
                        "src": "38048:39:0"
                      }
                    ]
                  },
                  "functionSelector": "bc83ee22",
                  "id": 1696,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pendingEmber",
                  "nameLocation": "37107:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1591,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1588,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "37128:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1696,
                        "src": "37120:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1587,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "37120:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1590,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "37142:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1696,
                        "src": "37134:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1589,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "37134:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "37119:29:0"
                  },
                  "returnParameters": {
                    "id": 1594,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1593,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1696,
                        "src": "37196:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1592,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "37196:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "37195:9:0"
                  },
                  "scope": 2628,
                  "src": "37098:996:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1727,
                    "nodeType": "Block",
                    "src": "38277:170:0",
                    "statements": [
                      {
                        "assignments": [
                          1707
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1707,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "38304:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1727,
                            "src": "38287:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 1706,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1705,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "38287:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "38287:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1713,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1708,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "38311:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 1710,
                            "indexExpression": {
                              "id": 1709,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1698,
                              "src": "38320:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "38311:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 1712,
                          "indexExpression": {
                            "id": 1711,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1700,
                            "src": "38326:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38311:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38287:45:0"
                      },
                      {
                        "assignments": [
                          1716
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1716,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "38359:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1727,
                            "src": "38342:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 1715,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1714,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "38342:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "38342:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1720,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1717,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "38366:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1719,
                          "indexExpression": {
                            "id": 1718,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1698,
                            "src": "38375:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38366:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38342:38:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1721,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1707,
                              "src": "38398:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo storage pointer"
                              }
                            },
                            "id": 1722,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lastInteraction",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1139,
                            "src": "38398:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "expression": {
                              "id": 1723,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1716,
                              "src": "38421:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo storage pointer"
                              }
                            },
                            "id": 1724,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lockupDuration",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1157,
                            "src": "38421:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "38398:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1704,
                        "id": 1726,
                        "nodeType": "Return",
                        "src": "38391:49:0"
                      }
                    ]
                  },
                  "functionSelector": "d1593bc8",
                  "id": 1728,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "userLockedUntil",
                  "nameLocation": "38174:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1701,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1698,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "38198:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1728,
                        "src": "38190:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1697,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "38190:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1700,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "38212:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1728,
                        "src": "38204:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1699,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "38204:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38189:29:0"
                  },
                  "returnParameters": {
                    "id": 1704,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1703,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1728,
                        "src": "38264:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1702,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "38264:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38263:9:0"
                  },
                  "scope": 2628,
                  "src": "38165:282:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1757,
                    "nodeType": "Block",
                    "src": "38612:173:0",
                    "statements": [
                      {
                        "assignments": [
                          1739
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1739,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "38639:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1757,
                            "src": "38622:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 1738,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1737,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "38622:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "38622:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1745,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1740,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "38646:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 1742,
                            "indexExpression": {
                              "id": 1741,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1730,
                              "src": "38655:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "38646:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 1744,
                          "indexExpression": {
                            "id": 1743,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1732,
                            "src": "38661:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "38646:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38622:45:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1755,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1749,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1746,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "38696:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1747,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "38696:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 1748,
                              "name": "startBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1191,
                              "src": "38712:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "38696:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1754,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1750,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "38738:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1751,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "38738:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "expression": {
                                "id": 1752,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1739,
                                "src": "38757:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                  "typeString": "struct EmberVault.UserInfo storage pointer"
                                }
                              },
                              "id": 1753,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "nextHarvestUntil",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1137,
                              "src": "38757:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "38738:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "38696:82:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 1736,
                        "id": 1756,
                        "nodeType": "Return",
                        "src": "38677:101:0"
                      }
                    ]
                  },
                  "functionSelector": "2e6c998d",
                  "id": 1758,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "canHarvest",
                  "nameLocation": "38517:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1733,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1730,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "38536:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1758,
                        "src": "38528:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1729,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "38528:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1732,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "38550:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1758,
                        "src": "38542:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1731,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "38542:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38527:29:0"
                  },
                  "returnParameters": {
                    "id": 1736,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1735,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1758,
                        "src": "38602:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1734,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "38602:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "38601:6:0"
                  },
                  "scope": 2628,
                  "src": "38508:277:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1782,
                    "nodeType": "Block",
                    "src": "38899:141:0",
                    "statements": [
                      {
                        "assignments": [
                          1762
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1762,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "38917:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1782,
                            "src": "38909:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1761,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "38909:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1765,
                        "initialValue": {
                          "expression": {
                            "id": 1763,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "38926:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "38926:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "38909:32:0"
                      },
                      {
                        "body": {
                          "id": 1780,
                          "nodeType": "Block",
                          "src": "38994:40:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1777,
                                    "name": "pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1767,
                                    "src": "39019:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1776,
                                  "name": "updatePool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1894,
                                  "src": "39008:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 1778,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39008:15:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1779,
                              "nodeType": "ExpressionStatement",
                              "src": "39008:15:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1772,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1770,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1767,
                            "src": "38973:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1771,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1762,
                            "src": "38979:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "38973:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1781,
                        "initializationExpression": {
                          "assignments": [
                            1767
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1767,
                              "mutability": "mutable",
                              "name": "pid",
                              "nameLocation": "38964:3:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1781,
                              "src": "38956:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1766,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "38956:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1769,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1768,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "38970:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "38956:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1774,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "38987:5:0",
                            "subExpression": {
                              "id": 1773,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1767,
                              "src": "38989:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1775,
                          "nodeType": "ExpressionStatement",
                          "src": "38987:5:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "38951:83:0"
                      }
                    ]
                  },
                  "functionSelector": "630b5ba1",
                  "id": 1783,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "massUpdatePools",
                  "nameLocation": "38874:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1759,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38889:2:0"
                  },
                  "returnParameters": {
                    "id": 1760,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "38899:0:0"
                  },
                  "scope": 2628,
                  "src": "38865:175:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1893,
                    "nodeType": "Block",
                    "src": "39154:804:0",
                    "statements": [
                      {
                        "assignments": [
                          1790
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1790,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "39181:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1893,
                            "src": "39164:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 1789,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1788,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "39164:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "39164:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1794,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1791,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "39188:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1793,
                          "indexExpression": {
                            "id": 1792,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1785,
                            "src": "39197:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "39188:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39164:38:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1799,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1795,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "39216:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1796,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "39216:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "expression": {
                              "id": 1797,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1790,
                              "src": "39232:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo storage pointer"
                              }
                            },
                            "id": 1798,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lastRewardBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1147,
                            "src": "39232:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "39216:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1802,
                        "nodeType": "IfStatement",
                        "src": "39212:73:0",
                        "trueBody": {
                          "id": 1801,
                          "nodeType": "Block",
                          "src": "39254:31:0",
                          "statements": [
                            {
                              "functionReturnParameters": 1787,
                              "id": 1800,
                              "nodeType": "Return",
                              "src": "39268:7:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1804
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1804,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "39303:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1893,
                            "src": "39295:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1803,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "39295:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1807,
                        "initialValue": {
                          "expression": {
                            "id": 1805,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1790,
                            "src": "39314:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo storage pointer"
                            }
                          },
                          "id": 1806,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "totalLp",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1155,
                          "src": "39314:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39295:31:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1810,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1808,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1804,
                              "src": "39340:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1809,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "39352:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "39340:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1814,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1811,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1790,
                                "src": "39357:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                  "typeString": "struct EmberVault.PoolInfo storage pointer"
                                }
                              },
                              "id": 1812,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allocPoint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1145,
                              "src": "39357:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "39376:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "39357:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "39340:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1825,
                        "nodeType": "IfStatement",
                        "src": "39336:123:0",
                        "trueBody": {
                          "id": 1824,
                          "nodeType": "Block",
                          "src": "39379:80:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1821,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1816,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1790,
                                    "src": "39393:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1818,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "lastRewardBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1147,
                                  "src": "39393:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1819,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "39416:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1820,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "number",
                                  "nodeType": "MemberAccess",
                                  "src": "39416:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "39393:35:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1822,
                              "nodeType": "ExpressionStatement",
                              "src": "39393:35:0"
                            },
                            {
                              "functionReturnParameters": 1787,
                              "id": 1823,
                              "nodeType": "Return",
                              "src": "39442:7:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1827
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1827,
                            "mutability": "mutable",
                            "name": "multiplier",
                            "nameLocation": "39477:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1893,
                            "src": "39469:18:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1826,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "39469:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1834,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 1829,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1790,
                                "src": "39504:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                  "typeString": "struct EmberVault.PoolInfo storage pointer"
                                }
                              },
                              "id": 1830,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardBlock",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1147,
                              "src": "39504:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1831,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "39526:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1832,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "39526:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1828,
                            "name": "getMultiplier",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1428,
                            "src": "39490:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1833,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39490:49:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39469:70:0"
                      },
                      {
                        "assignments": [
                          1836
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1836,
                            "mutability": "mutable",
                            "name": "emberReward",
                            "nameLocation": "39557:11:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1893,
                            "src": "39549:19:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1835,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "39549:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1848,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1846,
                              "name": "totalAllocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1189,
                              "src": "39665:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 1842,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1790,
                                    "src": "39631:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1843,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "allocPoint",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1145,
                                  "src": "39631:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1839,
                                      "name": "emberPerBlock",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1169,
                                      "src": "39599:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1837,
                                      "name": "multiplier",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1827,
                                      "src": "39571:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1838,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 959,
                                    "src": "39571:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1840,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "39571:42:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1841,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "mul",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 959,
                                "src": "39571:59:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1844,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "39571:76:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1845,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "div",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 974,
                            "src": "39571:93:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39571:110:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "39549:132:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1852,
                              "name": "devAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1165,
                              "src": "39703:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "3130",
                                  "id": 1855,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "39731:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  }
                                ],
                                "expression": {
                                  "id": 1853,
                                  "name": "emberReward",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1836,
                                  "src": "39715:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1854,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 974,
                                "src": "39715:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1856,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "39715:19:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1849,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1161,
                              "src": "39692:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                "typeString": "contract IEmberERC20"
                              }
                            },
                            "id": 1851,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1113,
                            "src": "39692:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 1857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39692:43:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1858,
                        "nodeType": "ExpressionStatement",
                        "src": "39692:43:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1864,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "39764:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_EmberVault_$2628",
                                    "typeString": "contract EmberVault"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_EmberVault_$2628",
                                    "typeString": "contract EmberVault"
                                  }
                                ],
                                "id": 1863,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "39756:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1862,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "39756:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1865,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "39756:13:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1866,
                              "name": "emberReward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1836,
                              "src": "39771:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1859,
                              "name": "ember",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1161,
                              "src": "39745:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                "typeString": "contract IEmberERC20"
                              }
                            },
                            "id": 1861,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1113,
                            "src": "39745:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 1867,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "39745:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1868,
                        "nodeType": "ExpressionStatement",
                        "src": "39745:38:0"
                      },
                      {
                        "expression": {
                          "id": 1884,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1869,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1790,
                              "src": "39794:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo storage pointer"
                              }
                            },
                            "id": 1871,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "accEmberPerShare",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1149,
                            "src": "39794:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1880,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1790,
                                      "src": "39883:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1881,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "totalLp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1155,
                                    "src": "39883:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "hexValue": "31653132",
                                        "id": 1877,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "39873:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000000000000_by_1",
                                          "typeString": "int_const 1000000000000"
                                        },
                                        "value": "1e12"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_1000000000000_by_1",
                                          "typeString": "int_const 1000000000000"
                                        }
                                      ],
                                      "expression": {
                                        "id": 1875,
                                        "name": "emberReward",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1836,
                                        "src": "39857:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 1876,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "mul",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 959,
                                      "src": "39857:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 1878,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "39857:21:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1879,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "div",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 974,
                                  "src": "39857:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1882,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "39857:39:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "expression": {
                                  "id": 1872,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1790,
                                  "src": "39818:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                    "typeString": "struct EmberVault.PoolInfo storage pointer"
                                  }
                                },
                                "id": 1873,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "accEmberPerShare",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1149,
                                "src": "39818:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1874,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 929,
                              "src": "39818:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1883,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "39818:88:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "39794:112:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1885,
                        "nodeType": "ExpressionStatement",
                        "src": "39794:112:0"
                      },
                      {
                        "expression": {
                          "id": 1891,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1886,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1790,
                              "src": "39916:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo storage pointer"
                              }
                            },
                            "id": 1888,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "lastRewardBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1147,
                            "src": "39916:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1889,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "39939:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1890,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "src": "39939:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "39916:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1892,
                        "nodeType": "ExpressionStatement",
                        "src": "39916:35:0"
                      }
                    ]
                  },
                  "functionSelector": "51eb05a6",
                  "id": 1894,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updatePool",
                  "nameLocation": "39122:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1786,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1785,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "39141:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1894,
                        "src": "39133:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1784,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "39133:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "39132:14:0"
                  },
                  "returnParameters": {
                    "id": 1787,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "39154:0:0"
                  },
                  "scope": 2628,
                  "src": "39113:845:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2084,
                    "nodeType": "Block",
                    "src": "40092:1318:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1907,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1904,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "40123:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 1905,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "number",
                                "nodeType": "MemberAccess",
                                "src": "40123:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1906,
                                "name": "startBlock",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1191,
                                "src": "40139:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "40123:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "456d6265725661756c743a2063616e6e6f74206465706f736974206265666f7265206661726d696e67207374617274",
                              "id": 1908,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "40163:49:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_aa29c5d02e4b14ac5b4ea75153718e48aad4840c3193d2806e90029a1265c0ee",
                                "typeString": "literal_string \"EmberVault: cannot deposit before farming start\""
                              },
                              "value": "EmberVault: cannot deposit before farming start"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_aa29c5d02e4b14ac5b4ea75153718e48aad4840c3193d2806e90029a1265c0ee",
                                "typeString": "literal_string \"EmberVault: cannot deposit before farming start\""
                              }
                            ],
                            "id": 1903,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "40102:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1909,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "40102:120:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1910,
                        "nodeType": "ExpressionStatement",
                        "src": "40102:120:0"
                      },
                      {
                        "assignments": [
                          1913
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1913,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "40250:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2084,
                            "src": "40233:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 1912,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1911,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "40233:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "40233:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1917,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1914,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "40257:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 1916,
                          "indexExpression": {
                            "id": 1915,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1896,
                            "src": "40266:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "40257:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "40233:38:0"
                      },
                      {
                        "assignments": [
                          1920
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1920,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "40298:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2084,
                            "src": "40281:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 1919,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1918,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "40281:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "40281:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1927,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1921,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "40305:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 1923,
                            "indexExpression": {
                              "id": 1922,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1896,
                              "src": "40314:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "40305:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 1926,
                          "indexExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1924,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                1378
                              ],
                              "referencedDeclaration": 1378,
                              "src": "40320:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1925,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "40320:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "40305:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "40281:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1929,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1896,
                              "src": "40355:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1928,
                            "name": "updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1894,
                            "src": "40344:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1930,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "40344:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1931,
                        "nodeType": "ExpressionStatement",
                        "src": "40344:16:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1933,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1896,
                              "src": "40395:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1932,
                            "name": "payOrLockupPendingEmber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2390,
                            "src": "40371:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1934,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "40371:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1935,
                        "nodeType": "ExpressionStatement",
                        "src": "40371:29:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1936,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1898,
                            "src": "40415:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1937,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "40425:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "40415:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2055,
                        "nodeType": "IfStatement",
                        "src": "40411:818:0",
                        "trueBody": {
                          "id": 2054,
                          "nodeType": "Block",
                          "src": "40428:801:0",
                          "statements": [
                            {
                              "assignments": [
                                1940
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1940,
                                  "mutability": "mutable",
                                  "name": "beforeDeposit",
                                  "nameLocation": "40450:13:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2054,
                                  "src": "40442:21:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1939,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "40442:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1949,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 1946,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "40497:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      ],
                                      "id": 1945,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "40489:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1944,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "40489:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1947,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "40489:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 1941,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "40466:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1942,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1143,
                                    "src": "40466:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$77",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 1943,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 16,
                                  "src": "40466:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 1948,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40466:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "40442:61:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 1955,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        1378
                                      ],
                                      "referencedDeclaration": 1378,
                                      "src": "40547:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 1956,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "40547:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1959,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "40569:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      ],
                                      "id": 1958,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "40561:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1957,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "40561:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1960,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "40561:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1961,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1898,
                                    "src": "40576:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 1950,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "40517:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1953,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1143,
                                    "src": "40517:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$77",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 1954,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransferFrom",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 426,
                                  "src": "40517:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
                                    "typeString": "function (contract IERC20,address,address,uint256)"
                                  }
                                },
                                "id": 1962,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40517:67:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1963,
                              "nodeType": "ExpressionStatement",
                              "src": "40517:67:0"
                            },
                            {
                              "assignments": [
                                1965
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1965,
                                  "mutability": "mutable",
                                  "name": "afterDeposit",
                                  "nameLocation": "40606:12:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2054,
                                  "src": "40598:20:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1964,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "40598:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1974,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 1971,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "40652:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_EmberVault_$2628",
                                          "typeString": "contract EmberVault"
                                        }
                                      ],
                                      "id": 1970,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "40644:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1969,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "40644:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1972,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "40644:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 1966,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "40621:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 1967,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1143,
                                    "src": "40621:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$77",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 1968,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 16,
                                  "src": "40621:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 1973,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40621:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "40598:60:0"
                            },
                            {
                              "expression": {
                                "id": 1980,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1975,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1898,
                                  "src": "40673:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 1978,
                                      "name": "beforeDeposit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1940,
                                      "src": "40700:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1976,
                                      "name": "afterDeposit",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1965,
                                      "src": "40683:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1977,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 944,
                                    "src": "40683:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1979,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "40683:31:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "40673:41:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1981,
                              "nodeType": "ExpressionStatement",
                              "src": "40673:41:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint16",
                                  "typeString": "uint16"
                                },
                                "id": 1985,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1982,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1913,
                                    "src": "40733:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 1983,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "depositFeeBP",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1151,
                                  "src": "40733:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint16",
                                    "typeString": "uint16"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1984,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "40753:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "40733:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2014,
                              "nodeType": "IfStatement",
                              "src": "40729:241:0",
                              "trueBody": {
                                "id": 2013,
                                "nodeType": "Block",
                                "src": "40756:214:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      1987
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1987,
                                        "mutability": "mutable",
                                        "name": "depositFee",
                                        "nameLocation": "40782:10:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 2013,
                                        "src": "40774:18:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 1986,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "40774:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1996,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "hexValue": "3130303030",
                                          "id": 1994,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "40830:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_10000_by_1",
                                            "typeString": "int_const 10000"
                                          },
                                          "value": "10000"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_rational_10000_by_1",
                                            "typeString": "int_const 10000"
                                          }
                                        ],
                                        "expression": {
                                          "arguments": [
                                            {
                                              "expression": {
                                                "id": 1990,
                                                "name": "pool",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1913,
                                                "src": "40807:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                                  "typeString": "struct EmberVault.PoolInfo storage pointer"
                                                }
                                              },
                                              "id": 1991,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "depositFeeBP",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 1151,
                                              "src": "40807:17:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_uint16",
                                                "typeString": "uint16"
                                              }
                                            ],
                                            "expression": {
                                              "id": 1988,
                                              "name": "_amount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1898,
                                              "src": "40795:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "id": 1989,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "mul",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 959,
                                            "src": "40795:11:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                                            }
                                          },
                                          "id": 1992,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "40795:30:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1993,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "div",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 974,
                                        "src": "40795:34:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1995,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "40795:41:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "40774:62:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 2002,
                                          "name": "feeAddress",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1167,
                                          "src": "40880:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 2003,
                                          "name": "depositFee",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1987,
                                          "src": "40892:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "expression": {
                                            "id": 1997,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1913,
                                            "src": "40854:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                              "typeString": "struct EmberVault.PoolInfo storage pointer"
                                            }
                                          },
                                          "id": 2000,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "lpToken",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1143,
                                          "src": "40854:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$77",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 2001,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "safeTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 400,
                                        "src": "40854:25:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
                                          "typeString": "function (contract IERC20,address,uint256)"
                                        }
                                      },
                                      "id": 2004,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "40854:49:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2005,
                                    "nodeType": "ExpressionStatement",
                                    "src": "40854:49:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2011,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2006,
                                        "name": "_amount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1898,
                                        "src": "40922:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "id": 2009,
                                            "name": "depositFee",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1987,
                                            "src": "40944:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 2007,
                                            "name": "_amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1898,
                                            "src": "40932:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2008,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "sub",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 944,
                                          "src": "40932:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2010,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "40932:23:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "40922:33:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2012,
                                    "nodeType": "ExpressionStatement",
                                    "src": "40922:33:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 2023,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2015,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1920,
                                    "src": "40984:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                      "typeString": "struct EmberVault.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2017,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1131,
                                  "src": "40984:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 2021,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1898,
                                      "src": "41014:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2018,
                                        "name": "user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1920,
                                        "src": "40998:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                          "typeString": "struct EmberVault.UserInfo storage pointer"
                                        }
                                      },
                                      "id": 2019,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "amount",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1131,
                                      "src": "40998:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2020,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 929,
                                    "src": "40998:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2022,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "40998:24:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "40984:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2024,
                              "nodeType": "ExpressionStatement",
                              "src": "40984:38:0"
                            },
                            {
                              "expression": {
                                "id": 2033,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2025,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1913,
                                    "src": "41036:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2027,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "totalLp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1155,
                                  "src": "41036:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 2031,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1898,
                                      "src": "41068:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2028,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1913,
                                        "src": "41051:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2029,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "totalLp",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1155,
                                      "src": "41051:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2030,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 929,
                                    "src": "41051:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2032,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "41051:25:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "41036:40:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2034,
                              "nodeType": "ExpressionStatement",
                              "src": "41036:40:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 2044,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2037,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1913,
                                        "src": "41103:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2038,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "lpToken",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1143,
                                      "src": "41103:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    ],
                                    "id": 2036,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "41095:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2035,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "41095:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2039,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "41095:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 2042,
                                      "name": "ember",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1161,
                                      "src": "41128:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                        "typeString": "contract IEmberERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                        "typeString": "contract IEmberERC20"
                                      }
                                    ],
                                    "id": 2041,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "41120:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2040,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "41120:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2043,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "41120:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "41095:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2053,
                              "nodeType": "IfStatement",
                              "src": "41091:128:0",
                              "trueBody": {
                                "id": 2052,
                                "nodeType": "Block",
                                "src": "41136:83:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 2050,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2045,
                                        "name": "totalEmberInPools",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1196,
                                        "src": "41154:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "id": 2048,
                                            "name": "_amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1898,
                                            "src": "41196:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 2046,
                                            "name": "totalEmberInPools",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1196,
                                            "src": "41174:17:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2047,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "add",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 929,
                                          "src": "41174:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2049,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "41174:30:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "41154:50:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2051,
                                    "nodeType": "ExpressionStatement",
                                    "src": "41154:50:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 2068,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2056,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1920,
                              "src": "41238:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo storage pointer"
                              }
                            },
                            "id": 2058,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1133,
                            "src": "41238:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "31653132",
                                "id": 2066,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "41299:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000_by_1",
                                  "typeString": "int_const 1000000000000"
                                },
                                "value": "1e12"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1000000000000_by_1",
                                  "typeString": "int_const 1000000000000"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2062,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1913,
                                      "src": "41272:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2063,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "accEmberPerShare",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1149,
                                    "src": "41272:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2059,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1920,
                                      "src": "41256:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                        "typeString": "struct EmberVault.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2060,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1131,
                                    "src": "41256:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2061,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 959,
                                  "src": "41256:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2064,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "41256:38:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2065,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "div",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 974,
                              "src": "41256:42:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2067,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "41256:48:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "41238:66:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2069,
                        "nodeType": "ExpressionStatement",
                        "src": "41238:66:0"
                      },
                      {
                        "expression": {
                          "id": 2075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2070,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1920,
                              "src": "41314:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo storage pointer"
                              }
                            },
                            "id": 2072,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "lastInteraction",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1139,
                            "src": "41314:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2073,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "41337:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "41337:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "41314:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2076,
                        "nodeType": "ExpressionStatement",
                        "src": "41314:38:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2078,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "41375:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2079,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "41375:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2080,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1896,
                              "src": "41389:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2081,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1898,
                              "src": "41395:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2077,
                            "name": "Deposit",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1207,
                            "src": "41367:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2082,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41367:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2083,
                        "nodeType": "EmitStatement",
                        "src": "41362:41:0"
                      }
                    ]
                  },
                  "functionSelector": "e2bbb158",
                  "id": 2085,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1901,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1900,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 753,
                        "src": "40079:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "40079:12:0"
                    }
                  ],
                  "name": "deposit",
                  "nameLocation": "40033:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1899,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1896,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "40049:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2085,
                        "src": "40041:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1895,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "40041:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1898,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "40063:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2085,
                        "src": "40055:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1897,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "40055:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "40040:31:0"
                  },
                  "returnParameters": {
                    "id": 1902,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "40092:0:0"
                  },
                  "scope": 2628,
                  "src": "40024:1386:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2229,
                    "nodeType": "Block",
                    "src": "41508:1186:0",
                    "statements": [
                      {
                        "assignments": [
                          2096
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2096,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "41535:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2229,
                            "src": "41518:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 2095,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2094,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "41518:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "41518:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2100,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2097,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "41542:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2099,
                          "indexExpression": {
                            "id": 2098,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2087,
                            "src": "41551:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "41542:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41518:38:0"
                      },
                      {
                        "assignments": [
                          2103
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2103,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "41583:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2229,
                            "src": "41566:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 2102,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2101,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "41566:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "41566:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2110,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2104,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "41590:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 2106,
                            "indexExpression": {
                              "id": 2105,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2087,
                              "src": "41599:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "41590:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 2109,
                          "indexExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2107,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                1378
                              ],
                              "referencedDeclaration": 1378,
                              "src": "41605:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 2108,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "41605:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "41590:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41566:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2115,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2112,
                                  "name": "user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2103,
                                  "src": "41709:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                    "typeString": "struct EmberVault.UserInfo storage pointer"
                                  }
                                },
                                "id": 2113,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "amount",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1131,
                                "src": "41709:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2114,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2089,
                                "src": "41724:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "41709:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "57697468647261773a207573657220616d6f756e74206973206e6f7420656e6f756768",
                              "id": 2116,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "41733:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ba64c516c254a120233aaa428082e6914b9161ad7a71857ef2335c77b6f968ae",
                                "typeString": "literal_string \"Withdraw: user amount is not enough\""
                              },
                              "value": "Withdraw: user amount is not enough"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ba64c516c254a120233aaa428082e6914b9161ad7a71857ef2335c77b6f968ae",
                                "typeString": "literal_string \"Withdraw: user amount is not enough\""
                              }
                            ],
                            "id": 2111,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "41701:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2117,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41701:70:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2118,
                        "nodeType": "ExpressionStatement",
                        "src": "41701:70:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2123,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2120,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2096,
                                  "src": "41841:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                    "typeString": "struct EmberVault.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2121,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalLp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1155,
                                "src": "41841:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 2122,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2089,
                                "src": "41857:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "41841:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "57697468647261773a20706f6f6c20746f74616c206973206e6f7420656e6f756768",
                              "id": 2124,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "41866:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_14388fda96a52968be65b2db2069f8659b8e83481598954c2a007b87d97ce360",
                                "typeString": "literal_string \"Withdraw: pool total is not enough\""
                              },
                              "value": "Withdraw: pool total is not enough"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_14388fda96a52968be65b2db2069f8659b8e83481598954c2a007b87d97ce360",
                                "typeString": "literal_string \"Withdraw: pool total is not enough\""
                              }
                            ],
                            "id": 2119,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "41833:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41833:70:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2126,
                        "nodeType": "ExpressionStatement",
                        "src": "41833:70:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2135,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 2128,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -4,
                                  "src": "41978:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 2129,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "timestamp",
                                "nodeType": "MemberAccess",
                                "src": "41978:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2134,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 2130,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2103,
                                    "src": "41996:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                      "typeString": "struct EmberVault.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2131,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lastInteraction",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1139,
                                  "src": "41996:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "expression": {
                                    "id": 2132,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2096,
                                    "src": "42019:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2133,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "lockupDuration",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1157,
                                  "src": "42019:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "41996:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "41978:60:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "57697468647261773a20796f752063616e6e6f7420776974686472617720796574",
                              "id": 2136,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "42052:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_4e105e48bc57fa1f9f10e21dee10153614e3c8266381c0ad0a4f81964d866911",
                                "typeString": "literal_string \"Withdraw: you cannot withdraw yet\""
                              },
                              "value": "Withdraw: you cannot withdraw yet"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_4e105e48bc57fa1f9f10e21dee10153614e3c8266381c0ad0a4f81964d866911",
                                "typeString": "literal_string \"Withdraw: you cannot withdraw yet\""
                              }
                            ],
                            "id": 2127,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "41957:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2137,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "41957:140:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2138,
                        "nodeType": "ExpressionStatement",
                        "src": "41957:140:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2140,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2087,
                              "src": "42119:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2139,
                            "name": "updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1894,
                            "src": "42108:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2141,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42108:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2142,
                        "nodeType": "ExpressionStatement",
                        "src": "42108:16:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2144,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2087,
                              "src": "42159:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2143,
                            "name": "payOrLockupPendingEmber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2390,
                            "src": "42135:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 2145,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42135:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2146,
                        "nodeType": "ExpressionStatement",
                        "src": "42135:29:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2147,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2089,
                            "src": "42179:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2148,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "42189:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "42179:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2200,
                        "nodeType": "IfStatement",
                        "src": "42175:337:0",
                        "trueBody": {
                          "id": 2199,
                          "nodeType": "Block",
                          "src": "42192:320:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2158,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2150,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2103,
                                    "src": "42206:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                      "typeString": "struct EmberVault.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2152,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1131,
                                  "src": "42206:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 2156,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2089,
                                      "src": "42236:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2153,
                                        "name": "user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2103,
                                        "src": "42220:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                          "typeString": "struct EmberVault.UserInfo storage pointer"
                                        }
                                      },
                                      "id": 2154,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "amount",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1131,
                                      "src": "42220:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2155,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 944,
                                    "src": "42220:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2157,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "42220:24:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "42206:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2159,
                              "nodeType": "ExpressionStatement",
                              "src": "42206:38:0"
                            },
                            {
                              "expression": {
                                "id": 2168,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2160,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2096,
                                    "src": "42258:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                      "typeString": "struct EmberVault.PoolInfo storage pointer"
                                    }
                                  },
                                  "id": 2162,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "totalLp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1155,
                                  "src": "42258:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "id": 2166,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2089,
                                      "src": "42290:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2163,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2096,
                                        "src": "42273:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2164,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "totalLp",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1155,
                                      "src": "42273:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2165,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 944,
                                    "src": "42273:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2167,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "42273:25:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "42258:40:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2169,
                              "nodeType": "ExpressionStatement",
                              "src": "42258:40:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 2179,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2172,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2096,
                                        "src": "42324:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2173,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "lpToken",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1143,
                                      "src": "42324:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IERC20_$77",
                                        "typeString": "contract IERC20"
                                      }
                                    ],
                                    "id": 2171,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "42316:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2170,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "42316:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2174,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "42316:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 2177,
                                      "name": "ember",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1161,
                                      "src": "42349:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                        "typeString": "contract IEmberERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                        "typeString": "contract IEmberERC20"
                                      }
                                    ],
                                    "id": 2176,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "42341:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 2175,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "42341:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 2178,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "42341:14:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "42316:39:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2188,
                              "nodeType": "IfStatement",
                              "src": "42312:128:0",
                              "trueBody": {
                                "id": 2187,
                                "nodeType": "Block",
                                "src": "42357:83:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 2185,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2180,
                                        "name": "totalEmberInPools",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1196,
                                        "src": "42375:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "id": 2183,
                                            "name": "_amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2089,
                                            "src": "42417:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 2181,
                                            "name": "totalEmberInPools",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1196,
                                            "src": "42395:17:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2182,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "sub",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 944,
                                          "src": "42395:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2184,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "42395:30:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "42375:50:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2186,
                                    "nodeType": "ExpressionStatement",
                                    "src": "42375:50:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 2194,
                                      "name": "_msgSender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [
                                        1378
                                      ],
                                      "referencedDeclaration": 1378,
                                      "src": "42479:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                        "typeString": "function () view returns (address)"
                                      }
                                    },
                                    "id": 2195,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "42479:12:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 2196,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2089,
                                    "src": "42493:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2189,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2096,
                                      "src": "42453:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2192,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lpToken",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1143,
                                    "src": "42453:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$77",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 2193,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 400,
                                  "src": "42453:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
                                    "typeString": "function (contract IERC20,address,uint256)"
                                  }
                                },
                                "id": 2197,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42453:48:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2198,
                              "nodeType": "ExpressionStatement",
                              "src": "42453:48:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 2213,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2201,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2103,
                              "src": "42521:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo storage pointer"
                              }
                            },
                            "id": 2203,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1133,
                            "src": "42521:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "31653132",
                                "id": 2211,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "42582:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000_by_1",
                                  "typeString": "int_const 1000000000000"
                                },
                                "value": "1e12"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1000000000000_by_1",
                                  "typeString": "int_const 1000000000000"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 2207,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2096,
                                      "src": "42555:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                        "typeString": "struct EmberVault.PoolInfo storage pointer"
                                      }
                                    },
                                    "id": 2208,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "accEmberPerShare",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1149,
                                    "src": "42555:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "expression": {
                                      "id": 2204,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2103,
                                      "src": "42539:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                        "typeString": "struct EmberVault.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2205,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1131,
                                    "src": "42539:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2206,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 959,
                                  "src": "42539:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2209,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "42539:38:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "div",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 974,
                              "src": "42539:42:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2212,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42539:48:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "42521:66:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2214,
                        "nodeType": "ExpressionStatement",
                        "src": "42521:66:0"
                      },
                      {
                        "expression": {
                          "id": 2220,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2215,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2103,
                              "src": "42597:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo storage pointer"
                              }
                            },
                            "id": 2217,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "lastInteraction",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1139,
                            "src": "42597:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 2218,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "42620:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2219,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "42620:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "42597:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2221,
                        "nodeType": "ExpressionStatement",
                        "src": "42597:38:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2223,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "42659:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2224,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "42659:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2225,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2087,
                              "src": "42673:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2226,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2089,
                              "src": "42679:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2222,
                            "name": "Withdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1215,
                            "src": "42650:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42650:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2228,
                        "nodeType": "EmitStatement",
                        "src": "42645:42:0"
                      }
                    ]
                  },
                  "functionSelector": "441a3e70",
                  "id": 2230,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2092,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2091,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 753,
                        "src": "41495:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "41495:12:0"
                    }
                  ],
                  "name": "withdraw",
                  "nameLocation": "41448:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2090,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2087,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "41465:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2230,
                        "src": "41457:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2086,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "41457:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2089,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "41479:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2230,
                        "src": "41471:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2088,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "41471:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "41456:31:0"
                  },
                  "returnParameters": {
                    "id": 2093,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "41508:0:0"
                  },
                  "scope": 2628,
                  "src": "41439:1255:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2389,
                    "nodeType": "Block",
                    "src": "42792:1357:0",
                    "statements": [
                      {
                        "assignments": [
                          2237
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2237,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "42819:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2389,
                            "src": "42802:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                              "typeString": "struct EmberVault.PoolInfo"
                            },
                            "typeName": {
                              "id": 2236,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2235,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1158,
                                "src": "42802:8:0"
                              },
                              "referencedDeclaration": 1158,
                              "src": "42802:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                "typeString": "struct EmberVault.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2241,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2238,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1179,
                            "src": "42826:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                              "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                            }
                          },
                          "id": 2240,
                          "indexExpression": {
                            "id": 2239,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2232,
                            "src": "42835:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "42826:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                            "typeString": "struct EmberVault.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "42802:38:0"
                      },
                      {
                        "assignments": [
                          2244
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2244,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "42867:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2389,
                            "src": "42850:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                              "typeString": "struct EmberVault.UserInfo"
                            },
                            "typeName": {
                              "id": 2243,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2242,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1140,
                                "src": "42850:8:0"
                              },
                              "referencedDeclaration": 1140,
                              "src": "42850:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                "typeString": "struct EmberVault.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2251,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 2245,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "42874:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct EmberVault.UserInfo storage ref))"
                              }
                            },
                            "id": 2247,
                            "indexExpression": {
                              "id": 2246,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2232,
                              "src": "42883:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "42874:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$1140_storage_$",
                              "typeString": "mapping(address => struct EmberVault.UserInfo storage ref)"
                            }
                          },
                          "id": 2250,
                          "indexExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 2248,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                1378
                              ],
                              "referencedDeclaration": 1378,
                              "src": "42889:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 2249,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "42889:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "42874:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage",
                            "typeString": "struct EmberVault.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "42850:52:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 2260,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2255,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2252,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2244,
                                "src": "42917:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                  "typeString": "struct EmberVault.UserInfo storage pointer"
                                }
                              },
                              "id": 2253,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "nextHarvestUntil",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1137,
                              "src": "42917:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2254,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "42942:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "42917:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2259,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 2256,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "42947:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 2257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "src": "42947:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "id": 2258,
                              "name": "startBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1191,
                              "src": "42963:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "42947:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "42917:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2273,
                        "nodeType": "IfStatement",
                        "src": "42913:152:0",
                        "trueBody": {
                          "id": 2272,
                          "nodeType": "Block",
                          "src": "42975:90:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 2270,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 2261,
                                    "name": "user",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2244,
                                    "src": "42989:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                      "typeString": "struct EmberVault.UserInfo storage pointer"
                                    }
                                  },
                                  "id": 2263,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "nextHarvestUntil",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1137,
                                  "src": "42989:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2267,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2237,
                                        "src": "43033:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2268,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "harvestInterval",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1153,
                                      "src": "43033:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2264,
                                        "name": "block",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -4,
                                        "src": "43013:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_block",
                                          "typeString": "block"
                                        }
                                      },
                                      "id": 2265,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "timestamp",
                                      "nodeType": "MemberAccess",
                                      "src": "43013:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2266,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "add",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 929,
                                    "src": "43013:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2269,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "43013:41:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "42989:65:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2271,
                              "nodeType": "ExpressionStatement",
                              "src": "42989:65:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          2275
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2275,
                            "mutability": "mutable",
                            "name": "pending",
                            "nameLocation": "43083:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2389,
                            "src": "43075:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2274,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "43075:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2289,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2286,
                                "name": "user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2244,
                                "src": "43159:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                  "typeString": "struct EmberVault.UserInfo storage pointer"
                                }
                              },
                              "id": 2287,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewardDebt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1133,
                              "src": "43159:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "hexValue": "31653132",
                                  "id": 2283,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "43136:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  },
                                  "value": "1e12"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_1000000000000_by_1",
                                    "typeString": "int_const 1000000000000"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 2279,
                                        "name": "pool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2237,
                                        "src": "43109:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                          "typeString": "struct EmberVault.PoolInfo storage pointer"
                                        }
                                      },
                                      "id": 2280,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "accEmberPerShare",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1149,
                                      "src": "43109:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "expression": {
                                        "id": 2276,
                                        "name": "user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2244,
                                        "src": "43093:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                          "typeString": "struct EmberVault.UserInfo storage pointer"
                                        }
                                      },
                                      "id": 2277,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "amount",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1131,
                                      "src": "43093:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2278,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "mul",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 959,
                                    "src": "43093:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2281,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "43093:38:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2282,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 974,
                                "src": "43093:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2284,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "43093:48:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2285,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 944,
                            "src": "43093:52:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43093:91:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "43075:109:0"
                      },
                      {
                        "condition": {
                          "arguments": [
                            {
                              "id": 2291,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2232,
                              "src": "43209:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2292,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "43215:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2293,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "43215:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2290,
                            "name": "canHarvest",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1758,
                            "src": "43198:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_address_$returns$_t_bool_$",
                              "typeString": "function (uint256,address) view returns (bool)"
                            }
                          },
                          "id": 2294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43198:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2354,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 2352,
                              "name": "pending",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2275,
                              "src": "43867:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 2353,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "43877:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "43867:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 2387,
                          "nodeType": "IfStatement",
                          "src": "43863:280:0",
                          "trueBody": {
                            "id": 2386,
                            "nodeType": "Block",
                            "src": "43880:263:0",
                            "statements": [
                              {
                                "expression": {
                                  "id": 2363,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "expression": {
                                      "id": 2355,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2244,
                                      "src": "43894:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                        "typeString": "struct EmberVault.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2357,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "memberName": "rewardLockedUp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1135,
                                    "src": "43894:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "arguments": [
                                      {
                                        "id": 2361,
                                        "name": "pending",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2275,
                                        "src": "43940:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "expression": {
                                          "id": 2358,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2244,
                                          "src": "43916:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                            "typeString": "struct EmberVault.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2359,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardLockedUp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1135,
                                        "src": "43916:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 2360,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "add",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 929,
                                      "src": "43916:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 2362,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "43916:32:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "43894:54:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2364,
                                "nodeType": "ExpressionStatement",
                                "src": "43894:54:0"
                              },
                              {
                                "expression": {
                                  "id": 2370,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "expression": {
                                      "id": 2365,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2244,
                                      "src": "43962:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                        "typeString": "struct EmberVault.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2367,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "memberName": "lastInteraction",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1139,
                                    "src": "43962:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "expression": {
                                      "id": 2368,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "43985:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 2369,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "43985:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "43962:38:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2371,
                                "nodeType": "ExpressionStatement",
                                "src": "43962:38:0"
                              },
                              {
                                "expression": {
                                  "id": 2377,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 2372,
                                    "name": "totalLockedUpRewards",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1193,
                                    "src": "44014:20:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "arguments": [
                                      {
                                        "id": 2375,
                                        "name": "pending",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2275,
                                        "src": "44062:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 2373,
                                        "name": "totalLockedUpRewards",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1193,
                                        "src": "44037:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 2374,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "add",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 929,
                                      "src": "44037:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 2376,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "44037:33:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "44014:56:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2378,
                                "nodeType": "ExpressionStatement",
                                "src": "44014:56:0"
                              },
                              {
                                "eventCall": {
                                  "arguments": [
                                    {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "id": 2380,
                                        "name": "_msgSender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          1378
                                        ],
                                        "referencedDeclaration": 1378,
                                        "src": "44104:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                          "typeString": "function () view returns (address)"
                                        }
                                      },
                                      "id": 2381,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "44104:12:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 2382,
                                      "name": "_pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2232,
                                      "src": "44118:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "id": 2383,
                                      "name": "pending",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2275,
                                      "src": "44124:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 2379,
                                    "name": "RewardLockedUp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1239,
                                    "src": "44089:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                      "typeString": "function (address,uint256,uint256)"
                                    }
                                  },
                                  "id": 2384,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "44089:43:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 2385,
                                "nodeType": "EmitStatement",
                                "src": "44084:48:0"
                              }
                            ]
                          }
                        },
                        "id": 2388,
                        "nodeType": "IfStatement",
                        "src": "43194:949:0",
                        "trueBody": {
                          "id": 2351,
                          "nodeType": "Block",
                          "src": "43230:627:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 2302,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2297,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2295,
                                    "name": "pending",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2275,
                                    "src": "43248:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 2296,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "43258:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "43248:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2301,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 2298,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2244,
                                      "src": "43263:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                        "typeString": "struct EmberVault.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 2299,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "rewardLockedUp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1135,
                                    "src": "43263:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 2300,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "43285:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "43263:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "43248:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2350,
                              "nodeType": "IfStatement",
                              "src": "43244:603:0",
                              "trueBody": {
                                "id": 2349,
                                "nodeType": "Block",
                                "src": "43288:559:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      2304
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 2304,
                                        "mutability": "mutable",
                                        "name": "totalRewards",
                                        "nameLocation": "43314:12:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 2349,
                                        "src": "43306:20:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 2303,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "43306:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 2310,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "expression": {
                                            "id": 2307,
                                            "name": "user",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2244,
                                            "src": "43341:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                              "typeString": "struct EmberVault.UserInfo storage pointer"
                                            }
                                          },
                                          "id": 2308,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "rewardLockedUp",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1135,
                                          "src": "43341:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 2305,
                                          "name": "pending",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2275,
                                          "src": "43329:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 2306,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "add",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 929,
                                        "src": "43329:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 2309,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "43329:32:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "43306:55:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2317,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 2311,
                                        "name": "totalLockedUpRewards",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1193,
                                        "src": "43412:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "expression": {
                                              "id": 2314,
                                              "name": "user",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2244,
                                              "src": "43481:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                                "typeString": "struct EmberVault.UserInfo storage pointer"
                                              }
                                            },
                                            "id": 2315,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "rewardLockedUp",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1135,
                                            "src": "43481:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 2312,
                                            "name": "totalLockedUpRewards",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1193,
                                            "src": "43435:20:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2313,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "sub",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 944,
                                          "src": "43435:24:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2316,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "43435:83:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "43412:106:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2318,
                                    "nodeType": "ExpressionStatement",
                                    "src": "43412:106:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2323,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 2319,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2244,
                                          "src": "43536:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                            "typeString": "struct EmberVault.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2321,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "rewardLockedUp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1135,
                                        "src": "43536:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "hexValue": "30",
                                        "id": 2322,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "43558:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "43536:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2324,
                                    "nodeType": "ExpressionStatement",
                                    "src": "43536:23:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2330,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 2325,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2244,
                                          "src": "43577:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                            "typeString": "struct EmberVault.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2327,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "lastInteraction",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1139,
                                        "src": "43577:20:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "expression": {
                                          "id": 2328,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "43600:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 2329,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "timestamp",
                                        "nodeType": "MemberAccess",
                                        "src": "43600:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "43577:38:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2331,
                                    "nodeType": "ExpressionStatement",
                                    "src": "43577:38:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 2341,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 2332,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2244,
                                          "src": "43633:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$1140_storage_ptr",
                                            "typeString": "struct EmberVault.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 2334,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "nextHarvestUntil",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1137,
                                        "src": "43633:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "expression": {
                                              "id": 2338,
                                              "name": "pool",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2237,
                                              "src": "43698:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage_ptr",
                                                "typeString": "struct EmberVault.PoolInfo storage pointer"
                                              }
                                            },
                                            "id": 2339,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "harvestInterval",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1153,
                                            "src": "43698:20:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "expression": {
                                              "id": 2335,
                                              "name": "block",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -4,
                                              "src": "43657:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_magic_block",
                                                "typeString": "block"
                                              }
                                            },
                                            "id": 2336,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "timestamp",
                                            "nodeType": "MemberAccess",
                                            "src": "43657:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2337,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "add",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 929,
                                          "src": "43657:19:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2340,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "43657:79:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "43633:103:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2342,
                                    "nodeType": "ExpressionStatement",
                                    "src": "43633:103:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "expression": {
                                            "argumentTypes": [],
                                            "id": 2344,
                                            "name": "_msgSender",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                              1378
                                            ],
                                            "referencedDeclaration": 1378,
                                            "src": "43805:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                              "typeString": "function () view returns (address)"
                                            }
                                          },
                                          "id": 2345,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "43805:12:0",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 2346,
                                          "name": "totalRewards",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2304,
                                          "src": "43819:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 2343,
                                        "name": "safeEmberTransfer",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2446,
                                        "src": "43787:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (address,uint256)"
                                        }
                                      },
                                      "id": 2347,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "43787:45:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2348,
                                    "nodeType": "ExpressionStatement",
                                    "src": "43787:45:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 2390,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "payOrLockupPendingEmber",
                  "nameLocation": "42745:23:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2233,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2232,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "42777:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2390,
                        "src": "42769:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2231,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "42769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "42768:14:0"
                  },
                  "returnParameters": {
                    "id": 2234,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "42792:0:0"
                  },
                  "scope": 2628,
                  "src": "42736:1413:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2445,
                    "nodeType": "Block",
                    "src": "44327:550:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2405,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 2401,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "44365:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_EmberVault_$2628",
                                      "typeString": "contract EmberVault"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_EmberVault_$2628",
                                      "typeString": "contract EmberVault"
                                    }
                                  ],
                                  "id": 2400,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "44357:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 2399,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "44357:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2402,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "44357:13:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "id": 2397,
                                "name": "ember",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1161,
                                "src": "44341:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                  "typeString": "contract IEmberERC20"
                                }
                              },
                              "id": 2398,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 16,
                              "src": "44341:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 2403,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44341:30:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 2404,
                            "name": "totalEmberInPools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1196,
                            "src": "44374:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "44341:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2444,
                        "nodeType": "IfStatement",
                        "src": "44337:534:0",
                        "trueBody": {
                          "id": 2443,
                          "nodeType": "Block",
                          "src": "44393:478:0",
                          "statements": [
                            {
                              "assignments": [
                                2407
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2407,
                                  "mutability": "mutable",
                                  "name": "EmberBal",
                                  "nameLocation": "44582:8:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2443,
                                  "src": "44574:16:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 2406,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "44574:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 2418,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "id": 2416,
                                    "name": "totalEmberInPools",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1196,
                                    "src": "44645:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 2412,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "44617:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_EmberVault_$2628",
                                              "typeString": "contract EmberVault"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_EmberVault_$2628",
                                              "typeString": "contract EmberVault"
                                            }
                                          ],
                                          "id": 2411,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "44609:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 2410,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "44609:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 2413,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "44609:13:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "id": 2408,
                                        "name": "ember",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1161,
                                        "src": "44593:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                          "typeString": "contract IEmberERC20"
                                        }
                                      },
                                      "id": 2409,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "balanceOf",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 16,
                                      "src": "44593:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                        "typeString": "function (address) view external returns (uint256)"
                                      }
                                    },
                                    "id": 2414,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "44593:30:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2415,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 944,
                                  "src": "44593:34:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2417,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "44593:83:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "44574:102:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2421,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2419,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2394,
                                  "src": "44694:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "id": 2420,
                                  "name": "EmberBal",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2407,
                                  "src": "44705:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "44694:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2432,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 2430,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2394,
                                    "src": "44787:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 2431,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "44797:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "44787:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 2441,
                                "nodeType": "IfStatement",
                                "src": "44783:78:0",
                                "trueBody": {
                                  "id": 2440,
                                  "nodeType": "Block",
                                  "src": "44800:61:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "id": 2436,
                                            "name": "_to",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2392,
                                            "src": "44833:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          },
                                          {
                                            "id": 2437,
                                            "name": "_amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2394,
                                            "src": "44838:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            },
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "id": 2433,
                                            "name": "ember",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1161,
                                            "src": "44818:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                              "typeString": "contract IEmberERC20"
                                            }
                                          },
                                          "id": 2435,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "transfer",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 26,
                                          "src": "44818:14:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                            "typeString": "function (address,uint256) external returns (bool)"
                                          }
                                        },
                                        "id": 2438,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "44818:28:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "id": 2439,
                                      "nodeType": "ExpressionStatement",
                                      "src": "44818:28:0"
                                    }
                                  ]
                                }
                              },
                              "id": 2442,
                              "nodeType": "IfStatement",
                              "src": "44690:171:0",
                              "trueBody": {
                                "id": 2429,
                                "nodeType": "Block",
                                "src": "44715:62:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 2425,
                                          "name": "_to",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2392,
                                          "src": "44748:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "id": 2426,
                                          "name": "EmberBal",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2407,
                                          "src": "44753:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "id": 2422,
                                          "name": "ember",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1161,
                                          "src": "44733:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IEmberERC20_$1114",
                                            "typeString": "contract IEmberERC20"
                                          }
                                        },
                                        "id": 2424,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "transfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 26,
                                        "src": "44733:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                          "typeString": "function (address,uint256) external returns (bool)"
                                        }
                                      },
                                      "id": 2427,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "44733:29:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 2428,
                                    "nodeType": "ExpressionStatement",
                                    "src": "44733:29:0"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 2446,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeEmberTransfer",
                  "nameLocation": "44270:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2395,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2392,
                        "mutability": "mutable",
                        "name": "_to",
                        "nameLocation": "44296:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2446,
                        "src": "44288:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2391,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "44288:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2394,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "44309:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2446,
                        "src": "44301:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2393,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "44301:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "44287:30:0"
                  },
                  "returnParameters": {
                    "id": 2396,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "44327:0:0"
                  },
                  "scope": 2628,
                  "src": "44261:616:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2480,
                    "nodeType": "Block",
                    "src": "44981:254:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2455,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 2452,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    1378
                                  ],
                                  "referencedDeclaration": 1378,
                                  "src": "44999:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 2453,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "44999:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 2454,
                                "name": "devAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1165,
                                "src": "45015:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "44999:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574446576416464726573733a20464f5242494444454e",
                              "id": 2456,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45027:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2135bd7a71e1ea126d853a1cc8c34707e4a82417f6097a0ca255ae1f628b3c99",
                                "typeString": "literal_string \"setDevAddress: FORBIDDEN\""
                              },
                              "value": "setDevAddress: FORBIDDEN"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2135bd7a71e1ea126d853a1cc8c34707e4a82417f6097a0ca255ae1f628b3c99",
                                "typeString": "literal_string \"setDevAddress: FORBIDDEN\""
                              }
                            ],
                            "id": 2451,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "44991:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2457,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "44991:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2458,
                        "nodeType": "ExpressionStatement",
                        "src": "44991:63:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2465,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2460,
                                "name": "_devAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2448,
                                "src": "45072:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 2463,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "45095:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 2462,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "45087:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 2461,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "45087:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2464,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45087:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "45072:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574446576416464726573733a205a45524f",
                              "id": 2466,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45099:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2ccf24bd4623988e8895731fc5360356fd4ddc1cf9889b4a2ccd0c3b70522c65",
                                "typeString": "literal_string \"setDevAddress: ZERO\""
                              },
                              "value": "setDevAddress: ZERO"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2ccf24bd4623988e8895731fc5360356fd4ddc1cf9889b4a2ccd0c3b70522c65",
                                "typeString": "literal_string \"setDevAddress: ZERO\""
                              }
                            ],
                            "id": 2459,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45064:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2467,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45064:57:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2468,
                        "nodeType": "ExpressionStatement",
                        "src": "45064:57:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2470,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "45155:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2471,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "45155:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2472,
                              "name": "devAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1165,
                              "src": "45169:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2473,
                              "name": "_devAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2448,
                              "src": "45181:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2469,
                            "name": "DevAddressChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1253,
                            "src": "45137:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address,address)"
                            }
                          },
                          "id": 2474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45137:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2475,
                        "nodeType": "EmitStatement",
                        "src": "45132:61:0"
                      },
                      {
                        "expression": {
                          "id": 2478,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2476,
                            "name": "devAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1165,
                            "src": "45204:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2477,
                            "name": "_devAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2448,
                            "src": "45217:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "45204:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2479,
                        "nodeType": "ExpressionStatement",
                        "src": "45204:24:0"
                      }
                    ]
                  },
                  "functionSelector": "d0d41fe1",
                  "id": 2481,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setDevAddress",
                  "nameLocation": "44939:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2449,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2448,
                        "mutability": "mutable",
                        "name": "_devAddress",
                        "nameLocation": "44961:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2481,
                        "src": "44953:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2447,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "44953:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "44952:21:0"
                  },
                  "returnParameters": {
                    "id": 2450,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "44981:0:0"
                  },
                  "scope": 2628,
                  "src": "44930:305:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2515,
                    "nodeType": "Block",
                    "src": "45292:254:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2490,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 2487,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    1378
                                  ],
                                  "referencedDeclaration": 1378,
                                  "src": "45310:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 2488,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45310:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 2489,
                                "name": "feeAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1167,
                                "src": "45326:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "45310:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574466565416464726573733a20464f5242494444454e",
                              "id": 2491,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45338:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d4b2eb0827e71ee18958471ff450fe4680022dd427d5a87a7a424434363e4c1a",
                                "typeString": "literal_string \"setFeeAddress: FORBIDDEN\""
                              },
                              "value": "setFeeAddress: FORBIDDEN"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d4b2eb0827e71ee18958471ff450fe4680022dd427d5a87a7a424434363e4c1a",
                                "typeString": "literal_string \"setFeeAddress: FORBIDDEN\""
                              }
                            ],
                            "id": 2486,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45302:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45302:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2493,
                        "nodeType": "ExpressionStatement",
                        "src": "45302:63:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2500,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 2495,
                                "name": "_feeAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2483,
                                "src": "45383:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 2498,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "45406:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 2497,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "45398:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 2496,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "45398:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 2499,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45398:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "45383:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "736574466565416464726573733a205a45524f",
                              "id": 2501,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45410:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3afb489d0fdedbdd1ea85eac9ddbe1364eb6d65afbae3ba5fa8e9d567276c114",
                                "typeString": "literal_string \"setFeeAddress: ZERO\""
                              },
                              "value": "setFeeAddress: ZERO"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3afb489d0fdedbdd1ea85eac9ddbe1364eb6d65afbae3ba5fa8e9d567276c114",
                                "typeString": "literal_string \"setFeeAddress: ZERO\""
                              }
                            ],
                            "id": 2494,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "45375:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2502,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45375:57:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2503,
                        "nodeType": "ExpressionStatement",
                        "src": "45375:57:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2505,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "45466:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2506,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "45466:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2507,
                              "name": "feeAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1167,
                              "src": "45480:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2508,
                              "name": "_feeAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2483,
                              "src": "45492:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2504,
                            "name": "FeeAddressChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1261,
                            "src": "45448:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address,address)"
                            }
                          },
                          "id": 2509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45448:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2510,
                        "nodeType": "EmitStatement",
                        "src": "45443:61:0"
                      },
                      {
                        "expression": {
                          "id": 2513,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2511,
                            "name": "feeAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1167,
                            "src": "45515:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2512,
                            "name": "_feeAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2483,
                            "src": "45528:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "45515:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2514,
                        "nodeType": "ExpressionStatement",
                        "src": "45515:24:0"
                      }
                    ]
                  },
                  "functionSelector": "8705fcd4",
                  "id": 2516,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setFeeAddress",
                  "nameLocation": "45250:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2484,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2483,
                        "mutability": "mutable",
                        "name": "_feeAddress",
                        "nameLocation": "45272:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2516,
                        "src": "45264:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2482,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "45264:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "45263:21:0"
                  },
                  "returnParameters": {
                    "id": 2485,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "45292:0:0"
                  },
                  "scope": 2628,
                  "src": "45241:305:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2537,
                    "nodeType": "Block",
                    "src": "45748:152:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 2523,
                            "name": "massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1783,
                            "src": "45758:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 2524,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45758:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2525,
                        "nodeType": "ExpressionStatement",
                        "src": "45758:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 2527,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "45811:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "45811:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 2529,
                              "name": "emberPerBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1169,
                              "src": "45823:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2530,
                              "name": "_emberPerBlock",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2518,
                              "src": "45838:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2526,
                            "name": "EmissionRateUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1231,
                            "src": "45791:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45791:62:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2532,
                        "nodeType": "EmitStatement",
                        "src": "45786:67:0"
                      },
                      {
                        "expression": {
                          "id": 2535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2533,
                            "name": "emberPerBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1169,
                            "src": "45863:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2534,
                            "name": "_emberPerBlock",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2518,
                            "src": "45879:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "45863:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2536,
                        "nodeType": "ExpressionStatement",
                        "src": "45863:30:0"
                      }
                    ]
                  },
                  "functionSelector": "0ba84cd2",
                  "id": 2538,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2521,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2520,
                        "name": "onlyOperator",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1289,
                        "src": "45735:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "45735:12:0"
                    }
                  ],
                  "name": "updateEmissionRate",
                  "nameLocation": "45685:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2519,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2518,
                        "mutability": "mutable",
                        "name": "_emberPerBlock",
                        "nameLocation": "45712:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2538,
                        "src": "45704:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2517,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "45704:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "45703:24:0"
                  },
                  "returnParameters": {
                    "id": 2522,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "45748:0:0"
                  },
                  "scope": 2628,
                  "src": "45676:224:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2585,
                    "nodeType": "Block",
                    "src": "46035:372:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 2549,
                          "name": "_withUpdate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2544,
                          "src": "46049:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2554,
                        "nodeType": "IfStatement",
                        "src": "46045:59:0",
                        "trueBody": {
                          "id": 2553,
                          "nodeType": "Block",
                          "src": "46062:42:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 2550,
                                  "name": "massUpdatePools",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1783,
                                  "src": "46076:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                    "typeString": "function ()"
                                  }
                                },
                                "id": 2551,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "46076:17:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2552,
                              "nodeType": "ExpressionStatement",
                              "src": "46076:17:0"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2556,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "46151:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2557,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "46151:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 2558,
                                  "name": "poolInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1179,
                                  "src": "46177:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                                    "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                                  }
                                },
                                "id": 2560,
                                "indexExpression": {
                                  "id": 2559,
                                  "name": "_pid",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2540,
                                  "src": "46186:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "46177:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                                  "typeString": "struct EmberVault.PoolInfo storage ref"
                                }
                              },
                              "id": 2561,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allocPoint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1145,
                              "src": "46177:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2562,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2542,
                              "src": "46216:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2555,
                            "name": "AllocPointsUpdated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1269,
                            "src": "46119:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 2563,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46119:118:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2564,
                        "nodeType": "EmitStatement",
                        "src": "46114:123:0"
                      },
                      {
                        "expression": {
                          "id": 2576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2565,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1189,
                            "src": "46248:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 2574,
                                "name": "_allocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2542,
                                "src": "46330:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 2568,
                                        "name": "poolInfo",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1179,
                                        "src": "46286:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                                          "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                                        }
                                      },
                                      "id": 2570,
                                      "indexExpression": {
                                        "id": 2569,
                                        "name": "_pid",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2540,
                                        "src": "46295:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "46286:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                                        "typeString": "struct EmberVault.PoolInfo storage ref"
                                      }
                                    },
                                    "id": 2571,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "allocPoint",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1145,
                                    "src": "46286:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 2566,
                                    "name": "totalAllocPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1189,
                                    "src": "46266:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2567,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 944,
                                  "src": "46266:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "46266:46:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2573,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 929,
                              "src": "46266:50:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2575,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46266:85:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "46248:103:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2577,
                        "nodeType": "ExpressionStatement",
                        "src": "46248:103:0"
                      },
                      {
                        "expression": {
                          "id": 2583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 2578,
                                "name": "poolInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1179,
                                "src": "46361:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_PoolInfo_$1158_storage_$dyn_storage",
                                  "typeString": "struct EmberVault.PoolInfo storage ref[] storage ref"
                                }
                              },
                              "id": 2580,
                              "indexExpression": {
                                "id": 2579,
                                "name": "_pid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2540,
                                "src": "46370:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "46361:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$1158_storage",
                                "typeString": "struct EmberVault.PoolInfo storage ref"
                              }
                            },
                            "id": 2581,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "allocPoint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1145,
                            "src": "46361:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 2582,
                            "name": "_allocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2542,
                            "src": "46389:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "46361:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2584,
                        "nodeType": "ExpressionStatement",
                        "src": "46361:39:0"
                      }
                    ]
                  },
                  "functionSelector": "bde4aeca",
                  "id": 2586,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2547,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2546,
                        "name": "onlyOperator",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1289,
                        "src": "46022:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "46022:12:0"
                    }
                  ],
                  "name": "updateAllocPoint",
                  "nameLocation": "45915:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2545,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2540,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "45949:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2586,
                        "src": "45941:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2539,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "45941:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2542,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "45971:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2586,
                        "src": "45963:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2541,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "45963:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2544,
                        "mutability": "mutable",
                        "name": "_withUpdate",
                        "nameLocation": "45997:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2586,
                        "src": "45992:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2543,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "45992:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "45931:83:0"
                  },
                  "returnParameters": {
                    "id": 2548,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46035:0:0"
                  },
                  "scope": 2628,
                  "src": "45906:501:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2606,
                    "nodeType": "Block",
                    "src": "46503:206:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2593,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "46534:16:0",
                              "subExpression": {
                                "id": 2592,
                                "name": "metaTxnsEnabled",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1199,
                                "src": "46535:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "456d6265725661756c743a206d657461207472616e73616374696f6e732061726520616c726561647920656e61626c6564",
                              "id": 2594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46564:51:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5a4574cf2dd94075c748b0d042c4221045543d20dbe58cdb533e3d8b27443e41",
                                "typeString": "literal_string \"EmberVault: meta transactions are already enabled\""
                              },
                              "value": "EmberVault: meta transactions are already enabled"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5a4574cf2dd94075c748b0d042c4221045543d20dbe58cdb533e3d8b27443e41",
                                "typeString": "literal_string \"EmberVault: meta transactions are already enabled\""
                              }
                            ],
                            "id": 2591,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "46513:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2595,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46513:112:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2596,
                        "nodeType": "ExpressionStatement",
                        "src": "46513:112:0"
                      },
                      {
                        "expression": {
                          "id": 2599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2597,
                            "name": "metaTxnsEnabled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1199,
                            "src": "46636:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 2598,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "46654:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "46636:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2600,
                        "nodeType": "ExpressionStatement",
                        "src": "46636:22:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2602,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "46689:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2603,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "46689:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2601,
                            "name": "MetaTxnsEnabled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1273,
                            "src": "46673:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 2604,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46673:29:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2605,
                        "nodeType": "EmitStatement",
                        "src": "46668:34:0"
                      }
                    ]
                  },
                  "functionSelector": "578bb42d",
                  "id": 2607,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2589,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2588,
                        "name": "onlyOperator",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1289,
                        "src": "46490:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "46490:12:0"
                    }
                  ],
                  "name": "enableMetaTxns",
                  "nameLocation": "46466:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2587,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46480:2:0"
                  },
                  "returnParameters": {
                    "id": 2590,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46503:0:0"
                  },
                  "scope": 2628,
                  "src": "46457:252:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2626,
                    "nodeType": "Block",
                    "src": "46807:208:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2613,
                              "name": "metaTxnsEnabled",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1199,
                              "src": "46838:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "456d6265725661756c743a206d657461207472616e73616374696f6e732061726520616c72656164792064697361626c6564",
                              "id": 2614,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46867:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9f66a192bb5d380bb715d3d82ea63bf5d4388b25b62a93d324aeeb6c14e6eb61",
                                "typeString": "literal_string \"EmberVault: meta transactions are already disabled\""
                              },
                              "value": "EmberVault: meta transactions are already disabled"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9f66a192bb5d380bb715d3d82ea63bf5d4388b25b62a93d324aeeb6c14e6eb61",
                                "typeString": "literal_string \"EmberVault: meta transactions are already disabled\""
                              }
                            ],
                            "id": 2612,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "46817:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2615,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46817:112:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2616,
                        "nodeType": "ExpressionStatement",
                        "src": "46817:112:0"
                      },
                      {
                        "expression": {
                          "id": 2619,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 2617,
                            "name": "metaTxnsEnabled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1199,
                            "src": "46940:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 2618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "46958:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "46940:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2620,
                        "nodeType": "ExpressionStatement",
                        "src": "46940:23:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2622,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  1378
                                ],
                                "referencedDeclaration": 1378,
                                "src": "46995:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 2623,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "46995:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2621,
                            "name": "MetaTxnsDisabled",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1277,
                            "src": "46978:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 2624,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "46978:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2625,
                        "nodeType": "EmitStatement",
                        "src": "46973:35:0"
                      }
                    ]
                  },
                  "functionSelector": "08383640",
                  "id": 2627,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2610,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2609,
                        "name": "onlyOperator",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1289,
                        "src": "46794:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "46794:12:0"
                    }
                  ],
                  "name": "disableMetaTxns",
                  "nameLocation": "46769:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2608,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46784:2:0"
                  },
                  "returnParameters": {
                    "id": 2611,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "46807:0:0"
                  },
                  "scope": 2628,
                  "src": "46760:255:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 2629,
              "src": "29275:17742:0",
              "usedErrors": []
            }
          ],
          "src": "156:46862:0"
        },
        "id": 0
      }
    }
  }
}
