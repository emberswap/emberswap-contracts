{
  "id": "d3fa7a55c47afdc2aab8bdb537ee3839",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.7",
  "solcLongVersion": "0.8.7+commit.e28d00a7",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol": {
        "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File contracts/farm/v2/libraries/IBoringERC20.sol\npragma solidity ^0.8.7;\n\ninterface IBoringERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\npragma solidity ^0.8.7;\n\ninterface IComplexRewarder {\n    function onEmberReward(\n        uint256 pid,\n        address user,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(uint256 pid, address user)\n        external\n        view\n        returns (uint256 pending);\n\n    function rewardToken() external view returns (IBoringERC20);\n\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\n}\n\n\n// File contracts/farm/v2/IEmberDistributorV2.sol\npragma solidity ^0.8.2;\n\ninterface IEmberDistributorV2 {\n    function totalAllocPoint() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function poolLength() external view returns (uint256);\n\n    function poolTotalLp(uint256 pid) external view returns (uint256);\n}\n\n\n// File contracts/farm/v2/libraries/BoringERC20.sol\npragma solidity ^0.8.7;\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_SYMBOL)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_NAME)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_DECIMALS)\n        );\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IBoringERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: Transfer failed\"\n        );\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IBoringERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: TransferFrom failed\"\n        );\n    }\n}\n\n\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n/**\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\n * stakers with their native token alongside EMBER.\n *\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\n */\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\n    using BoringERC20 for IBoringERC20;\n\n    IBoringERC20 public immutable override rewardToken;\n    IEmberDistributorV2 public immutable distributorV2;\n    bool public immutable isNative;\n\n    /// @notice Info of each distributorV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of REWARD entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    /// @notice Info of each distributorV2 poolInfo.\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\n    /// `startTimestamp` The start timestamp of rewards.\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    /// `totalRewards` The amount of rewards added to the pool.\n    struct PoolInfo {\n        uint256 accTokenPerShare;\n        uint256 startTimestamp;\n        uint256 lastRewardTimestamp;\n        uint256 allocPoint;\n        uint256 totalRewards;\n    }\n\n    /// @notice Reward info\n    /// `startTimestamp` The start timestamp of rewards\n    /// `endTimestamp` The end timestamp of rewards\n    /// `rewardPerSec` The amount of rewards per second\n    struct RewardInfo {\n        uint256 startTimestamp;\n        uint256 endTimestamp;\n        uint256 rewardPerSec;\n    }\n\n    /// @notice Info of each pool.\n    mapping(uint256 => PoolInfo) public poolInfo;\n\n    /// @dev this is mostly used for extending reward period\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\n    /// indexed by pool id\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\n\n    uint256[] public poolIds;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    /// @notice limit length of reward info\n    /// how many phases are allowed\n    uint256 public immutable rewardInfoLimit = 52; //1y\n\n    // The precision factor\n    uint256 private immutable ACC_TOKEN_PRECISION;\n\n    event OnReward(address indexed user, uint256 amount);\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\n    event UpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardTimestamp,\n        uint256 lpSupply,\n        uint256 accTokenPerShare\n    );\n\n    event AddRewardInfo(\n        uint256 indexed pid,\n        uint256 indexed phase,\n        uint256 endTimestamp,\n        uint256 rewardPerSec\n    );\n\n    modifier onlyDistributorV2() {\n        require(\n            msg.sender == address(distributorV2),\n            \"onlyDistributorV2: only EmberDistributorV2 can call this function\"\n        );\n        _;\n    }\n\n    constructor(\n        IBoringERC20 _rewardToken,\n        IEmberDistributorV2 _distributorV2,\n        bool _isNative\n    ) {\n        require(\n            Address.isContract(address(_rewardToken)),\n            \"constructor: reward token must be a valid contract\"\n        );\n        require(\n            Address.isContract(address(_distributorV2)),\n            \"constructor: EmberDistributorV2 must be a valid contract\"\n        );\n        rewardToken = _rewardToken;\n        distributorV2 = _distributorV2;\n        isNative = _isNative;\n\n        uint256 decimalsRewardToken = uint256(\n            _isNative ? 18 : _rewardToken.safeDecimals()\n        );\n        require(\n            decimalsRewardToken < 30,\n            \"constructor: reward token decimals must be inferior to 30\"\n        );\n\n        ACC_TOKEN_PRECISION = uint256(\n            10**(uint256(30) - (decimalsRewardToken))\n        );\n    }\n\n    /// @notice Add a new pool. Can only be called by the owner.\n    /// @param _pid pool id on DistributorV2\n    /// @param _allocPoint allocation of the new pool.\n    function add(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint256 _startTimestamp\n    ) public onlyOwner {\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \"pool already exists\");\n        totalAllocPoint += _allocPoint;\n\n        poolInfo[_pid] = PoolInfo({\n            allocPoint: _allocPoint,\n            startTimestamp: _startTimestamp,\n            lastRewardTimestamp: _startTimestamp,\n            accTokenPerShare: 0,\n            totalRewards: 0\n        });\n\n        poolIds.push(_pid);\n        emit AddPool(_pid, _allocPoint);\n    }\n\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\n    function addRewardInfo(\n        uint256 _pid,\n        uint256 _endTimestamp,\n        uint256 _rewardPerSec\n    ) external payable onlyOwner {\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\n        PoolInfo storage pool = poolInfo[_pid];\n        require(\n            rewardInfo.length < rewardInfoLimit,\n            \"add reward info: reward info length exceeds the limit\"\n        );\n        require(\n            rewardInfo.length == 0 ||\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\n                block.timestamp,\n            \"add reward info: reward period ended\"\n        );\n        require(\n            rewardInfo.length == 0 ||\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\n            \"add reward info: bad new endTimestamp\"\n        );\n\n        uint256 startTimestamp = rewardInfo.length == 0\n            ? pool.startTimestamp\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\n\n        uint256 timeRange = _endTimestamp - startTimestamp;\n        uint256 totalRewards = timeRange * _rewardPerSec;\n\n        if (!isNative) {\n            rewardToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                totalRewards\n            );\n        } else {\n            require(\n                msg.value == totalRewards,\n                \"add reward info: not enough funds to transfer\"\n            );\n        }\n\n        pool.totalRewards += totalRewards;\n\n        rewardInfo.push(\n            RewardInfo({\n                startTimestamp: startTimestamp,\n                endTimestamp: _endTimestamp,\n                rewardPerSec: _rewardPerSec\n            })\n        );\n\n        emit AddRewardInfo(\n            _pid,\n            rewardInfo.length - 1,\n            _endTimestamp,\n            _rewardPerSec\n        );\n    }\n\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\n        uint256 len = rewardInfo.length;\n        if (len == 0) {\n            return 0;\n        }\n        for (uint256 i = 0; i < len; ++i) {\n            if (_timestamp <= rewardInfo[i].endTimestamp)\n                return rewardInfo[i].endTimestamp;\n        }\n\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\n        /// so return the latest reward info.\n        return rewardInfo[len - 1].endTimestamp;\n    }\n\n    /// @notice this will return end timestamp based on the current block timestamp.\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\n        return _endTimestampOf(_pid, block.timestamp);\n    }\n\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\n    function _getTimeElapsed(\n        uint256 _from,\n        uint256 _to,\n        uint256 _endTimestamp\n    ) public pure returns (uint256) {\n        if ((_from >= _endTimestamp) || (_from > _to)) {\n            return 0;\n        }\n        if (_to <= _endTimestamp) {\n            return _to - _from;\n        }\n        return _endTimestamp - _from;\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 _pid)\n        external\n        nonReentrant\n        returns (PoolInfo memory pool)\n    {\n        return _updatePool(_pid);\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\n\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return pool;\n        }\n\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\n\n        if (lpSupply == 0) {\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\n            // so that ALL reward will be distributed.\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\n            // in order to keep the multiplier = 0\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\n                pool.lastRewardTimestamp = block.timestamp;\n                emit UpdatePool(\n                    pid,\n                    pool.lastRewardTimestamp,\n                    lpSupply,\n                    pool.accTokenPerShare\n                );\n            }\n\n            return pool;\n        }\n\n        /// @dev for each reward info\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\n            // or (reward info's endtimestamp - pool.timestamp) or 0\n            uint256 timeElapsed = _getTimeElapsed(\n                pool.lastRewardTimestamp,\n                block.timestamp,\n                rewardInfo[i].endTimestamp\n            );\n            if (timeElapsed == 0) continue;\n\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\n            } else {\n                pool.lastRewardTimestamp = block.timestamp;\n            }\n\n            uint256 tokenReward = (timeElapsed *\n                rewardInfo[i].rewardPerSec *\n                pool.allocPoint) / totalAllocPoint;\n\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\n                lpSupply);\n        }\n\n        poolInfo[pid] = pool;\n\n        emit UpdatePool(\n            pid,\n            pool.lastRewardTimestamp,\n            lpSupply,\n            pool.accTokenPerShare\n        );\n\n        return pool;\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public nonReentrant {\n        _massUpdatePools();\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function _massUpdatePools() internal {\n        uint256 length = poolIds.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            _updatePool(poolIds[pid]);\n        }\n    }\n\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\n    /// @param _user Address of user\n    /// @param _amount Number of LP tokens the user has\n    function onEmberReward(\n        uint256 _pid,\n        address _user,\n        uint256 _amount\n    ) external override onlyDistributorV2 nonReentrant {\n        PoolInfo memory pool = _updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 pending = 0;\n        uint256 rewardBalance = 0;\n\n        if (isNative) {\n            rewardBalance = address(this).balance;\n        } else {\n            rewardBalance = rewardToken.balanceOf(address(this));\n        }\n\n        if (user.amount > 0) {\n            pending = (((user.amount * pool.accTokenPerShare) /\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\n\n            if (pending > 0) {\n                if (isNative) {\n                    if (pending > rewardBalance) {\n                        (bool success, ) = _user.call{value: rewardBalance}(\"\");\n                        require(success, \"Transfer failed\");\n                    } else {\n                        (bool success, ) = _user.call{value: pending}(\"\");\n                        require(success, \"Transfer failed\");\n                    }\n                } else {\n                    if (pending > rewardBalance) {\n                        rewardToken.safeTransfer(_user, rewardBalance);\n                    } else {\n                        rewardToken.safeTransfer(_user, pending);\n                    }\n                }\n            }\n        }\n\n        user.amount = _amount;\n\n        user.rewardDebt =\n            (user.amount * pool.accTokenPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        emit OnReward(_user, pending);\n    }\n\n    /// @notice View function to see pending Reward on frontend.\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return\n            _pendingTokens(\n                _pid,\n                userInfo[_pid][_user].amount,\n                userInfo[_pid][_user].rewardDebt\n            );\n    }\n\n    function _pendingTokens(\n        uint256 _pid,\n        uint256 _amount,\n        uint256 _rewardDebt\n    ) internal view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo[_pid];\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\n\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\n\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\n            uint256 cursor = pool.lastRewardTimestamp;\n\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\n                uint256 timeElapsed = _getTimeElapsed(\n                    cursor,\n                    block.timestamp,\n                    rewardInfo[i].endTimestamp\n                );\n                if (timeElapsed == 0) continue;\n                cursor = rewardInfo[i].endTimestamp;\n\n                uint256 tokenReward = (timeElapsed *\n                    rewardInfo[i].rewardPerSec *\n                    pool.allocPoint) / totalAllocPoint;\n\n                accTokenPerShare +=\n                    (tokenReward * ACC_TOKEN_PRECISION) /\n                    lpSupply;\n            }\n        }\n\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\n            _rewardDebt);\n    }\n\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\n        PoolInfo storage pool = poolInfo[_pid];\n        uint256 len = rewardInfo.length;\n        if (len == 0) {\n            return 0;\n        }\n        for (uint256 i = 0; i < len; ++i) {\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\n                return\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\n                    totalAllocPoint;\n        }\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\n        /// so return 0\n        return 0;\n    }\n\n    /// @notice View function to see pool rewards per sec\n    function poolRewardsPerSec(uint256 _pid)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _rewardPerSecOf(_pid, block.timestamp);\n    }\n\n    /// @notice Withdraw reward. EMERGENCY ONLY.\n    function emergencyRewardWithdraw(\n        uint256 _pid,\n        uint256 _amount,\n        address _beneficiary\n    ) external onlyOwner nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\n\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\n\n        require(\n            currentStakingPendingReward + _amount <= pool.totalRewards,\n            \"emergency reward withdraw: not enough reward token\"\n        );\n        pool.totalRewards -= _amount;\n\n        if (!isNative) {\n            rewardToken.safeTransfer(_beneficiary, _amount);\n        } else {\n            (bool sent, ) = _beneficiary.call{value: _amount}(\"\");\n            require(sent, \"emergency reward withdraw: failed to send\");\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 999999
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d4abcfb98daafe0ee7699f3253df73e137cbb0332c5b9d7cfe33e6776854e6764736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x4ABCFB98DAAFE0EE7699F3253DF7 RETURNDATACOPY SGT PUSH29 0xBB0332C5B9D7CFE33E6776854E6764736F6C6343000807003300000000 ",
              "sourceMap": "246:7518:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;246:7518:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206d4abcfb98daafe0ee7699f3253df73e137cbb0332c5b9d7cfe33e6776854e6764736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x4ABCFB98DAAFE0EE7699F3253DF7 RETURNDATACOPY SGT PUSH29 0xBB0332C5B9D7CFE33E6776854E6764736F6C6343000807003300000000 ",
              "sourceMap": "246:7518:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "_verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "BoringERC20": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee0b879f90fdd079005ba199f9e6964638c738e777ecf4e132040ffac146d67064736f6c63430008070033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE SIGNEXTEND DUP8 SWAP16 SWAP1 REVERT 0xD0 PUSH26 0x5BA199F9E6964638C738E777ECF4E132040FFAC146D6706473 PUSH16 0x6C634300080700330000000000000000 ",
              "sourceMap": "15304:3909:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;15304:3909:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee0b879f90fdd079005ba199f9e6964638c738e777ecf4e132040ffac146d67064736f6c63430008070033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE SIGNEXTEND DUP8 SWAP16 SWAP1 REVERT 0xD0 PUSH26 0x5BA199F9E6964638C738E777ECF4E132040FFAC146D6706473 PUSH16 0x6C634300080700330000000000000000 ",
              "sourceMap": "15304:3909:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "returnDataToString(bytes memory)": "infinite",
                "safeDecimals(contract IBoringERC20)": "infinite",
                "safeName(contract IBoringERC20)": "infinite",
                "safeSymbol(contract IBoringERC20)": "infinite",
                "safeTransfer(contract IBoringERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IBoringERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"BoringERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "ComplexRewarderPerSecV2": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "_rewardToken",
                  "type": "address"
                },
                {
                  "internalType": "contract IEmberDistributorV2",
                  "name": "_distributorV2",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "_isNative",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                }
              ],
              "name": "AddPool",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "phase",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "endTimestamp",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "rewardPerSec",
                  "type": "uint256"
                }
              ],
              "name": "AddRewardInfo",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "OnReward",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "oldRate",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newRate",
                  "type": "uint256"
                }
              ],
              "name": "RewardRateUpdated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                }
              ],
              "name": "SetPool",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "lastRewardTimestamp",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "lpSupply",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "accTokenPerShare",
                  "type": "uint256"
                }
              ],
              "name": "UpdatePool",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_from",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_to",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_endTimestamp",
                  "type": "uint256"
                }
              ],
              "name": "_getTimeElapsed",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "pure",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                }
              ],
              "name": "_updatePool",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "accTokenPerShare",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "lastRewardTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "allocPoint",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewards",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ComplexRewarderPerSecV2.PoolInfo",
                  "name": "pool",
                  "type": "tuple"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_startTimestamp",
                  "type": "uint256"
                }
              ],
              "name": "add",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_endTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_rewardPerSec",
                  "type": "uint256"
                }
              ],
              "name": "addRewardInfo",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "currentEndTimestamp",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "distributorV2",
              "outputs": [
                {
                  "internalType": "contract IEmberDistributorV2",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_beneficiary",
                  "type": "address"
                }
              ],
              "name": "emergencyRewardWithdraw",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "isNative",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "massUpdatePools",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "onEmberReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "pendingTokens",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "poolIds",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "poolInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "accTokenPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalRewards",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "name": "poolRewardInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "startTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerSec",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "poolRewardsPerSec",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "rewardInfoLimit",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "rewardToken",
              "outputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalAllocPoint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                }
              ],
              "name": "updatePool",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "accTokenPerShare",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "lastRewardTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "allocPoint",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewards",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ComplexRewarderPerSecV2.PoolInfo",
                  "name": "pool",
                  "type": "tuple"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "userInfo",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardDebt",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "_updatePool(uint256)": {
                "params": {
                  "pid": "The index of the pool. See `poolInfo`."
                },
                "returns": {
                  "pool": "Returns the pool that was updated."
                }
              },
              "add(uint256,uint256,uint256)": {
                "params": {
                  "_allocPoint": "allocation of the new pool.",
                  "_pid": "pool id on DistributorV2"
                }
              },
              "onEmberReward(uint256,address,uint256)": {
                "params": {
                  "_amount": "Number of LP tokens the user has",
                  "_user": "Address of user"
                }
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "updatePool(uint256)": {
                "params": {
                  "_pid": "The index of the pool. See `poolInfo`."
                },
                "returns": {
                  "pool": "Returns the pool that was updated."
                }
              }
            },
            "stateVariables": {
              "poolRewardInfo": {
                "details": "this is mostly used for extending reward period"
              },
              "totalAllocPoint": {
                "details": "Total allocation points. Must be the sum of all allocation points in all pools."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_1115": {
                  "entryPoint": null,
                  "id": 1115,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@_337": {
                  "entryPoint": null,
                  "id": 337,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_435": {
                  "entryPoint": null,
                  "id": 435,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_msgSender_305": {
                  "entryPoint": null,
                  "id": 305,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_setOwner_416": {
                  "entryPoint": 599,
                  "id": 416,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@isContract_19": {
                  "entryPoint": 679,
                  "id": 19,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@safeDecimals_796": {
                  "entryPoint": 685,
                  "id": 796,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IBoringERC20_$529t_contract$_IEmberDistributorV2_$588t_bool_fromMemory": {
                  "entryPoint": 886,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_tuple_t_uint8_fromMemory": {
                  "entryPoint": 974,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 1018,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_09999a83a6ca38b78ac937b0ef60ec67685008d1db29892188df71492abfce75__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_7cefffaecec955cbafd25e3be3ed8433e0be2da998ee050e5b5095ddefe11187__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_9da280b6492f03c5cbea7c2afc1cd8513ada27c153e07a50d3d70af3560c4b8e__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_exp_helper": {
                  "entryPoint": 1080,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "checked_exp_t_uint256_t_uint256": {
                  "entryPoint": 1153,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_exp_unsigned": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 1343,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 1369,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "validator_revert_contract_IBoringERC20": {
                  "entryPoint": 1391,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:4403:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "173:463:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "219:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "228:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "231:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "221:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "221:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "221:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "194:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "203:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "190:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "190:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "215:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "186:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "186:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "183:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "244:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "263:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "257:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "257:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "248:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "321:5:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_contract_IBoringERC20",
                                  "nodeType": "YulIdentifier",
                                  "src": "282:38:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "282:45:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "282:45:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "336:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "346:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "336:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "360:40:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "385:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "396:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "381:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "381:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "375:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "375:25:1"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nodeType": "YulTypedName",
                                  "src": "364:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "448:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "validator_revert_contract_IBoringERC20",
                                  "nodeType": "YulIdentifier",
                                  "src": "409:38:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "409:47:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "409:47:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "465:17:1",
                              "value": {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "475:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "465:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "491:40:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "516:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "527:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "512:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "512:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "506:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "506:25:1"
                              },
                              "variables": [
                                {
                                  "name": "value_2",
                                  "nodeType": "YulTypedName",
                                  "src": "495:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "588:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "597:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "600:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "590:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "590:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "590:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "553:7:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "576:7:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "569:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "569:15:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "562:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "562:23:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "550:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "550:36:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "543:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "543:44:1"
                              },
                              "nodeType": "YulIf",
                              "src": "540:64:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "613:17:1",
                              "value": {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "623:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "613:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IBoringERC20_$529t_contract$_IEmberDistributorV2_$588t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "123:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "134:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "146:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "154:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "162:6:1",
                            "type": ""
                          }
                        ],
                        "src": "14:622:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "720:194:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "766:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "775:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "778:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "768:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "768:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "768:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "741:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "750:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "737:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "737:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "762:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "733:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "733:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "730:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "791:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "810:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "804:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "804:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "795:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "868:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "877:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "880:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "870:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "870:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "870:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "842:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "853:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "860:4:1",
                                            "type": "",
                                            "value": "0xff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "849:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "849:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "839:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "839:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "832:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "832:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "829:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "893:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "903:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "893:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint8_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "686:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "697:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "709:6:1",
                            "type": ""
                          }
                        ],
                        "src": "641:273:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1056:289:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1066:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1086:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1080:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1080:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "1070:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1102:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1111:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "1106:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1173:77:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "1198:3:1"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "1203:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1194:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1194:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "value0",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "1221:6:1"
                                                    },
                                                    {
                                                      "name": "i",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "1229:1:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1217:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "1217:14:1"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1233:4:1",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "1213:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1213:25:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "1207:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1207:32:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1187:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1187:53:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1187:53:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1132:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1135:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1129:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1129:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1143:21:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1145:17:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1154:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1157:4:1",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1150:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1150:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "1145:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "1125:3:1",
                                "statements": []
                              },
                              "src": "1121:129:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1276:31:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "1289:3:1"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "1294:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1285:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1285:16:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1303:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1278:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1278:27:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1278:27:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1265:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1268:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1262:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1262:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1259:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1316:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1327:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1332:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1323:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1323:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "1316:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "1032:3:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1037:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "1048:3:1",
                            "type": ""
                          }
                        ],
                        "src": "919:426:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1524:247:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1541:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1552:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1534:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1534:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1534:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1575:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1586:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1571:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1571:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1591:2:1",
                                    "type": "",
                                    "value": "57"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1564:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1564:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1564:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1614:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1625:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1610:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1610:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a2072657761726420746f6b656e20646563696d61",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1630:34:1",
                                    "type": "",
                                    "value": "constructor: reward token decima"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1603:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1603:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1603:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1685:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1696:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1681:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1681:18:1"
                                  },
                                  {
                                    "hexValue": "6c73206d75737420626520696e666572696f7220746f203330",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "1701:27:1",
                                    "type": "",
                                    "value": "ls must be inferior to 30"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1674:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1674:55:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1674:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1738:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1750:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1761:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1746:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1746:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "1738:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_09999a83a6ca38b78ac937b0ef60ec67685008d1db29892188df71492abfce75__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1501:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1515:4:1",
                            "type": ""
                          }
                        ],
                        "src": "1350:421:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1950:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1967:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1978:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1960:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1960:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1960:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2001:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2012:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1997:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1997:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2017:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1990:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1990:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1990:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2040:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2051:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2036:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2036:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2056:34:1",
                                    "type": "",
                                    "value": "constructor: reward token must b"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2029:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2029:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2029:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2111:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2122:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2107:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2107:18:1"
                                  },
                                  {
                                    "hexValue": "6520612076616c696420636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2127:20:1",
                                    "type": "",
                                    "value": "e a valid contract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2100:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2100:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2100:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2157:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2169:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2180:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2165:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2165:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2157:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_7cefffaecec955cbafd25e3be3ed8433e0be2da998ee050e5b5095ddefe11187__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1927:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "1941:4:1",
                            "type": ""
                          }
                        ],
                        "src": "1776:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2369:246:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2386:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2397:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2379:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2379:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2379:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2420:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2431:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2416:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2416:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2436:2:1",
                                    "type": "",
                                    "value": "56"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2409:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2409:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2409:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2459:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2470:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2455:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2455:18:1"
                                  },
                                  {
                                    "hexValue": "636f6e7374727563746f723a20456d6265724469737472696275746f72563220",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2475:34:1",
                                    "type": "",
                                    "value": "constructor: EmberDistributorV2 "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2448:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2448:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2448:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2530:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2541:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2526:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2526:18:1"
                                  },
                                  {
                                    "hexValue": "6d75737420626520612076616c696420636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2546:26:1",
                                    "type": "",
                                    "value": "must be a valid contract"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "2519:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2519:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2519:54:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2582:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2594:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2605:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2590:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2590:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "2582:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9da280b6492f03c5cbea7c2afc1cd8513ada27c153e07a50d3d70af3560c4b8e__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2346:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "2360:4:1",
                            "type": ""
                          }
                        ],
                        "src": "2195:420:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2684:358:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2694:16:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2709:1:1",
                                "type": "",
                                "value": "1"
                              },
                              "variables": [
                                {
                                  "name": "power_1",
                                  "nodeType": "YulTypedName",
                                  "src": "2698:7:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2719:16:1",
                              "value": {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "2728:7:1"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nodeType": "YulIdentifier",
                                  "src": "2719:5:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2744:13:1",
                              "value": {
                                "name": "_base",
                                "nodeType": "YulIdentifier",
                                "src": "2752:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "base",
                                  "nodeType": "YulIdentifier",
                                  "src": "2744:4:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2808:228:1",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2853:22:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "2855:16:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2855:18:1"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2855:18:1"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "2828:4:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2842:1:1",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "2838:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2838:6:1"
                                            },
                                            {
                                              "name": "base",
                                              "nodeType": "YulIdentifier",
                                              "src": "2846:4:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nodeType": "YulIdentifier",
                                            "src": "2834:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2834:17:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2825:2:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2825:27:1"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2822:53:1"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2914:29:1",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2916:25:1",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "power",
                                                "nodeType": "YulIdentifier",
                                                "src": "2929:5:1"
                                              },
                                              {
                                                "name": "base",
                                                "nodeType": "YulIdentifier",
                                                "src": "2936:4:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mul",
                                              "nodeType": "YulIdentifier",
                                              "src": "2925:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2925:16:1"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "power",
                                              "nodeType": "YulIdentifier",
                                              "src": "2916:5:1"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "2895:8:1"
                                        },
                                        {
                                          "name": "power_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2905:7:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "2891:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2891:22:1"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2888:55:1"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2956:23:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "2968:4:1"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "2974:4:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mul",
                                        "nodeType": "YulIdentifier",
                                        "src": "2964:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2964:15:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "2956:4:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2992:34:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "power_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3008:7:1"
                                        },
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "3017:8:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "3004:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3004:22:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "2992:8:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "2777:8:1"
                                  },
                                  {
                                    "name": "power_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2787:7:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2774:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2774:21:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2796:3:1",
                                "statements": []
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "2770:3:1",
                                "statements": []
                              },
                              "src": "2766:270:1"
                            }
                          ]
                        },
                        "name": "checked_exp_helper",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "_base",
                            "nodeType": "YulTypedName",
                            "src": "2648:5:1",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulTypedName",
                            "src": "2655:8:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nodeType": "YulTypedName",
                            "src": "2668:5:1",
                            "type": ""
                          },
                          {
                            "name": "base",
                            "nodeType": "YulTypedName",
                            "src": "2675:4:1",
                            "type": ""
                          }
                        ],
                        "src": "2620:422:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3117:61:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3127:45:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3157:4:1"
                                  },
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3163:8:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "checked_exp_unsigned",
                                  "nodeType": "YulIdentifier",
                                  "src": "3136:20:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3136:36:1"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nodeType": "YulIdentifier",
                                  "src": "3127:5:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_exp_t_uint256_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "base",
                            "nodeType": "YulTypedName",
                            "src": "3088:4:1",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulTypedName",
                            "src": "3094:8:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nodeType": "YulTypedName",
                            "src": "3107:5:1",
                            "type": ""
                          }
                        ],
                        "src": "3047:131:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3242:747:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3280:52:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3294:10:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3303:1:1",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "3294:5:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "3317:5:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3262:8:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3255:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3255:16:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3252:80:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3365:52:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3379:10:1",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3388:1:1",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "3379:5:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "3402:5:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3351:4:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3344:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3344:12:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3341:76:1"
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3453:52:1",
                                    "statements": [
                                      {
                                        "nodeType": "YulAssignment",
                                        "src": "3467:10:1",
                                        "value": {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3476:1:1",
                                          "type": "",
                                          "value": "1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "3467:5:1"
                                          }
                                        ]
                                      },
                                      {
                                        "nodeType": "YulLeave",
                                        "src": "3490:5:1"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3446:59:1",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3451:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                },
                                {
                                  "body": {
                                    "nodeType": "YulBlock",
                                    "src": "3521:123:1",
                                    "statements": [
                                      {
                                        "body": {
                                          "nodeType": "YulBlock",
                                          "src": "3556:22:1",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [],
                                                "functionName": {
                                                  "name": "panic_error_0x11",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3558:16:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3558:18:1"
                                              },
                                              "nodeType": "YulExpressionStatement",
                                              "src": "3558:18:1"
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "exponent",
                                              "nodeType": "YulIdentifier",
                                              "src": "3541:8:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3551:3:1",
                                              "type": "",
                                              "value": "255"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "gt",
                                            "nodeType": "YulIdentifier",
                                            "src": "3538:2:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3538:17:1"
                                        },
                                        "nodeType": "YulIf",
                                        "src": "3535:43:1"
                                      },
                                      {
                                        "nodeType": "YulAssignment",
                                        "src": "3591:25:1",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "exponent",
                                              "nodeType": "YulIdentifier",
                                              "src": "3604:8:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3614:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "3600:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3600:16:1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "3591:5:1"
                                          }
                                        ]
                                      },
                                      {
                                        "nodeType": "YulLeave",
                                        "src": "3629:5:1"
                                      }
                                    ]
                                  },
                                  "nodeType": "YulCase",
                                  "src": "3514:130:1",
                                  "value": {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3519:1:1",
                                    "type": "",
                                    "value": "2"
                                  }
                                }
                              ],
                              "expression": {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "3433:4:1"
                              },
                              "nodeType": "YulSwitch",
                              "src": "3426:218:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3742:70:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3756:28:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "3769:4:1"
                                        },
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "3775:8:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "exp",
                                        "nodeType": "YulIdentifier",
                                        "src": "3765:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3765:19:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "3756:5:1"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "3797:5:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "3666:4:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3672:2:1",
                                            "type": "",
                                            "value": "11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "3663:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3663:12:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nodeType": "YulIdentifier",
                                            "src": "3680:8:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3690:2:1",
                                            "type": "",
                                            "value": "78"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "3677:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3677:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3659:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3659:35:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "3703:4:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3709:3:1",
                                            "type": "",
                                            "value": "307"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "3700:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3700:13:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nodeType": "YulIdentifier",
                                            "src": "3718:8:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3728:2:1",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nodeType": "YulIdentifier",
                                          "src": "3715:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3715:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3696:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3696:36:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "3656:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3656:77:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3653:159:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3821:57:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "3863:4:1"
                                  },
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "3869:8:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "checked_exp_helper",
                                  "nodeType": "YulIdentifier",
                                  "src": "3844:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3844:34:1"
                              },
                              "variables": [
                                {
                                  "name": "power_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3825:7:1",
                                  "type": ""
                                },
                                {
                                  "name": "base_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3834:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3923:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "3925:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3925:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3925:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "power_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3893:7:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3910:1:1",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3906:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3906:6:1"
                                      },
                                      {
                                        "name": "base_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3914:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "3902:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3902:19:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3890:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3890:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3887:58:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3954:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "power_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3967:7:1"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3976:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "3963:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3963:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nodeType": "YulIdentifier",
                                  "src": "3954:5:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_exp_unsigned",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "base",
                            "nodeType": "YulTypedName",
                            "src": "3213:4:1",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nodeType": "YulTypedName",
                            "src": "3219:8:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nodeType": "YulTypedName",
                            "src": "3232:5:1",
                            "type": ""
                          }
                        ],
                        "src": "3183:806:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4043:76:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4065:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "4067:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4067:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4067:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "4059:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "4062:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4056:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4056:8:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4053:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4096:17:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "4108:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "4111:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4104:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4104:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "4096:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "4025:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "4028:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "4034:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3994:125:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4156:95:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4173:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4180:3:1",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4185:10:1",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4176:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4176:20:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4166:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4166:31:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4166:31:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4213:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4216:4:1",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4206:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4206:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4206:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4237:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4240:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "4230:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4230:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4230:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "4124:127:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4315:86:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4379:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4388:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4391:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4381:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4381:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4381:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4338:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "4349:5:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "4364:3:1",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "4369:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4360:3:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4360:11:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4373:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "4356:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4356:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "4345:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4345:31:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "4335:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4335:42:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4328:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4328:50:1"
                              },
                              "nodeType": "YulIf",
                              "src": "4325:70:1"
                            }
                          ]
                        },
                        "name": "validator_revert_contract_IBoringERC20",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "4304:5:1",
                            "type": ""
                          }
                        ],
                        "src": "4256:145:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IBoringERC20_$529t_contract$_IEmberDistributorV2_$588t_bool_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IBoringERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IBoringERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        if iszero(eq(value_2, iszero(iszero(value_2)))) { revert(0, 0) }\n        value2 := value_2\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), 0) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_09999a83a6ca38b78ac937b0ef60ec67685008d1db29892188df71492abfce75__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"constructor: reward token decima\")\n        mstore(add(headStart, 96), \"ls must be inferior to 30\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7cefffaecec955cbafd25e3be3ed8433e0be2da998ee050e5b5095ddefe11187__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"constructor: reward token must b\")\n        mstore(add(headStart, 96), \"e a valid contract\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9da280b6492f03c5cbea7c2afc1cd8513ada27c153e07a50d3d70af3560c4b8e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"constructor: EmberDistributorV2 \")\n        mstore(add(headStart, 96), \"must be a valid contract\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function validator_revert_contract_IBoringERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "6101206040526000600655603460e0523480156200001c57600080fd5b5060405162003126380380620031268339810160408190526200003f9162000376565b6200004a3362000257565b600180819055506200006783620002a760201b62001da11760201c565b620000d45760405162461bcd60e51b815260206004820152603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b60648201526084015b60405180910390fd5b620000ea82620002a760201b62001da11760201c565b6200015e5760405162461bcd60e51b815260206004820152603860248201527f636f6e7374727563746f723a20456d6265724469737472696275746f7256322060448201527f6d75737420626520612076616c696420636f6e747261637400000000000000006064820152608401620000cb565b6001600160601b0319606084811b821660805283901b1660a05280151560f81b60c052600081620001ae57620001a8846001600160a01b0316620002ad60201b62001da71760201c565b620001b1565b60125b60ff169050601e81106200022e5760405162461bcd60e51b815260206004820152603960248201527f636f6e7374727563746f723a2072657761726420746f6b656e20646563696d6160448201527f6c73206d75737420626520696e666572696f7220746f203330000000000000006064820152608401620000cb565b6200023b81601e6200053f565b6200024890600a62000481565b61010052506200058892505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3b151590565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b03861691620002f59190620003fa565b600060405180830381855afa9150503d806000811462000332576040519150601f19603f3d011682016040523d82523d6000602084013e62000337565b606091505b50915091508180156200034b575080516020145b620003585760126200036e565b808060200190518101906200036e9190620003ce565b949350505050565b6000806000606084860312156200038c57600080fd5b835162000399816200056f565b6020850151909350620003ac816200056f565b60408501519092508015158114620003c357600080fd5b809150509250925092565b600060208284031215620003e157600080fd5b815160ff81168114620003f357600080fd5b9392505050565b6000825160005b818110156200041d576020818601810151858301520162000401565b818111156200042d576000828501525b509190910192915050565b600181815b80851115620004795781600019048211156200045d576200045d62000559565b808516156200046b57918102915b93841c93908002906200043d565b509250929050565b6000620003f383836000826200049a5750600162000539565b81620004a95750600062000539565b8160018114620004c25760028114620004cd57620004ed565b600191505062000539565b60ff841115620004e157620004e162000559565b50506001821b62000539565b5060208310610133831016604e8410600b841016171562000512575081810a62000539565b6200051e838362000438565b806000190482111562000535576200053562000559565b0290505b92915050565b60008282101562000554576200055462000559565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200058557600080fd5b50565b60805160601c60a05160601c60c05160f81c60e05161010051612ad262000654600039600081816115a7015281816117a301528181611b5e015281816120e001526121340152600081816101960152610a9c0152600081816103e10152818161089501528181610d45015281816114aa01526115ee0152600081816104250152818161073c01528181611325015281816119760152611f9101526000818161057d015281816108d401528181610d82015281816115030152818161172f01526117750152612ad26000f3fe60806040526004361061017f5760003560e01c8063715018a6116100d657806393f1a40b1161007f578063f2fde38b11610059578063f2fde38b1461054b578063f7c618c11461056b578063ffcd42631461059f57600080fd5b806393f1a40b146104b75780639e494bee1461050b578063d4aa89b51461052b57600080fd5b80637d0d9d5f116100b05780637d0d9d5f146104135780638ad147281461046c5780638da5cb5b1461048c57600080fd5b8063715018a61461039a57806372333631146103af57806373cfc6b2146103cf57600080fd5b80632ea807c51161013857806351eb05a61161011257806351eb05a614610303578063630b5ba11461036557806369883b4e1461037a57600080fd5b80632ea807c5146102b0578063465e81ec146102c3578063505fb46c146102e357600080fd5b80631526fe27116101695780631526fe271461020657806317caf6f1146102785780631d1231311461028e57600080fd5b8062d74850146101845780630832cfbf146101cb575b600080fd5b34801561019057600080fd5b506101b87f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101d757600080fd5b506101eb6101e636600461287d565b6105bf565b604080519384526020840192909252908201526060016101c2565b34801561021257600080fd5b506102506102213660046127ea565b600260208190526000918252604090912080546001820154928201546003830154600490930154919392909185565b604080519586526020860194909452928401919091526060830152608082015260a0016101c2565b34801561028457600080fd5b506101b860065481565b34801561029a57600080fd5b506102ae6102a936600461289f565b610601565b005b6102ae6102be3660046128d4565b6109fe565b3480156102cf57600080fd5b506101b86102de3660046127ea565b610ef0565b3480156102ef57600080fd5b506102ae6102fe3660046128d4565b610f02565b34801561030f57600080fd5b5061032361031e3660046127ea565b6110df565b6040516101c29190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b34801561037157600080fd5b506102ae611196565b34801561038657600080fd5b506101b86103953660046127ea565b611216565b3480156103a657600080fd5b506102ae611237565b3480156103bb57600080fd5b506101b86103ca3660046128d4565b6112c4565b3480156103db57600080fd5b506104037f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020016101c2565b34801561041f57600080fd5b506104477f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c2565b34801561047857600080fd5b506102ae610487366004612848565b61130d565b34801561049857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610447565b3480156104c357600080fd5b506104f66104d236600461281c565b60056020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101c2565b34801561051757600080fd5b506101b86105263660046127ea565b611834565b34801561053757600080fd5b506103236105463660046127ea565b611840565b34801561055757600080fd5b506102ae6105663660046127ad565b611c2f565b34801561057757600080fd5b506104477f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ab57600080fd5b506101b86105ba36600461281c565b611d5f565b600360205281600052604060002081815481106105db57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b60005473ffffffffffffffffffffffffffffffffffffffff163314610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600260015414156106f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260018190556000848152602091909152604080822090517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018690529091907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063654c9ece9060240160206040518083038186803b15801561079357600080fd5b505afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190612803565b905060006107db86836000611ea2565b60048401549091506107ed868361295e565b111561087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656d657267656e6379207265776172642077697468647261773a206e6f74206560448201527f6e6f7567682072657761726420746f6b656e0000000000000000000000000000606482015260840161067e565b8483600401600082825461088f91906129ee565b909155507f00000000000000000000000000000000000000000000000000000000000000009050610900576108fb73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016858761217d565b6109f2565b60008473ffffffffffffffffffffffffffffffffffffffff168660405160006040518083038185875af1925050503d806000811461095a576040519150601f19603f3d011682016040523d82523d6000602084013e61095f565b606091505b50509050806109f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e6379207265776172642077697468647261773a206661696c6560448201527f6420746f2073656e640000000000000000000000000000000000000000000000606482015260840161067e565b505b50506001805550505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6000838152600360209081526040808320600290925290912081547f000000000000000000000000000000000000000000000000000000000000000011610b48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f6164642072657761726420696e666f3a2072657761726420696e666f206c656e60448201527f677468206578636565647320746865206c696d69740000000000000000000000606482015260840161067e565b81541580610b885750815442908390610b63906001906129ee565b81548110610b7357610b73612a6d565b90600052602060002090600302016001015410155b610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6164642072657761726420696e666f3a2072657761726420706572696f64206560448201527f6e64656400000000000000000000000000000000000000000000000000000000606482015260840161067e565b81541580610c525750815484908390610c2e906001906129ee565b81548110610c3e57610c3e612a6d565b906000526020600020906003020160010154105b610cde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f6164642072657761726420696e666f3a20626164206e657720656e6454696d6560448201527f7374616d70000000000000000000000000000000000000000000000000000000606482015260840161067e565b815460009015610d1f5782548390610cf8906001906129ee565b81548110610d0857610d08612a6d565b906000526020600020906003020160010154610d25565b81600101545b90506000610d3382876129ee565b90506000610d4186836129b1565b90507f0000000000000000000000000000000000000000000000000000000000000000610daf57610daa73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846122ed565b610e3e565b803414610e3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f6164642072657761726420696e666f3a206e6f7420656e6f7567682066756e6460448201527f7320746f207472616e7366657200000000000000000000000000000000000000606482015260840161067e565b80846004016000828254610e52919061295e565b90915550506040805160608101825284815260208082018a8152928201898152885460018181018b5560008b8152939093209351600390910290930192835592518282015591516002909101558554610eab91906129ee565b60408051898152602081018990528a917fad90731bd0d97445f5af66088f3adebf343c520c20e033cc42f93b124258cdc2910160405180910390a35050505050505050565b6000610efc8242612466565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6000838152600260208190526040909120015415610ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161067e565b816006600082825461100f919061295e565b90915550506040805160a0810182526000808252602080830185815283850186815260608501888152608086018581528a86526002948590528786209651875592516001808801919091559151938601939093559151600385015551600493840155825490810183559190527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018490555183907fa6b36ea399c1eae2ba98a011138f78722b48f46ad93349269348ccc6e8f1cced906110d29085815260200190565b60405180910390a2505050565b6111116040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6002600154141561117e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260015561118c82611840565b6001805592915050565b60026001541415611203576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b600260015561121061259a565b60018055565b6004818154811061122657600080fd5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b6112c260006125e3565b565b600081841015806112d457508284115b156112e157506000611306565b8183116112f9576112f284846129ee565b9050611306565b61130384836129ee565b90505b9392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146113f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f6f6e6c794469737472696275746f7256323a206f6e6c7920456d62657244697360448201527f7472696275746f7256322063616e2063616c6c20746869732066756e6374696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a40161067e565b60026001541415611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161067e565b6002600155600061147584611840565b600085815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120919250807f0000000000000000000000000000000000000000000000000000000000000000156114d5575047611595565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612803565b90505b82541561179c576001830154845184547f0000000000000000000000000000000000000000000000000000000000000000916115d0916129b1565b6115da9190612976565b6115e491906129ee565b9150811561179c577f00000000000000000000000000000000000000000000000000000000000000001561170d57808211156116eb5760008673ffffffffffffffffffffffffffffffffffffffff16826040515b60006040518083038185875af1925050503d8060008114611675576040519150601f19603f3d011682016040523d82523d6000602084013e61167a565b606091505b50509050806116e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161067e565b5061179c565b60008673ffffffffffffffffffffffffffffffffffffffff1683604051611638565b8082111561175b5761175673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878361217d565b61179c565b61179c73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878461217d565b84835583517f0000000000000000000000000000000000000000000000000000000000000000906117cd90876129b1565b6117d79190612976565b600184015560405182815273ffffffffffffffffffffffffffffffffffffffff8716907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b49060200160405180910390a25050600180555050505050565b6000610efc8242612658565b6118726040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b506000818152600260208181526040808420815160a08101835281548152600182015481850152938101548483015260038082015460608601526004909101546080850152858552825280842080548251818502810185019093528083529394939192909190849084015b8282101561192d57838290600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050815260200190600101906118dd565b505050509050816040015142116119445750919050565b6040517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063654c9ece9060240160206040518083038186803b1580156119cd57600080fd5b505afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a059190612803565b905080611a7057611a168442612658565b421115611a695742604084810182905284518151928352602083018490529082015284907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46906060015b60405180910390a25b5050919050565b60005b8251811015611bb2576000611aaa856040015142868581518110611a9957611a99612a6d565b6020026020010151602001516112c4565b905080611ab75750611ba2565b838281518110611ac957611ac9612a6d565b602002602001015160200151421115611b0857838281518110611aee57611aee612a6d565b602002602001015160200151856040018181525050611b0f565b4260408601525b60006006548660600151868581518110611b2b57611b2b612a6d565b60200260200101516040015184611b4291906129b1565b611b4c91906129b1565b611b569190612976565b905083611b837f0000000000000000000000000000000000000000000000000000000000000000836129b1565b611b8d9190612976565b86518790611b9c90839061295e565b90525050505b611bab81612a05565b9050611a73565b506000848152600260208181526040928390208651808255878301516001830155878501519382018490556060808901516003840155608089015160049093019290925584519384529183018590529282015285917f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469101611a60565b60005473ffffffffffffffffffffffffffffffffffffffff163314611cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161067e565b73ffffffffffffffffffffffffffffffffffffffff8116611d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161067e565b611d5c816125e3565b50565b600082815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281208054600190910154611306918591611ea2565b3b151590565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff861691611e289190612923565b600060405180830381855afa9150503d8060008114611e63576040519150601f19603f3d011682016040523d82523d6000602084013e611e68565b606091505b5091509150818015611e7b575080516020145b611e86576012611e9a565b80806020019051810190611e9a9190612900565b949350505050565b6000838152600260208181526040808420815160a08101835281548152600182015481850152938101548483015260038082015460608601526004909101546080850152878552825280842080548251818502810185019093528083528593849084015b82821015611f565783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190611f06565b505084516040517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018b905293945092600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915063654c9ece9060240160206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120219190612803565b905083604001514211801561203557508015155b1561213157604084015160005b845181101561212e5760006120648342888581518110611a9957611a99612a6d565b905080612071575061211e565b85828151811061208357612083612a6d565b6020026020010151602001519250600060065488606001518885815181106120ad576120ad612a6d565b602002602001015160400151846120c491906129b1565b6120ce91906129b1565b6120d89190612976565b9050846121057f0000000000000000000000000000000000000000000000000000000000000000836129b1565b61210f9190612976565b612119908761295e565b955050505b61212781612a05565b9050612042565b50505b857f000000000000000000000000000000000000000000000000000000000000000061215d848a6129b1565b6121679190612976565b61217191906129ee565b98975050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916122149190612923565b6000604051808303816000865af19150503d8060008114612251576040519150601f19603f3d011682016040523d82523d6000602084013e612256565b606091505b509150915081801561228057508051158061228057508080602001905181019061228091906127c8565b6122e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640161067e565b5050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161238c9190612923565b6000604051808303816000865af19150503d80600081146123c9576040519150601f19603f3d011682016040523d82523d6000602084013e6123ce565b606091505b50915091508180156123f85750805115806123f85750808060200190518101906123f891906127c8565b61245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015260640161067e565b505050505050565b600082815260036020908152604080832080548251818502810185019093528083528493849084015b828210156124df578382906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250508152602001906001019061248f565b50505060008681526002602052604090208251929350919050806125095760009350505050610efc565b60005b8181101561258d5783818151811061252657612526612a6d565b602002602001015160200151861161257d57600654836003015485838151811061255257612552612a6d565b60200260200101516040015161256891906129b1565b6125729190612976565b945050505050610efc565b61258681612a05565b905061250c565b5060009695505050505050565b60045460005b818110156125df576125ce600482815481106125be576125be612a6d565b9060005260206000200154611840565b506125d881612a05565b90506125a0565b5050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082815260036020908152604080832080548251818502810185019093528083528493849084015b828210156126d15783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190612681565b505082519293505050806126ea57600092505050610efc565b60005b818110156127515782818151811061270757612707612a6d565b60200260200101516020015185116127415782818151811061272b5761272b612a6d565b6020026020010151602001519350505050610efc565b61274a81612a05565b90506126ed565b508161275e6001836129ee565b8151811061276e5761276e612a6d565b6020026020010151602001519250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146127a857600080fd5b919050565b6000602082840312156127bf57600080fd5b61130682612784565b6000602082840312156127da57600080fd5b8151801515811461130657600080fd5b6000602082840312156127fc57600080fd5b5035919050565b60006020828403121561281557600080fd5b5051919050565b6000806040838503121561282f57600080fd5b8235915061283f60208401612784565b90509250929050565b60008060006060848603121561285d57600080fd5b8335925061286d60208501612784565b9150604084013590509250925092565b6000806040838503121561289057600080fd5b50508035926020909101359150565b6000806000606084860312156128b457600080fd5b83359250602084013591506128cb60408501612784565b90509250925092565b6000806000606084860312156128e957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561291257600080fd5b815160ff8116811461130657600080fd5b6000825160005b81811015612944576020818601810151858301520161292a565b81811115612953576000828501525b509190910192915050565b6000821982111561297157612971612a3e565b500190565b6000826129ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129e9576129e9612a3e565b500290565b600082821015612a0057612a00612a3e565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a3757612a37612a3e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220b95786d44e081aa6c09467635b2a5f59f92fd9ad2aa1fe77ab649de9b28e4a8964736f6c63430008070033",
              "opcodes": "PUSH2 0x120 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x6 SSTORE PUSH1 0x34 PUSH1 0xE0 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3126 CODESIZE SUB DUP1 PUSH3 0x3126 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3F SWAP2 PUSH3 0x376 JUMP JUMPDEST PUSH3 0x4A CALLER PUSH3 0x257 JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP PUSH3 0x67 DUP4 PUSH3 0x2A7 PUSH1 0x20 SHL PUSH3 0x1DA1 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A2072657761726420746F6B656E206D7573742062 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x194818481D985B1A590818DBDB9D1C9858DD PUSH1 0x72 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xEA DUP3 PUSH3 0x2A7 PUSH1 0x20 SHL PUSH3 0x1DA1 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x15E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A20456D6265724469737472696275746F72563220 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6D75737420626520612076616C696420636F6E74726163740000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0xCB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP5 DUP2 SHL DUP3 AND PUSH1 0x80 MSTORE DUP4 SWAP1 SHL AND PUSH1 0xA0 MSTORE DUP1 ISZERO ISZERO PUSH1 0xF8 SHL PUSH1 0xC0 MSTORE PUSH1 0x0 DUP2 PUSH3 0x1AE JUMPI PUSH3 0x1A8 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x2AD PUSH1 0x20 SHL PUSH3 0x1DA7 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1B1 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x1E DUP2 LT PUSH3 0x22E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636F6E7374727563746F723A2072657761726420746F6B656E20646563696D61 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6C73206D75737420626520696E666572696F7220746F20333000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0xCB JUMP JUMPDEST PUSH3 0x23B DUP2 PUSH1 0x1E PUSH3 0x53F JUMP JUMPDEST PUSH3 0x248 SWAP1 PUSH1 0xA PUSH3 0x481 JUMP JUMPDEST PUSH2 0x100 MSTORE POP PUSH3 0x588 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH3 0x2F5 SWAP2 SWAP1 PUSH3 0x3FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x332 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x337 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH3 0x34B JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH3 0x358 JUMPI PUSH1 0x12 PUSH3 0x36E JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0x36E SWAP2 SWAP1 PUSH3 0x3CE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x38C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x399 DUP2 PUSH3 0x56F JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x3AC DUP2 PUSH3 0x56F JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x3F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x41D JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH3 0x401 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x42D JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x479 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x45D JUMPI PUSH3 0x45D PUSH3 0x559 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x46B JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x43D JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3F3 DUP4 DUP4 PUSH1 0x0 DUP3 PUSH3 0x49A JUMPI POP PUSH1 0x1 PUSH3 0x539 JUMP JUMPDEST DUP2 PUSH3 0x4A9 JUMPI POP PUSH1 0x0 PUSH3 0x539 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x4C2 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x4CD JUMPI PUSH3 0x4ED JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x539 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x4E1 JUMPI PUSH3 0x4E1 PUSH3 0x559 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x539 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x512 JUMPI POP DUP2 DUP2 EXP PUSH3 0x539 JUMP JUMPDEST PUSH3 0x51E DUP4 DUP4 PUSH3 0x438 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x535 JUMPI PUSH3 0x535 PUSH3 0x559 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x554 JUMPI PUSH3 0x554 PUSH3 0x559 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x585 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xF8 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x2AD2 PUSH3 0x654 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x15A7 ADD MSTORE DUP2 DUP2 PUSH2 0x17A3 ADD MSTORE DUP2 DUP2 PUSH2 0x1B5E ADD MSTORE DUP2 DUP2 PUSH2 0x20E0 ADD MSTORE PUSH2 0x2134 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x196 ADD MSTORE PUSH2 0xA9C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3E1 ADD MSTORE DUP2 DUP2 PUSH2 0x895 ADD MSTORE DUP2 DUP2 PUSH2 0xD45 ADD MSTORE DUP2 DUP2 PUSH2 0x14AA ADD MSTORE PUSH2 0x15EE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x425 ADD MSTORE DUP2 DUP2 PUSH2 0x73C ADD MSTORE DUP2 DUP2 PUSH2 0x1325 ADD MSTORE DUP2 DUP2 PUSH2 0x1976 ADD MSTORE PUSH2 0x1F91 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x57D ADD MSTORE DUP2 DUP2 PUSH2 0x8D4 ADD MSTORE DUP2 DUP2 PUSH2 0xD82 ADD MSTORE DUP2 DUP2 PUSH2 0x1503 ADD MSTORE DUP2 DUP2 PUSH2 0x172F ADD MSTORE PUSH2 0x1775 ADD MSTORE PUSH2 0x2AD2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0x93F1A40B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x54B JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xFFCD4263 EQ PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x9E494BEE EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xD4AA89B5 EQ PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7D0D9D5F GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x7D0D9D5F EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0x8AD14728 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x72333631 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x73CFC6B2 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EA807C5 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x51EB05A6 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x69883B4E EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EA807C5 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x465E81EC EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x505FB46C EQ PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1D123131 EQ PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xD74850 EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x832CFBF EQ PUSH2 0x1CB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x287D JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x250 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x289F JUMP JUMPDEST PUSH2 0x601 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AE PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0xEF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0xF02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C2 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x1196 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1216 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x1237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0x12C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x403 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x447 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x2848 JUMP JUMPDEST PUSH2 0x130D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x447 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F6 PUSH2 0x4D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x281C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1834 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x546 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x566 CALLDATASIZE PUSH1 0x4 PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x1C2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x447 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x281C JUMP JUMPDEST PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP DUP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x687 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7CB SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7DB DUP7 DUP4 PUSH1 0x0 PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x7ED DUP7 DUP4 PUSH2 0x295E JUMP JUMPDEST GT ISZERO PUSH2 0x87B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379207265776172642077697468647261773A206E6F742065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6F7567682072657761726420746F6B656E0000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP5 DUP4 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x88F SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x0 SWAP1 POP PUSH2 0x900 JUMPI PUSH2 0x8FB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP6 DUP8 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x95F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379207265776172642077697468647261773A206661696C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F2073656E640000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD PUSH32 0x0 GT PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A2072657761726420696E666F206C656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x677468206578636565647320746865206C696D69740000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0xB88 JUMPI POP DUP2 SLOAD TIMESTAMP SWAP1 DUP4 SWAP1 PUSH2 0xB63 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xB73 JUMPI PUSH2 0xB73 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0xC13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A2072657761726420706572696F642065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E64656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0xC52 JUMPI POP DUP2 SLOAD DUP5 SWAP1 DUP4 SWAP1 PUSH2 0xC2E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xC3E JUMPI PUSH2 0xC3E PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD LT JUMPDEST PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A20626164206E657720656E6454696D65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7374616D70000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0xD1F JUMPI DUP3 SLOAD DUP4 SWAP1 PUSH2 0xCF8 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xD08 JUMPI PUSH2 0xD08 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD PUSH2 0xD25 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD33 DUP3 DUP8 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD41 DUP7 DUP4 PUSH2 0x29B1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH2 0xDAF JUMPI PUSH2 0xDAA PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x22ED JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A206E6F7420656E6F7567682066756E64 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7320746F207472616E7366657200000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP1 DUP5 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE52 SWAP2 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP11 DUP2 MSTORE SWAP3 DUP3 ADD DUP10 DUP2 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP12 SSTORE PUSH1 0x0 DUP12 DUP2 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP4 MLOAD PUSH1 0x3 SWAP1 SWAP2 MUL SWAP1 SWAP4 ADD SWAP3 DUP4 SSTORE SWAP3 MLOAD DUP3 DUP3 ADD SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE DUP6 SLOAD PUSH2 0xEAB SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE DUP11 SWAP2 PUSH32 0xAD90731BD0D97445F5AF66088F3ADEBF343C520C20E033CC42F93B124258CDC2 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 TIMESTAMP PUSH2 0x2466 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD ISZERO PUSH2 0xFFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706F6F6C20616C72656164792065786973747300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x100F SWAP2 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 DUP2 MSTORE DUP4 DUP6 ADD DUP7 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP9 DUP2 MSTORE PUSH1 0x80 DUP7 ADD DUP6 DUP2 MSTORE DUP11 DUP7 MSTORE PUSH1 0x2 SWAP5 DUP6 SWAP1 MSTORE DUP8 DUP7 KECCAK256 SWAP7 MLOAD DUP8 SSTORE SWAP3 MLOAD PUSH1 0x1 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD PUSH1 0x3 DUP6 ADD SSTORE MLOAD PUSH1 0x4 SWAP4 DUP5 ADD SSTORE DUP3 SLOAD SWAP1 DUP2 ADD DUP4 SSTORE SWAP2 SWAP1 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B ADD DUP5 SWAP1 SSTORE MLOAD DUP4 SWAP1 PUSH32 0xA6B36EA399C1EAE2BA98A011138F78722B48F46AD93349269348CCC6E8F1CCED SWAP1 PUSH2 0x10D2 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1111 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x117E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x118C DUP3 PUSH2 0x1840 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1203 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x1210 PUSH2 0x259A JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x12B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH2 0x12C2 PUSH1 0x0 PUSH2 0x25E3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 LT ISZERO DUP1 PUSH2 0x12D4 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x12E1 JUMPI POP PUSH1 0x0 PUSH2 0x1306 JUMP JUMPDEST DUP2 DUP4 GT PUSH2 0x12F9 JUMPI PUSH2 0x12F2 DUP5 DUP5 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1303 DUP5 DUP4 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x13F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C794469737472696275746F7256323A206F6E6C7920456D626572446973 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7472696275746F7256322063616E2063616C6C20746869732066756E6374696F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1465 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x0 PUSH2 0x1475 DUP5 PUSH2 0x1840 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH32 0x0 ISZERO PUSH2 0x14D5 JUMPI POP SELFBALANCE PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x155A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1592 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP3 SLOAD ISZERO PUSH2 0x179C JUMPI PUSH1 0x1 DUP4 ADD SLOAD DUP5 MLOAD DUP5 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x15D0 SWAP2 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x15DA SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x15E4 SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP2 POP DUP2 ISZERO PUSH2 0x179C JUMPI PUSH32 0x0 ISZERO PUSH2 0x170D JUMPI DUP1 DUP3 GT ISZERO PUSH2 0x16EB JUMPI PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1675 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x167A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x16E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP PUSH2 0x179C JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1638 JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x175B JUMPI PUSH2 0x1756 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 DUP4 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x179C JUMP JUMPDEST PUSH2 0x179C PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 DUP5 PUSH2 0x217D JUMP JUMPDEST DUP5 DUP4 SSTORE DUP4 MLOAD PUSH32 0x0 SWAP1 PUSH2 0x17CD SWAP1 DUP8 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x17D7 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH32 0xD1072BB52C3131D0C96197B73FB8A45637E30F8B6664FC142310CC9B242859B4 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 TIMESTAMP PUSH2 0x2658 JUMP JUMPDEST PUSH2 0x1872 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP6 ADD MSTORE SWAP4 DUP2 ADD SLOAD DUP5 DUP4 ADD MSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE DUP6 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP4 SWAP5 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x192D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x18DD JUMP JUMPDEST POP POP POP POP SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD TIMESTAMP GT PUSH2 0x1944 JUMPI POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A05 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1A70 JUMPI PUSH2 0x1A16 DUP5 TIMESTAMP PUSH2 0x2658 JUMP JUMPDEST TIMESTAMP GT ISZERO PUSH2 0x1A69 JUMPI TIMESTAMP PUSH1 0x40 DUP5 DUP2 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP2 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP5 SWAP1 MSTORE SWAP1 DUP3 ADD MSTORE DUP5 SWAP1 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1BB2 JUMPI PUSH1 0x0 PUSH2 0x1AAA DUP6 PUSH1 0x40 ADD MLOAD TIMESTAMP DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1A99 JUMPI PUSH2 0x1A99 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AB7 JUMPI POP PUSH2 0x1BA2 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AC9 JUMPI PUSH2 0x1AC9 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD TIMESTAMP GT ISZERO PUSH2 0x1B08 JUMPI DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AEE JUMPI PUSH2 0x1AEE PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1B0F JUMP JUMPDEST TIMESTAMP PUSH1 0x40 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B2B JUMPI PUSH2 0x1B2B PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x1B42 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B4C SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B56 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x1B83 PUSH32 0x0 DUP4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B8D SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST DUP7 MLOAD DUP8 SWAP1 PUSH2 0x1B9C SWAP1 DUP4 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 MSTORE POP POP POP JUMPDEST PUSH2 0x1BAB DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A73 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP1 DUP3 SSTORE DUP8 DUP4 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP8 DUP6 ADD MLOAD SWAP4 DUP3 ADD DUP5 SWAP1 SSTORE PUSH1 0x60 DUP1 DUP10 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP5 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD DUP6 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP2 ADD PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1CB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1D53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST PUSH2 0x1D5C DUP2 PUSH2 0x25E3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH2 0x1306 SWAP2 DUP6 SWAP2 PUSH2 0x1EA2 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x1E28 SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E68 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1E7B JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x1E86 JUMPI PUSH1 0x12 PUSH2 0x1E9A JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E9A SWAP2 SWAP1 PUSH2 0x2900 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP6 ADD MSTORE SWAP4 DUP2 ADD SLOAD DUP5 DUP4 ADD MSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE DUP8 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP6 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1F56 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1F06 JUMP JUMPDEST POP POP DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP3 PUSH1 0x0 SWAP3 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2021 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0x2035 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2131 JUMPI PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x212E JUMPI PUSH1 0x0 PUSH2 0x2064 DUP4 TIMESTAMP DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1A99 JUMPI PUSH2 0x1A99 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2071 JUMPI POP PUSH2 0x211E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2083 JUMPI PUSH2 0x2083 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP3 POP PUSH1 0x0 PUSH1 0x6 SLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20AD JUMPI PUSH2 0x20AD PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x20C4 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x20CE SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x20D8 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x2105 PUSH32 0x0 DUP4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x210F SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x2119 SWAP1 DUP8 PUSH2 0x295E JUMP JUMPDEST SWAP6 POP POP POP JUMPDEST PUSH2 0x2127 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x2042 JUMP JUMPDEST POP POP JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x215D DUP5 DUP11 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x2167 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x2214 SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2251 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2280 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x2280 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2280 SWAP2 SWAP1 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x22E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x238C SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x23F8 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x23F8 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x23F8 SWAP2 SWAP1 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x245E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x24DF JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x248F JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD SWAP3 SWAP4 POP SWAP2 SWAP1 POP DUP1 PUSH2 0x2509 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x258D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2526 JUMPI PUSH2 0x2526 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 GT PUSH2 0x257D JUMPI PUSH1 0x6 SLOAD DUP4 PUSH1 0x3 ADD SLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2552 JUMPI PUSH2 0x2552 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2568 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x2572 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH2 0x2586 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x250C JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x25DF JUMPI PUSH2 0x25CE PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25BE JUMPI PUSH2 0x25BE PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1840 JUMP JUMPDEST POP PUSH2 0x25D8 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x25A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x26D1 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2681 JUMP JUMPDEST POP POP DUP3 MLOAD SWAP3 SWAP4 POP POP POP DUP1 PUSH2 0x26EA JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2751 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2707 JUMPI PUSH2 0x2707 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 GT PUSH2 0x2741 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x272B JUMPI PUSH2 0x272B PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH2 0x274A DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x26ED JUMP JUMPDEST POP DUP2 PUSH2 0x275E PUSH1 0x1 DUP4 PUSH2 0x29EE JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x276E JUMPI PUSH2 0x276E PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1306 DUP3 PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x283F PUSH1 0x20 DUP5 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x285D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x286D PUSH1 0x20 DUP6 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x28CB PUSH1 0x40 DUP6 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2944 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x292A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2953 JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2971 JUMPI PUSH2 0x2971 PUSH2 0x2A3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x29AC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x29E9 JUMPI PUSH2 0x29E9 PUSH2 0x2A3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2A00 JUMPI PUSH2 0x2A00 PUSH2 0x2A3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2A37 JUMPI PUSH2 0x2A37 PUSH2 0x2A3E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 JUMPI DUP7 0xD4 0x4E ADDMOD BYTE 0xA6 0xC0 SWAP5 PUSH8 0x635B2A5F59F92FD9 0xAD 0x2A LOG1 INVALID PUSH24 0xAB649DE9B28E4A8964736F6C634300080700330000000000 ",
              "sourceMap": "19821:16732:0:-:0;;;21843:1;21810:34;;21974:2;21931:45;;22827:897;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9445:23;8457:10;9445:9;:23::i;:::-;12466:1;12571:7;:22;;;;22979:41;23006:12;22979:18;;;;;:41;;:::i;:::-;22958:138;;;;-1:-1:-1;;;22958:138:0;;1978:2:1;22958:138:0;;;1960:21:1;2017:2;1997:18;;;1990:30;2056:34;2036:18;;;2029:62;-1:-1:-1;;;2107:18:1;;;2100:48;2165:19;;22958:138:0;;;;;;;;;23127:43;23154:14;23127:18;;;;;:43;;:::i;:::-;23106:146;;;;-1:-1:-1;;;23106:146:0;;2397:2:1;23106:146:0;;;2379:21:1;2436:2;2416:18;;;2409:30;2475:34;2455:18;;;2448:62;2546:26;2526:18;;;2519:54;2590:19;;23106:146:0;2195:420:1;23106:146:0;-1:-1:-1;;;;;;23262:26:0;;;;;;;;23298:30;;;;;;23338:20;;;;;;;23369:27;23349:9;23420:44;;23437:27;:12;-1:-1:-1;;;;;23437:25:0;;;;;;:27;;:::i;:::-;23420:44;;;23432:2;23420:44;23399:75;;23369:105;;23527:2;23505:19;:24;23484:128;;;;-1:-1:-1;;;23484:128:0;;1552:2:1;23484:128:0;;;1534:21:1;1591:2;1571:18;;;1564:30;1630:34;1610:18;;;1603:62;1701:27;1681:18;;;1674:55;1746:19;;23484:128:0;1350:421:1;23484:128:0;23671:35;23686:19;23679:2;23671:35;:::i;:::-;23666:41;;:2;:41;:::i;:::-;23623:94;;-1:-1:-1;19821:16732:0;;-1:-1:-1;;;19821:16732:0;10619:169;10674:16;10693:6;;-1:-1:-1;;;;;10709:17:0;;;-1:-1:-1;;;;;;10709:17:0;;;;;;10741:40;;10693:6;;;;;;;10741:40;;10674:16;10741:40;10664:124;10619:169;:::o;838:377::-;1154:20;1200:8;;;838:377::o;17508:288::-;17665:36;;;;;;;;;;;;;;;;-1:-1:-1;;;;;17665:36:0;-1:-1:-1;;;17665:36:0;;;17626:85;;17573:5;;;;;;-1:-1:-1;;;;;17626:25:0;;;:85;;17665:36;17626:85;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17590:121;;;;17728:7;:28;;;;;17739:4;:11;17754:2;17739:17;17728:28;:61;;17787:2;17728:61;;;17770:4;17759:25;;;;;;;;;;;;:::i;:::-;17721:68;17508:288;-1:-1:-1;;;;17508:288:0:o;14:622:1:-;146:6;154;162;215:2;203:9;194:7;190:23;186:32;183:52;;;231:1;228;221:12;183:52;263:9;257:16;282:45;321:5;282:45;:::i;:::-;396:2;381:18;;375:25;346:5;;-1:-1:-1;409:47:1;375:25;409:47;:::i;:::-;527:2;512:18;;506:25;475:7;;-1:-1:-1;569:15:1;;562:23;550:36;;540:64;;600:1;597;590:12;540:64;623:7;613:17;;;14:622;;;;;:::o;641:273::-;709:6;762:2;750:9;741:7;737:23;733:32;730:52;;;778:1;775;768:12;730:52;810:9;804:16;860:4;853:5;849:16;842:5;839:27;829:55;;880:1;877;870:12;829:55;903:5;641:273;-1:-1:-1;;;641:273:1:o;919:426::-;1048:3;1086:6;1080:13;1111:1;1121:129;1135:6;1132:1;1129:13;1121:129;;;1233:4;1217:14;;;1213:25;;1207:32;1194:11;;;1187:53;1150:12;1121:129;;;1268:6;1265:1;1262:13;1259:48;;;1303:1;1294:6;1289:3;1285:16;1278:27;1259:48;-1:-1:-1;1323:16:1;;;;;919:426;-1:-1:-1;;919:426:1:o;2620:422::-;2709:1;2752:5;2709:1;2766:270;2787:7;2777:8;2774:21;2766:270;;;2846:4;2842:1;2838:6;2834:17;2828:4;2825:27;2822:53;;;2855:18;;:::i;:::-;2905:7;2895:8;2891:22;2888:55;;;2925:16;;;;2888:55;3004:22;;;;2964:15;;;;2766:270;;;2770:3;2620:422;;;;;:::o;3047:131::-;3107:5;3136:36;3163:8;3157:4;3232:5;3262:8;3252:80;;-1:-1:-1;3303:1:1;3317:5;;3252:80;3351:4;3341:76;;-1:-1:-1;3388:1:1;3402:5;;3341:76;3433:4;3451:1;3446:59;;;;3519:1;3514:130;;;;3426:218;;3446:59;3476:1;3467:10;;3490:5;;;3514:130;3551:3;3541:8;3538:17;3535:43;;;3558:18;;:::i;:::-;-1:-1:-1;;3614:1:1;3600:16;;3629:5;;3426:218;;3728:2;3718:8;3715:16;3709:3;3703:4;3700:13;3696:36;3690:2;3680:8;3677:16;3672:2;3666:4;3663:12;3659:35;3656:77;3653:159;;;-1:-1:-1;3765:19:1;;;3797:5;;3653:159;3844:34;3869:8;3863:4;3844:34;:::i;:::-;3914:6;3910:1;3906:6;3902:19;3893:7;3890:32;3887:58;;;3925:18;;:::i;:::-;3963:20;;-1:-1:-1;3183:806:1;;;;;:::o;3994:125::-;4034:4;4062:1;4059;4056:8;4053:34;;;4067:18;;:::i;:::-;-1:-1:-1;4104:9:1;;3994:125::o;4124:127::-;4185:10;4180:3;4176:20;4173:1;4166:31;4216:4;4213:1;4206:15;4240:4;4237:1;4230:15;4256:145;-1:-1:-1;;;;;4345:31:1;;4335:42;;4325:70;;4391:1;4388;4381:12;4325:70;4256:145;:::o;:::-;19821:16732:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@_endTimestampOf_1381": {
                  "entryPoint": 9816,
                  "id": 1381,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@_getTimeElapsed_1435": {
                  "entryPoint": 4804,
                  "id": 1435,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@_massUpdatePools_1662": {
                  "entryPoint": 9626,
                  "id": 1662,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_msgSender_305": {
                  "entryPoint": null,
                  "id": 305,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@_pendingTokens_1991": {
                  "entryPoint": 7842,
                  "id": 1991,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@_rewardPerSecOf_2061": {
                  "entryPoint": 9318,
                  "id": 2061,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@_setOwner_416": {
                  "entryPoint": 9699,
                  "id": 416,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_updatePool_1626": {
                  "entryPoint": 6208,
                  "id": 1626,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@addRewardInfo_1319": {
                  "entryPoint": 2558,
                  "id": 1319,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@add_1165": {
                  "entryPoint": 3842,
                  "id": 1165,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@currentEndTimestamp_1396": {
                  "entryPoint": 6196,
                  "id": 1396,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@distributorV2_916": {
                  "entryPoint": null,
                  "id": 916,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@emergencyRewardWithdraw_2156": {
                  "entryPoint": 1537,
                  "id": 2156,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@isContract_19": {
                  "entryPoint": 7585,
                  "id": 19,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@isNative_918": {
                  "entryPoint": null,
                  "id": 918,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@massUpdatePools_1635": {
                  "entryPoint": 4502,
                  "id": 1635,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@onEmberReward_1833": {
                  "entryPoint": 4877,
                  "id": 1833,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@owner_346": {
                  "entryPoint": null,
                  "id": 346,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@pendingTokens_1861": {
                  "entryPoint": 7519,
                  "id": 1861,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@poolIds_957": {
                  "entryPoint": 4630,
                  "id": 957,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@poolInfo_947": {
                  "entryPoint": null,
                  "id": 947,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@poolRewardInfo_954": {
                  "entryPoint": 1471,
                  "id": 954,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@poolRewardsPerSec_2077": {
                  "entryPoint": 3824,
                  "id": 2077,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@renounceOwnership_374": {
                  "entryPoint": 4663,
                  "id": 374,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@rewardInfoLimit_973": {
                  "entryPoint": null,
                  "id": 973,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@rewardToken_913": {
                  "entryPoint": null,
                  "id": 913,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@safeDecimals_796": {
                  "entryPoint": 7591,
                  "id": 796,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@safeTransferFrom_895": {
                  "entryPoint": 8941,
                  "id": 895,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "@safeTransfer_844": {
                  "entryPoint": 8573,
                  "id": 844,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@totalAllocPoint_969": {
                  "entryPoint": null,
                  "id": 969,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@transferOwnership_397": {
                  "entryPoint": 7215,
                  "id": 397,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@updatePool_1451": {
                  "entryPoint": 4319,
                  "id": 1451,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@userInfo_965": {
                  "entryPoint": null,
                  "id": 965,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 10116,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_address": {
                  "entryPoint": 10157,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 10184,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": {
                  "entryPoint": 10218,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 10243,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256t_address": {
                  "entryPoint": 10268,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_addresst_uint256": {
                  "entryPoint": 10312,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_tuple_t_uint256t_uint256": {
                  "entryPoint": 10365,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_uint256t_uint256t_address": {
                  "entryPoint": 10399,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_tuple_t_uint256t_uint256t_uint256": {
                  "entryPoint": 10452,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_tuple_t_uint8_fromMemory": {
                  "entryPoint": 10496,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 10531,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_contract$_IEmberDistributorV2_$588__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2d374e849a70c18c83337a178d8d7b19352bb0fa78697576485e185a7e42f681__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_3f42c60c28536c00d87c6af21af098cc0ef08358c7f7abe65fa4566e69143db3__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_a90825bf20c2eed9548e503d11bc32c9516b5d26f2f735aec43535214bfe1b69__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ac13a071df61f2fc80ad5528e9b13e8195d252563763706641304710d2282b22__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_aca57c24ee22163b991c205f3bfb6a98f8604da9c2c157764ad36b63e3f75e7c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_c94bb6004ae7714c2e46ba0e99d2e2039d6332a5014b1763fdc98e09b30e484c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_d75f17b4163ae1b05d2ff893563740e6b7b098af831211de068f86d1016ae9c4__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_f8e9e033a44ef9f98bb13fe2e7f494717dee7c5ad9dd57bc4bb8a0c982332902__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_struct$_PoolInfo_$934_memory_ptr__to_t_struct$_PoolInfo_$934_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": {
                  "entryPoint": 10590,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_div_t_uint256": {
                  "entryPoint": 10614,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 10673,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 10734,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 10757,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 10814,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 10861,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:13662:1",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:1",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "63:147:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "73:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "95:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "82:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "82:20:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value",
                                  "nodeType": "YulIdentifier",
                                  "src": "73:5:1"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "188:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "197:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "200:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "190:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "190:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "190:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "124:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "135:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "142:42:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "131:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "131:54:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "121:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "121:65:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "114:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "114:73:1"
                              },
                              "nodeType": "YulIf",
                              "src": "111:93:1"
                            }
                          ]
                        },
                        "name": "abi_decode_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nodeType": "YulTypedName",
                            "src": "42:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "53:5:1",
                            "type": ""
                          }
                        ],
                        "src": "14:196:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "285:116:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "331:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "340:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "343:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "333:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "333:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "333:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "306:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "315:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "302:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "302:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "327:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "298:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "298:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "295:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "356:39:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "385:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "366:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "366:29:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "356:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "251:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "262:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "274:6:1",
                            "type": ""
                          }
                        ],
                        "src": "215:186:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "484:199:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "530:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "539:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "542:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "532:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "532:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "532:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "505:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "514:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "501:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "501:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "526:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "497:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "497:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "494:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "555:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "574:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "568:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "568:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "559:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "637:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "646:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "649:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "639:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "639:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "639:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "606:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nodeType": "YulIdentifier",
                                                "src": "627:5:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "620:6:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "620:13:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "613:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "613:21:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "603:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "603:32:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "596:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "596:40:1"
                              },
                              "nodeType": "YulIf",
                              "src": "593:60:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "662:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "672:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "662:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "450:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "461:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "473:6:1",
                            "type": ""
                          }
                        ],
                        "src": "406:277:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "758:110:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "804:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "813:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "816:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "806:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "806:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "806:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "779:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "788:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "775:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "775:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "800:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "771:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "771:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "768:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "829:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "852:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "839:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "839:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "829:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "724:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "735:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "747:6:1",
                            "type": ""
                          }
                        ],
                        "src": "688:180:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "954:103:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1000:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1009:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1012:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1002:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1002:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1002:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "975:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "984:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "971:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "971:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "996:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "967:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "967:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "964:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1025:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1041:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1035:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1035:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1025:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "920:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "931:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "943:6:1",
                            "type": ""
                          }
                        ],
                        "src": "873:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1149:167:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1195:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1204:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1207:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1197:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1197:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1197:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1170:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1179:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1166:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1166:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1191:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1162:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1162:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1159:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1220:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1243:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1230:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1230:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1220:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1262:48:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1295:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1306:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1291:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1291:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1272:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1272:38:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1262:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1107:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1118:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1130:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1138:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1062:254:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1425:218:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1471:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1480:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1483:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1473:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1473:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1473:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1446:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1455:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1442:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1442:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1467:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1438:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1438:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1435:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1496:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1519:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1506:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1506:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1496:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1538:48:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1571:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1582:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1567:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1567:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "1548:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1548:38:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1538:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1595:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1622:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1633:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1618:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1618:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1605:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1605:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "1595:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_addresst_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1375:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1386:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1398:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1406:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "1414:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1321:322:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1735:161:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1781:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1790:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1793:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1783:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1783:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1783:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "1756:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1765:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1752:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1752:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1777:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1748:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1748:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "1745:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1806:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1829:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1816:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1816:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1806:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1848:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1875:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1886:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1871:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1871:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1858:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1858:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1848:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1693:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1704:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1716:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1724:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1648:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2005:218:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2051:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2060:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2063:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2053:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2053:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2053:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2026:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2035:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2022:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2022:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2047:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2018:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2018:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2015:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2076:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2099:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2086:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2086:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2076:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2118:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2145:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2156:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2141:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2141:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2128:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2128:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2118:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2169:48:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2202:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2213:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2198:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2198:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "2179:18:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2179:38:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "2169:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "1955:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "1966:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "1978:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "1986:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "1994:6:1",
                            "type": ""
                          }
                        ],
                        "src": "1901:322:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2332:212:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2378:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2387:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2390:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2380:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2380:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2380:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2353:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2362:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2349:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2349:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2374:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2345:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2345:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2342:52:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2403:33:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2426:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2413:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2413:23:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2403:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2445:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2472:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2483:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2468:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2468:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2455:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2455:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2445:6:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2496:42:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2523:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2534:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2519:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2519:18:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2506:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2506:32:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "2496:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2282:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2293:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2305:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "2313:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "2321:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2228:316:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2628:194:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2674:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2683:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2686:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2676:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2676:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2676:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nodeType": "YulIdentifier",
                                        "src": "2649:7:1"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "2658:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "2645:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2645:23:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2670:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2641:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2641:32:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2638:52:1"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2699:29:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2718:9:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2712:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2712:16:1"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nodeType": "YulTypedName",
                                  "src": "2703:5:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2776:16:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2785:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2788:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2778:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2778:12:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2778:12:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2750:5:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2761:5:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2768:4:1",
                                            "type": "",
                                            "value": "0xff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "2757:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2757:16:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "2747:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2747:27:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2740:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2740:35:1"
                              },
                              "nodeType": "YulIf",
                              "src": "2737:55:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2801:15:1",
                              "value": {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2811:5:1"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "2801:6:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint8_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "2594:9:1",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulTypedName",
                            "src": "2605:7:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2617:6:1",
                            "type": ""
                          }
                        ],
                        "src": "2549:273:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2964:289:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2974:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2994:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2988:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2988:13:1"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nodeType": "YulTypedName",
                                  "src": "2978:6:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3010:10:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3019:1:1",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nodeType": "YulTypedName",
                                  "src": "3014:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3081:77:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "3106:3:1"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3111:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3102:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3102:11:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "value0",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3129:6:1"
                                                    },
                                                    {
                                                      "name": "i",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3137:1:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3125:3:1"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "3125:14:1"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3141:4:1",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "3121:3:1"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3121:25:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "3115:5:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3115:32:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3095:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3095:53:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3095:53:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3040:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3043:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3037:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3037:13:1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "3051:21:1",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3053:17:1",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3062:1:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3065:4:1",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3058:3:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3058:12:1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulIdentifier",
                                        "src": "3053:1:1"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "3033:3:1",
                                "statements": []
                              },
                              "src": "3029:129:1"
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3184:31:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "3197:3:1"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "3202:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3193:3:1"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3193:16:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3211:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3186:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3186:27:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3186:27:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3173:1:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3176:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3170:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3170:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "3167:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3224:23:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3235:3:1"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3240:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3231:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3231:16:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "3224:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "2940:3:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "2945:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "2956:3:1",
                            "type": ""
                          }
                        ],
                        "src": "2827:426:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3449:14:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3451:10:1",
                              "value": {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3458:3:1"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nodeType": "YulIdentifier",
                                  "src": "3451:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nodeType": "YulTypedName",
                            "src": "3433:3:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nodeType": "YulTypedName",
                            "src": "3441:3:1",
                            "type": ""
                          }
                        ],
                        "src": "3258:205:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3569:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3579:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3591:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3602:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3587:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3587:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3579:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3621:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3636:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3644:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3632:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3632:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3614:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3614:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3614:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3538:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3549:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3560:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3468:226:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3856:241:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3866:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3878:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3889:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3874:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3874:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "3866:4:1"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3901:52:1",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3911:42:1",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "3905:2:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3969:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3984:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3992:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3980:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3980:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "3962:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3962:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3962:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4016:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4027:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4012:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4012:18:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4036:6:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4044:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4032:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4032:15:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4005:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4005:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4005:43:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4068:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4079:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4064:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4064:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4084:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4057:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4057:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4057:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "3809:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "3820:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "3828:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "3836:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "3847:4:1",
                            "type": ""
                          }
                        ],
                        "src": "3699:398:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4231:168:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4241:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4253:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4264:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4249:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4249:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4241:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4283:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "4298:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4306:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4294:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4294:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4276:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4276:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4276:74:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "4370:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4381:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4366:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4366:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4386:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4359:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4359:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4359:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4192:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "4203:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4211:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4222:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4102:297:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4499:92:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4509:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4521:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4532:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4517:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4517:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4509:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4551:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "4576:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "4569:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4569:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "4562:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4562:22:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4544:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4544:41:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4544:41:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4468:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4479:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4490:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4404:187:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4717:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4727:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4739:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4750:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4735:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4735:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4727:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4769:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "4784:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4792:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4780:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4780:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4762:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4762:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4762:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4686:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4697:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4708:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4596:246:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4975:125:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4985:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4997:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5008:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4993:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4993:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "4985:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5027:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "5042:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5050:42:1",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5038:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5038:55:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5020:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5020:74:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5020:74:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_contract$_IEmberDistributorV2_$588__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "4944:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "4955:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "4966:4:1",
                            "type": ""
                          }
                        ],
                        "src": "4847:253:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5279:178:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5296:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5307:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5289:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5289:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5289:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5330:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5341:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5326:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5326:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5346:2:1",
                                    "type": "",
                                    "value": "28"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5319:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5319:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5319:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5369:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5380:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5365:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5365:18:1"
                                  },
                                  {
                                    "hexValue": "426f72696e6745524332303a205472616e73666572206661696c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "5385:30:1",
                                    "type": "",
                                    "value": "BoringERC20: Transfer failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5358:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5358:58:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5358:58:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5425:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5437:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5448:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5433:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5433:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5425:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5256:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5270:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5105:352:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5636:228:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5653:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5664:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5646:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5646:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5646:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5687:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5698:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5683:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5683:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5703:2:1",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5676:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5676:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5676:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5726:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5737:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5722:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5722:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "5742:34:1",
                                    "type": "",
                                    "value": "Ownable: new owner is the zero a"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5715:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5715:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5715:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "5797:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5808:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5793:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5793:18:1"
                                  },
                                  {
                                    "hexValue": "646472657373",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "5813:8:1",
                                    "type": "",
                                    "value": "ddress"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5786:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5786:36:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5786:36:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5831:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5843:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5854:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5839:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5839:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "5831:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "5613:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "5627:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5462:402:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6043:165:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6060:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6071:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6053:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6053:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6053:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6094:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6105:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6090:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6090:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6110:2:1",
                                    "type": "",
                                    "value": "15"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6083:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6083:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6083:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6133:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6144:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6129:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6129:18:1"
                                  },
                                  {
                                    "hexValue": "5472616e73666572206661696c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6149:17:1",
                                    "type": "",
                                    "value": "Transfer failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6122:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6122:45:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6122:45:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6176:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6188:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6199:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6184:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6184:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6176:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6020:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6034:4:1",
                            "type": ""
                          }
                        ],
                        "src": "5869:339:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6387:231:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6404:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6415:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6397:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6397:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6397:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6438:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6449:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6434:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6434:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6454:2:1",
                                    "type": "",
                                    "value": "41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6427:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6427:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6427:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6477:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6488:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6473:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6473:18:1"
                                  },
                                  {
                                    "hexValue": "656d657267656e6379207265776172642077697468647261773a206661696c65",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6493:34:1",
                                    "type": "",
                                    "value": "emergency reward withdraw: faile"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6466:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6466:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6466:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6548:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6559:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6544:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6544:18:1"
                                  },
                                  {
                                    "hexValue": "6420746f2073656e64",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6564:11:1",
                                    "type": "",
                                    "value": "d to send"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6537:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6537:39:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6537:39:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6585:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6597:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6608:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6593:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6593:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "6585:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2d374e849a70c18c83337a178d8d7b19352bb0fa78697576485e185a7e42f681__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6364:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6378:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6213:405:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6797:240:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6814:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6825:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6807:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6807:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6807:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6848:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6859:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6844:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6844:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6864:2:1",
                                    "type": "",
                                    "value": "50"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6837:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6837:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6837:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6887:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6898:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6883:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6883:18:1"
                                  },
                                  {
                                    "hexValue": "656d657267656e6379207265776172642077697468647261773a206e6f742065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6903:34:1",
                                    "type": "",
                                    "value": "emergency reward withdraw: not e"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6876:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6876:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6876:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6958:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6969:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6954:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6954:18:1"
                                  },
                                  {
                                    "hexValue": "6e6f7567682072657761726420746f6b656e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6974:20:1",
                                    "type": "",
                                    "value": "nough reward token"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6947:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6947:48:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6947:48:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7004:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7016:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7027:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7012:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7012:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7004:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_3f42c60c28536c00d87c6af21af098cc0ef08358c7f7abe65fa4566e69143db3__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "6774:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "6788:4:1",
                            "type": ""
                          }
                        ],
                        "src": "6623:414:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7216:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7233:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7244:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7226:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7226:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7226:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7267:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7278:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7263:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7263:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7283:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7256:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7256:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7256:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7306:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7317:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7302:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7302:18:1"
                                  },
                                  {
                                    "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7322:34:1",
                                    "type": "",
                                    "value": "Ownable: caller is not the owner"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7295:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7295:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7295:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7366:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7378:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7389:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7374:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7374:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7366:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7193:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7207:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7042:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7577:226:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7594:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7605:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7587:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7587:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7587:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7628:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7639:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7624:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7624:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7644:2:1",
                                    "type": "",
                                    "value": "36"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7617:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7617:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7617:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7667:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7678:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7663:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7663:18:1"
                                  },
                                  {
                                    "hexValue": "6164642072657761726420696e666f3a2072657761726420706572696f642065",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7683:34:1",
                                    "type": "",
                                    "value": "add reward info: reward period e"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7656:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7656:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7656:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7738:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7749:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7734:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7734:18:1"
                                  },
                                  {
                                    "hexValue": "6e646564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7754:6:1",
                                    "type": "",
                                    "value": "nded"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7727:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7727:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7727:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7770:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7782:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7793:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7778:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7778:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "7770:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_a90825bf20c2eed9548e503d11bc32c9516b5d26f2f735aec43535214bfe1b69__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7554:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7568:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7403:400:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7982:169:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7999:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8010:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "7992:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7992:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7992:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8033:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8044:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8029:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8029:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8049:2:1",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8022:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8022:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8022:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8072:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8083:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8068:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8068:18:1"
                                  },
                                  {
                                    "hexValue": "706f6f6c20616c726561647920657869737473",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8088:21:1",
                                    "type": "",
                                    "value": "pool already exists"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8061:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8061:49:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8061:49:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8119:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8131:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8142:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8127:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8127:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8119:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ac13a071df61f2fc80ad5528e9b13e8195d252563763706641304710d2282b22__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "7959:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "7973:4:1",
                            "type": ""
                          }
                        ],
                        "src": "7808:343:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8330:227:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8347:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8358:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8340:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8340:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8340:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8381:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8392:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8377:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8377:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8397:2:1",
                                    "type": "",
                                    "value": "37"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8370:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8370:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8370:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8420:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8431:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8416:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8416:18:1"
                                  },
                                  {
                                    "hexValue": "6164642072657761726420696e666f3a20626164206e657720656e6454696d65",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8436:34:1",
                                    "type": "",
                                    "value": "add reward info: bad new endTime"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8409:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8409:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8409:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8491:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8502:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8487:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8487:18:1"
                                  },
                                  {
                                    "hexValue": "7374616d70",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8507:7:1",
                                    "type": "",
                                    "value": "stamp"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8480:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8480:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8480:35:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8524:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8536:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8547:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8532:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8532:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8524:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_aca57c24ee22163b991c205f3bfb6a98f8604da9c2c157764ad36b63e3f75e7c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8307:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8321:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8156:401:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8736:243:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8753:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8764:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8746:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8746:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8746:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8787:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8798:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8783:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8783:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8803:2:1",
                                    "type": "",
                                    "value": "53"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8776:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8776:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8776:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8826:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8837:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8822:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8822:18:1"
                                  },
                                  {
                                    "hexValue": "6164642072657761726420696e666f3a2072657761726420696e666f206c656e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8842:34:1",
                                    "type": "",
                                    "value": "add reward info: reward info len"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8815:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8815:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8815:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8897:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8908:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8893:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8893:18:1"
                                  },
                                  {
                                    "hexValue": "677468206578636565647320746865206c696d6974",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8913:23:1",
                                    "type": "",
                                    "value": "gth exceeds the limit"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8886:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8886:51:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8886:51:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8946:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8958:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8969:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8954:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8954:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "8946:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c94bb6004ae7714c2e46ba0e99d2e2039d6332a5014b1763fdc98e09b30e484c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "8713:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "8727:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8562:417:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9158:295:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9175:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9186:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9168:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9168:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9168:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9209:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9220:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9205:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9205:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9225:2:1",
                                    "type": "",
                                    "value": "65"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9198:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9198:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9198:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9248:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9259:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9244:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9244:18:1"
                                  },
                                  {
                                    "hexValue": "6f6e6c794469737472696275746f7256323a206f6e6c7920456d626572446973",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9264:34:1",
                                    "type": "",
                                    "value": "onlyDistributorV2: only EmberDis"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9237:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9237:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9237:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9319:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9330:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9315:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9315:18:1"
                                  },
                                  {
                                    "hexValue": "7472696275746f7256322063616e2063616c6c20746869732066756e6374696f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9335:34:1",
                                    "type": "",
                                    "value": "tributorV2 can call this functio"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9308:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9308:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9308:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9390:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9401:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9386:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9386:19:1"
                                  },
                                  {
                                    "hexValue": "6e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9407:3:1",
                                    "type": "",
                                    "value": "n"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9379:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9379:32:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9379:32:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9420:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9432:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9443:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9428:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9428:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9420:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_d75f17b4163ae1b05d2ff893563740e6b7b098af831211de068f86d1016ae9c4__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9135:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9149:4:1",
                            "type": ""
                          }
                        ],
                        "src": "8984:469:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9632:182:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9649:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9660:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9642:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9642:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9642:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9683:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9694:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9679:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9679:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9699:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9672:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9672:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9672:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9722:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9733:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9718:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9718:18:1"
                                  },
                                  {
                                    "hexValue": "426f72696e6745524332303a205472616e7366657246726f6d206661696c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9738:34:1",
                                    "type": "",
                                    "value": "BoringERC20: TransferFrom failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "9711:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9711:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9711:62:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9782:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9794:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9805:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9790:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9790:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "9782:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9609:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9623:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9458:356:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9993:181:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10010:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10021:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10003:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10003:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10003:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10044:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10055:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10040:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10040:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10060:2:1",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10033:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10033:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10033:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10083:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10094:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10079:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10079:18:1"
                                  },
                                  {
                                    "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10099:33:1",
                                    "type": "",
                                    "value": "ReentrancyGuard: reentrant call"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10072:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10072:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10072:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10142:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10154:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10165:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10150:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10150:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10142:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "9970:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "9984:4:1",
                            "type": ""
                          }
                        ],
                        "src": "9819:355:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10353:235:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10370:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10381:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10363:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10363:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10363:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10404:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10415:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10400:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10400:18:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10420:2:1",
                                    "type": "",
                                    "value": "45"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10393:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10393:30:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10393:30:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10443:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10454:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10439:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10439:18:1"
                                  },
                                  {
                                    "hexValue": "6164642072657761726420696e666f3a206e6f7420656e6f7567682066756e64",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10459:34:1",
                                    "type": "",
                                    "value": "add reward info: not enough fund"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10432:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10432:62:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10432:62:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10514:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10525:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10510:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10510:18:1"
                                  },
                                  {
                                    "hexValue": "7320746f207472616e73666572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10530:15:1",
                                    "type": "",
                                    "value": "s to transfer"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10503:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10503:43:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10503:43:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10555:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10567:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10578:3:1",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10563:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10563:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10555:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_f8e9e033a44ef9f98bb13fe2e7f494717dee7c5ad9dd57bc4bb8a0c982332902__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10330:9:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10344:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10179:409:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10744:336:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10754:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10766:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10777:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10762:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10762:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "10754:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10797:9:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "10814:6:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "10808:5:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10808:13:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10790:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10790:32:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10790:32:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10842:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10853:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10838:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10838:20:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "10870:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10878:4:1",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "10866:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10866:17:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "10860:5:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10860:24:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10831:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10831:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10831:54:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10905:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10916:4:1",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10901:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10901:20:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "10933:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10941:4:1",
                                            "type": "",
                                            "value": "0x40"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "10929:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10929:17:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "10923:5:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10923:24:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10894:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10894:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10894:54:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10968:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10979:4:1",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10964:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10964:20:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "10996:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11004:4:1",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "10992:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10992:17:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "10986:5:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10986:24:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "10957:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10957:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10957:54:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11031:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11042:4:1",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11027:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11027:20:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "11059:6:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11067:4:1",
                                            "type": "",
                                            "value": "0x80"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "11055:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11055:17:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "11049:5:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11049:24:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11020:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11020:54:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11020:54:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_struct$_PoolInfo_$934_memory_ptr__to_t_struct$_PoolInfo_$934_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "10713:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "10724:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "10735:4:1",
                            "type": ""
                          }
                        ],
                        "src": "10593:487:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11186:76:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11196:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11208:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11219:2:1",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11204:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11204:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11196:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11238:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11249:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11231:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11231:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11231:25:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11155:9:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "11166:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11177:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11085:177:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11396:119:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11406:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11418:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11429:2:1",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11414:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11414:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11406:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11448:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11459:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11441:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11441:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11441:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11486:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11497:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11482:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11482:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11502:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11475:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11475:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11475:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11357:9:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "11368:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "11376:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11387:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11267:248:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11677:162:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11687:26:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11699:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11710:2:1",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11695:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11695:18:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "11687:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11729:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11740:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11722:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11722:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11722:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11767:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11778:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11763:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11763:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11783:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11756:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11756:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11756:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11810:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11821:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11806:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11806:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11826:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "11799:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11799:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11799:34:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11630:9:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "11641:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "11649:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "11657:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "11668:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11520:319:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12057:250:1",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12067:27:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12079:9:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12090:3:1",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12075:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12075:19:1"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "12067:4:1"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12110:9:1"
                                  },
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12121:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12103:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12103:25:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12103:25:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12148:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12159:2:1",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12144:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12144:18:1"
                                  },
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12164:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12137:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12137:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12137:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12191:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12202:2:1",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12187:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12187:18:1"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "12207:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12180:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12180:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12180:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12234:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12245:2:1",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12230:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12230:18:1"
                                  },
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "12250:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12223:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12223:34:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12223:34:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12277:9:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12288:3:1",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12273:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12273:19:1"
                                  },
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "12294:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "12266:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12266:35:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12266:35:1"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "11994:9:1",
                            "type": ""
                          },
                          {
                            "name": "value4",
                            "nodeType": "YulTypedName",
                            "src": "12005:6:1",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nodeType": "YulTypedName",
                            "src": "12013:6:1",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulTypedName",
                            "src": "12021:6:1",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "12029:6:1",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "12037:6:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "12048:4:1",
                            "type": ""
                          }
                        ],
                        "src": "11844:463:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12360:80:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12387:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "12389:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12389:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12389:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12376:1:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "12383:1:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "12379:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12379:6:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12373:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12373:13:1"
                              },
                              "nodeType": "YulIf",
                              "src": "12370:39:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12418:16:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12429:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12432:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12425:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12425:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nodeType": "YulIdentifier",
                                  "src": "12418:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "12343:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "12346:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nodeType": "YulTypedName",
                            "src": "12352:3:1",
                            "type": ""
                          }
                        ],
                        "src": "12312:128:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12491:228:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12522:168:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12543:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12546:77:1",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "12536:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12536:88:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12536:88:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12644:1:1",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12647:4:1",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "12637:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12637:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12637:15:1"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12672:1:1",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12675:4:1",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "12665:6:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12665:15:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12665:15:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12511:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "12504:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12504:9:1"
                              },
                              "nodeType": "YulIf",
                              "src": "12501:189:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12699:14:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12708:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12711:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "12704:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12704:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "r",
                                  "nodeType": "YulIdentifier",
                                  "src": "12699:1:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "12476:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "12479:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "r",
                            "nodeType": "YulTypedName",
                            "src": "12485:1:1",
                            "type": ""
                          }
                        ],
                        "src": "12445:274:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12776:176:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12895:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "12897:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12897:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12897:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "12807:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "12800:6:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12800:9:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12793:6:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12793:17:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "12815:1:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "12822:66:1",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "12890:1:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "12818:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12818:74:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12812:2:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12812:81:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12789:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12789:105:1"
                              },
                              "nodeType": "YulIf",
                              "src": "12786:131:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12926:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12941:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12944:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "12937:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12937:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nodeType": "YulIdentifier",
                                  "src": "12926:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "12755:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "12758:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nodeType": "YulTypedName",
                            "src": "12764:7:1",
                            "type": ""
                          }
                        ],
                        "src": "12724:228:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13006:76:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13028:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "13030:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13030:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13030:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "13022:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "13025:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13019:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13019:8:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13016:34:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13059:17:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "13071:1:1"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "13074:1:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13067:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13067:9:1"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nodeType": "YulIdentifier",
                                  "src": "13059:4:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nodeType": "YulTypedName",
                            "src": "12988:1:1",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nodeType": "YulTypedName",
                            "src": "12991:1:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nodeType": "YulTypedName",
                            "src": "12997:4:1",
                            "type": ""
                          }
                        ],
                        "src": "12957:125:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13134:148:1",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13225:22:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "13227:16:1"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13227:18:1"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13227:18:1"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13150:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13157:66:1",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "13147:2:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13147:77:1"
                              },
                              "nodeType": "YulIf",
                              "src": "13144:103:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13256:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13267:5:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13274:1:1",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13263:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13263:13:1"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nodeType": "YulIdentifier",
                                  "src": "13256:3:1"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nodeType": "YulTypedName",
                            "src": "13116:5:1",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nodeType": "YulTypedName",
                            "src": "13126:3:1",
                            "type": ""
                          }
                        ],
                        "src": "13087:195:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13319:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13336:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13339:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13329:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13329:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13329:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13433:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13436:4:1",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13426:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13426:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13426:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13457:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13460:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "13450:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13450:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13450:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "13287:184:1"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13508:152:1",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13525:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13528:77:1",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13518:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13518:88:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13518:88:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13622:1:1",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13625:4:1",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "13615:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13615:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13615:15:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13646:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13649:4:1",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "13639:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13639:15:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13639:15:1"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "13476:184:1"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), 0) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IBoringERC20_$529__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IEmberDistributorV2_$588__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"BoringERC20: Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2d374e849a70c18c83337a178d8d7b19352bb0fa78697576485e185a7e42f681__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"emergency reward withdraw: faile\")\n        mstore(add(headStart, 96), \"d to send\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3f42c60c28536c00d87c6af21af098cc0ef08358c7f7abe65fa4566e69143db3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"emergency reward withdraw: not e\")\n        mstore(add(headStart, 96), \"nough reward token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a90825bf20c2eed9548e503d11bc32c9516b5d26f2f735aec43535214bfe1b69__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"add reward info: reward period e\")\n        mstore(add(headStart, 96), \"nded\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ac13a071df61f2fc80ad5528e9b13e8195d252563763706641304710d2282b22__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"pool already exists\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_aca57c24ee22163b991c205f3bfb6a98f8604da9c2c157764ad36b63e3f75e7c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"add reward info: bad new endTime\")\n        mstore(add(headStart, 96), \"stamp\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c94bb6004ae7714c2e46ba0e99d2e2039d6332a5014b1763fdc98e09b30e484c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"add reward info: reward info len\")\n        mstore(add(headStart, 96), \"gth exceeds the limit\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d75f17b4163ae1b05d2ff893563740e6b7b098af831211de068f86d1016ae9c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 65)\n        mstore(add(headStart, 64), \"onlyDistributorV2: only EmberDis\")\n        mstore(add(headStart, 96), \"tributorV2 can call this functio\")\n        mstore(add(headStart, 128), \"n\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"BoringERC20: TransferFrom failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8e9e033a44ef9f98bb13fe2e7f494717dee7c5ad9dd57bc4bb8a0c982332902__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"add reward info: not enough fund\")\n        mstore(add(headStart, 96), \"s to transfer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_struct$_PoolInfo_$934_memory_ptr__to_t_struct$_PoolInfo_$934_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), mload(add(value0, 0x60)))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}",
                  "id": 1,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {
                "913": [
                  {
                    "length": 32,
                    "start": 1405
                  },
                  {
                    "length": 32,
                    "start": 2260
                  },
                  {
                    "length": 32,
                    "start": 3458
                  },
                  {
                    "length": 32,
                    "start": 5379
                  },
                  {
                    "length": 32,
                    "start": 5935
                  },
                  {
                    "length": 32,
                    "start": 6005
                  }
                ],
                "916": [
                  {
                    "length": 32,
                    "start": 1061
                  },
                  {
                    "length": 32,
                    "start": 1852
                  },
                  {
                    "length": 32,
                    "start": 4901
                  },
                  {
                    "length": 32,
                    "start": 6518
                  },
                  {
                    "length": 32,
                    "start": 8081
                  }
                ],
                "918": [
                  {
                    "length": 32,
                    "start": 993
                  },
                  {
                    "length": 32,
                    "start": 2197
                  },
                  {
                    "length": 32,
                    "start": 3397
                  },
                  {
                    "length": 32,
                    "start": 5290
                  },
                  {
                    "length": 32,
                    "start": 5614
                  }
                ],
                "973": [
                  {
                    "length": 32,
                    "start": 406
                  },
                  {
                    "length": 32,
                    "start": 2716
                  }
                ],
                "975": [
                  {
                    "length": 32,
                    "start": 5543
                  },
                  {
                    "length": 32,
                    "start": 6051
                  },
                  {
                    "length": 32,
                    "start": 7006
                  },
                  {
                    "length": 32,
                    "start": 8416
                  },
                  {
                    "length": 32,
                    "start": 8500
                  }
                ]
              },
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x17F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0x93F1A40B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x54B JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xFFCD4263 EQ PUSH2 0x59F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x93F1A40B EQ PUSH2 0x4B7 JUMPI DUP1 PUSH4 0x9E494BEE EQ PUSH2 0x50B JUMPI DUP1 PUSH4 0xD4AA89B5 EQ PUSH2 0x52B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7D0D9D5F GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x7D0D9D5F EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0x8AD14728 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0x72333631 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0x73CFC6B2 EQ PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EA807C5 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x51EB05A6 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x51EB05A6 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x630B5BA1 EQ PUSH2 0x365 JUMPI DUP1 PUSH4 0x69883B4E EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2EA807C5 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0x465E81EC EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x505FB46C EQ PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1526FE27 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x1526FE27 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x17CAF6F1 EQ PUSH2 0x278 JUMPI DUP1 PUSH4 0x1D123131 EQ PUSH2 0x28E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xD74850 EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x832CFBF EQ PUSH2 0x1CB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x287D JUMP JUMPDEST PUSH2 0x5BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x250 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x289F JUMP JUMPDEST PUSH2 0x601 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AE PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x2DE CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0xEF0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x2FE CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0xF02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x10DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C2 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x371 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x1196 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x395 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1216 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x1237 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x3CA CALLDATASIZE PUSH1 0x4 PUSH2 0x28D4 JUMP JUMPDEST PUSH2 0x12C4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x403 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x447 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x2848 JUMP JUMPDEST PUSH2 0x130D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x447 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F6 PUSH2 0x4D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x281C JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x1C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1834 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x546 CALLDATASIZE PUSH1 0x4 PUSH2 0x27EA JUMP JUMPDEST PUSH2 0x1840 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AE PUSH2 0x566 CALLDATASIZE PUSH1 0x4 PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x1C2F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x447 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x281C JUMP JUMPDEST PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP4 POP SWAP1 SWAP2 POP DUP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x687 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7CB SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7DB DUP7 DUP4 PUSH1 0x0 PUSH2 0x1EA2 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x7ED DUP7 DUP4 PUSH2 0x295E JUMP JUMPDEST GT ISZERO PUSH2 0x87B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379207265776172642077697468647261773A206E6F742065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6F7567682072657761726420746F6B656E0000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP5 DUP4 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x88F SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x0 SWAP1 POP PUSH2 0x900 JUMPI PUSH2 0x8FB PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP6 DUP8 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x95F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x9F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x656D657267656E6379207265776172642077697468647261773A206661696C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F2073656E640000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xA7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 DUP2 SLOAD PUSH32 0x0 GT PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A2072657761726420696E666F206C656E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x677468206578636565647320746865206C696D69740000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0xB88 JUMPI POP DUP2 SLOAD TIMESTAMP SWAP1 DUP4 SWAP1 PUSH2 0xB63 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xB73 JUMPI PUSH2 0xB73 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0xC13 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A2072657761726420706572696F642065 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E64656400000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0xC52 JUMPI POP DUP2 SLOAD DUP5 SWAP1 DUP4 SWAP1 PUSH2 0xC2E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xC3E JUMPI PUSH2 0xC3E PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD LT JUMPDEST PUSH2 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A20626164206E657720656E6454696D65 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7374616D70000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0xD1F JUMPI DUP3 SLOAD DUP4 SWAP1 PUSH2 0xCF8 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x29EE JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xD08 JUMPI PUSH2 0xD08 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD PUSH2 0xD25 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD33 DUP3 DUP8 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD41 DUP7 DUP4 PUSH2 0x29B1 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH2 0xDAF JUMPI PUSH2 0xDAA PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x22ED JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164642072657761726420696E666F3A206E6F7420656E6F7567682066756E64 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7320746F207472616E7366657200000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST DUP1 DUP5 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xE52 SWAP2 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP11 DUP2 MSTORE SWAP3 DUP3 ADD DUP10 DUP2 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP12 SSTORE PUSH1 0x0 DUP12 DUP2 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP4 MLOAD PUSH1 0x3 SWAP1 SWAP2 MUL SWAP1 SWAP4 ADD SWAP3 DUP4 SSTORE SWAP3 MLOAD DUP3 DUP3 ADD SSTORE SWAP2 MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE DUP6 SLOAD PUSH2 0xEAB SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE DUP11 SWAP2 PUSH32 0xAD90731BD0D97445F5AF66088F3ADEBF343C520C20E033CC42F93B124258CDC2 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 TIMESTAMP PUSH2 0x2466 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xF83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD ISZERO PUSH2 0xFFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706F6F6C20616C72656164792065786973747300000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST DUP2 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x100F SWAP2 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP6 DUP2 MSTORE DUP4 DUP6 ADD DUP7 DUP2 MSTORE PUSH1 0x60 DUP6 ADD DUP9 DUP2 MSTORE PUSH1 0x80 DUP7 ADD DUP6 DUP2 MSTORE DUP11 DUP7 MSTORE PUSH1 0x2 SWAP5 DUP6 SWAP1 MSTORE DUP8 DUP7 KECCAK256 SWAP7 MLOAD DUP8 SSTORE SWAP3 MLOAD PUSH1 0x1 DUP1 DUP9 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP4 DUP7 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD PUSH1 0x3 DUP6 ADD SSTORE MLOAD PUSH1 0x4 SWAP4 DUP5 ADD SSTORE DUP3 SLOAD SWAP1 DUP2 ADD DUP4 SSTORE SWAP2 SWAP1 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B ADD DUP5 SWAP1 SSTORE MLOAD DUP4 SWAP1 PUSH32 0xA6B36EA399C1EAE2BA98A011138F78722B48F46AD93349269348CCC6E8F1CCED SWAP1 PUSH2 0x10D2 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH2 0x1111 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x117E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x118C DUP3 PUSH2 0x1840 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1203 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x1210 PUSH2 0x259A JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1226 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x12B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH2 0x12C2 PUSH1 0x0 PUSH2 0x25E3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 LT ISZERO DUP1 PUSH2 0x12D4 JUMPI POP DUP3 DUP5 GT JUMPDEST ISZERO PUSH2 0x12E1 JUMPI POP PUSH1 0x0 PUSH2 0x1306 JUMP JUMPDEST DUP2 DUP4 GT PUSH2 0x12F9 JUMPI PUSH2 0x12F2 DUP5 DUP5 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP PUSH2 0x1306 JUMP JUMPDEST PUSH2 0x1303 DUP5 DUP4 PUSH2 0x29EE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x13F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6F6E6C794469737472696275746F7256323A206F6E6C7920456D626572446973 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7472696275746F7256322063616E2063616C6C20746869732066756E6374696F PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x1465 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH1 0x0 PUSH2 0x1475 DUP5 PUSH2 0x1840 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SWAP2 SWAP3 POP DUP1 PUSH32 0x0 ISZERO PUSH2 0x14D5 JUMPI POP SELFBALANCE PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x155A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x156E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1592 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP3 SLOAD ISZERO PUSH2 0x179C JUMPI PUSH1 0x1 DUP4 ADD SLOAD DUP5 MLOAD DUP5 SLOAD PUSH32 0x0 SWAP2 PUSH2 0x15D0 SWAP2 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x15DA SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x15E4 SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP2 POP DUP2 ISZERO PUSH2 0x179C JUMPI PUSH32 0x0 ISZERO PUSH2 0x170D JUMPI DUP1 DUP3 GT ISZERO PUSH2 0x16EB JUMPI PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1675 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x167A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x16E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206661696C65640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP PUSH2 0x179C JUMP JUMPDEST PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1638 JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x175B JUMPI PUSH2 0x1756 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 DUP4 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x179C JUMP JUMPDEST PUSH2 0x179C PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP8 DUP5 PUSH2 0x217D JUMP JUMPDEST DUP5 DUP4 SSTORE DUP4 MLOAD PUSH32 0x0 SWAP1 PUSH2 0x17CD SWAP1 DUP8 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x17D7 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH32 0xD1072BB52C3131D0C96197B73FB8A45637E30F8B6664FC142310CC9B242859B4 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC DUP3 TIMESTAMP PUSH2 0x2658 JUMP JUMPDEST PUSH2 0x1872 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP6 ADD MSTORE SWAP4 DUP2 ADD SLOAD DUP5 DUP4 ADD MSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE DUP6 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP4 SWAP5 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x192D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x18DD JUMP JUMPDEST POP POP POP POP SWAP1 POP DUP2 PUSH1 0x40 ADD MLOAD TIMESTAMP GT PUSH2 0x1944 JUMPI POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A05 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1A70 JUMPI PUSH2 0x1A16 DUP5 TIMESTAMP PUSH2 0x2658 JUMP JUMPDEST TIMESTAMP GT ISZERO PUSH2 0x1A69 JUMPI TIMESTAMP PUSH1 0x40 DUP5 DUP2 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP2 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP5 SWAP1 MSTORE SWAP1 DUP3 ADD MSTORE DUP5 SWAP1 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1BB2 JUMPI PUSH1 0x0 PUSH2 0x1AAA DUP6 PUSH1 0x40 ADD MLOAD TIMESTAMP DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1A99 JUMPI PUSH2 0x1A99 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1AB7 JUMPI POP PUSH2 0x1BA2 JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AC9 JUMPI PUSH2 0x1AC9 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD TIMESTAMP GT ISZERO PUSH2 0x1B08 JUMPI DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AEE JUMPI PUSH2 0x1AEE PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1B0F JUMP JUMPDEST TIMESTAMP PUSH1 0x40 DUP7 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B2B JUMPI PUSH2 0x1B2B PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x1B42 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B4C SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B56 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x1B83 PUSH32 0x0 DUP4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x1B8D SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST DUP7 MLOAD DUP8 SWAP1 PUSH2 0x1B9C SWAP1 DUP4 SWAP1 PUSH2 0x295E JUMP JUMPDEST SWAP1 MSTORE POP POP POP JUMPDEST PUSH2 0x1BAB DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A73 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP7 MLOAD DUP1 DUP3 SSTORE DUP8 DUP4 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP8 DUP6 ADD MLOAD SWAP4 DUP3 ADD DUP5 SWAP1 SSTORE PUSH1 0x60 DUP1 DUP10 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP10 ADD MLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP5 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD DUP6 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE DUP6 SWAP2 PUSH32 0x3BE3541FC42237D611B30329040BFA4569541D156560ACDBBAE57640D20B8F46 SWAP2 ADD PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x1CB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1D53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x67E JUMP JUMPDEST PUSH2 0x1D5C DUP2 PUSH2 0x25E3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH2 0x1306 SWAP2 DUP6 SWAP2 PUSH2 0x1EA2 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP2 MSTORE PUSH1 0x24 DUP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 PUSH2 0x1E28 SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E68 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1E7B JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x1E86 JUMPI PUSH1 0x12 PUSH2 0x1E9A JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1E9A SWAP2 SWAP1 PUSH2 0x2900 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP6 ADD MSTORE SWAP4 DUP2 ADD SLOAD DUP5 DUP4 ADD MSTORE PUSH1 0x3 DUP1 DUP3 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE DUP8 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP6 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x1F56 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1F06 JUMP JUMPDEST POP POP DUP5 MLOAD PUSH1 0x40 MLOAD PUSH32 0x654C9ECE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE SWAP4 SWAP5 POP SWAP3 PUSH1 0x0 SWAP3 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH4 0x654C9ECE SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FFD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2021 SWAP2 SWAP1 PUSH2 0x2803 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0x2035 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x2131 JUMPI PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x212E JUMPI PUSH1 0x0 PUSH2 0x2064 DUP4 TIMESTAMP DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1A99 JUMPI PUSH2 0x1A99 PUSH2 0x2A6D JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2071 JUMPI POP PUSH2 0x211E JUMP JUMPDEST DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2083 JUMPI PUSH2 0x2083 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP3 POP PUSH1 0x0 PUSH1 0x6 SLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20AD JUMPI PUSH2 0x20AD PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x20C4 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x20CE SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x20D8 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0x2105 PUSH32 0x0 DUP4 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x210F SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x2119 SWAP1 DUP8 PUSH2 0x295E JUMP JUMPDEST SWAP6 POP POP POP JUMPDEST PUSH2 0x2127 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x2042 JUMP JUMPDEST POP POP JUMPDEST DUP6 PUSH32 0x0 PUSH2 0x215D DUP5 DUP11 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x2167 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x29EE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x2214 SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2251 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2256 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2280 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x2280 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2280 SWAP2 SWAP1 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x22E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP9 AND SWAP2 PUSH2 0x238C SWAP2 SWAP1 PUSH2 0x2923 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x23C9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x23F8 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x23F8 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x23F8 SWAP2 SWAP1 PUSH2 0x27C8 JUMP JUMPDEST PUSH2 0x245E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x67E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x24DF JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x248F JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD SWAP3 SWAP4 POP SWAP2 SWAP1 POP DUP1 PUSH2 0x2509 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x258D JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2526 JUMPI PUSH2 0x2526 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP7 GT PUSH2 0x257D JUMPI PUSH1 0x6 SLOAD DUP4 PUSH1 0x3 ADD SLOAD DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2552 JUMPI PUSH2 0x2552 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH2 0x2568 SWAP2 SWAP1 PUSH2 0x29B1 JUMP JUMPDEST PUSH2 0x2572 SWAP2 SWAP1 PUSH2 0x2976 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH2 0x2586 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x250C JUMP JUMPDEST POP PUSH1 0x0 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x25DF JUMPI PUSH2 0x25CE PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x25BE JUMPI PUSH2 0x25BE PUSH2 0x2A6D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1840 JUMP JUMPDEST POP PUSH2 0x25D8 DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x25A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE DUP5 SWAP4 DUP5 SWAP1 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x26D1 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2681 JUMP JUMPDEST POP POP DUP3 MLOAD SWAP3 SWAP4 POP POP POP DUP1 PUSH2 0x26EA JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2751 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2707 JUMPI PUSH2 0x2707 PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP6 GT PUSH2 0x2741 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x272B JUMPI PUSH2 0x272B PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP4 POP POP POP POP PUSH2 0xEFC JUMP JUMPDEST PUSH2 0x274A DUP2 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 POP PUSH2 0x26ED JUMP JUMPDEST POP DUP2 PUSH2 0x275E PUSH1 0x1 DUP4 PUSH2 0x29EE JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x276E JUMPI PUSH2 0x276E PUSH2 0x2A6D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1306 DUP3 PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2815 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x282F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x283F PUSH1 0x20 DUP5 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x285D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x286D PUSH1 0x20 DUP6 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x28CB PUSH1 0x40 DUP6 ADD PUSH2 0x2784 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2944 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x292A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2953 JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2971 JUMPI PUSH2 0x2971 PUSH2 0x2A3E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x29AC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x29E9 JUMPI PUSH2 0x29E9 PUSH2 0x2A3E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2A00 JUMPI PUSH2 0x2A00 PUSH2 0x2A3E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2A37 JUMPI PUSH2 0x2A37 PUSH2 0x2A3E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 JUMPI DUP7 0xD4 0x4E ADDMOD BYTE 0xA6 0xC0 SWAP5 PUSH8 0x635B2A5F59F92FD9 0xAD 0x2A LOG1 INVALID PUSH24 0xAB649DE9B28E4A8964736F6C634300080700330000000000 ",
              "sourceMap": "19821:16732:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21931:45;;;;;;;;;;;;;;;;;;11231:25:1;;;11219:2;11204:18;21931:45:0;;;;;;;;21497:54;;;;;;;;;;-1:-1:-1;21497:54:0;;;;;:::i;:::-;;:::i;:::-;;;;11722:25:1;;;11778:2;11763:18;;11756:34;;;;11806:18;;;11799:34;11710:2;11695:18;21497:54:0;11520:319:1;21289:44:0;;;;;;;;;;-1:-1:-1;21289:44:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12103:25:1;;;12159:2;12144:18;;12137:34;;;;12187:18;;;12180:34;;;;12245:2;12230:18;;12223:34;12288:3;12273:19;;12266:35;12090:3;12075:19;21289:44:0;11844:463:1;21810:34:0;;;;;;;;;;;;;;;;35749:802;;;;;;;;;;-1:-1:-1;35749:802:0;;;;;:::i;:::-;;:::i;:::-;;24591:1835;;;;;;:::i;:::-;;:::i;35514:180::-;;;;;;;;;;-1:-1:-1;35514:180:0;;;;;:::i;:::-;;:::i;23895:560::-;;;;;;;;;;-1:-1:-1;23895:560:0;;;;;:::i;:::-;;:::i;27917:156::-;;;;;;;;;;-1:-1:-1;27917:156:0;;;;;:::i;:::-;;:::i;:::-;;;;;;10735:4:1;10777:3;10766:9;10762:19;10754:27;;10814:6;10808:13;10797:9;10790:32;10878:4;10870:6;10866:17;10860:24;10853:4;10842:9;10838:20;10831:54;10941:4;10933:6;10929:17;10923:24;10916:4;10905:9;10901:20;10894:54;11004:4;10996:6;10992:17;10986:24;10979:4;10968:9;10964:20;10957:54;11067:4;11059:6;11055:17;11049:24;11042:4;11031:9;11027:20;11020:54;10593:487;;;;;30892:82:0;;;;;;;;;;;;;:::i;21558:24::-;;;;;;;;;;-1:-1:-1;21558:24:0;;;;;:::i;:::-;;:::i;10183:92::-;;;;;;;;;;;;;:::i;27389:348::-;;;;;;;;;;-1:-1:-1;27389:348:0;;;;;:::i;:::-;;:::i;20059:30::-;;;;;;;;;;;;;;;;;;4569:14:1;;4562:22;4544:41;;4532:2;4517:18;20059:30:0;4404:187:1;20003:50:0;;;;;;;;;;;;;;;;;;3644:42:1;3632:55;;;3614:74;;3602:2;3587:18;20003:50:0;3468:226:1;31482:1582:0;;;;;;;;;;-1:-1:-1;31482:1582:0;;;;;:::i;:::-;;:::i;9551:85::-;;;;;;;;;;-1:-1:-1;9597:7:0;9623:6;;;9551:85;;21646:64;;;;;;;;;;-1:-1:-1;21646:64:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11441:25:1;;;11497:2;11482:18;;11475:34;;;;11414:18;21646:64:0;11267:248:1;27166:137:0;;;;;;;;;;-1:-1:-1;27166:137:0;;;;;:::i;:::-;;:::i;28252:2560::-;;;;;;;;;;-1:-1:-1;28252:2560:0;;;;;:::i;:::-;;:::i;10424:189::-;;;;;;;;;;-1:-1:-1;10424:189:0;;;;;:::i;:::-;;:::i;19947:50::-;;;;;;;;;;;;;;;33135:311;;;;;;;;;;-1:-1:-1;33135:311:0;;;;;:::i;:::-;;:::i;21497:54::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21497:54:0;;-1:-1:-1;21497:54:0;:::o;35749:802::-;9597:7;9623:6;9763:23;9623:6;8457:10;9763:23;9755:68;;;;;;;7244:2:1;9755:68:0;;;7226:21:1;;;7263:18;;;7256:30;7322:34;7302:18;;;7295:62;7374:18;;9755:68:0;;;;;;;;;12509:1:::1;13088:7;;:19;;13080:63;;;::::0;::::1;::::0;;10021:2:1;13080:63:0::1;::::0;::::1;10003:21:1::0;10060:2;10040:18;;;10033:30;10099:33;10079:18;;;10072:61;10150:18;;13080:63:0::1;9819:355:1::0;13080:63:0::1;12509:1;13218:7;:18:::0;;;35907:21:::2;35931:14:::0;;;::::2;::::0;;;;;;;;35974:31;;;;;::::2;::::0;::::2;11231:25:1::0;;;35931:14:0;;35907:21;35974:13:::2;:25;;::::0;::::2;::::0;11204:18:1;;35974:31:0::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;35955:50;;36016:35;36054:33;36069:4;36075:8;36085:1;36054:14;:33::i;:::-;36160:17;::::0;::::2;::::0;36016:71;;-1:-1:-1;36119:37:0::2;36149:7:::0;36016:71;36119:37:::2;:::i;:::-;:58;;36098:155;;;::::0;::::2;::::0;;6825:2:1;36098:155:0::2;::::0;::::2;6807:21:1::0;6864:2;6844:18;;;6837:30;6903:34;6883:18;;;6876:62;6974:20;6954:18;;;6947:48;7012:19;;36098:155:0::2;6623:414:1::0;36098:155:0::2;36284:7;36263:4;:17;;;:28;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;36307:8:0::2;::::0;-1:-1:-1;36302:243:0::2;;36331:47;:24;:11;:24;36356:12:::0;36370:7;36331:24:::2;:47::i;:::-;36302:243;;;36410:9;36425:12;:17;;36450:7;36425:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36409:53;;;36484:4;36476:58;;;::::0;::::2;::::0;;6415:2:1;36476:58:0::2;::::0;::::2;6397:21:1::0;6454:2;6434:18;;;6427:30;6493:34;6473:18;;;6466:62;6564:11;6544:18;;;6537:39;6593:19;;36476:58:0::2;6213:405:1::0;36476:58:0::2;36395:150;36302:243;-1:-1:-1::0;;12466:1:0::1;13391:22:::0;;-1:-1:-1;;;;35749:802:0:o;24591:1835::-;9597:7;9623:6;9763:23;9623:6;8457:10;9763:23;9755:68;;;;;;;7244:2:1;9755:68:0;;;7226:21:1;;;7263:18;;;7256:30;7322:34;7302:18;;;7295:62;7374:18;;9755:68:0;7042:356:1;9755:68:0;24741:31:::1;24775:20:::0;;;:14:::1;:20;::::0;;;;;;;24829:8:::1;:14:::0;;;;;;24874:17;;24894:15:::1;-1:-1:-1::0;24853:135:0::1;;;::::0;::::1;::::0;;8764:2:1;24853:135:0::1;::::0;::::1;8746:21:1::0;8803:2;8783:18;;;8776:30;8842:34;8822:18;;;8815:62;8913:23;8893:18;;;8886:51;8954:19;;24853:135:0::1;8562:417:1::0;24853:135:0::1;25019:17:::0;;:22;;:123:::1;;-1:-1:-1::0;25072:17:0;;25127:15:::1;::::0;25061:10;;25072:21:::1;::::0;25092:1:::1;::::0;25072:21:::1;:::i;:::-;25061:33;;;;;;;;:::i;:::-;;;;;;;;;;;:46;;;:81;;25019:123;24998:206;;;::::0;::::1;::::0;;7605:2:1;24998:206:0::1;::::0;::::1;7587:21:1::0;7644:2;7624:18;;;7617:30;7683:34;7663:18;;;7656:62;7754:6;7734:18;;;7727:34;7778:19;;24998:206:0::1;7403:400:1::0;24998:206:0::1;25235:17:::0;;:22;;:104:::1;;-1:-1:-1::0;25288:17:0;;25326:13;;25277:10;;25288:21:::1;::::0;25308:1:::1;::::0;25288:21:::1;:::i;:::-;25277:33;;;;;;;;:::i;:::-;;;;;;;;;;;:46;;;:62;25235:104;25214:188;;;::::0;::::1;::::0;;8358:2:1;25214:188:0::1;::::0;::::1;8340:21:1::0;8397:2;8377:18;;;8370:30;8436:34;8416:18;;;8409:62;8507:7;8487:18;;;8480:35;8532:19;;25214:188:0::1;8156:401:1::0;25214:188:0::1;25438:17:::0;;25413:22:::1;::::0;25438;:117:::1;;25520:17:::0;;25509:10;;25520:21:::1;::::0;25540:1:::1;::::0;25520:21:::1;:::i;:::-;25509:33;;;;;;;;:::i;:::-;;;;;;;;;;;:46;;;25438:117;;;25475:4;:19;;;25438:117;25413:142:::0;-1:-1:-1;25566:17:0::1;25586:30;25413:142:::0;25586:13;:30:::1;:::i;:::-;25566:50:::0;-1:-1:-1;25626:20:0::1;25649:25;25661:13:::0;25566:50;25649:25:::1;:::i;:::-;25626:48;;25690:8;25685:331;;25714:131;:28;:11;:28;25760:10;25796:4;25819:12:::0;25714:28:::1;:131::i;:::-;25685:331;;;25914:12;25901:9;:25;25876:129;;;::::0;::::1;::::0;;10381:2:1;25876:129:0::1;::::0;::::1;10363:21:1::0;10420:2;10400:18;;;10393:30;10459:34;10439:18;;;10432:62;10530:15;10510:18;;;10503:43;10563:19;;25876:129:0::1;10179:409:1::0;25876:129:0::1;26047:12;26026:4;:17;;;:33;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;26099:164:0::1;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;;;;26070:203;;::::1;::::0;;::::1;::::0;;-1:-1:-1;26070:203:0;;;;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;::::1;::::0;;;::::1;::::0;;::::1;::::0;26334:17;;:21:::1;::::0;26070:203;26334:21:::1;:::i;:::-;26289:130;::::0;;11441:25:1;;;11497:2;11482:18;;11475:34;;;26316:4:0;;26289:130:::1;::::0;11414:18:1;26289:130:0::1;;;;;;;24731:1695;;;;;24591:1835:::0;;;:::o;35514:180::-;35619:7;35649:38;35665:4;35671:15;35649;:38::i;:::-;35642:45;35514:180;-1:-1:-1;;35514:180:0:o;23895:560::-;9597:7;9623:6;9763:23;9623:6;8457:10;9763:23;9755:68;;;;;;;7244:2:1;9755:68:0;;;7226:21:1;;;7263:18;;;7256:30;7322:34;7302:18;;;7295:62;7374:18;;9755:68:0;7042:356:1;9755:68:0;24033:14:::1;::::0;;;:8:::1;:14;::::0;;;;;;;:34:::1;::::0;:39;24025:71:::1;;;::::0;::::1;::::0;;8010:2:1;24025:71:0::1;::::0;::::1;7992:21:1::0;8049:2;8029:18;;;8022:30;8088:21;8068:18;;;8061:49;8127:18;;24025:71:0::1;7808:343:1::0;24025:71:0::1;24125:11;24106:15;;:30;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;24164:214:0::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;24164:214:0;;;::::1;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;;;;;24147:14;;;:8:::1;:14:::0;;;;;;;:231;;;;;;::::1;::::0;;::::1;::::0;;;;;;;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;24389:18;;;;::::1;::::0;;;;;;::::1;::::0;;;24422:26;24156:4;;24422:26:::1;::::0;::::1;::::0;24199:11;11231:25:1;;11219:2;11204:18;;11085:177;24422:26:0::1;;;;;;;;23895:560:::0;;;:::o;27917:156::-;28006:20;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28006:20:0;12509:1;13088:7;;:19;;13080:63;;;;;;;10021:2:1;13080:63:0;;;10003:21:1;10060:2;10040:18;;;10033:30;10099:33;10079:18;;;10072:61;10150:18;;13080:63:0;9819:355:1;13080:63:0;12509:1;13218:7;:18;28049:17:::1;28061:4:::0;28049:11:::1;:17::i;:::-;12466:1:::0;13391:22;;28042:24;27917:156;-1:-1:-1;;27917:156:0:o;30892:82::-;12509:1;13088:7;;:19;;13080:63;;;;;;;10021:2:1;13080:63:0;;;10003:21:1;10060:2;10040:18;;;10033:30;10099:33;10079:18;;;10072:61;10150:18;;13080:63:0;9819:355:1;13080:63:0;12509:1;13218:7;:18;30949::::1;:16;:18::i;:::-;12466:1:::0;13391:22;;30892:82::o;21558:24::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21558:24:0;:::o;10183:92::-;9597:7;9623:6;9763:23;9623:6;8457:10;9763:23;9755:68;;;;;;;7244:2:1;9755:68:0;;;7226:21:1;;;7263:18;;;7256:30;7322:34;7302:18;;;7295:62;7374:18;;9755:68:0;7042:356:1;9755:68:0;10247:21:::1;10265:1;10247:9;:21::i;:::-;10183:92::o:0;27389:348::-;27516:7;27549:13;27540:5;:22;;27539:41;;;;27576:3;27568:5;:11;27539:41;27535:80;;;-1:-1:-1;27603:1:0;27596:8;;27535:80;27635:13;27628:3;:20;27624:69;;27671:11;27677:5;27671:3;:11;:::i;:::-;27664:18;;;;27624:69;27709:21;27725:5;27709:13;:21;:::i;:::-;27702:28;;27389:348;;;;;;:::o;31482:1582::-;22676:10;:36;22698:13;22676:36;;22655:148;;;;;;;9186:2:1;22655:148:0;;;9168:21:1;9225:2;9205:18;;;9198:30;9264:34;9244:18;;;9237:62;9335:34;9315:18;;;9308:62;9407:3;9386:19;;;9379:32;9428:19;;22655:148:0;8984:469:1;22655:148:0;12509:1:::1;13088:7;;:19;;13080:63;;;::::0;::::1;::::0;;10021:2:1;13080:63:0::1;::::0;::::1;10003:21:1::0;10060:2;10040:18;;;10033:30;10099:33;10079:18;;;10072:61;10150:18;;13080:63:0::1;9819:355:1::0;13080:63:0::1;12509:1;13218:7;:18:::0;31640:20:::2;31663:17;31675:4:::0;31663:11:::2;:17::i;:::-;31690:21;31714:14:::0;;;:8:::2;:14;::::0;;;;;;;:21:::2;::::0;::::2;::::0;;;;;;;31640:40;;-1:-1:-1;31690:21:0;31815:8:::2;31811:159;;;-1:-1:-1::0;31855:21:0::2;31811:159;;;31923:36;::::0;;;;31953:4:::2;31923:36;::::0;::::2;3614:74:1::0;31923:11:0::2;:21;;::::0;::::2;::::0;3587:18:1;;31923:36:0::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;31907:52;;31811:159;31984:11:::0;;:15;31980:894:::2;;32106:15;::::0;::::2;::::0;32042:21;;32028:11;;32083:19:::2;::::0;32028:35:::2;::::0;::::2;:::i;:::-;32027:75;;;;:::i;:::-;32026:95;;;;:::i;:::-;32015:107:::0;-1:-1:-1;32141:11:0;;32137:727:::2;;32176:8;32172:678;;;32222:13;32212:7;:23;32208:359;;;32264:12;32282:5;:10;;32300:13;32282:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32263:55;;;32352:7;32344:35;;;::::0;::::2;::::0;;6071:2:1;32344:35:0::2;::::0;::::2;6053:21:1::0;6110:2;6090:18;;;6083:30;6149:17;6129:18;;;6122:45;6184:18;;32344:35:0::2;5869:339:1::0;32344:35:0::2;32237:165;32172:678;;32208:359;32435:12;32453:5;:10;;32471:7;32453:30;;;3258:205:1::0;32172:678:0::2;32627:13;32617:7;:23;32613:219;;;32668:46;:24;:11;:24;32693:5:::0;32700:13;32668:24:::2;:46::i;:::-;32613:219;;;32769:40;:24;:11;:24;32794:5:::0;32801:7;32769:24:::2;:40::i;:::-;32884:21:::0;;;32961;;32998:19:::2;::::0;32947:35:::2;::::0;32898:7;32947:35:::2;:::i;:::-;32946:71;;;;:::i;:::-;32916:15;::::0;::::2;:101:::0;33033:24:::2;::::0;11231:25:1;;;33033:24:0::2;::::0;::::2;::::0;::::2;::::0;11219:2:1;11204:18;33033:24:0::2;;;;;;;-1:-1:-1::0;;12466:1:0::1;13391:22:::0;;-1:-1:-1;;;;;31482:1582:0:o;27166:137::-;27232:7;27258:38;27274:4;27280:15;27258;:38::i;28252:2560::-;28302:20;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28302:20:0;-1:-1:-1;28341:13:0;;;;:8;:13;;;;;;;;28334:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28397:19;;;;;;;;28364:52;;;;;;;;;;;;;;;;;28334:20;;28341:13;28364:52;;28397:19;;28364:52;28341:13;;28364:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28450:4;:24;;;28431:15;:43;28427:85;;28490:11;28252:2560;;;:::o;28427:85::-;28541:30;;;;;;;;11231:25:1;;;28522:16:0;;28541:13;:25;;;;;11204:18:1;;28541:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28522:49;-1:-1:-1;28586:13:0;28582:735;;28972:37;28988:3;28993:15;28972;:37::i;:::-;28954:15;:55;28950:331;;;29056:15;29029:24;;;;:42;;;29227:21;;29094:172;;11722:25:1;;;11778:2;11763:18;;11756:34;;;11806:18;;;11799:34;29126:3:0;;29094:172;;11710:2:1;11695:18;29094:172:0;;;;;;;;28950:331;29295:11;;28252:2560;;;:::o;28582:735::-;29370:9;29365:1240;29389:10;:17;29385:1;:21;29365:1240;;;29678:19;29700:148;29733:4;:24;;;29775:15;29808:10;29819:1;29808:13;;;;;;;;:::i;:::-;;;;;;;:26;;;29700:15;:148::i;:::-;29678:170;-1:-1:-1;29866:16:0;29862:30;;29884:8;;;29862:30;30149:10;30160:1;30149:13;;;;;;;;:::i;:::-;;;;;;;:26;;;30131:15;:44;30127:217;;;30222:10;30233:1;30222:13;;;;;;;;:::i;:::-;;;;;;;:26;;;30195:4;:24;;:53;;;;;30127:217;;;30314:15;30287:24;;;:42;30127:217;30358:19;30475:15;;30456:4;:15;;;30411:10;30422:1;30411:13;;;;;;;;:::i;:::-;;;;;;;:26;;;30381:11;:56;;;;:::i;:::-;:90;;;;:::i;:::-;30380:110;;;;:::i;:::-;30358:132;-1:-1:-1;30585:8:0;30532:33;30546:19;30358:132;30532:33;:::i;:::-;30531:62;;;;:::i;:::-;30505:89;;:4;;:89;;;;;:::i;:::-;;;-1:-1:-1;;;29365:1240:0;29408:3;;;:::i;:::-;;;29365:1240;;;-1:-1:-1;30615:13:0;;;;:8;:13;;;;;;;;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30651:132;;11722:25:1;;;11763:18;;;11756:34;;;11806:18;;;11799:34;30615:13:0;;30651:132;;11695:18:1;30651:132:0;11520:319:1;10424:189:0;9597:7;9623:6;9763:23;9623:6;8457:10;9763:23;9755:68;;;;;;;7244:2:1;9755:68:0;;;7226:21:1;;;7263:18;;;7256:30;7322:34;7302:18;;;7295:62;7374:18;;9755:68:0;7042:356:1;9755:68:0;10512:22:::1;::::0;::::1;10504:73;;;::::0;::::1;::::0;;5664:2:1;10504:73:0::1;::::0;::::1;5646:21:1::0;5703:2;5683:18;;;5676:30;5742:34;5722:18;;;5715:62;5813:8;5793:18;;;5786:36;5839:19;;10504:73:0::1;5462:402:1::0;10504:73:0::1;10587:19;10597:8;10587:9;:19::i;:::-;10424:189:::0;:::o;33135:311::-;33251:7;33347:14;;;:8;:14;;;;;;;;:21;;;;;;;;;;:28;;33393:32;;;;;33293:146;;33347:14;;33293;:146::i;838:377::-;1154:20;1200:8;;;838:377::o;17508:288::-;17665:36;;;;;;;;;;;;;;;;;;17688:12;17665:36;;;17626:85;;17573:5;;;;;;17626:25;;;;:85;;17665:36;17626:85;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17590:121;;;;17728:7;:28;;;;;17739:4;:11;17754:2;17739:17;17728:28;:61;;17787:2;17728:61;;;17770:4;17759:25;;;;;;;;;;;;:::i;:::-;17721:68;17508:288;-1:-1:-1;;;;17508:288:0:o;33452:1272::-;33581:15;33631:14;;;:8;:14;;;;;;;;33608:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;33688:20;;;;;;;;33655:53;;;;;;;;;;;;;;;;;33581:15;;;;33655:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;33746:21:0;;33796:31;;;;;;;;11231:25:1;;;33655:53:0;;-1:-1:-1;33746:21:0;33719:24;;-1:-1:-1;33796:13:0;:25;;;-1:-1:-1;33796:25:0;;11204:18:1;;33796:31:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;33777:50;;33860:4;:24;;;33842:15;:42;:59;;;;-1:-1:-1;33888:13:0;;;33842:59;33838:779;;;33934:24;;;;33917:14;33973:634;33997:10;:17;33993:1;:21;33973:634;;;34039:19;34061:146;34098:6;34126:15;34163:10;34174:1;34163:13;;;;;;;;:::i;34061:146::-;34039:168;-1:-1:-1;34229:16:0;34225:30;;34247:8;;;34225:30;34282:10;34293:1;34282:13;;;;;;;;:::i;:::-;;;;;;;:26;;;34273:35;;34327:19;34452:15;;34433:4;:15;;;34384:10;34395:1;34384:13;;;;;;;;:::i;:::-;;;;;;;:26;;;34350:11;:60;;;;:::i;:::-;:98;;;;:::i;:::-;34349:118;;;;:::i;:::-;34327:140;-1:-1:-1;34584:8:0;34527:33;34541:19;34327:140;34527:33;:::i;:::-;34526:66;;;;:::i;:::-;34486:106;;;;:::i;:::-;;;34021:586;;33973:634;34016:3;;;:::i;:::-;;;33973:634;;;;33903:714;33838:779;34705:11;34670:19;34640:26;34650:16;34640:7;:26;:::i;:::-;34639:50;;;;:::i;:::-;34638:78;;;;:::i;:::-;34627:90;33452:1272;-1:-1:-1;;;;;;;;33452:1272:0:o;18065:395::-;18253:48;;;18220:19;4294:55:1;;;18253:48:0;;;4276:74:1;4366:18;;;;4359:34;;;18253:48:0;;;;;;;;;;4249:18:1;;;;18253:48:0;;;;;;;;;18276:12;18253:48;;;18220:91;;-1:-1:-1;;;;18220:19:0;;;;:91;;18253:48;18220:91;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18184:127;;;;18342:7;:57;;;;-1:-1:-1;18354:11:0;;:16;;:44;;;18385:4;18374:24;;;;;;;;;;;;:::i;:::-;18321:132;;;;;;;5307:2:1;18321:132:0;;;5289:21:1;5346:2;5326:18;;;5319:30;5385;5365:18;;;5358:58;5433:18;;18321:132:0;5105:352:1;18321:132:0;18174:286;;18065:395;;;:::o;18775:436::-;18989:59;;;18956:19;3980:15:1;;;18989:59:0;;;3962:34:1;4032:15;;;4012:18;;;4005:43;4064:18;;;;4057:34;;;18989:59:0;;;;;;;;;;3874:18:1;;;;18989:59:0;;;;;;;;;19012:17;18989:59;;;18956:102;;-1:-1:-1;;;;18956:19:0;;;;:102;;18989:59;18956:102;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18920:138;;;;19089:7;:57;;;;-1:-1:-1;19101:11:0;;:16;;:44;;;19132:4;19121:24;;;;;;;;;;;;:::i;:::-;19068:136;;;;;;;9660:2:1;19068:136:0;;;9642:21:1;;;9679:18;;;9672:30;9738:34;9718:18;;;9711:62;9790:18;;19068:136:0;9458:356:1;19068:136:0;18910:301;;18775:436;;;;:::o;34730:720::-;34841:7;34897:20;;;:14;:20;;;;;;;;34864:53;;;;;;;;;;;;;;;;;34841:7;;;;34864:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;34927:21:0;34951:14;;;:8;:14;;;;;34989:17;;34864:53;;-1:-1:-1;34951:14:0;34989:17;-1:-1:-1;35020:8:0;35016:47;;35051:1;35044:8;;;;;;;35016:47;35077:9;35072:237;35096:3;35092:1;:7;35072:237;;;35143:10;35154:1;35143:13;;;;;;;;:::i;:::-;;;;;;;:26;;;35124:15;:45;35120:178;;35283:15;;35244:4;:15;;;35215:10;35226:1;35215:13;;;;;;;;:::i;:::-;;;;;;;:26;;;:44;;;;:::i;:::-;35214:84;;;;:::i;:::-;35187:111;;;;;;;;35120:178;35101:3;;;:::i;:::-;;;35072:237;;;-1:-1:-1;35442:1:0;;34730:720;-1:-1:-1;;;;;;34730:720:0:o;31054:187::-;31118:7;:14;31101;31142:93;31170:6;31164:3;:12;31142:93;;;31199:25;31211:7;31219:3;31211:12;;;;;;;;:::i;:::-;;;;;;;;;31199:11;:25::i;:::-;-1:-1:-1;31178:5:0;;;:::i;:::-;;;31142:93;;;;31091:150;31054:187::o;10619:169::-;10674:16;10693:6;;;10709:17;;;;;;;;;;10741:40;;10693:6;;;;;;;10741:40;;10674:16;10741:40;10664:124;10619:169;:::o;26432:643::-;26538:7;26594:20;;;:14;:20;;;;;;;;26561:53;;;;;;;;;;;;;;;;;26538:7;;;;26561:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;26638:17:0;;26561:53;;-1:-1:-1;;;26669:8:0;26665:47;;26700:1;26693:8;;;;;;26665:47;26726:9;26721:154;26745:3;26741:1;:7;26721:154;;;26787:10;26798:1;26787:13;;;;;;;;:::i;:::-;;;;;;;:26;;;26773:10;:40;26769:95;;26838:10;26849:1;26838:13;;;;;;;;:::i;:::-;;;;;;;:26;;;26831:33;;;;;;;26769:95;26750:3;;;:::i;:::-;;;26721:154;;;-1:-1:-1;27036:10:0;27047:7;27053:1;27047:3;:7;:::i;:::-;27036:19;;;;;;;;:::i;:::-;;;;;;;:32;;;27029:39;;;;26432:643;;;;:::o;14:196:1:-;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:186::-;274:6;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;366:29;385:9;366:29;:::i;406:277::-;473:6;526:2;514:9;505:7;501:23;497:32;494:52;;;542:1;539;532:12;494:52;574:9;568:16;627:5;620:13;613:21;606:5;603:32;593:60;;649:1;646;639:12;688:180;747:6;800:2;788:9;779:7;775:23;771:32;768:52;;;816:1;813;806:12;768:52;-1:-1:-1;839:23:1;;688:180;-1:-1:-1;688:180:1:o;873:184::-;943:6;996:2;984:9;975:7;971:23;967:32;964:52;;;1012:1;1009;1002:12;964:52;-1:-1:-1;1035:16:1;;873:184;-1:-1:-1;873:184:1:o;1062:254::-;1130:6;1138;1191:2;1179:9;1170:7;1166:23;1162:32;1159:52;;;1207:1;1204;1197:12;1159:52;1243:9;1230:23;1220:33;;1272:38;1306:2;1295:9;1291:18;1272:38;:::i;:::-;1262:48;;1062:254;;;;;:::o;1321:322::-;1398:6;1406;1414;1467:2;1455:9;1446:7;1442:23;1438:32;1435:52;;;1483:1;1480;1473:12;1435:52;1519:9;1506:23;1496:33;;1548:38;1582:2;1571:9;1567:18;1548:38;:::i;:::-;1538:48;;1633:2;1622:9;1618:18;1605:32;1595:42;;1321:322;;;;;:::o;1648:248::-;1716:6;1724;1777:2;1765:9;1756:7;1752:23;1748:32;1745:52;;;1793:1;1790;1783:12;1745:52;-1:-1:-1;;1816:23:1;;;1886:2;1871:18;;;1858:32;;-1:-1:-1;1648:248:1:o;1901:322::-;1978:6;1986;1994;2047:2;2035:9;2026:7;2022:23;2018:32;2015:52;;;2063:1;2060;2053:12;2015:52;2099:9;2086:23;2076:33;;2156:2;2145:9;2141:18;2128:32;2118:42;;2179:38;2213:2;2202:9;2198:18;2179:38;:::i;:::-;2169:48;;1901:322;;;;;:::o;2228:316::-;2305:6;2313;2321;2374:2;2362:9;2353:7;2349:23;2345:32;2342:52;;;2390:1;2387;2380:12;2342:52;-1:-1:-1;;2413:23:1;;;2483:2;2468:18;;2455:32;;-1:-1:-1;2534:2:1;2519:18;;;2506:32;;2228:316;-1:-1:-1;2228:316:1:o;2549:273::-;2617:6;2670:2;2658:9;2649:7;2645:23;2641:32;2638:52;;;2686:1;2683;2676:12;2638:52;2718:9;2712:16;2768:4;2761:5;2757:16;2750:5;2747:27;2737:55;;2788:1;2785;2778:12;2827:426;2956:3;2994:6;2988:13;3019:1;3029:129;3043:6;3040:1;3037:13;3029:129;;;3141:4;3125:14;;;3121:25;;3115:32;3102:11;;;3095:53;3058:12;3029:129;;;3176:6;3173:1;3170:13;3167:48;;;3211:1;3202:6;3197:3;3193:16;3186:27;3167:48;-1:-1:-1;3231:16:1;;;;;2827:426;-1:-1:-1;;2827:426:1:o;12312:128::-;12352:3;12383:1;12379:6;12376:1;12373:13;12370:39;;;12389:18;;:::i;:::-;-1:-1:-1;12425:9:1;;12312:128::o;12445:274::-;12485:1;12511;12501:189;;12546:77;12543:1;12536:88;12647:4;12644:1;12637:15;12675:4;12672:1;12665:15;12501:189;-1:-1:-1;12704:9:1;;12445:274::o;12724:228::-;12764:7;12890:1;12822:66;12818:74;12815:1;12812:81;12807:1;12800:9;12793:17;12789:105;12786:131;;;12897:18;;:::i;:::-;-1:-1:-1;12937:9:1;;12724:228::o;12957:125::-;12997:4;13025:1;13022;13019:8;13016:34;;;13030:18;;:::i;:::-;-1:-1:-1;13067:9:1;;12957:125::o;13087:195::-;13126:3;13157:66;13150:5;13147:77;13144:103;;;13227:18;;:::i;:::-;-1:-1:-1;13274:1:1;13263:13;;13087:195::o;13287:184::-;13339:77;13336:1;13329:88;13436:4;13433:1;13426:15;13460:4;13457:1;13450:15;13476:184;13528:77;13525:1;13518:88;13625:4;13622:1;13615:15;13649:4;13646:1;13639:15"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "2192400",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "_getTimeElapsed(uint256,uint256,uint256)": "559",
                "_updatePool(uint256)": "infinite",
                "add(uint256,uint256,uint256)": "153361",
                "addRewardInfo(uint256,uint256,uint256)": "infinite",
                "currentEndTimestamp(uint256)": "infinite",
                "distributorV2()": "infinite",
                "emergencyRewardWithdraw(uint256,uint256,address)": "infinite",
                "isNative()": "infinite",
                "massUpdatePools()": "infinite",
                "onEmberReward(uint256,address,uint256)": "infinite",
                "owner()": "2396",
                "pendingTokens(uint256,address)": "infinite",
                "poolIds(uint256)": "4653",
                "poolInfo(uint256)": "11031",
                "poolRewardInfo(uint256,uint256)": "9021",
                "poolRewardsPerSec(uint256)": "infinite",
                "renounceOwnership()": "28121",
                "rewardInfoLimit()": "infinite",
                "rewardToken()": "infinite",
                "totalAllocPoint()": "2352",
                "transferOwnership(address)": "28290",
                "updatePool(uint256)": "infinite",
                "userInfo(uint256,address)": "4789"
              },
              "internal": {
                "_endTimestampOf(uint256,uint256)": "infinite",
                "_massUpdatePools()": "infinite",
                "_pendingTokens(uint256,uint256,uint256)": "infinite",
                "_rewardPerSecOf(uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "_getTimeElapsed(uint256,uint256,uint256)": "72333631",
              "_updatePool(uint256)": "d4aa89b5",
              "add(uint256,uint256,uint256)": "505fb46c",
              "addRewardInfo(uint256,uint256,uint256)": "2ea807c5",
              "currentEndTimestamp(uint256)": "9e494bee",
              "distributorV2()": "7d0d9d5f",
              "emergencyRewardWithdraw(uint256,uint256,address)": "1d123131",
              "isNative()": "73cfc6b2",
              "massUpdatePools()": "630b5ba1",
              "onEmberReward(uint256,address,uint256)": "8ad14728",
              "owner()": "8da5cb5b",
              "pendingTokens(uint256,address)": "ffcd4263",
              "poolIds(uint256)": "69883b4e",
              "poolInfo(uint256)": "1526fe27",
              "poolRewardInfo(uint256,uint256)": "0832cfbf",
              "poolRewardsPerSec(uint256)": "465e81ec",
              "renounceOwnership()": "715018a6",
              "rewardInfoLimit()": "00d74850",
              "rewardToken()": "f7c618c1",
              "totalAllocPoint()": "17caf6f1",
              "transferOwnership(address)": "f2fde38b",
              "updatePool(uint256)": "51eb05a6",
              "userInfo(uint256,address)": "93f1a40b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IEmberDistributorV2\",\"name\":\"_distributorV2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"AddRewardInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"_getTimeElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"_updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderPerSecV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerSec\",\"type\":\"uint256\"}],\"name\":\"addRewardInfo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"currentEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorV2\",\"outputs\":[{\"internalType\":\"contract IEmberDistributorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onEmberReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderPerSecV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"add(uint256,uint256,uint256)\":{\"params\":{\"_allocPoint\":\"allocation of the new pool.\",\"_pid\":\"pool id on DistributorV2\"}},\"onEmberReward(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"stateVariables\":{\"poolRewardInfo\":{\"details\":\"this is mostly used for extending reward period\"},\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getTimeElapsed(uint256,uint256,uint256)\":{\"notice\":\"Return reward multiplier over the given _from to _to timestamp.\"},\"_updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"add(uint256,uint256,uint256)\":{\"notice\":\"Add a new pool. Can only be called by the owner.\"},\"addRewardInfo(uint256,uint256,uint256)\":{\"notice\":\"if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\"},\"currentEndTimestamp(uint256)\":{\"notice\":\"this will return end timestamp based on the current block timestamp.\"},\"emergencyRewardWithdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw reward. EMERGENCY ONLY.\"},\"onEmberReward(uint256,address,uint256)\":{\"notice\":\"Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending Reward on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"poolRewardInfo(uint256,uint256)\":{\"notice\":\"Reward info is a set of {endTimestamp, rewardPerSec} indexed by pool id\"},\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"},\"rewardInfoLimit()\":{\"notice\":\"limit length of reward info how many phases are allowed\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"notice\":\"This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward stakers with their native token alongside EMBER. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"ComplexRewarderPerSecV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 321,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              },
              {
                "astId": 427,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "_status",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 947,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "poolInfo",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_struct(PoolInfo)934_storage)"
              },
              {
                "astId": 954,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "poolRewardInfo",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)941_storage)dyn_storage)"
              },
              {
                "astId": 957,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "poolIds",
                "offset": 0,
                "slot": "4",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "astId": 965,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "userInfo",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)923_storage))"
              },
              {
                "astId": 969,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                "label": "totalAllocPoint",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_struct(RewardInfo)941_storage)dyn_storage": {
                "base": "t_struct(RewardInfo)941_storage",
                "encoding": "dynamic_array",
                "label": "struct ComplexRewarderPerSecV2.RewardInfo[]",
                "numberOfBytes": "32"
              },
              "t_array(t_uint256)dyn_storage": {
                "base": "t_uint256",
                "encoding": "dynamic_array",
                "label": "uint256[]",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_struct(UserInfo)923_storage)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(UserInfo)923_storage"
              },
              "t_mapping(t_uint256,t_array(t_struct(RewardInfo)941_storage)dyn_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo[])",
                "numberOfBytes": "32",
                "value": "t_array(t_struct(RewardInfo)941_storage)dyn_storage"
              },
              "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)923_storage))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_struct(UserInfo)923_storage)"
              },
              "t_mapping(t_uint256,t_struct(PoolInfo)934_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo)",
                "numberOfBytes": "32",
                "value": "t_struct(PoolInfo)934_storage"
              },
              "t_struct(PoolInfo)934_storage": {
                "encoding": "inplace",
                "label": "struct ComplexRewarderPerSecV2.PoolInfo",
                "members": [
                  {
                    "astId": 925,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "accTokenPerShare",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 927,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "startTimestamp",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 929,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "lastRewardTimestamp",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 931,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "allocPoint",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 933,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "totalRewards",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "160"
              },
              "t_struct(RewardInfo)941_storage": {
                "encoding": "inplace",
                "label": "struct ComplexRewarderPerSecV2.RewardInfo",
                "members": [
                  {
                    "astId": 936,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "startTimestamp",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 938,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "endTimestamp",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 940,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "rewardPerSec",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "96"
              },
              "t_struct(UserInfo)923_storage": {
                "encoding": "inplace",
                "label": "struct ComplexRewarderPerSecV2.UserInfo",
                "members": [
                  {
                    "astId": 920,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "amount",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 922,
                    "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ComplexRewarderPerSecV2",
                    "label": "rewardDebt",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  }
                ],
                "numberOfBytes": "64"
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "_getTimeElapsed(uint256,uint256,uint256)": {
                "notice": "Return reward multiplier over the given _from to _to timestamp."
              },
              "_updatePool(uint256)": {
                "notice": "Update reward variables of the given pool."
              },
              "add(uint256,uint256,uint256)": {
                "notice": "Add a new pool. Can only be called by the owner."
              },
              "addRewardInfo(uint256,uint256,uint256)": {
                "notice": "if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info."
              },
              "currentEndTimestamp(uint256)": {
                "notice": "this will return end timestamp based on the current block timestamp."
              },
              "emergencyRewardWithdraw(uint256,uint256,address)": {
                "notice": "Withdraw reward. EMERGENCY ONLY."
              },
              "onEmberReward(uint256,address,uint256)": {
                "notice": "Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token."
              },
              "pendingTokens(uint256,address)": {
                "notice": "View function to see pending Reward on frontend."
              },
              "poolInfo(uint256)": {
                "notice": "Info of each pool."
              },
              "poolRewardInfo(uint256,uint256)": {
                "notice": "Reward info is a set of {endTimestamp, rewardPerSec} indexed by pool id"
              },
              "poolRewardsPerSec(uint256)": {
                "notice": "View function to see pool rewards per sec"
              },
              "rewardInfoLimit()": {
                "notice": "limit length of reward info how many phases are allowed"
              },
              "updatePool(uint256)": {
                "notice": "Update reward variables of the given pool."
              },
              "userInfo(uint256,address)": {
                "notice": "Info of each user that stakes LP tokens."
              }
            },
            "notice": "This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward stakers with their native token alongside EMBER. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.",
            "version": 1
          }
        },
        "Context": {
          "abi": [],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IBoringERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "mint(address,uint256)": "40c10f19",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"IBoringERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "notice": "EIP 2612"
              }
            },
            "version": 1
          }
        },
        "IComplexRewarder": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "newLpAmount",
                  "type": "uint256"
                }
              ],
              "name": "onEmberReward",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                }
              ],
              "name": "pendingTokens",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "pending",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                }
              ],
              "name": "poolRewardsPerSec",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "rewardToken",
              "outputs": [
                {
                  "internalType": "contract IBoringERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "onEmberReward(uint256,address,uint256)": "8ad14728",
              "pendingTokens(uint256,address)": "ffcd4263",
              "poolRewardsPerSec(uint256)": "465e81ec",
              "rewardToken()": "f7c618c1"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLpAmount\",\"type\":\"uint256\"}],\"name\":\"onEmberReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"IComplexRewarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "IEmberDistributorV2": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "_pid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "deposit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "poolLength",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "pid",
                  "type": "uint256"
                }
              ],
              "name": "poolTotalLp",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalAllocPoint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "deposit(uint256,uint256)": "e2bbb158",
              "poolLength()": "081e3eda",
              "poolTotalLp(uint256)": "654c9ece",
              "totalAllocPoint()": "17caf6f1"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolTotalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"IEmberDistributorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 321,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:Ownable",
                "label": "_owner",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "ReentrancyGuard": {
          "abi": [],
          "devdoc": {
            "details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/rewarders/ComplexRewarderPerSecV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/IEmberDistributorV2.sol\\npragma solidity ^0.8.2;\\n\\ninterface IEmberDistributorV2 {\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/ComplexRewarderPerSecV2.sol\\npragma solidity ^0.8.2;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\n\\n/**\\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\\n * stakers with their native token alongside EMBER.\\n *\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\n */\\ncontract ComplexRewarderPerSecV2 is IComplexRewarder, Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    IBoringERC20 public immutable override rewardToken;\\n    IEmberDistributorV2 public immutable distributorV2;\\n    bool public immutable isNative;\\n\\n    /// @notice Info of each distributorV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` The amount of REWARD entitled to the user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /// @notice Info of each distributorV2 poolInfo.\\n    /// `accTokenPerShare` Amount of REWARD each LP token is worth.\\n    /// `startTimestamp` The start timestamp of rewards.\\n    /// `lastRewardTimestamp` The last timestamp REWARD was rewarded to the poolInfo.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    /// `totalRewards` The amount of rewards added to the pool.\\n    struct PoolInfo {\\n        uint256 accTokenPerShare;\\n        uint256 startTimestamp;\\n        uint256 lastRewardTimestamp;\\n        uint256 allocPoint;\\n        uint256 totalRewards;\\n    }\\n\\n    /// @notice Reward info\\n    /// `startTimestamp` The start timestamp of rewards\\n    /// `endTimestamp` The end timestamp of rewards\\n    /// `rewardPerSec` The amount of rewards per second\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 rewardPerSec;\\n    }\\n\\n    /// @notice Info of each pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @dev this is mostly used for extending reward period\\n    /// @notice Reward info is a set of {endTimestamp, rewardPerSec}\\n    /// indexed by pool id\\n    mapping(uint256 => RewardInfo[]) public poolRewardInfo;\\n\\n    uint256[] public poolIds;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    /// @notice limit length of reward info\\n    /// how many phases are allowed\\n    uint256 public immutable rewardInfoLimit = 52; //1y\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION;\\n\\n    event OnReward(address indexed user, uint256 amount);\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accTokenPerShare\\n    );\\n\\n    event AddRewardInfo(\\n        uint256 indexed pid,\\n        uint256 indexed phase,\\n        uint256 endTimestamp,\\n        uint256 rewardPerSec\\n    );\\n\\n    modifier onlyDistributorV2() {\\n        require(\\n            msg.sender == address(distributorV2),\\n            \\\"onlyDistributorV2: only EmberDistributorV2 can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IBoringERC20 _rewardToken,\\n        IEmberDistributorV2 _distributorV2,\\n        bool _isNative\\n    ) {\\n        require(\\n            Address.isContract(address(_rewardToken)),\\n            \\\"constructor: reward token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_distributorV2)),\\n            \\\"constructor: EmberDistributorV2 must be a valid contract\\\"\\n        );\\n        rewardToken = _rewardToken;\\n        distributorV2 = _distributorV2;\\n        isNative = _isNative;\\n\\n        uint256 decimalsRewardToken = uint256(\\n            _isNative ? 18 : _rewardToken.safeDecimals()\\n        );\\n        require(\\n            decimalsRewardToken < 30,\\n            \\\"constructor: reward token decimals must be inferior to 30\\\"\\n        );\\n\\n        ACC_TOKEN_PRECISION = uint256(\\n            10**(uint256(30) - (decimalsRewardToken))\\n        );\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @param _pid pool id on DistributorV2\\n    /// @param _allocPoint allocation of the new pool.\\n    function add(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint256 _startTimestamp\\n    ) public onlyOwner {\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo[_pid] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            startTimestamp: _startTimestamp,\\n            lastRewardTimestamp: _startTimestamp,\\n            accTokenPerShare: 0,\\n            totalRewards: 0\\n        });\\n\\n        poolIds.push(_pid);\\n        emit AddPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info.\\n    function addRewardInfo(\\n        uint256 _pid,\\n        uint256 _endTimestamp,\\n        uint256 _rewardPerSec\\n    ) external payable onlyOwner {\\n        RewardInfo[] storage rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n            rewardInfo.length < rewardInfoLimit,\\n            \\\"add reward info: reward info length exceeds the limit\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp >=\\n                block.timestamp,\\n            \\\"add reward info: reward period ended\\\"\\n        );\\n        require(\\n            rewardInfo.length == 0 ||\\n                rewardInfo[rewardInfo.length - 1].endTimestamp < _endTimestamp,\\n            \\\"add reward info: bad new endTimestamp\\\"\\n        );\\n\\n        uint256 startTimestamp = rewardInfo.length == 0\\n            ? pool.startTimestamp\\n            : rewardInfo[rewardInfo.length - 1].endTimestamp;\\n\\n        uint256 timeRange = _endTimestamp - startTimestamp;\\n        uint256 totalRewards = timeRange * _rewardPerSec;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalRewards\\n            );\\n        } else {\\n            require(\\n                msg.value == totalRewards,\\n                \\\"add reward info: not enough funds to transfer\\\"\\n            );\\n        }\\n\\n        pool.totalRewards += totalRewards;\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                startTimestamp: startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardPerSec: _rewardPerSec\\n            })\\n        );\\n\\n        emit AddRewardInfo(\\n            _pid,\\n            rewardInfo.length - 1,\\n            _endTimestamp,\\n            _rewardPerSec\\n        );\\n    }\\n\\n    function _endTimestampOf(uint256 _pid, uint256 _timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_timestamp <= rewardInfo[i].endTimestamp)\\n                return rewardInfo[i].endTimestamp;\\n        }\\n\\n        /// @dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\\n        /// so return the latest reward info.\\n        return rewardInfo[len - 1].endTimestamp;\\n    }\\n\\n    /// @notice this will return end timestamp based on the current block timestamp.\\n    function currentEndTimestamp(uint256 _pid) external view returns (uint256) {\\n        return _endTimestampOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Return reward multiplier over the given _from to _to timestamp.\\n    function _getTimeElapsed(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 _endTimestamp\\n    ) public pure returns (uint256) {\\n        if ((_from >= _endTimestamp) || (_from > _to)) {\\n            return 0;\\n        }\\n        if (_to <= _endTimestamp) {\\n            return _to - _from;\\n        }\\n        return _endTimestamp - _from;\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid)\\n        external\\n        nonReentrant\\n        returns (PoolInfo memory pool)\\n    {\\n        return _updatePool(_pid);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function _updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return pool;\\n        }\\n\\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\\n\\n        if (lpSupply == 0) {\\n            // if there is no total supply, return and use the pool's start timestamp as the last reward timestamp\\n            // so that ALL reward will be distributed.\\n            // however, if the first deposit is out of reward period, last reward timestamp will be its timestamp\\n            // in order to keep the multiplier = 0\\n            if (block.timestamp > _endTimestampOf(pid, block.timestamp)) {\\n                pool.lastRewardTimestamp = block.timestamp;\\n                emit UpdatePool(\\n                    pid,\\n                    pool.lastRewardTimestamp,\\n                    lpSupply,\\n                    pool.accTokenPerShare\\n                );\\n            }\\n\\n            return pool;\\n        }\\n\\n        /// @dev for each reward info\\n        for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n            // @dev get multiplier based on current timestamp and rewardInfo's end timestamp\\n            // multiplier will be a range of either (current timestamp - pool.timestamp)\\n            // or (reward info's endtimestamp - pool.timestamp) or 0\\n            uint256 timeElapsed = _getTimeElapsed(\\n                pool.lastRewardTimestamp,\\n                block.timestamp,\\n                rewardInfo[i].endTimestamp\\n            );\\n            if (timeElapsed == 0) continue;\\n\\n            // @dev if currentTimestamp exceed end timestamp, use end timestamp as the last reward timestamp\\n            // so that for the next iteration, previous endTimestamp will be used as the last reward timestamp\\n            if (block.timestamp > rewardInfo[i].endTimestamp) {\\n                pool.lastRewardTimestamp = rewardInfo[i].endTimestamp;\\n            } else {\\n                pool.lastRewardTimestamp = block.timestamp;\\n            }\\n\\n            uint256 tokenReward = (timeElapsed *\\n                rewardInfo[i].rewardPerSec *\\n                pool.allocPoint) / totalAllocPoint;\\n\\n            pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\n                lpSupply);\\n        }\\n\\n        poolInfo[pid] = pool;\\n\\n        emit UpdatePool(\\n            pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accTokenPerShare\\n        );\\n\\n        return pool;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function _massUpdatePools() internal {\\n        uint256 length = poolIds.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            _updatePool(poolIds[pid]);\\n        }\\n    }\\n\\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\\n    /// @param _user Address of user\\n    /// @param _amount Number of LP tokens the user has\\n    function onEmberReward(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _amount\\n    ) external override onlyDistributorV2 nonReentrant {\\n        PoolInfo memory pool = _updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 pending = 0;\\n        uint256 rewardBalance = 0;\\n\\n        if (isNative) {\\n            rewardBalance = address(this).balance;\\n        } else {\\n            rewardBalance = rewardToken.balanceOf(address(this));\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = (((user.amount * pool.accTokenPerShare) /\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\n\\n            if (pending > 0) {\\n                if (isNative) {\\n                    if (pending > rewardBalance) {\\n                        (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    } else {\\n                        (bool success, ) = _user.call{value: pending}(\\\"\\\");\\n                        require(success, \\\"Transfer failed\\\");\\n                    }\\n                } else {\\n                    if (pending > rewardBalance) {\\n                        rewardToken.safeTransfer(_user, rewardBalance);\\n                    } else {\\n                        rewardToken.safeTransfer(_user, pending);\\n                    }\\n                }\\n            }\\n        }\\n\\n        user.amount = _amount;\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accTokenPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        emit OnReward(_user, pending);\\n    }\\n\\n    /// @notice View function to see pending Reward on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            _pendingTokens(\\n                _pid,\\n                userInfo[_pid][_user].amount,\\n                userInfo[_pid][_user].rewardDebt\\n            );\\n    }\\n\\n    function _pendingTokens(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _rewardDebt\\n    ) internal view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 cursor = pool.lastRewardTimestamp;\\n\\n            for (uint256 i = 0; i < rewardInfo.length; ++i) {\\n                uint256 timeElapsed = _getTimeElapsed(\\n                    cursor,\\n                    block.timestamp,\\n                    rewardInfo[i].endTimestamp\\n                );\\n                if (timeElapsed == 0) continue;\\n                cursor = rewardInfo[i].endTimestamp;\\n\\n                uint256 tokenReward = (timeElapsed *\\n                    rewardInfo[i].rewardPerSec *\\n                    pool.allocPoint) / totalAllocPoint;\\n\\n                accTokenPerShare +=\\n                    (tokenReward * ACC_TOKEN_PRECISION) /\\n                    lpSupply;\\n            }\\n        }\\n\\n        pending = (((_amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\n            _rewardDebt);\\n    }\\n\\n    function _rewardPerSecOf(uint256 _pid, uint256 _blockTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        RewardInfo[] memory rewardInfo = poolRewardInfo[_pid];\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 len = rewardInfo.length;\\n        if (len == 0) {\\n            return 0;\\n        }\\n        for (uint256 i = 0; i < len; ++i) {\\n            if (_blockTimestamp <= rewardInfo[i].endTimestamp)\\n                return\\n                    (rewardInfo[i].rewardPerSec * pool.allocPoint) /\\n                    totalAllocPoint;\\n        }\\n        /// @dev when couldn't find any reward info, it means that timestamp exceed endblock\\n        /// so return 0\\n        return 0;\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _rewardPerSecOf(_pid, block.timestamp);\\n    }\\n\\n    /// @notice Withdraw reward. EMERGENCY ONLY.\\n    function emergencyRewardWithdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _beneficiary\\n    ) external onlyOwner nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\n\\n        uint256 currentStakingPendingReward = _pendingTokens(_pid, lpSupply, 0);\\n\\n        require(\\n            currentStakingPendingReward + _amount <= pool.totalRewards,\\n            \\\"emergency reward withdraw: not enough reward token\\\"\\n        );\\n        pool.totalRewards -= _amount;\\n\\n        if (!isNative) {\\n            rewardToken.safeTransfer(_beneficiary, _amount);\\n        } else {\\n            (bool sent, ) = _beneficiary.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"emergency reward withdraw: failed to send\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x741fd711164cc524087390e34450f08940e0686db0346178661dfcd2faf3b7cf\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 427,
                "contract": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol:ReentrancyGuard",
                "label": "_status",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol": {
        "ast": {
          "absolutePath": "contracts/farm/rewarders/ComplexRewarderPerSecV2.sol",
          "exportedSymbols": {
            "Address": [
              295
            ],
            "BoringERC20": [
              896
            ],
            "ComplexRewarderPerSecV2": [
              2157
            ],
            "Context": [
              315
            ],
            "IBoringERC20": [
              529
            ],
            "IComplexRewarder": [
              562
            ],
            "IEmberDistributorV2": [
              588
            ],
            "Ownable": [
              417
            ],
            "ReentrancyGuard": [
              456
            ]
          },
          "id": 2158,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "153:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "178:67:0",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 295,
              "linearizedBaseContracts": [
                295
              ],
              "name": "Address",
              "nameLocation": "254:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 18,
                    "nodeType": "Block",
                    "src": "904:311:0",
                    "statements": [
                      {
                        "assignments": [
                          11
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 11,
                            "mutability": "mutable",
                            "name": "size",
                            "nameLocation": "1109:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 18,
                            "src": "1101:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 10,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1101:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 12,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1101:12:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1132:52:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1146:28:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "account",
                                    "nodeType": "YulIdentifier",
                                    "src": "1166:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "extcodesize",
                                  "nodeType": "YulIdentifier",
                                  "src": "1154:11:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1154:20:0"
                              },
                              "variableNames": [
                                {
                                  "name": "size",
                                  "nodeType": "YulIdentifier",
                                  "src": "1146:4:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 5,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1166:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 11,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1146:4:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 13,
                        "nodeType": "InlineAssembly",
                        "src": "1123:61:0"
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 14,
                            "name": "size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "1200:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 15,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1207:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1200:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 9,
                        "id": 17,
                        "nodeType": "Return",
                        "src": "1193:15:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "268:565:0",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
                  },
                  "id": 19,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "847:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 6,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "866:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "858:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "858:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "857:17:0"
                  },
                  "returnParameters": {
                    "id": 9,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 8,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "898:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 7,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "898:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "897:6:0"
                  },
                  "scope": 295,
                  "src": "838:377:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 52,
                    "nodeType": "Block",
                    "src": "2203:241:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 34,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 30,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2229:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$295",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$295",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 29,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2221:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 28,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2221:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 31,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2221:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 32,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "2221:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 33,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24,
                                "src": "2246:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2221:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 35,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2254:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 27,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2213:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 36,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2213:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 37,
                        "nodeType": "ExpressionStatement",
                        "src": "2213:73:0"
                      },
                      {
                        "assignments": [
                          39,
                          null
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 39,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "2303:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 52,
                            "src": "2298:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 38,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2298:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 46,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 44,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2346:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 40,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "2316:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2316:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 43,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 42,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24,
                                "src": "2338:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "2316:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 45,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2316:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2297:52:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 48,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "2367:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 49,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2376:60:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 47,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "2359:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 50,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2359:78:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 51,
                        "nodeType": "ExpressionStatement",
                        "src": "2359:78:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 20,
                    "nodeType": "StructuredDocumentation",
                    "src": "1221:906:0",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 53,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "2141:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 25,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 22,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "2167:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 53,
                        "src": "2151:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 21,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2151:15:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2186:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 53,
                        "src": "2178:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2178:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2150:43:0"
                  },
                  "returnParameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2203:0:0"
                  },
                  "scope": 295,
                  "src": "2132:312:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 69,
                    "nodeType": "Block",
                    "src": "3275:84:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 64,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "3305:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 65,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 58,
                              "src": "3313:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 66,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3319:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 63,
                            "name": "functionCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              70,
                              90
                            ],
                            "referencedDeclaration": 90,
                            "src": "3292:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 67,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3292:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 62,
                        "id": 68,
                        "nodeType": "Return",
                        "src": "3285:67:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 54,
                    "nodeType": "StructuredDocumentation",
                    "src": "2450:731:0",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 70,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3195:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 59,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 56,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3216:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 70,
                        "src": "3208:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 55,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3208:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 58,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3237:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 70,
                        "src": "3224:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 57,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3224:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3207:35:0"
                  },
                  "returnParameters": {
                    "id": 62,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 61,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 70,
                        "src": "3261:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 60,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3261:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3260:14:0"
                  },
                  "scope": 295,
                  "src": "3186:173:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 89,
                    "nodeType": "Block",
                    "src": "3728:76:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 83,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 73,
                              "src": "3767:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 84,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 75,
                              "src": "3775:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3781:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 86,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "3784:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 82,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              110,
                              160
                            ],
                            "referencedDeclaration": 160,
                            "src": "3745:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 87,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3745:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 81,
                        "id": 88,
                        "nodeType": "Return",
                        "src": "3738:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 71,
                    "nodeType": "StructuredDocumentation",
                    "src": "3365:211:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 90,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3590:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 78,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 73,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3620:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 90,
                        "src": "3612:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 72,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3612:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 75,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3649:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 90,
                        "src": "3636:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 74,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3636:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 77,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "3677:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 90,
                        "src": "3663:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 76,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3663:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3602:93:0"
                  },
                  "returnParameters": {
                    "id": 81,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 80,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 90,
                        "src": "3714:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 79,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3714:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3713:14:0"
                  },
                  "scope": 295,
                  "src": "3581:223:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 109,
                    "nodeType": "Block",
                    "src": "4309:111:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 103,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 93,
                              "src": "4348:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 104,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 95,
                              "src": "4356:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 105,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 97,
                              "src": "4362:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 106,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4369:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 102,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              110,
                              160
                            ],
                            "referencedDeclaration": 160,
                            "src": "4326:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4326:87:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 101,
                        "id": 108,
                        "nodeType": "Return",
                        "src": "4319:94:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 91,
                    "nodeType": "StructuredDocumentation",
                    "src": "3810:351:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 110,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4175:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 93,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4214:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "4206:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 92,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4206:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4243:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "4230:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 94,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4230:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4265:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "4257:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4257:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4196:80:0"
                  },
                  "returnParameters": {
                    "id": 101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 100,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 110,
                        "src": "4295:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 99,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4295:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4294:14:0"
                  },
                  "scope": 295,
                  "src": "4166:254:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 159,
                    "nodeType": "Block",
                    "src": "4847:321:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 131,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 127,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "4873:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$295",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_Address_$295",
                                        "typeString": "library Address"
                                      }
                                    ],
                                    "id": 126,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4865:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 125,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4865:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 128,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4865:13:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 129,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "4865:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 130,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 117,
                                "src": "4890:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4865:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 132,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4897:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 124,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4857:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4857:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 134,
                        "nodeType": "ExpressionStatement",
                        "src": "4857:81:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 137,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 113,
                                  "src": "4967:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 136,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "4956:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 138,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4956:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 139,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4976:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              },
                              "value": "Address: call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                "typeString": "literal_string \"Address: call to non-contract\""
                              }
                            ],
                            "id": 135,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4948:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4948:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 141,
                        "nodeType": "ExpressionStatement",
                        "src": "4948:60:0"
                      },
                      {
                        "assignments": [
                          143,
                          145
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 143,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5025:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 159,
                            "src": "5020:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 142,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5020:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 145,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "5047:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 159,
                            "src": "5034:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 144,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5034:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 152,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 150,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 115,
                              "src": "5087:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 146,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 113,
                                "src": "5061:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "id": 147,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "5061:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 149,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": [
                              "value"
                            ],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 148,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 117,
                                "src": "5080:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "src": "5061:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5061:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5019:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 154,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 143,
                              "src": "5127:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 155,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 145,
                              "src": "5136:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 156,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 119,
                              "src": "5148:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 153,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "5109:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5109:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 123,
                        "id": 158,
                        "nodeType": "Return",
                        "src": "5102:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 111,
                    "nodeType": "StructuredDocumentation",
                    "src": "4426:237:0",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 160,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4677:21:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 120,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 113,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4716:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 160,
                        "src": "4708:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 112,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4708:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 115,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4745:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 160,
                        "src": "4732:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4732:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 117,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4767:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 160,
                        "src": "4759:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 116,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4759:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 119,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "4796:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 160,
                        "src": "4782:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4782:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4698:116:0"
                  },
                  "returnParameters": {
                    "id": 123,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 122,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 160,
                        "src": "4833:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 121,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4833:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4832:14:0"
                  },
                  "scope": 295,
                  "src": "4668:500:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 176,
                    "nodeType": "Block",
                    "src": "5445:97:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 171,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 163,
                              "src": "5481:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 172,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 165,
                              "src": "5489:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5495:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 170,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              177,
                              212
                            ],
                            "referencedDeclaration": 212,
                            "src": "5462:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5462:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 169,
                        "id": 175,
                        "nodeType": "Return",
                        "src": "5455:80:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 161,
                    "nodeType": "StructuredDocumentation",
                    "src": "5174:166:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 177,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5354:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 166,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 163,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5381:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5373:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 162,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5373:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 165,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5402:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5389:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 164,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5389:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5372:35:0"
                  },
                  "returnParameters": {
                    "id": 169,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 168,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5431:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 167,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5431:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5430:14:0"
                  },
                  "scope": 295,
                  "src": "5345:197:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 211,
                    "nodeType": "Block",
                    "src": "5884:229:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 191,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 180,
                                  "src": "5913:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 190,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "5902:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5902:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 193,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5922:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              },
                              "value": "Address: static call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                                "typeString": "literal_string \"Address: static call to non-contract\""
                              }
                            ],
                            "id": 189,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5894:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5894:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 195,
                        "nodeType": "ExpressionStatement",
                        "src": "5894:67:0"
                      },
                      {
                        "assignments": [
                          197,
                          199
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 197,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5978:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 211,
                            "src": "5973:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 196,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5973:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 199,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "6000:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 211,
                            "src": "5987:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 198,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5987:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 204,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 202,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 182,
                              "src": "6032:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 200,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 180,
                              "src": "6014:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 201,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "6014:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6014:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5972:65:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 206,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 197,
                              "src": "6072:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 207,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "6081:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 208,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 184,
                              "src": "6093:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 205,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "6054:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 209,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6054:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 188,
                        "id": 210,
                        "nodeType": "Return",
                        "src": "6047:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 178,
                    "nodeType": "StructuredDocumentation",
                    "src": "5548:173:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 212,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5735:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 185,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 180,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5771:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 212,
                        "src": "5763:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 179,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5763:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 182,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5800:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 212,
                        "src": "5787:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 181,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5787:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 184,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "5828:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 212,
                        "src": "5814:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 183,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5814:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5753:93:0"
                  },
                  "returnParameters": {
                    "id": 188,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 187,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 212,
                        "src": "5870:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 186,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5870:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5869:14:0"
                  },
                  "scope": 295,
                  "src": "5726:387:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 228,
                    "nodeType": "Block",
                    "src": "6389:101:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 223,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 215,
                              "src": "6427:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 224,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 217,
                              "src": "6435:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 225,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6441:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 222,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              229,
                              264
                            ],
                            "referencedDeclaration": 264,
                            "src": "6406:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 226,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6406:77:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 221,
                        "id": 227,
                        "nodeType": "Return",
                        "src": "6399:84:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 213,
                    "nodeType": "StructuredDocumentation",
                    "src": "6119:168:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 229,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6301:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 218,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 215,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6330:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "6322:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 214,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6322:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 217,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6351:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "6338:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 216,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6338:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6321:35:0"
                  },
                  "returnParameters": {
                    "id": 221,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 220,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 229,
                        "src": "6375:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 219,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6375:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6374:14:0"
                  },
                  "scope": 295,
                  "src": "6292:198:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 263,
                    "nodeType": "Block",
                    "src": "6831:233:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 243,
                                  "name": "target",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 232,
                                  "src": "6860:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 242,
                                "name": "isContract",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "6849:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6849:18:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
                              "id": 245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6869:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              },
                              "value": "Address: delegate call to non-contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                                "typeString": "literal_string \"Address: delegate call to non-contract\""
                              }
                            ],
                            "id": 241,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "6841:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 246,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6841:69:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 247,
                        "nodeType": "ExpressionStatement",
                        "src": "6841:69:0"
                      },
                      {
                        "assignments": [
                          249,
                          251
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 249,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6927:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 263,
                            "src": "6922:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 248,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6922:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 251,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "6949:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 263,
                            "src": "6936:23:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 250,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "6936:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 256,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 254,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 234,
                              "src": "6983:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "id": 252,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 232,
                              "src": "6963:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 253,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "6963:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 255,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6963:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6921:67:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 258,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 249,
                              "src": "7023:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "id": 259,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 251,
                              "src": "7032:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 260,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 236,
                              "src": "7044:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 257,
                            "name": "_verifyCallResult",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "7005:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                            }
                          },
                          "id": 261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7005:52:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "functionReturnParameters": 240,
                        "id": 262,
                        "nodeType": "Return",
                        "src": "6998:59:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 230,
                    "nodeType": "StructuredDocumentation",
                    "src": "6496:175:0",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 264,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6685:20:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 237,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 232,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6723:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 264,
                        "src": "6715:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 231,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6715:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 234,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6752:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 264,
                        "src": "6739:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 233,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6739:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 236,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6780:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 264,
                        "src": "6766:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 235,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6766:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6705:93:0"
                  },
                  "returnParameters": {
                    "id": 240,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 239,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 264,
                        "src": "6817:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 238,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6817:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6816:14:0"
                  },
                  "scope": 295,
                  "src": "6676:388:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 293,
                    "nodeType": "Block",
                    "src": "7230:532:0",
                    "statements": [
                      {
                        "condition": {
                          "id": 275,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 266,
                          "src": "7244:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 291,
                          "nodeType": "Block",
                          "src": "7301:455:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 282,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 279,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 268,
                                    "src": "7385:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 280,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "7385:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 281,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7405:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7385:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 289,
                                "nodeType": "Block",
                                "src": "7693:53:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "id": 286,
                                          "name": "errorMessage",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 270,
                                          "src": "7718:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory_ptr",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 285,
                                        "name": "revert",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          -19,
                                          -19
                                        ],
                                        "referencedDeclaration": -19,
                                        "src": "7711:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (string memory) pure"
                                        }
                                      },
                                      "id": 287,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7711:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 288,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7711:20:0"
                                  }
                                ]
                              },
                              "id": 290,
                              "nodeType": "IfStatement",
                              "src": "7381:365:0",
                              "trueBody": {
                                "id": 284,
                                "nodeType": "Block",
                                "src": "7408:279:0",
                                "statements": [
                                  {
                                    "AST": {
                                      "nodeType": "YulBlock",
                                      "src": "7528:145:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "7550:40:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "returndata",
                                                "nodeType": "YulIdentifier",
                                                "src": "7579:10:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "7573:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7573:17:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "returndata_size",
                                              "nodeType": "YulTypedName",
                                              "src": "7554:15:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "7622:2:0",
                                                    "type": "",
                                                    "value": "32"
                                                  },
                                                  {
                                                    "name": "returndata",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "7626:10:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7618:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "7618:19:0"
                                              },
                                              {
                                                "name": "returndata_size",
                                                "nodeType": "YulIdentifier",
                                                "src": "7639:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "revert",
                                              "nodeType": "YulIdentifier",
                                              "src": "7611:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7611:44:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "7611:44:0"
                                        }
                                      ]
                                    },
                                    "evmVersion": "london",
                                    "externalReferences": [
                                      {
                                        "declaration": 268,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "7579:10:0",
                                        "valueSize": 1
                                      },
                                      {
                                        "declaration": 268,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "7626:10:0",
                                        "valueSize": 1
                                      }
                                    ],
                                    "id": 283,
                                    "nodeType": "InlineAssembly",
                                    "src": "7519:154:0"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 292,
                        "nodeType": "IfStatement",
                        "src": "7240:516:0",
                        "trueBody": {
                          "id": 278,
                          "nodeType": "Block",
                          "src": "7253:42:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 276,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 268,
                                "src": "7274:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 274,
                              "id": 277,
                              "nodeType": "Return",
                              "src": "7267:17:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 294,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_verifyCallResult",
                  "nameLocation": "7079:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 266,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "7111:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "7106:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 265,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7106:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 268,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "7141:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "7128:23:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 267,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7128:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 270,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "7175:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "7161:26:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 269,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7161:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7096:97:0"
                  },
                  "returnParameters": {
                    "id": 274,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 273,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "7216:12:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 272,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7216:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7215:14:0"
                  },
                  "scope": 295,
                  "src": "7070:692:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2158,
              "src": "246:7518:0",
              "usedErrors": []
            },
            {
              "id": 296,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "7825:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 315,
              "linearizedBaseContracts": [
                315
              ],
              "name": "Context",
              "nameLocation": "8364:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 304,
                    "nodeType": "Block",
                    "src": "8440:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 301,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8457:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "8457:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 300,
                        "id": 303,
                        "nodeType": "Return",
                        "src": "8450:17:0"
                      }
                    ]
                  },
                  "id": 305,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "8387:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 297,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8397:2:0"
                  },
                  "returnParameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 299,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 305,
                        "src": "8431:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 298,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8431:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8430:9:0"
                  },
                  "scope": 315,
                  "src": "8378:96:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 313,
                    "nodeType": "Block",
                    "src": "8547:32:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 310,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "8564:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 311,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "8564:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 309,
                        "id": 312,
                        "nodeType": "Return",
                        "src": "8557:15:0"
                      }
                    ]
                  },
                  "id": 314,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "8489:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 306,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8497:2:0"
                  },
                  "returnParameters": {
                    "id": 309,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 308,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 314,
                        "src": "8531:14:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 307,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8531:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8530:16:0"
                  },
                  "scope": 315,
                  "src": "8480:99:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 2158,
              "src": "8346:235:0",
              "usedErrors": []
            },
            {
              "id": 316,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "8643:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 318,
                    "name": "Context",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 315,
                    "src": "9192:7:0"
                  },
                  "id": 319,
                  "nodeType": "InheritanceSpecifier",
                  "src": "9192:7:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 317,
                "nodeType": "StructuredDocumentation",
                "src": "8668:494:0",
                "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
              },
              "fullyImplemented": true,
              "id": 417,
              "linearizedBaseContracts": [
                417,
                315
              ],
              "name": "Ownable",
              "nameLocation": "9181:7:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 321,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "9222:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 417,
                  "src": "9206:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 320,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9206:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 327,
                  "name": "OwnershipTransferred",
                  "nameLocation": "9241:20:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 326,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 323,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "9278:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 327,
                        "src": "9262:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 322,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9262:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 325,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "9309:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 327,
                        "src": "9293:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 324,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9293:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9261:57:0"
                  },
                  "src": "9235:84:0"
                },
                {
                  "body": {
                    "id": 336,
                    "nodeType": "Block",
                    "src": "9435:40:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 332,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 305,
                                "src": "9455:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 333,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9455:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 331,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 416,
                            "src": "9445:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9445:23:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 335,
                        "nodeType": "ExpressionStatement",
                        "src": "9445:23:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 328,
                    "nodeType": "StructuredDocumentation",
                    "src": "9325:91:0",
                    "text": " @dev Initializes the contract setting the deployer as the initial owner."
                  },
                  "id": 337,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 329,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9432:2:0"
                  },
                  "returnParameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9435:0:0"
                  },
                  "scope": 417,
                  "src": "9421:54:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 345,
                    "nodeType": "Block",
                    "src": "9606:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 343,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 321,
                          "src": "9623:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 342,
                        "id": 344,
                        "nodeType": "Return",
                        "src": "9616:13:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 338,
                    "nodeType": "StructuredDocumentation",
                    "src": "9481:65:0",
                    "text": " @dev Returns the address of the current owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 346,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "9560:5:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 339,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9565:2:0"
                  },
                  "returnParameters": {
                    "id": 342,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 341,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 346,
                        "src": "9597:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 340,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9597:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9596:9:0"
                  },
                  "scope": 417,
                  "src": "9551:85:0",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 359,
                    "nodeType": "Block",
                    "src": "9745:96:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 354,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 350,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 346,
                                  "src": "9763:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 351,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9763:7:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 352,
                                  "name": "_msgSender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 305,
                                  "src": "9774:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 353,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9774:12:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "9763:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                              "id": 355,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9788:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              },
                              "value": "Ownable: caller is not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                                "typeString": "literal_string \"Ownable: caller is not the owner\""
                              }
                            ],
                            "id": 349,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "9755:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9755:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 357,
                        "nodeType": "ExpressionStatement",
                        "src": "9755:68:0"
                      },
                      {
                        "id": 358,
                        "nodeType": "PlaceholderStatement",
                        "src": "9833:1:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 347,
                    "nodeType": "StructuredDocumentation",
                    "src": "9642:77:0",
                    "text": " @dev Throws if called by any account other than the owner."
                  },
                  "id": 360,
                  "name": "onlyOwner",
                  "nameLocation": "9733:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 348,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9742:2:0"
                  },
                  "src": "9724:117:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 373,
                    "nodeType": "Block",
                    "src": "10237:38:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 369,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10265:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 368,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10257:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 367,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10257:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 370,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10257:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 366,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 416,
                            "src": "10247:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10247:21:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 372,
                        "nodeType": "ExpressionStatement",
                        "src": "10247:21:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 361,
                    "nodeType": "StructuredDocumentation",
                    "src": "9847:331:0",
                    "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                  },
                  "functionSelector": "715018a6",
                  "id": 374,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 364,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 363,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 360,
                        "src": "10227:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10227:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nameLocation": "10192:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 362,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10209:2:0"
                  },
                  "returnParameters": {
                    "id": 365,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10237:0:0"
                  },
                  "scope": 417,
                  "src": "10183:92:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 396,
                    "nodeType": "Block",
                    "src": "10494:119:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 388,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 383,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 377,
                                "src": "10512:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 386,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "10532:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 385,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "10524:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 384,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "10524:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 387,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10524:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "10512:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                              "id": 389,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10536:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              },
                              "value": "Ownable: new owner is the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                                "typeString": "literal_string \"Ownable: new owner is the zero address\""
                              }
                            ],
                            "id": 382,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "10504:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 390,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10504:73:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 391,
                        "nodeType": "ExpressionStatement",
                        "src": "10504:73:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 393,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 377,
                              "src": "10597:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 392,
                            "name": "_setOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 416,
                            "src": "10587:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 394,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10587:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 395,
                        "nodeType": "ExpressionStatement",
                        "src": "10587:19:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 375,
                    "nodeType": "StructuredDocumentation",
                    "src": "10281:138:0",
                    "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 397,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 380,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 379,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 360,
                        "src": "10484:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10484:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "10433:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 378,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 377,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "10459:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 397,
                        "src": "10451:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 376,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10451:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10450:18:0"
                  },
                  "returnParameters": {
                    "id": 381,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10494:0:0"
                  },
                  "scope": 417,
                  "src": "10424:189:0",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 415,
                    "nodeType": "Block",
                    "src": "10664:124:0",
                    "statements": [
                      {
                        "assignments": [
                          403
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 403,
                            "mutability": "mutable",
                            "name": "oldOwner",
                            "nameLocation": "10682:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 415,
                            "src": "10674:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 402,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10674:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 405,
                        "initialValue": {
                          "id": 404,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 321,
                          "src": "10693:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10674:25:0"
                      },
                      {
                        "expression": {
                          "id": 408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 406,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 321,
                            "src": "10709:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 407,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 399,
                            "src": "10718:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "10709:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 409,
                        "nodeType": "ExpressionStatement",
                        "src": "10709:17:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 411,
                              "name": "oldOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 403,
                              "src": "10762:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 412,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 399,
                              "src": "10772:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 410,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 327,
                            "src": "10741:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 413,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10741:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 414,
                        "nodeType": "EmitStatement",
                        "src": "10736:45:0"
                      }
                    ]
                  },
                  "id": 416,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_setOwner",
                  "nameLocation": "10628:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 400,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 399,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "10646:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 416,
                        "src": "10638:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 398,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10638:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10637:18:0"
                  },
                  "returnParameters": {
                    "id": 401,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10664:0:0"
                  },
                  "scope": 417,
                  "src": "10619:169:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 2158,
              "src": "9163:1627:0",
              "usedErrors": []
            },
            {
              "id": 418,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "10862:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 419,
                "nodeType": "StructuredDocumentation",
                "src": "10887:750:0",
                "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
              },
              "fullyImplemented": true,
              "id": 456,
              "linearizedBaseContracts": [
                456
              ],
              "name": "ReentrancyGuard",
              "nameLocation": "11656:15:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 422,
                  "mutability": "constant",
                  "name": "_NOT_ENTERED",
                  "nameLocation": "12451:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 456,
                  "src": "12426:41:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 420,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12426:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "31",
                    "id": 421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "12466:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 425,
                  "mutability": "constant",
                  "name": "_ENTERED",
                  "nameLocation": "12498:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 456,
                  "src": "12473:37:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 423,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12473:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "32",
                    "id": 424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "12509:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 427,
                  "mutability": "mutable",
                  "name": "_status",
                  "nameLocation": "12533:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 456,
                  "src": "12517:23:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 426,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12517:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 434,
                    "nodeType": "Block",
                    "src": "12561:39:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 430,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "12571:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 431,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 422,
                            "src": "12581:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12571:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 433,
                        "nodeType": "ExpressionStatement",
                        "src": "12571:22:0"
                      }
                    ]
                  },
                  "id": 435,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 428,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12558:2:0"
                  },
                  "returnParameters": {
                    "id": 429,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12561:0:0"
                  },
                  "scope": 456,
                  "src": "12547:53:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 454,
                    "nodeType": "Block",
                    "src": "12999:421:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 441,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 439,
                                "name": "_status",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 427,
                                "src": "13088:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 440,
                                "name": "_ENTERED",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 425,
                                "src": "13099:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "13088:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                              "id": 442,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "13109:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              },
                              "value": "ReentrancyGuard: reentrant call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                                "typeString": "literal_string \"ReentrancyGuard: reentrant call\""
                              }
                            ],
                            "id": 438,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "13080:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 443,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13080:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 444,
                        "nodeType": "ExpressionStatement",
                        "src": "13080:63:0"
                      },
                      {
                        "expression": {
                          "id": 447,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 445,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "13218:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 446,
                            "name": "_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 425,
                            "src": "13228:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13218:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 448,
                        "nodeType": "ExpressionStatement",
                        "src": "13218:18:0"
                      },
                      {
                        "id": 449,
                        "nodeType": "PlaceholderStatement",
                        "src": "13247:1:0"
                      },
                      {
                        "expression": {
                          "id": 452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 450,
                            "name": "_status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "13391:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 451,
                            "name": "_NOT_ENTERED",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 422,
                            "src": "13401:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "13391:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 453,
                        "nodeType": "ExpressionStatement",
                        "src": "13391:22:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 436,
                    "nodeType": "StructuredDocumentation",
                    "src": "12606:364:0",
                    "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
                  },
                  "id": 455,
                  "name": "nonReentrant",
                  "nameLocation": "12984:12:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 437,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "12996:2:0"
                  },
                  "src": "12975:445:0",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2158,
              "src": "11638:1784:0",
              "usedErrors": []
            },
            {
              "id": 457,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "13478:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 529,
              "linearizedBaseContracts": [
                529
              ],
              "name": "IBoringERC20",
              "nameLocation": "13513:12:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "40c10f19",
                  "id": 464,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "13541:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 462,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 459,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "13554:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 464,
                        "src": "13546:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13546:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 461,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "13566:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 464,
                        "src": "13558:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 460,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13558:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13545:28:0"
                  },
                  "returnParameters": {
                    "id": 463,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13582:0:0"
                  },
                  "scope": 529,
                  "src": "13532:51:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "18160ddd",
                  "id": 469,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "13598:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 465,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13609:2:0"
                  },
                  "returnParameters": {
                    "id": 468,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 467,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "13635:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 466,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13635:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13634:9:0"
                  },
                  "scope": 529,
                  "src": "13589:55:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 476,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "13659:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 472,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 471,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "13677:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "13669:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 470,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13669:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13668:17:0"
                  },
                  "returnParameters": {
                    "id": 475,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 474,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 476,
                        "src": "13709:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 473,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13709:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13708:9:0"
                  },
                  "scope": 529,
                  "src": "13650:68:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "dd62ed3e",
                  "id": 485,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "13733:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 481,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 478,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "13751:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13743:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 477,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13743:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 480,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "13766:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13758:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 479,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13758:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13742:32:0"
                  },
                  "returnParameters": {
                    "id": 484,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 483,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 485,
                        "src": "13822:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 482,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13822:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13821:9:0"
                  },
                  "scope": 529,
                  "src": "13724:107:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "095ea7b3",
                  "id": 494,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "13846:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 490,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 487,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "13862:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13854:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 486,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13854:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 489,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "13879:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13871:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 488,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13871:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13853:33:0"
                  },
                  "returnParameters": {
                    "id": 493,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 492,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 494,
                        "src": "13905:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 491,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "13905:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13904:6:0"
                  },
                  "scope": 529,
                  "src": "13837:74:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "anonymous": false,
                  "id": 502,
                  "name": "Transfer",
                  "nameLocation": "13923:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 501,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 496,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "13948:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13932:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13932:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 498,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "13970:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13954:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 497,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "13954:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 500,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "13982:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 502,
                        "src": "13974:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 499,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "13974:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "13931:57:0"
                  },
                  "src": "13917:72:0"
                },
                {
                  "anonymous": false,
                  "id": 510,
                  "name": "Approval",
                  "nameLocation": "14000:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 509,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 504,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "14034:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14018:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 503,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14018:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 506,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "14065:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14049:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 505,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14049:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 508,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "14090:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 510,
                        "src": "14082:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 507,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14082:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14008:93:0"
                  },
                  "src": "13994:108:0"
                },
                {
                  "documentation": {
                    "id": 511,
                    "nodeType": "StructuredDocumentation",
                    "src": "14108:20:0",
                    "text": "@notice EIP 2612"
                  },
                  "functionSelector": "d505accf",
                  "id": 528,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "permit",
                  "nameLocation": "14142:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 526,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 513,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "14166:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14158:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 512,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14158:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 515,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "14189:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14181:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 514,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14181:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 517,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "14214:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14206:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 516,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14206:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 519,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "14237:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14229:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 518,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14229:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 521,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "14261:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14255:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 520,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "14255:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 523,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "14280:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14272:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 522,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14272:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 525,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "14299:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 528,
                        "src": "14291:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 524,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14291:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14148:158:0"
                  },
                  "returnParameters": {
                    "id": 527,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14315:0:0"
                  },
                  "scope": 529,
                  "src": "14133:183:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2158,
              "src": "13503:815:0",
              "usedErrors": []
            },
            {
              "id": 530,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "14378:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 562,
              "linearizedBaseContracts": [
                562
              ],
              "name": "IComplexRewarder",
              "nameLocation": "14413:16:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "8ad14728",
                  "id": 539,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "onEmberReward",
                  "nameLocation": "14445:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 537,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 532,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14476:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14468:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 531,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14468:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 534,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "14497:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14489:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 533,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14489:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 536,
                        "mutability": "mutable",
                        "name": "newLpAmount",
                        "nameLocation": "14519:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 539,
                        "src": "14511:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 535,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14511:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14458:78:0"
                  },
                  "returnParameters": {
                    "id": 538,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14545:0:0"
                  },
                  "scope": 562,
                  "src": "14436:110:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "ffcd4263",
                  "id": 548,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pendingTokens",
                  "nameLocation": "14561:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 544,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 541,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14583:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14575:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 540,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14575:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 543,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "14596:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14588:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 542,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "14588:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14574:27:0"
                  },
                  "returnParameters": {
                    "id": 547,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 546,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "14657:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 548,
                        "src": "14649:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 545,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14649:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14648:17:0"
                  },
                  "scope": 562,
                  "src": "14552:114:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "f7c618c1",
                  "id": 554,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "rewardToken",
                  "nameLocation": "14681:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 549,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14692:2:0"
                  },
                  "returnParameters": {
                    "id": 553,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 552,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 554,
                        "src": "14718:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 551,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 550,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "14718:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "14718:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14717:14:0"
                  },
                  "scope": 562,
                  "src": "14672:60:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "465e81ec",
                  "id": 561,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolRewardsPerSec",
                  "nameLocation": "14747:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 557,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 556,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "14773:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "14765:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 555,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14765:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14764:13:0"
                  },
                  "returnParameters": {
                    "id": 560,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 559,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 561,
                        "src": "14801:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 558,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14801:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14800:9:0"
                  },
                  "scope": 562,
                  "src": "14738:72:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2158,
              "src": "14403:409:0",
              "usedErrors": []
            },
            {
              "id": 563,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".2"
              ],
              "nodeType": "PragmaDirective",
              "src": "14865:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 588,
              "linearizedBaseContracts": [
                588
              ],
              "name": "IEmberDistributorV2",
              "nameLocation": "14900:19:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "17caf6f1",
                  "id": 568,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalAllocPoint",
                  "nameLocation": "14935:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 564,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14950:2:0"
                  },
                  "returnParameters": {
                    "id": 567,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 566,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 568,
                        "src": "14976:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 565,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "14976:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "14975:9:0"
                  },
                  "scope": 588,
                  "src": "14926:59:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "e2bbb158",
                  "id": 575,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "deposit",
                  "nameLocation": "15000:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 573,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 570,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "15016:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 575,
                        "src": "15008:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 569,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15008:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 572,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "15030:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 575,
                        "src": "15022:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 571,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15022:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15007:31:0"
                  },
                  "returnParameters": {
                    "id": 574,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15047:0:0"
                  },
                  "scope": 588,
                  "src": "14991:57:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "081e3eda",
                  "id": 580,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolLength",
                  "nameLocation": "15063:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 576,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "15073:2:0"
                  },
                  "returnParameters": {
                    "id": 579,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 578,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 580,
                        "src": "15099:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 577,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15099:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15098:9:0"
                  },
                  "scope": 588,
                  "src": "15054:54:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "654c9ece",
                  "id": 587,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolTotalLp",
                  "nameLocation": "15123:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 583,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 582,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "15143:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 587,
                        "src": "15135:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 581,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15135:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15134:13:0"
                  },
                  "returnParameters": {
                    "id": 586,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 585,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 587,
                        "src": "15171:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 584,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "15171:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15170:9:0"
                  },
                  "scope": 588,
                  "src": "15114:66:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2158,
              "src": "14890:292:0",
              "usedErrors": []
            },
            {
              "id": 589,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".7"
              ],
              "nodeType": "PragmaDirective",
              "src": "15237:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 896,
              "linearizedBaseContracts": [
                896
              ],
              "name": "BoringERC20",
              "nameLocation": "15312:11:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "id": 592,
                  "mutability": "constant",
                  "name": "SIG_SYMBOL",
                  "nameLocation": "15354:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 896,
                  "src": "15330:47:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 590,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15330:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783935643839623431",
                    "id": 591,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15367:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2514000705_by_1",
                      "typeString": "int_const 2514000705"
                    },
                    "value": "0x95d89b41"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 595,
                  "mutability": "constant",
                  "name": "SIG_NAME",
                  "nameLocation": "15419:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 896,
                  "src": "15395:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 593,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15395:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783036666464653033",
                    "id": 594,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15430:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_117300739_by_1",
                      "typeString": "int_const 117300739"
                    },
                    "value": "0x06fdde03"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 598,
                  "mutability": "constant",
                  "name": "SIG_DECIMALS",
                  "nameLocation": "15480:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 896,
                  "src": "15456:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 596,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15456:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783331336365353637",
                    "id": 597,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15495:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_826074471_by_1",
                      "typeString": "int_const 826074471"
                    },
                    "value": "0x313ce567"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 601,
                  "mutability": "constant",
                  "name": "SIG_TRANSFER",
                  "nameLocation": "15549:12:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 896,
                  "src": "15525:49:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 599,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15525:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30786139303539636262",
                    "id": 600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15564:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2835717307_by_1",
                      "typeString": "int_const 2835717307"
                    },
                    "value": "0xa9059cbb"
                  },
                  "visibility": "private"
                },
                {
                  "constant": true,
                  "id": 604,
                  "mutability": "constant",
                  "name": "SIG_TRANSFER_FROM",
                  "nameLocation": "15633:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 896,
                  "src": "15609:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 602,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "15609:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": {
                    "hexValue": "30783233623837326464",
                    "id": 603,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "15653:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_599290589_by_1",
                      "typeString": "int_const 599290589"
                    },
                    "value": "0x23b872dd"
                  },
                  "visibility": "private"
                },
                {
                  "body": {
                    "id": 690,
                    "nodeType": "Block",
                    "src": "15824:486:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 611,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 606,
                              "src": "15838:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 612,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "15838:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "hexValue": "3634",
                            "id": 613,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15853:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_64_by_1",
                              "typeString": "int_const 64"
                            },
                            "value": "64"
                          },
                          "src": "15838:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 627,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 624,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 606,
                                "src": "15925:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 625,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "15925:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "3332",
                              "id": 626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15940:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "15925:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "id": 687,
                            "nodeType": "Block",
                            "src": "16267:37:0",
                            "statements": [
                              {
                                "expression": {
                                  "hexValue": "3f3f3f",
                                  "id": 685,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "16288:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                                    "typeString": "literal_string \"???\""
                                  },
                                  "value": "???"
                                },
                                "functionReturnParameters": 610,
                                "id": 686,
                                "nodeType": "Return",
                                "src": "16281:12:0"
                              }
                            ]
                          },
                          "id": 688,
                          "nodeType": "IfStatement",
                          "src": "15921:383:0",
                          "trueBody": {
                            "id": 684,
                            "nodeType": "Block",
                            "src": "15944:317:0",
                            "statements": [
                              {
                                "assignments": [
                                  629
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 629,
                                    "mutability": "mutable",
                                    "name": "i",
                                    "nameLocation": "15964:1:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 684,
                                    "src": "15958:7:0",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "typeName": {
                                      "id": 628,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "15958:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 631,
                                "initialValue": {
                                  "hexValue": "30",
                                  "id": 630,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15968:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "nodeType": "VariableDeclarationStatement",
                                "src": "15958:11:0"
                              },
                              {
                                "body": {
                                  "id": 644,
                                  "nodeType": "Block",
                                  "src": "16014:36:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 642,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "UnaryOperation",
                                        "operator": "++",
                                        "prefix": false,
                                        "src": "16032:3:0",
                                        "subExpression": {
                                          "id": 641,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 629,
                                          "src": "16032:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "id": 643,
                                      "nodeType": "ExpressionStatement",
                                      "src": "16032:3:0"
                                    }
                                  ]
                                },
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 640,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 634,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 632,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 629,
                                      "src": "15990:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "hexValue": "3332",
                                      "id": 633,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "15994:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "15990:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    },
                                    "id": 639,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 635,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 606,
                                        "src": "16000:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 637,
                                      "indexExpression": {
                                        "id": 636,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 629,
                                        "src": "16005:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "16000:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 638,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16011:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "16000:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "15990:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 645,
                                "nodeType": "WhileStatement",
                                "src": "15983:67:0"
                              },
                              {
                                "assignments": [
                                  647
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 647,
                                    "mutability": "mutable",
                                    "name": "bytesArray",
                                    "nameLocation": "16076:10:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 684,
                                    "src": "16063:23:0",
                                    "stateVariable": false,
                                    "storageLocation": "memory",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes"
                                    },
                                    "typeName": {
                                      "id": 646,
                                      "name": "bytes",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "16063:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage_ptr",
                                        "typeString": "bytes"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 652,
                                "initialValue": {
                                  "arguments": [
                                    {
                                      "id": 650,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 629,
                                      "src": "16099:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    ],
                                    "id": 649,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "NewExpression",
                                    "src": "16089:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (bytes memory)"
                                    },
                                    "typeName": {
                                      "id": 648,
                                      "name": "bytes",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "16093:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_storage_ptr",
                                        "typeString": "bytes"
                                      }
                                    }
                                  },
                                  "id": 651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16089:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "nodeType": "VariableDeclarationStatement",
                                "src": "16063:38:0"
                              },
                              {
                                "body": {
                                  "id": 677,
                                  "nodeType": "Block",
                                  "src": "16156:56:0",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 675,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "baseExpression": {
                                            "id": 669,
                                            "name": "bytesArray",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 647,
                                            "src": "16174:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 671,
                                          "indexExpression": {
                                            "id": 670,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 629,
                                            "src": "16185:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": true,
                                          "nodeType": "IndexAccess",
                                          "src": "16174:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "baseExpression": {
                                            "id": 672,
                                            "name": "data",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 606,
                                            "src": "16190:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes_memory_ptr",
                                              "typeString": "bytes memory"
                                            }
                                          },
                                          "id": 674,
                                          "indexExpression": {
                                            "id": 673,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 629,
                                            "src": "16195:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint8",
                                              "typeString": "uint8"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "16190:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes1",
                                            "typeString": "bytes1"
                                          }
                                        },
                                        "src": "16174:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes1",
                                          "typeString": "bytes1"
                                        }
                                      },
                                      "id": 676,
                                      "nodeType": "ExpressionStatement",
                                      "src": "16174:23:0"
                                    }
                                  ]
                                },
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    "id": 659,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 657,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 629,
                                      "src": "16127:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "hexValue": "3332",
                                      "id": 658,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16131:2:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_32_by_1",
                                        "typeString": "int_const 32"
                                      },
                                      "value": "32"
                                    },
                                    "src": "16127:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_bytes1",
                                      "typeString": "bytes1"
                                    },
                                    "id": 664,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 660,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 606,
                                        "src": "16137:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 662,
                                      "indexExpression": {
                                        "id": 661,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 629,
                                        "src": "16142:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "16137:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes1",
                                        "typeString": "bytes1"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 663,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16148:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "16137:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "16127:22:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 678,
                                "initializationExpression": {
                                  "expression": {
                                    "id": 655,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "id": 653,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 629,
                                      "src": "16120:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "hexValue": "30",
                                      "id": 654,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16124:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "16120:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "id": 656,
                                  "nodeType": "ExpressionStatement",
                                  "src": "16120:5:0"
                                },
                                "loopExpression": {
                                  "expression": {
                                    "id": 667,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "++",
                                    "prefix": false,
                                    "src": "16151:3:0",
                                    "subExpression": {
                                      "id": 666,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 629,
                                      "src": "16151:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "id": 668,
                                  "nodeType": "ExpressionStatement",
                                  "src": "16151:3:0"
                                },
                                "nodeType": "ForStatement",
                                "src": "16115:97:0"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 681,
                                      "name": "bytesArray",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 647,
                                      "src": "16239:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory_ptr",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 680,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "16232:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    },
                                    "typeName": {
                                      "id": 679,
                                      "name": "string",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "16232:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 682,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "16232:18:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "functionReturnParameters": 610,
                                "id": 683,
                                "nodeType": "Return",
                                "src": "16225:25:0"
                              }
                            ]
                          }
                        },
                        "id": 689,
                        "nodeType": "IfStatement",
                        "src": "15834:470:0",
                        "trueBody": {
                          "id": 623,
                          "nodeType": "Block",
                          "src": "15857:58:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 617,
                                    "name": "data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 606,
                                    "src": "15889:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "components": [
                                      {
                                        "id": 619,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "15896:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                          "typeString": "type(string storage pointer)"
                                        },
                                        "typeName": {
                                          "id": 618,
                                          "name": "string",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "15896:6:0",
                                          "typeDescriptions": {}
                                        }
                                      }
                                    ],
                                    "id": 620,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "15895:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    },
                                    {
                                      "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                      "typeString": "type(string storage pointer)"
                                    }
                                  ],
                                  "expression": {
                                    "id": 615,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "15878:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 616,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "decode",
                                  "nodeType": "MemberAccess",
                                  "src": "15878:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 621,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15878:26:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "functionReturnParameters": 610,
                              "id": 622,
                              "nodeType": "Return",
                              "src": "15871:33:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 691,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "returnDataToString",
                  "nameLocation": "15720:18:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 607,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 606,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "15752:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 691,
                        "src": "15739:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 605,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "15739:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15738:19:0"
                  },
                  "returnParameters": {
                    "id": 610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 609,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 691,
                        "src": "15805:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 608,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "15805:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "15804:15:0"
                  },
                  "scope": 896,
                  "src": "15711:599:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 722,
                    "nodeType": "Block",
                    "src": "16617:195:0",
                    "statements": [
                      {
                        "assignments": [
                          701,
                          703
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 701,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "16633:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 722,
                            "src": "16628:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 700,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "16628:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 703,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "16655:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 722,
                            "src": "16642:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 702,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "16642:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 714,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 711,
                                  "name": "SIG_SYMBOL",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 592,
                                  "src": "16725:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 709,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "16702:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 710,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "16702:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 712,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16702:34:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 706,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 695,
                                  "src": "16671:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 705,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "16663:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 704,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "16663:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 707,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16663:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 708,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "16663:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 713,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "16663:83:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16627:119:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "id": 715,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 701,
                            "src": "16763:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3f3f3f",
                            "id": 719,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16800:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                              "typeString": "literal_string \"???\""
                            },
                            "value": "???"
                          },
                          "id": 720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "16763:42:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 717,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 703,
                                "src": "16792:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 716,
                              "name": "returnDataToString",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "16773:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (string memory)"
                              }
                            },
                            "id": 718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16773:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 699,
                        "id": 721,
                        "nodeType": "Return",
                        "src": "16756:49:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 692,
                    "nodeType": "StructuredDocumentation",
                    "src": "16316:190:0",
                    "text": "@notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token symbol."
                  },
                  "id": 723,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeSymbol",
                  "nameLocation": "16520:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 696,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 695,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "16544:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 723,
                        "src": "16531:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 694,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 693,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "16531:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "16531:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16530:20:0"
                  },
                  "returnParameters": {
                    "id": 699,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 698,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 723,
                        "src": "16598:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 697,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "16598:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "16597:15:0"
                  },
                  "scope": 896,
                  "src": "16511:301:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 754,
                    "nodeType": "Block",
                    "src": "17113:193:0",
                    "statements": [
                      {
                        "assignments": [
                          733,
                          735
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 733,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "17129:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 754,
                            "src": "17124:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 732,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "17124:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 735,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "17151:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 754,
                            "src": "17138:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 734,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "17138:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 746,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 743,
                                  "name": "SIG_NAME",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 595,
                                  "src": "17221:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 741,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "17198:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 742,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "17198:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 744,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17198:32:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 738,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 727,
                                  "src": "17167:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 737,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "17159:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 736,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17159:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 739,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17159:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 740,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "17159:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17159:81:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17123:117:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "id": 747,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 733,
                            "src": "17257:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3f3f3f",
                            "id": 751,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17294:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187",
                              "typeString": "literal_string \"???\""
                            },
                            "value": "???"
                          },
                          "id": 752,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "17257:42:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 749,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 735,
                                "src": "17286:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 748,
                              "name": "returnDataToString",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "17267:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (string memory)"
                              }
                            },
                            "id": 750,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17267:24:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 731,
                        "id": 753,
                        "nodeType": "Return",
                        "src": "17250:49:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 724,
                    "nodeType": "StructuredDocumentation",
                    "src": "16818:186:0",
                    "text": "@notice Provides a safe ERC20.name version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token name."
                  },
                  "id": 755,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeName",
                  "nameLocation": "17018:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 728,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 727,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "17040:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "17027:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 726,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 725,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "17027:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "17027:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17026:20:0"
                  },
                  "returnParameters": {
                    "id": 731,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 730,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 755,
                        "src": "17094:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 729,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "17094:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17093:15:0"
                  },
                  "scope": 896,
                  "src": "17009:297:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 795,
                    "nodeType": "Block",
                    "src": "17580:216:0",
                    "statements": [
                      {
                        "assignments": [
                          765,
                          767
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 765,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "17596:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 795,
                            "src": "17591:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 764,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "17591:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 767,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "17618:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 795,
                            "src": "17605:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 766,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "17605:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 778,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 775,
                                  "name": "SIG_DECIMALS",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 598,
                                  "src": "17688:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                ],
                                "expression": {
                                  "id": 773,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "17665:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 774,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "17665:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17665:36:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 770,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 759,
                                  "src": "17634:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 769,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "17626:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 768,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17626:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 771,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17626:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "17626:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 777,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17626:85:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17590:121:0"
                      },
                      {
                        "expression": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 784,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 779,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "17728:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 783,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 780,
                                  "name": "data",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 767,
                                  "src": "17739:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 781,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "17739:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3332",
                                "id": 782,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17754:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "17739:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "17728:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "3138",
                            "id": 792,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17787:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "id": 793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "17728:61:0",
                          "trueExpression": {
                            "arguments": [
                              {
                                "id": 787,
                                "name": "data",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 767,
                                "src": "17770:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "components": [
                                  {
                                    "id": 789,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "17777:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint8_$",
                                      "typeString": "type(uint8)"
                                    },
                                    "typeName": {
                                      "id": 788,
                                      "name": "uint8",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "17777:5:0",
                                      "typeDescriptions": {}
                                    }
                                  }
                                ],
                                "id": 790,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "17776:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint8_$",
                                  "typeString": "type(uint8)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_type$_t_uint8_$",
                                  "typeString": "type(uint8)"
                                }
                              ],
                              "expression": {
                                "id": 785,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "17759:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 786,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "decode",
                              "nodeType": "MemberAccess",
                              "src": "17759:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 791,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17759:25:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "functionReturnParameters": 763,
                        "id": 794,
                        "nodeType": "Return",
                        "src": "17721:68:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 756,
                    "nodeType": "StructuredDocumentation",
                    "src": "17312:191:0",
                    "text": "@notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n @param token The address of the ERC-20 token contract.\n @return (uint8) Token decimals."
                  },
                  "id": 796,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeDecimals",
                  "nameLocation": "17517:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 760,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 759,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "17543:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 796,
                        "src": "17530:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 758,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 757,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "17530:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "17530:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17529:20:0"
                  },
                  "returnParameters": {
                    "id": 763,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 762,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 796,
                        "src": "17573:5:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 761,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "17573:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "17572:7:0"
                  },
                  "scope": 896,
                  "src": "17508:288:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 843,
                    "nodeType": "Block",
                    "src": "18174:286:0",
                    "statements": [
                      {
                        "assignments": [
                          808,
                          810
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 808,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "18190:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 843,
                            "src": "18185:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 807,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "18185:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 810,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "18212:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 843,
                            "src": "18199:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 809,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "18199:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 823,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 818,
                                  "name": "SIG_TRANSFER",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 601,
                                  "src": "18276:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 819,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 802,
                                  "src": "18290:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 820,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 804,
                                  "src": "18294:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 816,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "18253:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 817,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "18253:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 821,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18253:48:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 813,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 800,
                                  "src": "18228:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 812,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "18220:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 811,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "18220:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18220:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 815,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "18220:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18220:91:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "18184:127:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 839,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 825,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 808,
                                "src": "18342:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 837,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 829,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 826,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 810,
                                          "src": "18354:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 827,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "18354:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 828,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "18369:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "18354:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "||",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "id": 832,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 810,
                                          "src": "18385:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        {
                                          "components": [
                                            {
                                              "id": 834,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "18392:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_bool_$",
                                                "typeString": "type(bool)"
                                              },
                                              "typeName": {
                                                "id": 833,
                                                "name": "bool",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "18392:4:0",
                                                "typeDescriptions": {}
                                              }
                                            }
                                          ],
                                          "id": 835,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "18391:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          },
                                          {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        ],
                                        "expression": {
                                          "id": 830,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "18374:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 831,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "decode",
                                        "nodeType": "MemberAccess",
                                        "src": "18374:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 836,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18374:24:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "18354:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 838,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "18353:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "18342:57:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "426f72696e6745524332303a205472616e73666572206661696c6564",
                              "id": 840,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18413:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27",
                                "typeString": "literal_string \"BoringERC20: Transfer failed\""
                              },
                              "value": "BoringERC20: Transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27",
                                "typeString": "literal_string \"BoringERC20: Transfer failed\""
                              }
                            ],
                            "id": 824,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "18321:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 841,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18321:132:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 842,
                        "nodeType": "ExpressionStatement",
                        "src": "18321:132:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 797,
                    "nodeType": "StructuredDocumentation",
                    "src": "17802:258:0",
                    "text": "@notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param to Transfer tokens to.\n @param amount The token amount."
                  },
                  "id": 844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nameLocation": "18074:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 805,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 800,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "18109:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "18096:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 799,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 798,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "18096:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "18096:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 802,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "18132:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "18124:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 801,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18124:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 804,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "18152:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "18144:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 803,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "18144:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18086:78:0"
                  },
                  "returnParameters": {
                    "id": 806,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18174:0:0"
                  },
                  "scope": 896,
                  "src": "18065:395:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 894,
                    "nodeType": "Block",
                    "src": "18910:301:0",
                    "statements": [
                      {
                        "assignments": [
                          858,
                          860
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 858,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "18926:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 894,
                            "src": "18921:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 857,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "18921:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 860,
                            "mutability": "mutable",
                            "name": "data",
                            "nameLocation": "18948:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 894,
                            "src": "18935:17:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 859,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "18935:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 874,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 868,
                                  "name": "SIG_TRANSFER_FROM",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 604,
                                  "src": "19012:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  }
                                },
                                {
                                  "id": 869,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 850,
                                  "src": "19031:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 870,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 852,
                                  "src": "19037:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 871,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 854,
                                  "src": "19041:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes4",
                                    "typeString": "bytes4"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 866,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "18989:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 867,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "18989:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 872,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18989:59:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 863,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 848,
                                  "src": "18964:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                    "typeString": "contract IBoringERC20"
                                  }
                                ],
                                "id": 862,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "18956:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 861,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "18956:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 864,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18956:14:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 865,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "src": "18956:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 873,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18956:102:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "18920:138:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 890,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 876,
                                "name": "success",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 858,
                                "src": "19089:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 888,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 880,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 877,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 860,
                                          "src": "19101:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        "id": 878,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "19101:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 879,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "19116:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "19101:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "||",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "id": 883,
                                          "name": "data",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 860,
                                          "src": "19132:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          }
                                        },
                                        {
                                          "components": [
                                            {
                                              "id": 885,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "19139:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_bool_$",
                                                "typeString": "type(bool)"
                                              },
                                              "typeName": {
                                                "id": 884,
                                                "name": "bool",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "19139:4:0",
                                                "typeDescriptions": {}
                                              }
                                            }
                                          ],
                                          "id": 886,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "19138:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bytes_memory_ptr",
                                            "typeString": "bytes memory"
                                          },
                                          {
                                            "typeIdentifier": "t_type$_t_bool_$",
                                            "typeString": "type(bool)"
                                          }
                                        ],
                                        "expression": {
                                          "id": 881,
                                          "name": "abi",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -1,
                                          "src": "19121:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_abi",
                                            "typeString": "abi"
                                          }
                                        },
                                        "id": 882,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "decode",
                                        "nodeType": "MemberAccess",
                                        "src": "19121:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 887,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "19121:24:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "19101:44:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  }
                                ],
                                "id": 889,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "19100:46:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "19089:57:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "426f72696e6745524332303a205472616e7366657246726f6d206661696c6564",
                              "id": 891,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "19160:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26",
                                "typeString": "literal_string \"BoringERC20: TransferFrom failed\""
                              },
                              "value": "BoringERC20: TransferFrom failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26",
                                "typeString": "literal_string \"BoringERC20: TransferFrom failed\""
                              }
                            ],
                            "id": 875,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "19068:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 892,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "19068:136:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 893,
                        "nodeType": "ExpressionStatement",
                        "src": "19068:136:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 845,
                    "nodeType": "StructuredDocumentation",
                    "src": "18466:304:0",
                    "text": "@notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param from Transfer tokens from.\n @param to Transfer tokens to.\n @param amount The token amount."
                  },
                  "id": 895,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "18784:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 855,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 848,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "18823:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "18810:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 847,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 846,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "18810:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "18810:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 850,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "18846:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "18838:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 849,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18838:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 852,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "18868:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "18860:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 851,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "18860:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 854,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "18888:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "18880:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 853,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "18880:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "18800:100:0"
                  },
                  "returnParameters": {
                    "id": 856,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "18910:0:0"
                  },
                  "scope": 896,
                  "src": "18775:436:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 2158,
              "src": "15304:3909:0",
              "usedErrors": []
            },
            {
              "id": 897,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".2"
              ],
              "nodeType": "PragmaDirective",
              "src": "19280:23:0"
            },
            {
              "id": 898,
              "literals": [
                "experimental",
                "ABIEncoderV2"
              ],
              "nodeType": "PragmaDirective",
              "src": "19304:33:0"
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 900,
                    "name": "IComplexRewarder",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 562,
                    "src": "19857:16:0"
                  },
                  "id": 901,
                  "nodeType": "InheritanceSpecifier",
                  "src": "19857:16:0"
                },
                {
                  "baseName": {
                    "id": 902,
                    "name": "Ownable",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 417,
                    "src": "19875:7:0"
                  },
                  "id": 903,
                  "nodeType": "InheritanceSpecifier",
                  "src": "19875:7:0"
                },
                {
                  "baseName": {
                    "id": 904,
                    "name": "ReentrancyGuard",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 456,
                    "src": "19884:15:0"
                  },
                  "id": 905,
                  "nodeType": "InheritanceSpecifier",
                  "src": "19884:15:0"
                }
              ],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 899,
                "nodeType": "StructuredDocumentation",
                "src": "19344:476:0",
                "text": " This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\n stakers with their native token alongside EMBER.\n It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\n E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\n 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days."
              },
              "fullyImplemented": true,
              "id": 2157,
              "linearizedBaseContracts": [
                2157,
                456,
                417,
                315,
                562
              ],
              "name": "ComplexRewarderPerSecV2",
              "nameLocation": "19830:23:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 909,
                  "libraryName": {
                    "id": 906,
                    "name": "BoringERC20",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 896,
                    "src": "19912:11:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "19906:35:0",
                  "typeName": {
                    "id": 908,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 907,
                      "name": "IBoringERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 529,
                      "src": "19928:12:0"
                    },
                    "referencedDeclaration": 529,
                    "src": "19928:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                      "typeString": "contract IBoringERC20"
                    }
                  }
                },
                {
                  "baseFunctions": [
                    554
                  ],
                  "constant": false,
                  "functionSelector": "f7c618c1",
                  "id": 913,
                  "mutability": "immutable",
                  "name": "rewardToken",
                  "nameLocation": "19986:11:0",
                  "nodeType": "VariableDeclaration",
                  "overrides": {
                    "id": 912,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "19977:8:0"
                  },
                  "scope": 2157,
                  "src": "19947:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IBoringERC20_$529",
                    "typeString": "contract IBoringERC20"
                  },
                  "typeName": {
                    "id": 911,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 910,
                      "name": "IBoringERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 529,
                      "src": "19947:12:0"
                    },
                    "referencedDeclaration": 529,
                    "src": "19947:12:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                      "typeString": "contract IBoringERC20"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "7d0d9d5f",
                  "id": 916,
                  "mutability": "immutable",
                  "name": "distributorV2",
                  "nameLocation": "20040:13:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "20003:50:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                    "typeString": "contract IEmberDistributorV2"
                  },
                  "typeName": {
                    "id": 915,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 914,
                      "name": "IEmberDistributorV2",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 588,
                      "src": "20003:19:0"
                    },
                    "referencedDeclaration": 588,
                    "src": "20003:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                      "typeString": "contract IEmberDistributorV2"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "73cfc6b2",
                  "id": 918,
                  "mutability": "immutable",
                  "name": "isNative",
                  "nameLocation": "20081:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "20059:30:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 917,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "20059:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "canonicalName": "ComplexRewarderPerSecV2.UserInfo",
                  "id": 923,
                  "members": [
                    {
                      "constant": false,
                      "id": 920,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "20299:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 923,
                      "src": "20291:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 919,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20291:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 922,
                      "mutability": "mutable",
                      "name": "rewardDebt",
                      "nameLocation": "20323:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 923,
                      "src": "20315:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 921,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20315:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "UserInfo",
                  "nameLocation": "20272:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 2157,
                  "src": "20265:75:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ComplexRewarderPerSecV2.PoolInfo",
                  "id": 934,
                  "members": [
                    {
                      "constant": false,
                      "id": 925,
                      "mutability": "mutable",
                      "name": "accTokenPerShare",
                      "nameLocation": "20783:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20775:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 924,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20775:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 927,
                      "mutability": "mutable",
                      "name": "startTimestamp",
                      "nameLocation": "20817:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20809:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 926,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20809:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 929,
                      "mutability": "mutable",
                      "name": "lastRewardTimestamp",
                      "nameLocation": "20849:19:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20841:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 928,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20841:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 931,
                      "mutability": "mutable",
                      "name": "allocPoint",
                      "nameLocation": "20886:10:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20878:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 930,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20878:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 933,
                      "mutability": "mutable",
                      "name": "totalRewards",
                      "nameLocation": "20914:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 934,
                      "src": "20906:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 932,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20906:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "PoolInfo",
                  "nameLocation": "20756:8:0",
                  "nodeType": "StructDefinition",
                  "scope": 2157,
                  "src": "20749:184:0",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ComplexRewarderPerSecV2.RewardInfo",
                  "id": 941,
                  "members": [
                    {
                      "constant": false,
                      "id": 936,
                      "mutability": "mutable",
                      "name": "startTimestamp",
                      "nameLocation": "21167:14:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 941,
                      "src": "21159:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 935,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "21159:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 938,
                      "mutability": "mutable",
                      "name": "endTimestamp",
                      "nameLocation": "21199:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 941,
                      "src": "21191:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 937,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "21191:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 940,
                      "mutability": "mutable",
                      "name": "rewardPerSec",
                      "nameLocation": "21229:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 941,
                      "src": "21221:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 939,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "21221:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "RewardInfo",
                  "nameLocation": "21138:10:0",
                  "nodeType": "StructDefinition",
                  "scope": 2157,
                  "src": "21131:117:0",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 942,
                    "nodeType": "StructuredDocumentation",
                    "src": "21254:30:0",
                    "text": "@notice Info of each pool."
                  },
                  "functionSelector": "1526fe27",
                  "id": 947,
                  "mutability": "mutable",
                  "name": "poolInfo",
                  "nameLocation": "21325:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21289:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                    "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo)"
                  },
                  "typeName": {
                    "id": 946,
                    "keyType": {
                      "id": 943,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21297:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "21289:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                      "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo)"
                    },
                    "valueType": {
                      "id": 945,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 944,
                        "name": "PoolInfo",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 934,
                        "src": "21308:8:0"
                      },
                      "referencedDeclaration": 934,
                      "src": "21308:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                        "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 948,
                    "nodeType": "StructuredDocumentation",
                    "src": "21340:152:0",
                    "text": "@dev this is mostly used for extending reward period\n @notice Reward info is a set of {endTimestamp, rewardPerSec}\n indexed by pool id"
                  },
                  "functionSelector": "0832cfbf",
                  "id": 954,
                  "mutability": "mutable",
                  "name": "poolRewardInfo",
                  "nameLocation": "21537:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21497:54:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                    "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo[])"
                  },
                  "typeName": {
                    "id": 953,
                    "keyType": {
                      "id": 949,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21505:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "21497:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                      "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo[])"
                    },
                    "valueType": {
                      "baseType": {
                        "id": 951,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 950,
                          "name": "RewardInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 941,
                          "src": "21516:10:0"
                        },
                        "referencedDeclaration": 941,
                        "src": "21516:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                          "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                        }
                      },
                      "id": 952,
                      "nodeType": "ArrayTypeName",
                      "src": "21516:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "69883b4e",
                  "id": 957,
                  "mutability": "mutable",
                  "name": "poolIds",
                  "nameLocation": "21575:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21558:24:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 955,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21558:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 956,
                    "nodeType": "ArrayTypeName",
                    "src": "21558:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 958,
                    "nodeType": "StructuredDocumentation",
                    "src": "21589:52:0",
                    "text": "@notice Info of each user that stakes LP tokens."
                  },
                  "functionSelector": "93f1a40b",
                  "id": 965,
                  "mutability": "mutable",
                  "name": "userInfo",
                  "nameLocation": "21702:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21646:64:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$_$",
                    "typeString": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo))"
                  },
                  "typeName": {
                    "id": 964,
                    "keyType": {
                      "id": 959,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "21654:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "21646:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$_$",
                      "typeString": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo))"
                    },
                    "valueType": {
                      "id": 963,
                      "keyType": {
                        "id": 960,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21673:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "21665:28:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$",
                        "typeString": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo)"
                      },
                      "valueType": {
                        "id": 962,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 961,
                          "name": "UserInfo",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 923,
                          "src": "21684:8:0"
                        },
                        "referencedDeclaration": 923,
                        "src": "21684:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                          "typeString": "struct ComplexRewarderPerSecV2.UserInfo"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 966,
                    "nodeType": "StructuredDocumentation",
                    "src": "21717:88:0",
                    "text": "@dev Total allocation points. Must be the sum of all allocation points in all pools."
                  },
                  "functionSelector": "17caf6f1",
                  "id": 969,
                  "mutability": "mutable",
                  "name": "totalAllocPoint",
                  "nameLocation": "21825:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21810:34:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 967,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21810:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "30",
                    "id": 968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "21843:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "documentation": {
                    "id": 970,
                    "nodeType": "StructuredDocumentation",
                    "src": "21851:75:0",
                    "text": "@notice limit length of reward info\n how many phases are allowed"
                  },
                  "functionSelector": "00d74850",
                  "id": 973,
                  "mutability": "immutable",
                  "name": "rewardInfoLimit",
                  "nameLocation": "21956:15:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "21931:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 971,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "21931:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "hexValue": "3532",
                    "id": 972,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "21974:2:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_52_by_1",
                      "typeString": "int_const 52"
                    },
                    "value": "52"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 975,
                  "mutability": "immutable",
                  "name": "ACC_TOKEN_PRECISION",
                  "nameLocation": "22042:19:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 2157,
                  "src": "22016:45:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 974,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "22016:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 981,
                  "name": "OnReward",
                  "nameLocation": "22074:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 980,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 977,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "user",
                        "nameLocation": "22099:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 981,
                        "src": "22083:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 976,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "22083:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 979,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "22113:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 981,
                        "src": "22105:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 978,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22105:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22082:38:0"
                  },
                  "src": "22068:53:0"
                },
                {
                  "anonymous": false,
                  "id": 987,
                  "name": "RewardRateUpdated",
                  "nameLocation": "22132:17:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 986,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 983,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "oldRate",
                        "nameLocation": "22158:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 987,
                        "src": "22150:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 982,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22150:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 985,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newRate",
                        "nameLocation": "22175:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 987,
                        "src": "22167:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 984,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22167:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22149:34:0"
                  },
                  "src": "22126:58:0"
                },
                {
                  "anonymous": false,
                  "id": 993,
                  "name": "AddPool",
                  "nameLocation": "22195:7:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 992,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 989,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22219:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 993,
                        "src": "22203:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 988,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22203:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 991,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "allocPoint",
                        "nameLocation": "22232:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 993,
                        "src": "22224:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 990,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22224:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22202:41:0"
                  },
                  "src": "22189:55:0"
                },
                {
                  "anonymous": false,
                  "id": 999,
                  "name": "SetPool",
                  "nameLocation": "22255:7:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 998,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 995,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22279:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 999,
                        "src": "22263:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 994,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22263:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 997,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "allocPoint",
                        "nameLocation": "22292:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 999,
                        "src": "22284:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 996,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22284:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22262:41:0"
                  },
                  "src": "22249:55:0"
                },
                {
                  "anonymous": false,
                  "id": 1009,
                  "name": "UpdatePool",
                  "nameLocation": "22315:10:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1008,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1001,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22351:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1009,
                        "src": "22335:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1000,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22335:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1003,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "lastRewardTimestamp",
                        "nameLocation": "22372:19:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1009,
                        "src": "22364:27:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1002,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22364:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1005,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "lpSupply",
                        "nameLocation": "22409:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1009,
                        "src": "22401:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1004,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22401:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1007,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "accTokenPerShare",
                        "nameLocation": "22435:16:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1009,
                        "src": "22427:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1006,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22427:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22325:132:0"
                  },
                  "src": "22309:149:0"
                },
                {
                  "anonymous": false,
                  "id": 1019,
                  "name": "AddRewardInfo",
                  "nameLocation": "22470:13:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1018,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1011,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "22509:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1019,
                        "src": "22493:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1010,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22493:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1013,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "phase",
                        "nameLocation": "22538:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1019,
                        "src": "22522:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1012,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22522:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1015,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "endTimestamp",
                        "nameLocation": "22561:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1019,
                        "src": "22553:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1014,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22553:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1017,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "rewardPerSec",
                        "nameLocation": "22591:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1019,
                        "src": "22583:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1016,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "22583:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22483:126:0"
                  },
                  "src": "22464:146:0"
                },
                {
                  "body": {
                    "id": 1033,
                    "nodeType": "Block",
                    "src": "22645:176:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1028,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1022,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "22676:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1023,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "22676:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 1026,
                                    "name": "distributorV2",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 916,
                                    "src": "22698:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                      "typeString": "contract IEmberDistributorV2"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                      "typeString": "contract IEmberDistributorV2"
                                    }
                                  ],
                                  "id": 1025,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "22690:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1024,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "22690:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1027,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "22690:22:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "22676:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6f6e6c794469737472696275746f7256323a206f6e6c7920456d6265724469737472696275746f7256322063616e2063616c6c20746869732066756e6374696f6e",
                              "id": 1029,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "22726:67:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_d75f17b4163ae1b05d2ff893563740e6b7b098af831211de068f86d1016ae9c4",
                                "typeString": "literal_string \"onlyDistributorV2: only EmberDistributorV2 can call this function\""
                              },
                              "value": "onlyDistributorV2: only EmberDistributorV2 can call this function"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_d75f17b4163ae1b05d2ff893563740e6b7b098af831211de068f86d1016ae9c4",
                                "typeString": "literal_string \"onlyDistributorV2: only EmberDistributorV2 can call this function\""
                              }
                            ],
                            "id": 1021,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "22655:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1030,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22655:148:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1031,
                        "nodeType": "ExpressionStatement",
                        "src": "22655:148:0"
                      },
                      {
                        "id": 1032,
                        "nodeType": "PlaceholderStatement",
                        "src": "22813:1:0"
                      }
                    ]
                  },
                  "id": 1034,
                  "name": "onlyDistributorV2",
                  "nameLocation": "22625:17:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1020,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "22642:2:0"
                  },
                  "src": "22616:205:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1114,
                    "nodeType": "Block",
                    "src": "22948:776:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1050,
                                      "name": "_rewardToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1037,
                                      "src": "23006:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    ],
                                    "id": 1049,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "22998:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1048,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "22998:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1051,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "22998:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 1046,
                                  "name": "Address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 295,
                                  "src": "22979:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Address_$295_$",
                                    "typeString": "type(library Address)"
                                  }
                                },
                                "id": 1047,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "isContract",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 19,
                                "src": "22979:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1052,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "22979:41:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a2072657761726420746f6b656e206d75737420626520612076616c696420636f6e7472616374",
                              "id": 1053,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23034:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7cefffaecec955cbafd25e3be3ed8433e0be2da998ee050e5b5095ddefe11187",
                                "typeString": "literal_string \"constructor: reward token must be a valid contract\""
                              },
                              "value": "constructor: reward token must be a valid contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7cefffaecec955cbafd25e3be3ed8433e0be2da998ee050e5b5095ddefe11187",
                                "typeString": "literal_string \"constructor: reward token must be a valid contract\""
                              }
                            ],
                            "id": 1045,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "22958:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "22958:138:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1055,
                        "nodeType": "ExpressionStatement",
                        "src": "22958:138:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1061,
                                      "name": "_distributorV2",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1040,
                                      "src": "23154:14:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                        "typeString": "contract IEmberDistributorV2"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                        "typeString": "contract IEmberDistributorV2"
                                      }
                                    ],
                                    "id": 1060,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "23146:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1059,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "23146:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1062,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "23146:23:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "id": 1057,
                                  "name": "Address",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 295,
                                  "src": "23127:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_Address_$295_$",
                                    "typeString": "type(library Address)"
                                  }
                                },
                                "id": 1058,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "isContract",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 19,
                                "src": "23127:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address) view returns (bool)"
                                }
                              },
                              "id": 1063,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "23127:43:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a20456d6265724469737472696275746f725632206d75737420626520612076616c696420636f6e7472616374",
                              "id": 1064,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23184:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9da280b6492f03c5cbea7c2afc1cd8513ada27c153e07a50d3d70af3560c4b8e",
                                "typeString": "literal_string \"constructor: EmberDistributorV2 must be a valid contract\""
                              },
                              "value": "constructor: EmberDistributorV2 must be a valid contract"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9da280b6492f03c5cbea7c2afc1cd8513ada27c153e07a50d3d70af3560c4b8e",
                                "typeString": "literal_string \"constructor: EmberDistributorV2 must be a valid contract\""
                              }
                            ],
                            "id": 1056,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "23106:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23106:146:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1066,
                        "nodeType": "ExpressionStatement",
                        "src": "23106:146:0"
                      },
                      {
                        "expression": {
                          "id": 1069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1067,
                            "name": "rewardToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 913,
                            "src": "23262:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IBoringERC20_$529",
                              "typeString": "contract IBoringERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1068,
                            "name": "_rewardToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1037,
                            "src": "23276:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IBoringERC20_$529",
                              "typeString": "contract IBoringERC20"
                            }
                          },
                          "src": "23262:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "id": 1070,
                        "nodeType": "ExpressionStatement",
                        "src": "23262:26:0"
                      },
                      {
                        "expression": {
                          "id": 1073,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1071,
                            "name": "distributorV2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 916,
                            "src": "23298:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                              "typeString": "contract IEmberDistributorV2"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1072,
                            "name": "_distributorV2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1040,
                            "src": "23314:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                              "typeString": "contract IEmberDistributorV2"
                            }
                          },
                          "src": "23298:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                            "typeString": "contract IEmberDistributorV2"
                          }
                        },
                        "id": 1074,
                        "nodeType": "ExpressionStatement",
                        "src": "23298:30:0"
                      },
                      {
                        "expression": {
                          "id": 1077,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1075,
                            "name": "isNative",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 918,
                            "src": "23338:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1076,
                            "name": "_isNative",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1042,
                            "src": "23349:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "23338:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1078,
                        "nodeType": "ExpressionStatement",
                        "src": "23338:20:0"
                      },
                      {
                        "assignments": [
                          1080
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1080,
                            "mutability": "mutable",
                            "name": "decimalsRewardToken",
                            "nameLocation": "23377:19:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1114,
                            "src": "23369:27:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1079,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "23369:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1090,
                        "initialValue": {
                          "arguments": [
                            {
                              "condition": {
                                "id": 1083,
                                "name": "_isNative",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1042,
                                "src": "23420:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "id": 1085,
                                    "name": "_rewardToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1037,
                                    "src": "23437:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 1086,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeDecimals",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 796,
                                  "src": "23437:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_contract$_IBoringERC20_$529_$returns$_t_uint8_$bound_to$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "function (contract IBoringERC20) view returns (uint8)"
                                  }
                                },
                                "id": 1087,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "23437:27:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "id": 1088,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "Conditional",
                              "src": "23420:44:0",
                              "trueExpression": {
                                "hexValue": "3138",
                                "id": 1084,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "23432:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_18_by_1",
                                  "typeString": "int_const 18"
                                },
                                "value": "18"
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 1082,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "23399:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 1081,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "23399:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1089,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23399:75:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "23369:105:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1094,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1092,
                                "name": "decimalsRewardToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1080,
                                "src": "23505:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "hexValue": "3330",
                                "id": 1093,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "23527:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_30_by_1",
                                  "typeString": "int_const 30"
                                },
                                "value": "30"
                              },
                              "src": "23505:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "636f6e7374727563746f723a2072657761726420746f6b656e20646563696d616c73206d75737420626520696e666572696f7220746f203330",
                              "id": 1095,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23543:59:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_09999a83a6ca38b78ac937b0ef60ec67685008d1db29892188df71492abfce75",
                                "typeString": "literal_string \"constructor: reward token decimals must be inferior to 30\""
                              },
                              "value": "constructor: reward token decimals must be inferior to 30"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_09999a83a6ca38b78ac937b0ef60ec67685008d1db29892188df71492abfce75",
                                "typeString": "literal_string \"constructor: reward token decimals must be inferior to 30\""
                              }
                            ],
                            "id": 1091,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "23484:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1096,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "23484:128:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1097,
                        "nodeType": "ExpressionStatement",
                        "src": "23484:128:0"
                      },
                      {
                        "expression": {
                          "id": 1112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1098,
                            "name": "ACC_TOKEN_PRECISION",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 975,
                            "src": "23623:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1110,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "3130",
                                  "id": 1101,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "23666:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "**",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1108,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "arguments": [
                                          {
                                            "hexValue": "3330",
                                            "id": 1104,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "23679:2:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_30_by_1",
                                              "typeString": "int_const 30"
                                            },
                                            "value": "30"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_rational_30_by_1",
                                              "typeString": "int_const 30"
                                            }
                                          ],
                                          "id": 1103,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "23671:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_uint256_$",
                                            "typeString": "type(uint256)"
                                          },
                                          "typeName": {
                                            "id": 1102,
                                            "name": "uint256",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "23671:7:0",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 1105,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "23671:11:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "components": [
                                          {
                                            "id": 1106,
                                            "name": "decimalsRewardToken",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1080,
                                            "src": "23686:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1107,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "23685:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "23671:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1109,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "23670:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "23666:41:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "23645:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": {
                                "id": 1099,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "23645:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1111,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "23645:72:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "23623:94:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1113,
                        "nodeType": "ExpressionStatement",
                        "src": "23623:94:0"
                      }
                    ]
                  },
                  "id": 1115,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1043,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1037,
                        "mutability": "mutable",
                        "name": "_rewardToken",
                        "nameLocation": "22861:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1115,
                        "src": "22848:25:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IBoringERC20_$529",
                          "typeString": "contract IBoringERC20"
                        },
                        "typeName": {
                          "id": 1036,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1035,
                            "name": "IBoringERC20",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 529,
                            "src": "22848:12:0"
                          },
                          "referencedDeclaration": 529,
                          "src": "22848:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IBoringERC20_$529",
                            "typeString": "contract IBoringERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1040,
                        "mutability": "mutable",
                        "name": "_distributorV2",
                        "nameLocation": "22903:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1115,
                        "src": "22883:34:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                          "typeString": "contract IEmberDistributorV2"
                        },
                        "typeName": {
                          "id": 1039,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1038,
                            "name": "IEmberDistributorV2",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 588,
                            "src": "22883:19:0"
                          },
                          "referencedDeclaration": 588,
                          "src": "22883:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                            "typeString": "contract IEmberDistributorV2"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1042,
                        "mutability": "mutable",
                        "name": "_isNative",
                        "nameLocation": "22932:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1115,
                        "src": "22927:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1041,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "22927:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "22838:109:0"
                  },
                  "returnParameters": {
                    "id": 1044,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "22948:0:0"
                  },
                  "scope": 2157,
                  "src": "22827:897:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1164,
                    "nodeType": "Block",
                    "src": "24015:440:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 1128,
                                    "name": "poolInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 947,
                                    "src": "24033:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                                      "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                                    }
                                  },
                                  "id": 1130,
                                  "indexExpression": {
                                    "id": 1129,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1118,
                                    "src": "24042:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "24033:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                                    "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                                  }
                                },
                                "id": 1131,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "lastRewardTimestamp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 929,
                                "src": "24033:34:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1132,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24071:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "24033:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "706f6f6c20616c726561647920657869737473",
                              "id": 1134,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24074:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ac13a071df61f2fc80ad5528e9b13e8195d252563763706641304710d2282b22",
                                "typeString": "literal_string \"pool already exists\""
                              },
                              "value": "pool already exists"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_ac13a071df61f2fc80ad5528e9b13e8195d252563763706641304710d2282b22",
                                "typeString": "literal_string \"pool already exists\""
                              }
                            ],
                            "id": 1127,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24025:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24025:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1136,
                        "nodeType": "ExpressionStatement",
                        "src": "24025:71:0"
                      },
                      {
                        "expression": {
                          "id": 1139,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1137,
                            "name": "totalAllocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 969,
                            "src": "24106:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1138,
                            "name": "_allocPoint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "24125:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "24106:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1140,
                        "nodeType": "ExpressionStatement",
                        "src": "24106:30:0"
                      },
                      {
                        "expression": {
                          "id": 1151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1141,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 947,
                              "src": "24147:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                                "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                              }
                            },
                            "id": 1143,
                            "indexExpression": {
                              "id": 1142,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1118,
                              "src": "24156:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "24147:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1145,
                                "name": "_allocPoint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1120,
                                "src": "24199:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 1146,
                                "name": "_startTimestamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1122,
                                "src": "24240:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 1147,
                                "name": "_startTimestamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1122,
                                "src": "24290:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "hexValue": "30",
                                "id": 1148,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24337:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "hexValue": "30",
                                "id": 1149,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "24366:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1144,
                              "name": "PoolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 934,
                              "src": "24164:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_PoolInfo_$934_storage_ptr_$",
                                "typeString": "type(struct ComplexRewarderPerSecV2.PoolInfo storage pointer)"
                              }
                            },
                            "id": 1150,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "allocPoint",
                              "startTimestamp",
                              "lastRewardTimestamp",
                              "accTokenPerShare",
                              "totalRewards"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "24164:214:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                            }
                          },
                          "src": "24147:231:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "id": 1152,
                        "nodeType": "ExpressionStatement",
                        "src": "24147:231:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1156,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1118,
                              "src": "24402:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1153,
                              "name": "poolIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 957,
                              "src": "24389:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1155,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "24389:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                              "typeString": "function (uint256[] storage pointer,uint256)"
                            }
                          },
                          "id": 1157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24389:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1158,
                        "nodeType": "ExpressionStatement",
                        "src": "24389:18:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1160,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1118,
                              "src": "24430:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1161,
                              "name": "_allocPoint",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1120,
                              "src": "24436:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1159,
                            "name": "AddPool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 993,
                            "src": "24422:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 1162,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24422:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1163,
                        "nodeType": "EmitStatement",
                        "src": "24417:31:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1116,
                    "nodeType": "StructuredDocumentation",
                    "src": "23730:160:0",
                    "text": "@notice Add a new pool. Can only be called by the owner.\n @param _pid pool id on DistributorV2\n @param _allocPoint allocation of the new pool."
                  },
                  "functionSelector": "505fb46c",
                  "id": 1165,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1125,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1124,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 360,
                        "src": "24005:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "24005:9:0"
                    }
                  ],
                  "name": "add",
                  "nameLocation": "23904:3:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1123,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1118,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "23925:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1165,
                        "src": "23917:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1117,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23917:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1120,
                        "mutability": "mutable",
                        "name": "_allocPoint",
                        "nameLocation": "23947:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1165,
                        "src": "23939:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1119,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23939:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1122,
                        "mutability": "mutable",
                        "name": "_startTimestamp",
                        "nameLocation": "23976:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1165,
                        "src": "23968:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1121,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "23968:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "23907:90:0"
                  },
                  "returnParameters": {
                    "id": 1126,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "24015:0:0"
                  },
                  "scope": 2157,
                  "src": "23895:560:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1318,
                    "nodeType": "Block",
                    "src": "24731:1695:0",
                    "statements": [
                      {
                        "assignments": [
                          1181
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1181,
                            "mutability": "mutable",
                            "name": "rewardInfo",
                            "nameLocation": "24762:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1318,
                            "src": "24741:31:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1179,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 1178,
                                  "name": "RewardInfo",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 941,
                                  "src": "24741:10:0"
                                },
                                "referencedDeclaration": 941,
                                "src": "24741:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                                }
                              },
                              "id": 1180,
                              "nodeType": "ArrayTypeName",
                              "src": "24741:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1185,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1182,
                            "name": "poolRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "24775:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref)"
                            }
                          },
                          "id": 1184,
                          "indexExpression": {
                            "id": 1183,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1168,
                            "src": "24790:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "24775:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "24741:54:0"
                      },
                      {
                        "assignments": [
                          1188
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1188,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "24822:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1318,
                            "src": "24805:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 1187,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1186,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "24805:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "24805:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1192,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1189,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 947,
                            "src": "24829:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                            }
                          },
                          "id": 1191,
                          "indexExpression": {
                            "id": 1190,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1168,
                            "src": "24838:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "24829:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "24805:38:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1197,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1194,
                                  "name": "rewardInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1181,
                                  "src": "24874:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                    "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                  }
                                },
                                "id": 1195,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "24874:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 1196,
                                "name": "rewardInfoLimit",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 973,
                                "src": "24894:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "24874:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164642072657761726420696e666f3a2072657761726420696e666f206c656e677468206578636565647320746865206c696d6974",
                              "id": 1198,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "24923:55:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c94bb6004ae7714c2e46ba0e99d2e2039d6332a5014b1763fdc98e09b30e484c",
                                "typeString": "literal_string \"add reward info: reward info length exceeds the limit\""
                              },
                              "value": "add reward info: reward info length exceeds the limit"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c94bb6004ae7714c2e46ba0e99d2e2039d6332a5014b1763fdc98e09b30e484c",
                                "typeString": "literal_string \"add reward info: reward info length exceeds the limit\""
                              }
                            ],
                            "id": 1193,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24853:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1199,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24853:135:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1200,
                        "nodeType": "ExpressionStatement",
                        "src": "24853:135:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1205,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1202,
                                    "name": "rewardInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1181,
                                    "src": "25019:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 1203,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "25019:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1204,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "25040:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "25019:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1215,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1206,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1181,
                                      "src": "25061:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 1211,
                                    "indexExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1210,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 1207,
                                          "name": "rewardInfo",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1181,
                                          "src": "25072:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                          }
                                        },
                                        "id": 1208,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "25072:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "hexValue": "31",
                                        "id": 1209,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "25092:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "25072:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "25061:33:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_storage",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref"
                                    }
                                  },
                                  "id": 1212,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "25061:46:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1213,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "25127:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1214,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "25127:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "25061:81:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "25019:123:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164642072657761726420696e666f3a2072657761726420706572696f6420656e646564",
                              "id": 1217,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25156:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a90825bf20c2eed9548e503d11bc32c9516b5d26f2f735aec43535214bfe1b69",
                                "typeString": "literal_string \"add reward info: reward period ended\""
                              },
                              "value": "add reward info: reward period ended"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a90825bf20c2eed9548e503d11bc32c9516b5d26f2f735aec43535214bfe1b69",
                                "typeString": "literal_string \"add reward info: reward period ended\""
                              }
                            ],
                            "id": 1201,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "24998:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1218,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24998:206:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1219,
                        "nodeType": "ExpressionStatement",
                        "src": "24998:206:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1234,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1221,
                                    "name": "rewardInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1181,
                                    "src": "25235:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 1222,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "25235:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1223,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "25256:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "25235:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1233,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1225,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1181,
                                      "src": "25277:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 1230,
                                    "indexExpression": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1229,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "id": 1226,
                                          "name": "rewardInfo",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1181,
                                          "src": "25288:10:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                          }
                                        },
                                        "id": 1227,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "src": "25288:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "hexValue": "31",
                                        "id": 1228,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "25308:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "25288:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "25277:33:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_storage",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref"
                                    }
                                  },
                                  "id": 1231,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "25277:46:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 1232,
                                  "name": "_endTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1170,
                                  "src": "25326:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "25277:62:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "25235:104:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "6164642072657761726420696e666f3a20626164206e657720656e6454696d657374616d70",
                              "id": 1235,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25353:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_aca57c24ee22163b991c205f3bfb6a98f8604da9c2c157764ad36b63e3f75e7c",
                                "typeString": "literal_string \"add reward info: bad new endTimestamp\""
                              },
                              "value": "add reward info: bad new endTimestamp"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_aca57c24ee22163b991c205f3bfb6a98f8604da9c2c157764ad36b63e3f75e7c",
                                "typeString": "literal_string \"add reward info: bad new endTimestamp\""
                              }
                            ],
                            "id": 1220,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "25214:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "25214:188:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1237,
                        "nodeType": "ExpressionStatement",
                        "src": "25214:188:0"
                      },
                      {
                        "assignments": [
                          1239
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1239,
                            "mutability": "mutable",
                            "name": "startTimestamp",
                            "nameLocation": "25421:14:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1318,
                            "src": "25413:22:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1238,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "25413:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1254,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1243,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1240,
                                "name": "rewardInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1181,
                                "src": "25438:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                }
                              },
                              "id": 1241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "25438:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "25459:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "25438:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 1246,
                                "name": "rewardInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1181,
                                "src": "25509:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                }
                              },
                              "id": 1251,
                              "indexExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1250,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1247,
                                    "name": "rewardInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1181,
                                    "src": "25520:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 1248,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "25520:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1249,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "25540:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "25520:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "25509:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RewardInfo_$941_storage",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref"
                              }
                            },
                            "id": 1252,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "endTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 938,
                            "src": "25509:46:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1253,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "25438:117:0",
                          "trueExpression": {
                            "expression": {
                              "id": 1244,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1188,
                              "src": "25475:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 1245,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "startTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 927,
                            "src": "25475:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "25413:142:0"
                      },
                      {
                        "assignments": [
                          1256
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1256,
                            "mutability": "mutable",
                            "name": "timeRange",
                            "nameLocation": "25574:9:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1318,
                            "src": "25566:17:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1255,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "25566:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1260,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1259,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1257,
                            "name": "_endTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1170,
                            "src": "25586:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 1258,
                            "name": "startTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1239,
                            "src": "25602:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "25586:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "25566:50:0"
                      },
                      {
                        "assignments": [
                          1262
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1262,
                            "mutability": "mutable",
                            "name": "totalRewards",
                            "nameLocation": "25634:12:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1318,
                            "src": "25626:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1261,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "25626:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1266,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1265,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1263,
                            "name": "timeRange",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1256,
                            "src": "25649:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 1264,
                            "name": "_rewardPerSec",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1172,
                            "src": "25661:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "25649:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "25626:48:0"
                      },
                      {
                        "condition": {
                          "id": 1268,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "25689:9:0",
                          "subExpression": {
                            "id": 1267,
                            "name": "isNative",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 918,
                            "src": "25690:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1290,
                          "nodeType": "Block",
                          "src": "25862:154:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1286,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 1283,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "25901:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1284,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "value",
                                      "nodeType": "MemberAccess",
                                      "src": "25901:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "id": 1285,
                                      "name": "totalRewards",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1262,
                                      "src": "25914:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "25901:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "6164642072657761726420696e666f3a206e6f7420656e6f7567682066756e647320746f207472616e73666572",
                                    "id": 1287,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "25944:47:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_f8e9e033a44ef9f98bb13fe2e7f494717dee7c5ad9dd57bc4bb8a0c982332902",
                                      "typeString": "literal_string \"add reward info: not enough funds to transfer\""
                                    },
                                    "value": "add reward info: not enough funds to transfer"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_f8e9e033a44ef9f98bb13fe2e7f494717dee7c5ad9dd57bc4bb8a0c982332902",
                                      "typeString": "literal_string \"add reward info: not enough funds to transfer\""
                                    }
                                  ],
                                  "id": 1282,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "25876:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1288,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "25876:129:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1289,
                              "nodeType": "ExpressionStatement",
                              "src": "25876:129:0"
                            }
                          ]
                        },
                        "id": 1291,
                        "nodeType": "IfStatement",
                        "src": "25685:331:0",
                        "trueBody": {
                          "id": 1281,
                          "nodeType": "Block",
                          "src": "25700:156:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1272,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -15,
                                      "src": "25760:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1273,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "25760:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1276,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "25796:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                          "typeString": "contract ComplexRewarderPerSecV2"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                          "typeString": "contract ComplexRewarderPerSecV2"
                                        }
                                      ],
                                      "id": 1275,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "25788:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1274,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "25788:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1277,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "25788:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1278,
                                    "name": "totalRewards",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1262,
                                    "src": "25819:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1269,
                                    "name": "rewardToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 913,
                                    "src": "25714:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 1271,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransferFrom",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 895,
                                  "src": "25714:28:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "function (contract IBoringERC20,address,address,uint256)"
                                  }
                                },
                                "id": 1279,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "25714:131:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1280,
                              "nodeType": "ExpressionStatement",
                              "src": "25714:131:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1296,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1292,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1188,
                              "src": "26026:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 1294,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "totalRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 933,
                            "src": "26026:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1295,
                            "name": "totalRewards",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1262,
                            "src": "26047:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "26026:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1297,
                        "nodeType": "ExpressionStatement",
                        "src": "26026:33:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1302,
                                  "name": "startTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1239,
                                  "src": "26144:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1303,
                                  "name": "_endTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1170,
                                  "src": "26190:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "id": 1304,
                                  "name": "_rewardPerSec",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1172,
                                  "src": "26235:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1301,
                                "name": "RewardInfo",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 941,
                                "src": "26099:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_RewardInfo_$941_storage_ptr_$",
                                  "typeString": "type(struct ComplexRewarderPerSecV2.RewardInfo storage pointer)"
                                }
                              },
                              "id": 1305,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "startTimestamp",
                                "endTimestamp",
                                "rewardPerSec"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "26099:164:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                              }
                            ],
                            "expression": {
                              "id": 1298,
                              "name": "rewardInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1181,
                              "src": "26070:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                              }
                            },
                            "id": 1300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "26070:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr_$_t_struct$_RewardInfo_$941_storage_$returns$__$bound_to$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer,struct ComplexRewarderPerSecV2.RewardInfo storage ref)"
                            }
                          },
                          "id": 1306,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26070:203:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1307,
                        "nodeType": "ExpressionStatement",
                        "src": "26070:203:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1309,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1168,
                              "src": "26316:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1313,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1310,
                                  "name": "rewardInfo",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1181,
                                  "src": "26334:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                    "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage pointer"
                                  }
                                },
                                "id": 1311,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "26334:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1312,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "26354:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "26334:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1314,
                              "name": "_endTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1170,
                              "src": "26369:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1315,
                              "name": "_rewardPerSec",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1172,
                              "src": "26396:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1308,
                            "name": "AddRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1019,
                            "src": "26289:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,uint256)"
                            }
                          },
                          "id": 1316,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26289:130:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1317,
                        "nodeType": "EmitStatement",
                        "src": "26284:135:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1166,
                    "nodeType": "StructuredDocumentation",
                    "src": "24461:125:0",
                    "text": "@notice if the new reward info is added, the reward & its end timestamp will be extended by the newly pushed reward info."
                  },
                  "functionSelector": "2ea807c5",
                  "id": 1319,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1175,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1174,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 360,
                        "src": "24721:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "24721:9:0"
                    }
                  ],
                  "name": "addRewardInfo",
                  "nameLocation": "24600:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1173,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1168,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "24631:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1319,
                        "src": "24623:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1167,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24623:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1170,
                        "mutability": "mutable",
                        "name": "_endTimestamp",
                        "nameLocation": "24653:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1319,
                        "src": "24645:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1169,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24645:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1172,
                        "mutability": "mutable",
                        "name": "_rewardPerSec",
                        "nameLocation": "24684:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1319,
                        "src": "24676:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1171,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "24676:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "24613:90:0"
                  },
                  "returnParameters": {
                    "id": 1176,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "24731:0:0"
                  },
                  "scope": 2157,
                  "src": "24591:1835:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1380,
                    "nodeType": "Block",
                    "src": "26551:524:0",
                    "statements": [
                      {
                        "assignments": [
                          1332
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1332,
                            "mutability": "mutable",
                            "name": "rewardInfo",
                            "nameLocation": "26581:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1380,
                            "src": "26561:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1330,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 1329,
                                  "name": "RewardInfo",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 941,
                                  "src": "26561:10:0"
                                },
                                "referencedDeclaration": 941,
                                "src": "26561:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                                }
                              },
                              "id": 1331,
                              "nodeType": "ArrayTypeName",
                              "src": "26561:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1336,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1333,
                            "name": "poolRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "26594:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref)"
                            }
                          },
                          "id": 1335,
                          "indexExpression": {
                            "id": 1334,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1321,
                            "src": "26609:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "26594:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "26561:53:0"
                      },
                      {
                        "assignments": [
                          1338
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1338,
                            "mutability": "mutable",
                            "name": "len",
                            "nameLocation": "26632:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1380,
                            "src": "26624:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1337,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "26624:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1341,
                        "initialValue": {
                          "expression": {
                            "id": 1339,
                            "name": "rewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1332,
                            "src": "26638:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                            }
                          },
                          "id": 1340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "26638:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "26624:31:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1342,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1338,
                            "src": "26669:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1343,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26676:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "26669:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1348,
                        "nodeType": "IfStatement",
                        "src": "26665:47:0",
                        "trueBody": {
                          "id": 1347,
                          "nodeType": "Block",
                          "src": "26679:33:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 1345,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "26700:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 1327,
                              "id": 1346,
                              "nodeType": "Return",
                              "src": "26693:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "body": {
                          "id": 1371,
                          "nodeType": "Block",
                          "src": "26755:120:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1364,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1359,
                                  "name": "_timestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1323,
                                  "src": "26773:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1360,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1332,
                                      "src": "26787:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                      }
                                    },
                                    "id": 1362,
                                    "indexExpression": {
                                      "id": 1361,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1350,
                                      "src": "26798:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "26787:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                    }
                                  },
                                  "id": 1363,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "26787:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "26773:40:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1370,
                              "nodeType": "IfStatement",
                              "src": "26769:95:0",
                              "trueBody": {
                                "expression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1365,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1332,
                                      "src": "26838:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                      }
                                    },
                                    "id": 1367,
                                    "indexExpression": {
                                      "id": 1366,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1350,
                                      "src": "26849:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "26838:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                    }
                                  },
                                  "id": 1368,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "26838:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "functionReturnParameters": 1327,
                                "id": 1369,
                                "nodeType": "Return",
                                "src": "26831:33:0"
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1353,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1350,
                            "src": "26741:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1354,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1338,
                            "src": "26745:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "26741:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1372,
                        "initializationExpression": {
                          "assignments": [
                            1350
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1350,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "26734:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1372,
                              "src": "26726:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1349,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "26726:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1352,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1351,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26738:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "26726:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1357,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "26750:3:0",
                            "subExpression": {
                              "id": 1356,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1350,
                              "src": "26752:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1358,
                          "nodeType": "ExpressionStatement",
                          "src": "26750:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "26721:154:0"
                      },
                      {
                        "documentation": "@dev when couldn't find any reward info, it means that _timestamp exceed endTimestamp\n so return the latest reward info.",
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 1373,
                              "name": "rewardInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1332,
                              "src": "27036:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                              }
                            },
                            "id": 1377,
                            "indexExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1376,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1374,
                                "name": "len",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1338,
                                "src": "27047:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1375,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "27053:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "27047:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "27036:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                            }
                          },
                          "id": 1378,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "endTimestamp",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 938,
                          "src": "27036:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1327,
                        "id": 1379,
                        "nodeType": "Return",
                        "src": "27029:39:0"
                      }
                    ]
                  },
                  "id": 1381,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_endTimestampOf",
                  "nameLocation": "26441:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1324,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1321,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "26465:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1381,
                        "src": "26457:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1320,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26457:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1323,
                        "mutability": "mutable",
                        "name": "_timestamp",
                        "nameLocation": "26479:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1381,
                        "src": "26471:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1322,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26471:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26456:34:0"
                  },
                  "returnParameters": {
                    "id": 1327,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1326,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1381,
                        "src": "26538:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1325,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "26538:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "26537:9:0"
                  },
                  "scope": 2157,
                  "src": "26432:643:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1395,
                    "nodeType": "Block",
                    "src": "27241:62:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1390,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1384,
                              "src": "27274:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1391,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "27280:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1392,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "27280:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1389,
                            "name": "_endTimestampOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1381,
                            "src": "27258:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1393,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "27258:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1388,
                        "id": 1394,
                        "nodeType": "Return",
                        "src": "27251:45:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1382,
                    "nodeType": "StructuredDocumentation",
                    "src": "27081:80:0",
                    "text": "@notice this will return end timestamp based on the current block timestamp."
                  },
                  "functionSelector": "9e494bee",
                  "id": 1396,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "currentEndTimestamp",
                  "nameLocation": "27175:19:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1385,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1384,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "27203:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1396,
                        "src": "27195:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1383,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27195:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27194:14:0"
                  },
                  "returnParameters": {
                    "id": 1388,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1387,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1396,
                        "src": "27232:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1386,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27232:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27231:9:0"
                  },
                  "scope": 2157,
                  "src": "27166:137:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1434,
                    "nodeType": "Block",
                    "src": "27525:212:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1408,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1399,
                                  "src": "27540:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "id": 1409,
                                  "name": "_endTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1403,
                                  "src": "27549:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "27540:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 1411,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "27539:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1414,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1412,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1399,
                                  "src": "27568:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "id": 1413,
                                  "name": "_to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1401,
                                  "src": "27576:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "27568:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 1415,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "27567:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "27539:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1420,
                        "nodeType": "IfStatement",
                        "src": "27535:80:0",
                        "trueBody": {
                          "id": 1419,
                          "nodeType": "Block",
                          "src": "27582:33:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 1417,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "27603:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 1407,
                              "id": 1418,
                              "nodeType": "Return",
                              "src": "27596:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1421,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1401,
                            "src": "27628:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "id": 1422,
                            "name": "_endTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "27635:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "27628:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1429,
                        "nodeType": "IfStatement",
                        "src": "27624:69:0",
                        "trueBody": {
                          "id": 1428,
                          "nodeType": "Block",
                          "src": "27650:43:0",
                          "statements": [
                            {
                              "expression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1426,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1424,
                                  "name": "_to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1401,
                                  "src": "27671:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 1425,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1399,
                                  "src": "27677:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "27671:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 1407,
                              "id": 1427,
                              "nodeType": "Return",
                              "src": "27664:18:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1432,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1430,
                            "name": "_endTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "27709:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 1431,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1399,
                            "src": "27725:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "27709:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1407,
                        "id": 1433,
                        "nodeType": "Return",
                        "src": "27702:28:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1397,
                    "nodeType": "StructuredDocumentation",
                    "src": "27309:75:0",
                    "text": "@notice Return reward multiplier over the given _from to _to timestamp."
                  },
                  "functionSelector": "72333631",
                  "id": 1435,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_getTimeElapsed",
                  "nameLocation": "27398:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1404,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1399,
                        "mutability": "mutable",
                        "name": "_from",
                        "nameLocation": "27431:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1435,
                        "src": "27423:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1398,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27423:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1401,
                        "mutability": "mutable",
                        "name": "_to",
                        "nameLocation": "27454:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1435,
                        "src": "27446:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1400,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27446:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1403,
                        "mutability": "mutable",
                        "name": "_endTimestamp",
                        "nameLocation": "27475:13:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1435,
                        "src": "27467:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1402,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27467:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27413:81:0"
                  },
                  "returnParameters": {
                    "id": 1407,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1406,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1435,
                        "src": "27516:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1405,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27516:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27515:9:0"
                  },
                  "scope": 2157,
                  "src": "27389:348:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1450,
                    "nodeType": "Block",
                    "src": "28032:41:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1447,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1438,
                              "src": "28061:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1446,
                            "name": "_updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1626,
                            "src": "28049:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_PoolInfo_$934_memory_ptr_$",
                              "typeString": "function (uint256) returns (struct ComplexRewarderPerSecV2.PoolInfo memory)"
                            }
                          },
                          "id": 1448,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28049:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                          }
                        },
                        "functionReturnParameters": 1445,
                        "id": 1449,
                        "nodeType": "Return",
                        "src": "28042:24:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1436,
                    "nodeType": "StructuredDocumentation",
                    "src": "27743:169:0",
                    "text": "@notice Update reward variables of the given pool.\n @param _pid The index of the pool. See `poolInfo`.\n @return pool Returns the pool that was updated."
                  },
                  "functionSelector": "51eb05a6",
                  "id": 1451,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1441,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1440,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 455,
                        "src": "27976:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "27976:12:0"
                    }
                  ],
                  "name": "updatePool",
                  "nameLocation": "27926:10:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1439,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1438,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "27945:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1451,
                        "src": "27937:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1437,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "27937:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "27936:14:0"
                  },
                  "returnParameters": {
                    "id": 1445,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1444,
                        "mutability": "mutable",
                        "name": "pool",
                        "nameLocation": "28022:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1451,
                        "src": "28006:20:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                          "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                        },
                        "typeName": {
                          "id": 1443,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1442,
                            "name": "PoolInfo",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 934,
                            "src": "28006:8:0"
                          },
                          "referencedDeclaration": 934,
                          "src": "28006:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28005:22:0"
                  },
                  "scope": 2157,
                  "src": "27917:156:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1625,
                    "nodeType": "Block",
                    "src": "28324:2488:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 1464,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1460,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1458,
                            "src": "28334:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "baseExpression": {
                              "id": 1461,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 947,
                              "src": "28341:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                                "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                              }
                            },
                            "id": 1463,
                            "indexExpression": {
                              "id": 1462,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1454,
                              "src": "28350:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "28341:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                            }
                          },
                          "src": "28334:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                          }
                        },
                        "id": 1465,
                        "nodeType": "ExpressionStatement",
                        "src": "28334:20:0"
                      },
                      {
                        "assignments": [
                          1470
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1470,
                            "mutability": "mutable",
                            "name": "rewardInfo",
                            "nameLocation": "28384:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1625,
                            "src": "28364:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1468,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 1467,
                                  "name": "RewardInfo",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 941,
                                  "src": "28364:10:0"
                                },
                                "referencedDeclaration": 941,
                                "src": "28364:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                                }
                              },
                              "id": 1469,
                              "nodeType": "ArrayTypeName",
                              "src": "28364:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1474,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1471,
                            "name": "poolRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "28397:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref)"
                            }
                          },
                          "id": 1473,
                          "indexExpression": {
                            "id": 1472,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1454,
                            "src": "28412:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "28397:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "28364:52:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1475,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "28431:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1476,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "28431:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "expression": {
                              "id": 1477,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1458,
                              "src": "28450:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                              }
                            },
                            "id": 1478,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lastRewardTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 929,
                            "src": "28450:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "28431:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1483,
                        "nodeType": "IfStatement",
                        "src": "28427:85:0",
                        "trueBody": {
                          "id": 1482,
                          "nodeType": "Block",
                          "src": "28476:36:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1480,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "28497:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "functionReturnParameters": 1459,
                              "id": 1481,
                              "nodeType": "Return",
                              "src": "28490:11:0"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          1485
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1485,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "28530:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1625,
                            "src": "28522:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1484,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "28522:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1490,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1488,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1454,
                              "src": "28567:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1486,
                              "name": "distributorV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 916,
                              "src": "28541:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                "typeString": "contract IEmberDistributorV2"
                              }
                            },
                            "id": 1487,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "poolTotalLp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 587,
                            "src": "28541:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 1489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "28541:30:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "28522:49:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1491,
                            "name": "lpSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1485,
                            "src": "28586:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1492,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28598:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "28586:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1523,
                        "nodeType": "IfStatement",
                        "src": "28582:735:0",
                        "trueBody": {
                          "id": 1522,
                          "nodeType": "Block",
                          "src": "28601:716:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1501,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1494,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "28954:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1495,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "28954:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "arguments": [
                                    {
                                      "id": 1497,
                                      "name": "pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1454,
                                      "src": "28988:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "expression": {
                                        "id": 1498,
                                        "name": "block",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -4,
                                        "src": "28993:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_block",
                                          "typeString": "block"
                                        }
                                      },
                                      "id": 1499,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "timestamp",
                                      "nodeType": "MemberAccess",
                                      "src": "28993:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 1496,
                                    "name": "_endTimestampOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1381,
                                    "src": "28972:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) view returns (uint256)"
                                    }
                                  },
                                  "id": 1500,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "28972:37:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "28954:55:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1519,
                              "nodeType": "IfStatement",
                              "src": "28950:331:0",
                              "trueBody": {
                                "id": 1518,
                                "nodeType": "Block",
                                "src": "29011:270:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1507,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 1502,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1458,
                                          "src": "29029:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                          }
                                        },
                                        "id": 1504,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "lastRewardTimestamp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 929,
                                        "src": "29029:24:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "expression": {
                                          "id": 1505,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "29056:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 1506,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "timestamp",
                                        "nodeType": "MemberAccess",
                                        "src": "29056:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "29029:42:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1508,
                                    "nodeType": "ExpressionStatement",
                                    "src": "29029:42:0"
                                  },
                                  {
                                    "eventCall": {
                                      "arguments": [
                                        {
                                          "id": 1510,
                                          "name": "pid",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1454,
                                          "src": "29126:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "id": 1511,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1458,
                                            "src": "29151:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                            }
                                          },
                                          "id": 1512,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "lastRewardTimestamp",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 929,
                                          "src": "29151:24:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "id": 1513,
                                          "name": "lpSupply",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1485,
                                          "src": "29197:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "id": 1514,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1458,
                                            "src": "29227:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                            }
                                          },
                                          "id": 1515,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "accTokenPerShare",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 925,
                                          "src": "29227:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1509,
                                        "name": "UpdatePool",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1009,
                                        "src": "29094:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                                          "typeString": "function (uint256,uint256,uint256,uint256)"
                                        }
                                      },
                                      "id": 1516,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "29094:172:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1517,
                                    "nodeType": "EmitStatement",
                                    "src": "29089:177:0"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 1520,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "29302:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "functionReturnParameters": 1459,
                              "id": 1521,
                              "nodeType": "Return",
                              "src": "29295:11:0"
                            }
                          ]
                        }
                      },
                      {
                        "body": {
                          "id": 1606,
                          "nodeType": "Block",
                          "src": "29413:1192:0",
                          "statements": [
                            {
                              "assignments": [
                                1536
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1536,
                                  "mutability": "mutable",
                                  "name": "timeElapsed",
                                  "nameLocation": "29686:11:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1606,
                                  "src": "29678:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1535,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "29678:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1547,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1538,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1458,
                                      "src": "29733:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                      }
                                    },
                                    "id": 1539,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastRewardTimestamp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 929,
                                    "src": "29733:24:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 1540,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "29775:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 1541,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "29775:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 1542,
                                        "name": "rewardInfo",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1470,
                                        "src": "29808:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                          "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                        }
                                      },
                                      "id": 1544,
                                      "indexExpression": {
                                        "id": 1543,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1525,
                                        "src": "29819:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "29808:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                      }
                                    },
                                    "id": 1545,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "endTimestamp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 938,
                                    "src": "29808:26:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1537,
                                  "name": "_getTimeElapsed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1435,
                                  "src": "29700:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1546,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "29700:148:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "29678:170:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1550,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1548,
                                  "name": "timeElapsed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1536,
                                  "src": "29866:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1549,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "29881:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "29866:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1552,
                              "nodeType": "IfStatement",
                              "src": "29862:30:0",
                              "trueBody": {
                                "id": 1551,
                                "nodeType": "Continue",
                                "src": "29884:8:0"
                              }
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1559,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1553,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "30131:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1554,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "30131:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1555,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1470,
                                      "src": "30149:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                      }
                                    },
                                    "id": 1557,
                                    "indexExpression": {
                                      "id": 1556,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1525,
                                      "src": "30160:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "30149:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                    }
                                  },
                                  "id": 1558,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "30149:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "30131:44:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 1577,
                                "nodeType": "Block",
                                "src": "30269:75:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1575,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 1570,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1458,
                                          "src": "30287:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                          }
                                        },
                                        "id": 1572,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "lastRewardTimestamp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 929,
                                        "src": "30287:24:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "expression": {
                                          "id": 1573,
                                          "name": "block",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -4,
                                          "src": "30314:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_magic_block",
                                            "typeString": "block"
                                          }
                                        },
                                        "id": 1574,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "timestamp",
                                        "nodeType": "MemberAccess",
                                        "src": "30314:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "30287:42:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1576,
                                    "nodeType": "ExpressionStatement",
                                    "src": "30287:42:0"
                                  }
                                ]
                              },
                              "id": 1578,
                              "nodeType": "IfStatement",
                              "src": "30127:217:0",
                              "trueBody": {
                                "id": 1569,
                                "nodeType": "Block",
                                "src": "30177:86:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1567,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "expression": {
                                          "id": 1560,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1458,
                                          "src": "30195:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                          }
                                        },
                                        "id": 1562,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "lastRewardTimestamp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 929,
                                        "src": "30195:24:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 1563,
                                            "name": "rewardInfo",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1470,
                                            "src": "30222:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                            }
                                          },
                                          "id": 1565,
                                          "indexExpression": {
                                            "id": 1564,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1525,
                                            "src": "30233:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "30222:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                          }
                                        },
                                        "id": 1566,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "endTimestamp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 938,
                                        "src": "30222:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "30195:53:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1568,
                                    "nodeType": "ExpressionStatement",
                                    "src": "30195:53:0"
                                  }
                                ]
                              }
                            },
                            {
                              "assignments": [
                                1580
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1580,
                                  "mutability": "mutable",
                                  "name": "tokenReward",
                                  "nameLocation": "30366:11:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1606,
                                  "src": "30358:19:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1579,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "30358:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1593,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1592,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1589,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1586,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 1581,
                                          "name": "timeElapsed",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1536,
                                          "src": "30381:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 1582,
                                              "name": "rewardInfo",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1470,
                                              "src": "30411:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                              }
                                            },
                                            "id": 1584,
                                            "indexExpression": {
                                              "id": 1583,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1525,
                                              "src": "30422:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "30411:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                            }
                                          },
                                          "id": 1585,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "rewardPerSec",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 940,
                                          "src": "30411:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "30381:56:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 1587,
                                          "name": "pool",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1458,
                                          "src": "30456:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                          }
                                        },
                                        "id": 1588,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "allocPoint",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 931,
                                        "src": "30456:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "30381:90:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1590,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "30380:92:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 1591,
                                  "name": "totalAllocPoint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 969,
                                  "src": "30475:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "30380:110:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "30358:132:0"
                            },
                            {
                              "expression": {
                                "id": 1604,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 1594,
                                    "name": "pool",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1458,
                                    "src": "30505:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                    }
                                  },
                                  "id": 1596,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "accTokenPerShare",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 925,
                                  "src": "30505:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1602,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1599,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1597,
                                              "name": "tokenReward",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1580,
                                              "src": "30532:11:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 1598,
                                              "name": "ACC_TOKEN_PRECISION",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 975,
                                              "src": "30546:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "30532:33:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1600,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "30531:35:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "id": 1601,
                                        "name": "lpSupply",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1485,
                                        "src": "30585:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "30531:62:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1603,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "30530:64:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "30505:89:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1605,
                              "nodeType": "ExpressionStatement",
                              "src": "30505:89:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1528,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1525,
                            "src": "29385:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1529,
                              "name": "rewardInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1470,
                              "src": "29389:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                              }
                            },
                            "id": 1530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "29389:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "29385:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "documentation": "@dev for each reward info",
                        "id": 1607,
                        "initializationExpression": {
                          "assignments": [
                            1525
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1525,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "29378:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1607,
                              "src": "29370:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1524,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "29370:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1527,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1526,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "29382:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "29370:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1533,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "29408:3:0",
                            "subExpression": {
                              "id": 1532,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1525,
                              "src": "29410:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1534,
                          "nodeType": "ExpressionStatement",
                          "src": "29408:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "29365:1240:0"
                      },
                      {
                        "expression": {
                          "id": 1612,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1608,
                              "name": "poolInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 947,
                              "src": "30615:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                                "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                              }
                            },
                            "id": 1610,
                            "indexExpression": {
                              "id": 1609,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1454,
                              "src": "30624:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "30615:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1611,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1458,
                            "src": "30631:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                            }
                          },
                          "src": "30615:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "id": 1613,
                        "nodeType": "ExpressionStatement",
                        "src": "30615:20:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1615,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1454,
                              "src": "30675:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1616,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "30692:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "id": 1617,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardTimestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 929,
                              "src": "30692:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1618,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1485,
                              "src": "30730:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1619,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "30752:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "id": 1620,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "accTokenPerShare",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 925,
                              "src": "30752:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1614,
                            "name": "UpdatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1009,
                            "src": "30651:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,uint256)"
                            }
                          },
                          "id": 1621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "30651:132:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1622,
                        "nodeType": "EmitStatement",
                        "src": "30646:137:0"
                      },
                      {
                        "expression": {
                          "id": 1623,
                          "name": "pool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1458,
                          "src": "30801:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                          }
                        },
                        "functionReturnParameters": 1459,
                        "id": 1624,
                        "nodeType": "Return",
                        "src": "30794:11:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1452,
                    "nodeType": "StructuredDocumentation",
                    "src": "28079:168:0",
                    "text": "@notice Update reward variables of the given pool.\n @param pid The index of the pool. See `poolInfo`.\n @return pool Returns the pool that was updated."
                  },
                  "functionSelector": "d4aa89b5",
                  "id": 1626,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_updatePool",
                  "nameLocation": "28261:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1455,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1454,
                        "mutability": "mutable",
                        "name": "pid",
                        "nameLocation": "28281:3:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1626,
                        "src": "28273:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1453,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "28273:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28272:13:0"
                  },
                  "returnParameters": {
                    "id": 1459,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1458,
                        "mutability": "mutable",
                        "name": "pool",
                        "nameLocation": "28318:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1626,
                        "src": "28302:20:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                          "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                        },
                        "typeName": {
                          "id": 1457,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1456,
                            "name": "PoolInfo",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 934,
                            "src": "28302:8:0"
                          },
                          "referencedDeclaration": 934,
                          "src": "28302:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "28301:22:0"
                  },
                  "scope": 2157,
                  "src": "28252:2560:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1634,
                    "nodeType": "Block",
                    "src": "30939:35:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1631,
                            "name": "_massUpdatePools",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1662,
                            "src": "30949:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "30949:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1633,
                        "nodeType": "ExpressionStatement",
                        "src": "30949:18:0"
                      }
                    ]
                  },
                  "functionSelector": "630b5ba1",
                  "id": 1635,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1629,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1628,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 455,
                        "src": "30926:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "30926:12:0"
                    }
                  ],
                  "name": "massUpdatePools",
                  "nameLocation": "30901:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1627,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "30916:2:0"
                  },
                  "returnParameters": {
                    "id": 1630,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "30939:0:0"
                  },
                  "scope": 2157,
                  "src": "30892:82:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1661,
                    "nodeType": "Block",
                    "src": "31091:150:0",
                    "statements": [
                      {
                        "assignments": [
                          1639
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1639,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "31109:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1661,
                            "src": "31101:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1638,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "31101:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1642,
                        "initialValue": {
                          "expression": {
                            "id": 1640,
                            "name": "poolIds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 957,
                            "src": "31118:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 1641,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "31118:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31101:31:0"
                      },
                      {
                        "body": {
                          "id": 1659,
                          "nodeType": "Block",
                          "src": "31185:50:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1654,
                                      "name": "poolIds",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 957,
                                      "src": "31211:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                        "typeString": "uint256[] storage ref"
                                      }
                                    },
                                    "id": 1656,
                                    "indexExpression": {
                                      "id": 1655,
                                      "name": "pid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1644,
                                      "src": "31219:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "31211:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 1653,
                                  "name": "_updatePool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1626,
                                  "src": "31199:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_PoolInfo_$934_memory_ptr_$",
                                    "typeString": "function (uint256) returns (struct ComplexRewarderPerSecV2.PoolInfo memory)"
                                  }
                                },
                                "id": 1657,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "31199:25:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "id": 1658,
                              "nodeType": "ExpressionStatement",
                              "src": "31199:25:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1647,
                            "name": "pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1644,
                            "src": "31164:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1648,
                            "name": "length",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1639,
                            "src": "31170:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "31164:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1660,
                        "initializationExpression": {
                          "assignments": [
                            1644
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1644,
                              "mutability": "mutable",
                              "name": "pid",
                              "nameLocation": "31155:3:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 1660,
                              "src": "31147:11:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1643,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "31147:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1646,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1645,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31161:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "31147:15:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1651,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "31178:5:0",
                            "subExpression": {
                              "id": 1650,
                              "name": "pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1644,
                              "src": "31180:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1652,
                          "nodeType": "ExpressionStatement",
                          "src": "31178:5:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "31142:93:0"
                      }
                    ]
                  },
                  "id": 1662,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_massUpdatePools",
                  "nameLocation": "31063:16:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1636,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "31079:2:0"
                  },
                  "returnParameters": {
                    "id": 1637,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "31091:0:0"
                  },
                  "scope": 2157,
                  "src": "31054:187:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    539
                  ],
                  "body": {
                    "id": 1832,
                    "nodeType": "Block",
                    "src": "31630:1434:0",
                    "statements": [
                      {
                        "assignments": [
                          1679
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1679,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "31656:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1832,
                            "src": "31640:20:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 1678,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1677,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "31640:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "31640:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1683,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1681,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1665,
                              "src": "31675:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1680,
                            "name": "_updatePool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1626,
                            "src": "31663:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_PoolInfo_$934_memory_ptr_$",
                              "typeString": "function (uint256) returns (struct ComplexRewarderPerSecV2.PoolInfo memory)"
                            }
                          },
                          "id": 1682,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31663:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31640:40:0"
                      },
                      {
                        "assignments": [
                          1686
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1686,
                            "mutability": "mutable",
                            "name": "user",
                            "nameLocation": "31707:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1832,
                            "src": "31690:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.UserInfo"
                            },
                            "typeName": {
                              "id": 1685,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1684,
                                "name": "UserInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 923,
                                "src": "31690:8:0"
                              },
                              "referencedDeclaration": 923,
                              "src": "31690:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.UserInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1692,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1687,
                              "name": "userInfo",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 965,
                              "src": "31714:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$_$",
                                "typeString": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref))"
                              }
                            },
                            "id": 1689,
                            "indexExpression": {
                              "id": 1688,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1665,
                              "src": "31723:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "31714:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$",
                              "typeString": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref)"
                            }
                          },
                          "id": 1691,
                          "indexExpression": {
                            "id": 1690,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1667,
                            "src": "31729:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "31714:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserInfo_$923_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31690:45:0"
                      },
                      {
                        "assignments": [
                          1694
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1694,
                            "mutability": "mutable",
                            "name": "pending",
                            "nameLocation": "31754:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1832,
                            "src": "31746:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1693,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "31746:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1696,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1695,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "31764:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31746:19:0"
                      },
                      {
                        "assignments": [
                          1698
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1698,
                            "mutability": "mutable",
                            "name": "rewardBalance",
                            "nameLocation": "31783:13:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1832,
                            "src": "31775:21:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1697,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "31775:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1700,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "31799:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "31775:25:0"
                      },
                      {
                        "condition": {
                          "id": 1701,
                          "name": "isNative",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 918,
                          "src": "31815:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1721,
                          "nodeType": "Block",
                          "src": "31893:77:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1719,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1711,
                                  "name": "rewardBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1698,
                                  "src": "31907:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 1716,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "31953:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                            "typeString": "contract ComplexRewarderPerSecV2"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                            "typeString": "contract ComplexRewarderPerSecV2"
                                          }
                                        ],
                                        "id": 1715,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "31945:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 1714,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "31945:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 1717,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "31945:13:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 1712,
                                      "name": "rewardToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 913,
                                      "src": "31923:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                        "typeString": "contract IBoringERC20"
                                      }
                                    },
                                    "id": 1713,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 476,
                                    "src": "31923:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 1718,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "31923:36:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "31907:52:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1720,
                              "nodeType": "ExpressionStatement",
                              "src": "31907:52:0"
                            }
                          ]
                        },
                        "id": 1722,
                        "nodeType": "IfStatement",
                        "src": "31811:159:0",
                        "trueBody": {
                          "id": 1710,
                          "nodeType": "Block",
                          "src": "31825:62:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1708,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1702,
                                  "name": "rewardBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1698,
                                  "src": "31839:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 1705,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "31863:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                          "typeString": "contract ComplexRewarderPerSecV2"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_ComplexRewarderPerSecV2_$2157",
                                          "typeString": "contract ComplexRewarderPerSecV2"
                                        }
                                      ],
                                      "id": 1704,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "31855:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1703,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "31855:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1706,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "31855:13:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 1707,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balance",
                                  "nodeType": "MemberAccess",
                                  "src": "31855:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "31839:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1709,
                              "nodeType": "ExpressionStatement",
                              "src": "31839:37:0"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1723,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1686,
                              "src": "31984:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                              }
                            },
                            "id": 1724,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "amount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 920,
                            "src": "31984:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1725,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31998:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "31984:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1807,
                        "nodeType": "IfStatement",
                        "src": "31980:894:0",
                        "trueBody": {
                          "id": 1806,
                          "nodeType": "Block",
                          "src": "32001:873:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 1741,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1727,
                                  "name": "pending",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1694,
                                  "src": "32015:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1739,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1735,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "components": [
                                                {
                                                  "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  },
                                                  "id": 1732,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "expression": {
                                                      "id": 1728,
                                                      "name": "user",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1686,
                                                      "src": "32028:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                                        "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                                                      }
                                                    },
                                                    "id": 1729,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "amount",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 920,
                                                    "src": "32028:11:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "*",
                                                  "rightExpression": {
                                                    "expression": {
                                                      "id": 1730,
                                                      "name": "pool",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1679,
                                                      "src": "32042:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                                        "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                                      }
                                                    },
                                                    "id": 1731,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "accTokenPerShare",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 925,
                                                    "src": "32042:21:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "src": "32028:35:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                }
                                              ],
                                              "id": 1733,
                                              "isConstant": false,
                                              "isInlineArray": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "TupleExpression",
                                              "src": "32027:37:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "/",
                                            "rightExpression": {
                                              "id": 1734,
                                              "name": "ACC_TOKEN_PRECISION",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 975,
                                              "src": "32083:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "32027:75:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1736,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "32026:77:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 1737,
                                          "name": "user",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1686,
                                          "src": "32106:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                                          }
                                        },
                                        "id": 1738,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "rewardDebt",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 922,
                                        "src": "32106:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "32026:95:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1740,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "32025:97:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "32015:107:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1742,
                              "nodeType": "ExpressionStatement",
                              "src": "32015:107:0"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1745,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1743,
                                  "name": "pending",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1694,
                                  "src": "32141:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1744,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "32151:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "32141:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1805,
                              "nodeType": "IfStatement",
                              "src": "32137:727:0",
                              "trueBody": {
                                "id": 1804,
                                "nodeType": "Block",
                                "src": "32154:710:0",
                                "statements": [
                                  {
                                    "condition": {
                                      "id": 1746,
                                      "name": "isNative",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 918,
                                      "src": "32176:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": {
                                      "id": 1802,
                                      "nodeType": "Block",
                                      "src": "32591:259:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1784,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1782,
                                              "name": "pending",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1694,
                                              "src": "32617:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">",
                                            "rightExpression": {
                                              "id": 1783,
                                              "name": "rewardBalance",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1698,
                                              "src": "32627:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "32617:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 1800,
                                            "nodeType": "Block",
                                            "src": "32743:89:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1796,
                                                      "name": "_user",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1667,
                                                      "src": "32794:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    {
                                                      "id": 1797,
                                                      "name": "pending",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1694,
                                                      "src": "32801:7:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "id": 1793,
                                                      "name": "rewardToken",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 913,
                                                      "src": "32769:11:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                                        "typeString": "contract IBoringERC20"
                                                      }
                                                    },
                                                    "id": 1795,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "safeTransfer",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 844,
                                                    "src": "32769:24:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                                      "typeString": "function (contract IBoringERC20,address,uint256)"
                                                    }
                                                  },
                                                  "id": 1798,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32769:40:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1799,
                                                "nodeType": "ExpressionStatement",
                                                "src": "32769:40:0"
                                              }
                                            ]
                                          },
                                          "id": 1801,
                                          "nodeType": "IfStatement",
                                          "src": "32613:219:0",
                                          "trueBody": {
                                            "id": 1792,
                                            "nodeType": "Block",
                                            "src": "32642:95:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1788,
                                                      "name": "_user",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1667,
                                                      "src": "32693:5:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    {
                                                      "id": 1789,
                                                      "name": "rewardBalance",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1698,
                                                      "src": "32700:13:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "id": 1785,
                                                      "name": "rewardToken",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 913,
                                                      "src": "32668:11:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                                        "typeString": "contract IBoringERC20"
                                                      }
                                                    },
                                                    "id": 1787,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "safeTransfer",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 844,
                                                    "src": "32668:24:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                                      "typeString": "function (contract IBoringERC20,address,uint256)"
                                                    }
                                                  },
                                                  "id": 1790,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32668:46:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1791,
                                                "nodeType": "ExpressionStatement",
                                                "src": "32668:46:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "id": 1803,
                                    "nodeType": "IfStatement",
                                    "src": "32172:678:0",
                                    "trueBody": {
                                      "id": 1781,
                                      "nodeType": "Block",
                                      "src": "32186:399:0",
                                      "statements": [
                                        {
                                          "condition": {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1749,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1747,
                                              "name": "pending",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1694,
                                              "src": "32212:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">",
                                            "rightExpression": {
                                              "id": 1748,
                                              "name": "rewardBalance",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1698,
                                              "src": "32222:13:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "32212:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "falseBody": {
                                            "id": 1779,
                                            "nodeType": "Block",
                                            "src": "32408:159:0",
                                            "statements": [
                                              {
                                                "assignments": [
                                                  1766,
                                                  null
                                                ],
                                                "declarations": [
                                                  {
                                                    "constant": false,
                                                    "id": 1766,
                                                    "mutability": "mutable",
                                                    "name": "success",
                                                    "nameLocation": "32440:7:0",
                                                    "nodeType": "VariableDeclaration",
                                                    "scope": 1779,
                                                    "src": "32435:12:0",
                                                    "stateVariable": false,
                                                    "storageLocation": "default",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    },
                                                    "typeName": {
                                                      "id": 1765,
                                                      "name": "bool",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "32435:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    "visibility": "internal"
                                                  },
                                                  null
                                                ],
                                                "id": 1773,
                                                "initialValue": {
                                                  "arguments": [
                                                    {
                                                      "hexValue": "",
                                                      "id": 1771,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "32480:2:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                        "typeString": "literal_string \"\""
                                                      },
                                                      "value": ""
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                        "typeString": "literal_string \"\""
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                          "typeString": "literal_string \"\""
                                                        }
                                                      ],
                                                      "expression": {
                                                        "id": 1767,
                                                        "name": "_user",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1667,
                                                        "src": "32453:5:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      },
                                                      "id": 1768,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "call",
                                                      "nodeType": "MemberAccess",
                                                      "src": "32453:10:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                                      }
                                                    },
                                                    "id": 1770,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "names": [
                                                      "value"
                                                    ],
                                                    "nodeType": "FunctionCallOptions",
                                                    "options": [
                                                      {
                                                        "id": 1769,
                                                        "name": "pending",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1694,
                                                        "src": "32471:7:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      }
                                                    ],
                                                    "src": "32453:26:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                                    }
                                                  },
                                                  "id": 1772,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32453:30:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                                    "typeString": "tuple(bool,bytes memory)"
                                                  }
                                                },
                                                "nodeType": "VariableDeclarationStatement",
                                                "src": "32434:49:0"
                                              },
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1775,
                                                      "name": "success",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1766,
                                                      "src": "32517:7:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    {
                                                      "hexValue": "5472616e73666572206661696c6564",
                                                      "id": 1776,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "32526:17:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                                        "typeString": "literal_string \"Transfer failed\""
                                                      },
                                                      "value": "Transfer failed"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                                        "typeString": "literal_string \"Transfer failed\""
                                                      }
                                                    ],
                                                    "id": 1774,
                                                    "name": "require",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [
                                                      -18,
                                                      -18
                                                    ],
                                                    "referencedDeclaration": -18,
                                                    "src": "32509:7:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                                      "typeString": "function (bool,string memory) pure"
                                                    }
                                                  },
                                                  "id": 1777,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32509:35:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1778,
                                                "nodeType": "ExpressionStatement",
                                                "src": "32509:35:0"
                                              }
                                            ]
                                          },
                                          "id": 1780,
                                          "nodeType": "IfStatement",
                                          "src": "32208:359:0",
                                          "trueBody": {
                                            "id": 1764,
                                            "nodeType": "Block",
                                            "src": "32237:165:0",
                                            "statements": [
                                              {
                                                "assignments": [
                                                  1751,
                                                  null
                                                ],
                                                "declarations": [
                                                  {
                                                    "constant": false,
                                                    "id": 1751,
                                                    "mutability": "mutable",
                                                    "name": "success",
                                                    "nameLocation": "32269:7:0",
                                                    "nodeType": "VariableDeclaration",
                                                    "scope": 1764,
                                                    "src": "32264:12:0",
                                                    "stateVariable": false,
                                                    "storageLocation": "default",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bool",
                                                      "typeString": "bool"
                                                    },
                                                    "typeName": {
                                                      "id": 1750,
                                                      "name": "bool",
                                                      "nodeType": "ElementaryTypeName",
                                                      "src": "32264:4:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    "visibility": "internal"
                                                  },
                                                  null
                                                ],
                                                "id": 1758,
                                                "initialValue": {
                                                  "arguments": [
                                                    {
                                                      "hexValue": "",
                                                      "id": 1756,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "32315:2:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                        "typeString": "literal_string \"\""
                                                      },
                                                      "value": ""
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                        "typeString": "literal_string \"\""
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                          "typeString": "literal_string \"\""
                                                        }
                                                      ],
                                                      "expression": {
                                                        "id": 1752,
                                                        "name": "_user",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1667,
                                                        "src": "32282:5:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_address",
                                                          "typeString": "address"
                                                        }
                                                      },
                                                      "id": 1753,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "call",
                                                      "nodeType": "MemberAccess",
                                                      "src": "32282:10:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                                      }
                                                    },
                                                    "id": 1755,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "names": [
                                                      "value"
                                                    ],
                                                    "nodeType": "FunctionCallOptions",
                                                    "options": [
                                                      {
                                                        "id": 1754,
                                                        "name": "rewardBalance",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1698,
                                                        "src": "32300:13:0",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      }
                                                    ],
                                                    "src": "32282:32:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                                    }
                                                  },
                                                  "id": 1757,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32282:36:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                                    "typeString": "tuple(bool,bytes memory)"
                                                  }
                                                },
                                                "nodeType": "VariableDeclarationStatement",
                                                "src": "32263:55:0"
                                              },
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "id": 1760,
                                                      "name": "success",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 1751,
                                                      "src": "32352:7:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      }
                                                    },
                                                    {
                                                      "hexValue": "5472616e73666572206661696c6564",
                                                      "id": 1761,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "32361:17:0",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                                        "typeString": "literal_string \"Transfer failed\""
                                                      },
                                                      "value": "Transfer failed"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_bool",
                                                        "typeString": "bool"
                                                      },
                                                      {
                                                        "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                                        "typeString": "literal_string \"Transfer failed\""
                                                      }
                                                    ],
                                                    "id": 1759,
                                                    "name": "require",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [
                                                      -18,
                                                      -18
                                                    ],
                                                    "referencedDeclaration": -18,
                                                    "src": "32344:7:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                                      "typeString": "function (bool,string memory) pure"
                                                    }
                                                  },
                                                  "id": 1762,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "32344:35:0",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 1763,
                                                "nodeType": "ExpressionStatement",
                                                "src": "32344:35:0"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1812,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1808,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1686,
                              "src": "32884:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                              }
                            },
                            "id": 1810,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "amount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 920,
                            "src": "32884:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1811,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1669,
                            "src": "32898:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32884:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1813,
                        "nodeType": "ExpressionStatement",
                        "src": "32884:21:0"
                      },
                      {
                        "expression": {
                          "id": 1825,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1814,
                              "name": "user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1686,
                              "src": "32916:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                              }
                            },
                            "id": 1816,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "rewardDebt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 922,
                            "src": "32916:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1824,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1821,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1817,
                                      "name": "user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1686,
                                      "src": "32947:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_UserInfo_$923_storage_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage pointer"
                                      }
                                    },
                                    "id": 1818,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "amount",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 920,
                                    "src": "32947:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1819,
                                      "name": "pool",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1679,
                                      "src": "32961:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                      }
                                    },
                                    "id": 1820,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "accTokenPerShare",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 925,
                                    "src": "32961:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "32947:35:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1822,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "32946:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "id": 1823,
                              "name": "ACC_TOKEN_PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 975,
                              "src": "32998:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "32946:71:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "32916:101:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1826,
                        "nodeType": "ExpressionStatement",
                        "src": "32916:101:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1828,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1667,
                              "src": "33042:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1829,
                              "name": "pending",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1694,
                              "src": "33049:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1827,
                            "name": "OnReward",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 981,
                            "src": "33033:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1830,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33033:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1831,
                        "nodeType": "EmitStatement",
                        "src": "33028:29:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1663,
                    "nodeType": "StructuredDocumentation",
                    "src": "31247:230:0",
                    "text": "@notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\n @param _user Address of user\n @param _amount Number of LP tokens the user has"
                  },
                  "functionSelector": "8ad14728",
                  "id": 1833,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1673,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1672,
                        "name": "onlyDistributorV2",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1034,
                        "src": "31599:17:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "31599:17:0"
                    },
                    {
                      "id": 1675,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1674,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 455,
                        "src": "31617:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "31617:12:0"
                    }
                  ],
                  "name": "onEmberReward",
                  "nameLocation": "31491:13:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1671,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "31590:8:0"
                  },
                  "parameters": {
                    "id": 1670,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1665,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "31522:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1833,
                        "src": "31514:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1664,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31514:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1667,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "31544:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1833,
                        "src": "31536:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1666,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "31536:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1669,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "31567:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1833,
                        "src": "31559:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1668,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "31559:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "31504:76:0"
                  },
                  "returnParameters": {
                    "id": 1676,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "31630:0:0"
                  },
                  "scope": 2157,
                  "src": "31482:1582:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "baseFunctions": [
                    548
                  ],
                  "body": {
                    "id": 1860,
                    "nodeType": "Block",
                    "src": "33264:182:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1845,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1836,
                              "src": "33325:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1846,
                                    "name": "userInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 965,
                                    "src": "33347:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$_$",
                                      "typeString": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref))"
                                    }
                                  },
                                  "id": 1848,
                                  "indexExpression": {
                                    "id": 1847,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1836,
                                    "src": "33356:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "33347:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$",
                                    "typeString": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref)"
                                  }
                                },
                                "id": 1850,
                                "indexExpression": {
                                  "id": 1849,
                                  "name": "_user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1838,
                                  "src": "33362:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "33347:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$923_storage",
                                  "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage ref"
                                }
                              },
                              "id": 1851,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "amount",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 920,
                              "src": "33347:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 1852,
                                    "name": "userInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 965,
                                    "src": "33393:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$_$",
                                      "typeString": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref))"
                                    }
                                  },
                                  "id": 1854,
                                  "indexExpression": {
                                    "id": 1853,
                                    "name": "_pid",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1836,
                                    "src": "33402:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "33393:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_UserInfo_$923_storage_$",
                                    "typeString": "mapping(address => struct ComplexRewarderPerSecV2.UserInfo storage ref)"
                                  }
                                },
                                "id": 1856,
                                "indexExpression": {
                                  "id": 1855,
                                  "name": "_user",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1838,
                                  "src": "33408:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "33393:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_UserInfo_$923_storage",
                                  "typeString": "struct ComplexRewarderPerSecV2.UserInfo storage ref"
                                }
                              },
                              "id": 1857,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rewardDebt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 922,
                              "src": "33393:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1844,
                            "name": "_pendingTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1991,
                            "src": "33293:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33293:146:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1843,
                        "id": 1859,
                        "nodeType": "Return",
                        "src": "33274:165:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1834,
                    "nodeType": "StructuredDocumentation",
                    "src": "33070:60:0",
                    "text": "@notice View function to see pending Reward on frontend."
                  },
                  "functionSelector": "ffcd4263",
                  "id": 1861,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "pendingTokens",
                  "nameLocation": "33144:13:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 1840,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "33225:8:0"
                  },
                  "parameters": {
                    "id": 1839,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1836,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "33166:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "33158:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1835,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33158:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1838,
                        "mutability": "mutable",
                        "name": "_user",
                        "nameLocation": "33180:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "33172:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1837,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "33172:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33157:29:0"
                  },
                  "returnParameters": {
                    "id": 1843,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1842,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1861,
                        "src": "33251:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1841,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33251:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33250:9:0"
                  },
                  "scope": 2157,
                  "src": "33135:311:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1990,
                    "nodeType": "Block",
                    "src": "33598:1126:0",
                    "statements": [
                      {
                        "assignments": [
                          1874
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1874,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "33624:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1990,
                            "src": "33608:20:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 1873,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1872,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "33608:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "33608:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1878,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1875,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 947,
                            "src": "33631:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                            }
                          },
                          "id": 1877,
                          "indexExpression": {
                            "id": 1876,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1863,
                            "src": "33640:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "33631:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33608:37:0"
                      },
                      {
                        "assignments": [
                          1883
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1883,
                            "mutability": "mutable",
                            "name": "rewardInfo",
                            "nameLocation": "33675:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1990,
                            "src": "33655:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1881,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 1880,
                                  "name": "RewardInfo",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 941,
                                  "src": "33655:10:0"
                                },
                                "referencedDeclaration": 941,
                                "src": "33655:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                                }
                              },
                              "id": 1882,
                              "nodeType": "ArrayTypeName",
                              "src": "33655:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1887,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1884,
                            "name": "poolRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "33688:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref)"
                            }
                          },
                          "id": 1886,
                          "indexExpression": {
                            "id": 1885,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1863,
                            "src": "33703:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "33688:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33655:53:0"
                      },
                      {
                        "assignments": [
                          1889
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1889,
                            "mutability": "mutable",
                            "name": "accTokenPerShare",
                            "nameLocation": "33727:16:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1990,
                            "src": "33719:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1888,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33719:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1892,
                        "initialValue": {
                          "expression": {
                            "id": 1890,
                            "name": "pool",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1874,
                            "src": "33746:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                            }
                          },
                          "id": 1891,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "accTokenPerShare",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 925,
                          "src": "33746:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33719:48:0"
                      },
                      {
                        "assignments": [
                          1894
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1894,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "33785:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 1990,
                            "src": "33777:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1893,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33777:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1899,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1897,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1863,
                              "src": "33822:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1895,
                              "name": "distributorV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 916,
                              "src": "33796:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                "typeString": "contract IEmberDistributorV2"
                              }
                            },
                            "id": 1896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "poolTotalLp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 587,
                            "src": "33796:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 1898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33796:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33777:50:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1904,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 1900,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "33842:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1901,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "33842:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "expression": {
                                "id": 1902,
                                "name": "pool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1874,
                                "src": "33860:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                }
                              },
                              "id": 1903,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "lastRewardTimestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 929,
                              "src": "33860:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "33842:42:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1907,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1905,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1894,
                              "src": "33888:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 1906,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "33900:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "33888:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "33842:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1976,
                        "nodeType": "IfStatement",
                        "src": "33838:779:0",
                        "trueBody": {
                          "id": 1975,
                          "nodeType": "Block",
                          "src": "33903:714:0",
                          "statements": [
                            {
                              "assignments": [
                                1910
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1910,
                                  "mutability": "mutable",
                                  "name": "cursor",
                                  "nameLocation": "33925:6:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1975,
                                  "src": "33917:14:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1909,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "33917:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1913,
                              "initialValue": {
                                "expression": {
                                  "id": 1911,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1874,
                                  "src": "33934:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                    "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                  }
                                },
                                "id": 1912,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "lastRewardTimestamp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 929,
                                "src": "33934:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "33917:41:0"
                            },
                            {
                              "body": {
                                "id": 1973,
                                "nodeType": "Block",
                                "src": "34021:586:0",
                                "statements": [
                                  {
                                    "assignments": [
                                      1926
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1926,
                                        "mutability": "mutable",
                                        "name": "timeElapsed",
                                        "nameLocation": "34047:11:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1973,
                                        "src": "34039:19:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 1925,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "34039:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1936,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "id": 1928,
                                          "name": "cursor",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1910,
                                          "src": "34098:6:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "id": 1929,
                                            "name": "block",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -4,
                                            "src": "34126:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_magic_block",
                                              "typeString": "block"
                                            }
                                          },
                                          "id": 1930,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "timestamp",
                                          "nodeType": "MemberAccess",
                                          "src": "34126:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 1931,
                                              "name": "rewardInfo",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1883,
                                              "src": "34163:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                              }
                                            },
                                            "id": 1933,
                                            "indexExpression": {
                                              "id": 1932,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1915,
                                              "src": "34174:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "34163:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                            }
                                          },
                                          "id": 1934,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "endTimestamp",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 938,
                                          "src": "34163:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 1927,
                                        "name": "_getTimeElapsed",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1435,
                                        "src": "34061:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                          "typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1935,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "34061:146:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "34039:168:0"
                                  },
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1939,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 1937,
                                        "name": "timeElapsed",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1926,
                                        "src": "34229:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "hexValue": "30",
                                        "id": 1938,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "34244:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "34229:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1941,
                                    "nodeType": "IfStatement",
                                    "src": "34225:30:0",
                                    "trueBody": {
                                      "id": 1940,
                                      "nodeType": "Continue",
                                      "src": "34247:8:0"
                                    }
                                  },
                                  {
                                    "expression": {
                                      "id": 1947,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1942,
                                        "name": "cursor",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1910,
                                        "src": "34273:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 1943,
                                            "name": "rewardInfo",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1883,
                                            "src": "34282:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                            }
                                          },
                                          "id": 1945,
                                          "indexExpression": {
                                            "id": 1944,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1915,
                                            "src": "34293:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "34282:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                          }
                                        },
                                        "id": 1946,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "endTimestamp",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 938,
                                        "src": "34282:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "34273:35:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1948,
                                    "nodeType": "ExpressionStatement",
                                    "src": "34273:35:0"
                                  },
                                  {
                                    "assignments": [
                                      1950
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1950,
                                        "mutability": "mutable",
                                        "name": "tokenReward",
                                        "nameLocation": "34335:11:0",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1973,
                                        "src": "34327:19:0",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 1949,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "34327:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1963,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1962,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1959,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 1956,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 1951,
                                                "name": "timeElapsed",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1926,
                                                "src": "34350:11:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "*",
                                              "rightExpression": {
                                                "expression": {
                                                  "baseExpression": {
                                                    "id": 1952,
                                                    "name": "rewardInfo",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1883,
                                                    "src": "34384:10:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                                    }
                                                  },
                                                  "id": 1954,
                                                  "indexExpression": {
                                                    "id": 1953,
                                                    "name": "i",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1915,
                                                    "src": "34395:1:0",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "34384:13:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                                    "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                                  }
                                                },
                                                "id": 1955,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "rewardPerSec",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 940,
                                                "src": "34384:26:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "src": "34350:60:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "expression": {
                                                "id": 1957,
                                                "name": "pool",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1874,
                                                "src": "34433:4:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_PoolInfo_$934_memory_ptr",
                                                  "typeString": "struct ComplexRewarderPerSecV2.PoolInfo memory"
                                                }
                                              },
                                              "id": 1958,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "allocPoint",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 931,
                                              "src": "34433:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "34350:98:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1960,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "34349:100:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "id": 1961,
                                        "name": "totalAllocPoint",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 969,
                                        "src": "34452:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "34349:118:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "34327:140:0"
                                  },
                                  {
                                    "expression": {
                                      "id": 1971,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1964,
                                        "name": "accTokenPerShare",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1889,
                                        "src": "34486:16:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1970,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "components": [
                                            {
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 1967,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "id": 1965,
                                                "name": "tokenReward",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1950,
                                                "src": "34527:11:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "*",
                                              "rightExpression": {
                                                "id": 1966,
                                                "name": "ACC_TOKEN_PRECISION",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 975,
                                                "src": "34541:19:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "src": "34527:33:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            }
                                          ],
                                          "id": 1968,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "34526:35:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "id": 1969,
                                          "name": "lpSupply",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1894,
                                          "src": "34584:8:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "34526:66:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "34486:106:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1972,
                                    "nodeType": "ExpressionStatement",
                                    "src": "34486:106:0"
                                  }
                                ]
                              },
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1921,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1918,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1915,
                                  "src": "33993:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1919,
                                    "name": "rewardInfo",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1883,
                                    "src": "33997:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                    }
                                  },
                                  "id": 1920,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "33997:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "33993:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1974,
                              "initializationExpression": {
                                "assignments": [
                                  1915
                                ],
                                "declarations": [
                                  {
                                    "constant": false,
                                    "id": 1915,
                                    "mutability": "mutable",
                                    "name": "i",
                                    "nameLocation": "33986:1:0",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 1974,
                                    "src": "33978:9:0",
                                    "stateVariable": false,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "typeName": {
                                      "id": 1914,
                                      "name": "uint256",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "33978:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "visibility": "internal"
                                  }
                                ],
                                "id": 1917,
                                "initialValue": {
                                  "hexValue": "30",
                                  "id": 1916,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "33990:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "nodeType": "VariableDeclarationStatement",
                                "src": "33978:13:0"
                              },
                              "loopExpression": {
                                "expression": {
                                  "id": 1923,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "++",
                                  "prefix": true,
                                  "src": "34016:3:0",
                                  "subExpression": {
                                    "id": 1922,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1915,
                                    "src": "34018:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1924,
                                "nodeType": "ExpressionStatement",
                                "src": "34016:3:0"
                              },
                              "nodeType": "ForStatement",
                              "src": "33973:634:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "id": 1988,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1977,
                            "name": "pending",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1870,
                            "src": "34627:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1986,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 1983,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "components": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 1980,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "id": 1978,
                                              "name": "_amount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1865,
                                              "src": "34640:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "*",
                                            "rightExpression": {
                                              "id": 1979,
                                              "name": "accTokenPerShare",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1889,
                                              "src": "34650:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "34640:26:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "id": 1981,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "34639:28:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "id": 1982,
                                        "name": "ACC_TOKEN_PRECISION",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 975,
                                        "src": "34670:19:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "34639:50:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 1984,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "34638:52:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 1985,
                                  "name": "_rewardDebt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1867,
                                  "src": "34705:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "34638:78:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1987,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "34637:80:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "34627:90:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1989,
                        "nodeType": "ExpressionStatement",
                        "src": "34627:90:0"
                      }
                    ]
                  },
                  "id": 1991,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_pendingTokens",
                  "nameLocation": "33461:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1868,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1863,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "33493:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1991,
                        "src": "33485:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1862,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33485:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1865,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "33515:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1991,
                        "src": "33507:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1864,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33507:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1867,
                        "mutability": "mutable",
                        "name": "_rewardDebt",
                        "nameLocation": "33540:11:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1991,
                        "src": "33532:19:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1866,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33532:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33475:82:0"
                  },
                  "returnParameters": {
                    "id": 1871,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1870,
                        "mutability": "mutable",
                        "name": "pending",
                        "nameLocation": "33589:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 1991,
                        "src": "33581:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1869,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "33581:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "33580:17:0"
                  },
                  "scope": 2157,
                  "src": "33452:1272:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2060,
                    "nodeType": "Block",
                    "src": "34854:596:0",
                    "statements": [
                      {
                        "assignments": [
                          2004
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2004,
                            "mutability": "mutable",
                            "name": "rewardInfo",
                            "nameLocation": "34884:10:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2060,
                            "src": "34864:30:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 2002,
                                "nodeType": "UserDefinedTypeName",
                                "pathNode": {
                                  "id": 2001,
                                  "name": "RewardInfo",
                                  "nodeType": "IdentifierPath",
                                  "referencedDeclaration": 941,
                                  "src": "34864:10:0"
                                },
                                "referencedDeclaration": 941,
                                "src": "34864:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_RewardInfo_$941_storage_ptr",
                                  "typeString": "struct ComplexRewarderPerSecV2.RewardInfo"
                                }
                              },
                              "id": 2003,
                              "nodeType": "ArrayTypeName",
                              "src": "34864:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2008,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2005,
                            "name": "poolRewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 954,
                            "src": "34897:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref)"
                            }
                          },
                          "id": 2007,
                          "indexExpression": {
                            "id": 2006,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1993,
                            "src": "34912:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "34897:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_storage_$dyn_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.RewardInfo storage ref[] storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34864:53:0"
                      },
                      {
                        "assignments": [
                          2011
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2011,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "34944:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2060,
                            "src": "34927:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2010,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2009,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "34927:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "34927:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2015,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2012,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 947,
                            "src": "34951:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                            }
                          },
                          "id": 2014,
                          "indexExpression": {
                            "id": 2013,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1993,
                            "src": "34960:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "34951:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34927:38:0"
                      },
                      {
                        "assignments": [
                          2017
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2017,
                            "mutability": "mutable",
                            "name": "len",
                            "nameLocation": "34983:3:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2060,
                            "src": "34975:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2016,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "34975:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2020,
                        "initialValue": {
                          "expression": {
                            "id": 2018,
                            "name": "rewardInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2004,
                            "src": "34989:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                            }
                          },
                          "id": 2019,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "34989:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34975:31:0"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2023,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2021,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2017,
                            "src": "35020:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 2022,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "35027:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "35020:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2027,
                        "nodeType": "IfStatement",
                        "src": "35016:47:0",
                        "trueBody": {
                          "id": 2026,
                          "nodeType": "Block",
                          "src": "35030:33:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "30",
                                "id": 2024,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "35051:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 1999,
                              "id": 2025,
                              "nodeType": "Return",
                              "src": "35044:8:0"
                            }
                          ]
                        }
                      },
                      {
                        "body": {
                          "id": 2056,
                          "nodeType": "Block",
                          "src": "35106:203:0",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2043,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2038,
                                  "name": "_blockTimestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1995,
                                  "src": "35124:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 2039,
                                      "name": "rewardInfo",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2004,
                                      "src": "35143:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                        "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                      }
                                    },
                                    "id": 2041,
                                    "indexExpression": {
                                      "id": 2040,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2029,
                                      "src": "35154:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "35143:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                      "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                    }
                                  },
                                  "id": 2042,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "endTimestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 938,
                                  "src": "35143:26:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "35124:45:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 2055,
                              "nodeType": "IfStatement",
                              "src": "35120:178:0",
                              "trueBody": {
                                "expression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "components": [
                                      {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 2050,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 2044,
                                              "name": "rewardInfo",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2004,
                                              "src": "35215:10:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_RewardInfo_$941_memory_ptr_$dyn_memory_ptr",
                                                "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory[] memory"
                                              }
                                            },
                                            "id": 2046,
                                            "indexExpression": {
                                              "id": 2045,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2029,
                                              "src": "35226:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "35215:13:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_RewardInfo_$941_memory_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.RewardInfo memory"
                                            }
                                          },
                                          "id": 2047,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "rewardPerSec",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 940,
                                          "src": "35215:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "*",
                                        "rightExpression": {
                                          "expression": {
                                            "id": 2048,
                                            "name": "pool",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2011,
                                            "src": "35244:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage pointer"
                                            }
                                          },
                                          "id": 2049,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "allocPoint",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 931,
                                          "src": "35244:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "35215:44:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 2051,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "35214:46:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 2052,
                                    "name": "totalAllocPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 969,
                                    "src": "35283:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "35214:84:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "functionReturnParameters": 1999,
                                "id": 2054,
                                "nodeType": "Return",
                                "src": "35187:111:0"
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2034,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2032,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2029,
                            "src": "35092:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 2033,
                            "name": "len",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2017,
                            "src": "35096:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "35092:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2057,
                        "initializationExpression": {
                          "assignments": [
                            2029
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 2029,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "35085:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 2057,
                              "src": "35077:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 2028,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "35077:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 2031,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 2030,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "35089:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "35077:13:0"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 2036,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "35101:3:0",
                            "subExpression": {
                              "id": 2035,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2029,
                              "src": "35103:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2037,
                          "nodeType": "ExpressionStatement",
                          "src": "35101:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "35072:237:0"
                      },
                      {
                        "documentation": "@dev when couldn't find any reward info, it means that timestamp exceed endblock\n so return 0",
                        "expression": {
                          "hexValue": "30",
                          "id": 2058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "35442:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "functionReturnParameters": 1999,
                        "id": 2059,
                        "nodeType": "Return",
                        "src": "35435:8:0"
                      }
                    ]
                  },
                  "id": 2061,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_rewardPerSecOf",
                  "nameLocation": "34739:15:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1996,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1993,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "34763:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2061,
                        "src": "34755:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1992,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34755:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1995,
                        "mutability": "mutable",
                        "name": "_blockTimestamp",
                        "nameLocation": "34777:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2061,
                        "src": "34769:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1994,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34754:39:0"
                  },
                  "returnParameters": {
                    "id": 1999,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1998,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2061,
                        "src": "34841:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1997,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "34841:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "34840:9:0"
                  },
                  "scope": 2157,
                  "src": "34730:720:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "baseFunctions": [
                    561
                  ],
                  "body": {
                    "id": 2076,
                    "nodeType": "Block",
                    "src": "35632:62:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2071,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2064,
                              "src": "35665:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 2072,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "35671:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 2073,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "35671:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2070,
                            "name": "_rewardPerSecOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2061,
                            "src": "35649:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 2074,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35649:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2069,
                        "id": 2075,
                        "nodeType": "Return",
                        "src": "35642:45:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2062,
                    "nodeType": "StructuredDocumentation",
                    "src": "35456:53:0",
                    "text": "@notice View function to see pool rewards per sec"
                  },
                  "functionSelector": "465e81ec",
                  "id": 2077,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "poolRewardsPerSec",
                  "nameLocation": "35523:17:0",
                  "nodeType": "FunctionDefinition",
                  "overrides": {
                    "id": 2066,
                    "nodeType": "OverrideSpecifier",
                    "overrides": [],
                    "src": "35593:8:0"
                  },
                  "parameters": {
                    "id": 2065,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2064,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "35549:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2077,
                        "src": "35541:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2063,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35541:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35540:14:0"
                  },
                  "returnParameters": {
                    "id": 2069,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2068,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 2077,
                        "src": "35619:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2067,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35619:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35618:9:0"
                  },
                  "scope": 2157,
                  "src": "35514:180:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 2155,
                    "nodeType": "Block",
                    "src": "35897:654:0",
                    "statements": [
                      {
                        "assignments": [
                          2093
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2093,
                            "mutability": "mutable",
                            "name": "pool",
                            "nameLocation": "35924:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2155,
                            "src": "35907:21:0",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                              "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                            },
                            "typeName": {
                              "id": 2092,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 2091,
                                "name": "PoolInfo",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 934,
                                "src": "35907:8:0"
                              },
                              "referencedDeclaration": 934,
                              "src": "35907:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2097,
                        "initialValue": {
                          "baseExpression": {
                            "id": 2094,
                            "name": "poolInfo",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 947,
                            "src": "35931:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_PoolInfo_$934_storage_$",
                              "typeString": "mapping(uint256 => struct ComplexRewarderPerSecV2.PoolInfo storage ref)"
                            }
                          },
                          "id": 2096,
                          "indexExpression": {
                            "id": 2095,
                            "name": "_pid",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2080,
                            "src": "35940:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "35931:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_PoolInfo_$934_storage",
                            "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35907:38:0"
                      },
                      {
                        "assignments": [
                          2099
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2099,
                            "mutability": "mutable",
                            "name": "lpSupply",
                            "nameLocation": "35963:8:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2155,
                            "src": "35955:16:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2098,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "35955:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2104,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2102,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2080,
                              "src": "36000:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 2100,
                              "name": "distributorV2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 916,
                              "src": "35974:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IEmberDistributorV2_$588",
                                "typeString": "contract IEmberDistributorV2"
                              }
                            },
                            "id": 2101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "poolTotalLp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 587,
                            "src": "35974:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256) view external returns (uint256)"
                            }
                          },
                          "id": 2103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "35974:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "35955:50:0"
                      },
                      {
                        "assignments": [
                          2106
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2106,
                            "mutability": "mutable",
                            "name": "currentStakingPendingReward",
                            "nameLocation": "36024:27:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 2155,
                            "src": "36016:35:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2105,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "36016:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 2112,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 2108,
                              "name": "_pid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2080,
                              "src": "36069:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 2109,
                              "name": "lpSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2099,
                              "src": "36075:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 2110,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "36085:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2107,
                            "name": "_pendingTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1991,
                            "src": "36054:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 2111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36054:33:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "36016:71:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2119,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2116,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 2114,
                                  "name": "currentStakingPendingReward",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2106,
                                  "src": "36119:27:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "id": 2115,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2082,
                                  "src": "36149:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "36119:37:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "expression": {
                                  "id": 2117,
                                  "name": "pool",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2093,
                                  "src": "36160:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                    "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage pointer"
                                  }
                                },
                                "id": 2118,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "totalRewards",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 933,
                                "src": "36160:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "36119:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "656d657267656e6379207265776172642077697468647261773a206e6f7420656e6f7567682072657761726420746f6b656e",
                              "id": 2120,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "36191:52:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3f42c60c28536c00d87c6af21af098cc0ef08358c7f7abe65fa4566e69143db3",
                                "typeString": "literal_string \"emergency reward withdraw: not enough reward token\""
                              },
                              "value": "emergency reward withdraw: not enough reward token"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3f42c60c28536c00d87c6af21af098cc0ef08358c7f7abe65fa4566e69143db3",
                                "typeString": "literal_string \"emergency reward withdraw: not enough reward token\""
                              }
                            ],
                            "id": 2113,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "36098:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 2121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "36098:155:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2122,
                        "nodeType": "ExpressionStatement",
                        "src": "36098:155:0"
                      },
                      {
                        "expression": {
                          "id": 2127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 2123,
                              "name": "pool",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2093,
                              "src": "36263:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_PoolInfo_$934_storage_ptr",
                                "typeString": "struct ComplexRewarderPerSecV2.PoolInfo storage pointer"
                              }
                            },
                            "id": 2125,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "totalRewards",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 933,
                            "src": "36263:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 2126,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2082,
                            "src": "36284:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "36263:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2128,
                        "nodeType": "ExpressionStatement",
                        "src": "36263:28:0"
                      },
                      {
                        "condition": {
                          "id": 2130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "36306:9:0",
                          "subExpression": {
                            "id": 2129,
                            "name": "isNative",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 918,
                            "src": "36307:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2153,
                          "nodeType": "Block",
                          "src": "36395:150:0",
                          "statements": [
                            {
                              "assignments": [
                                2140,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 2140,
                                  "mutability": "mutable",
                                  "name": "sent",
                                  "nameLocation": "36415:4:0",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2153,
                                  "src": "36410:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 2139,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "36410:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 2147,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "hexValue": "",
                                    "id": 2145,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "36459:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    },
                                    "value": ""
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                        "typeString": "literal_string \"\""
                                      }
                                    ],
                                    "expression": {
                                      "id": 2141,
                                      "name": "_beneficiary",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2084,
                                      "src": "36425:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "id": 2142,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "src": "36425:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                    }
                                  },
                                  "id": 2144,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "names": [
                                    "value"
                                  ],
                                  "nodeType": "FunctionCallOptions",
                                  "options": [
                                    {
                                      "id": 2143,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2082,
                                      "src": "36450:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "src": "36425:33:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 2146,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "36425:37:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "36409:53:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2149,
                                    "name": "sent",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2140,
                                    "src": "36484:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "656d657267656e6379207265776172642077697468647261773a206661696c656420746f2073656e64",
                                    "id": 2150,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "36490:43:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2d374e849a70c18c83337a178d8d7b19352bb0fa78697576485e185a7e42f681",
                                      "typeString": "literal_string \"emergency reward withdraw: failed to send\""
                                    },
                                    "value": "emergency reward withdraw: failed to send"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_2d374e849a70c18c83337a178d8d7b19352bb0fa78697576485e185a7e42f681",
                                      "typeString": "literal_string \"emergency reward withdraw: failed to send\""
                                    }
                                  ],
                                  "id": 2148,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -18,
                                    -18
                                  ],
                                  "referencedDeclaration": -18,
                                  "src": "36476:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 2151,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "36476:58:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2152,
                              "nodeType": "ExpressionStatement",
                              "src": "36476:58:0"
                            }
                          ]
                        },
                        "id": 2154,
                        "nodeType": "IfStatement",
                        "src": "36302:243:0",
                        "trueBody": {
                          "id": 2138,
                          "nodeType": "Block",
                          "src": "36317:72:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 2134,
                                    "name": "_beneficiary",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2084,
                                    "src": "36356:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 2135,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2082,
                                    "src": "36370:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 2131,
                                    "name": "rewardToken",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 913,
                                    "src": "36331:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IBoringERC20_$529",
                                      "typeString": "contract IBoringERC20"
                                    }
                                  },
                                  "id": 2133,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 844,
                                  "src": "36331:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IBoringERC20_$529_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IBoringERC20_$529_$",
                                    "typeString": "function (contract IBoringERC20,address,uint256)"
                                  }
                                },
                                "id": 2136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "36331:47:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 2137,
                              "nodeType": "ExpressionStatement",
                              "src": "36331:47:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 2078,
                    "nodeType": "StructuredDocumentation",
                    "src": "35700:44:0",
                    "text": "@notice Withdraw reward. EMERGENCY ONLY."
                  },
                  "functionSelector": "1d123131",
                  "id": 2156,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 2087,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2086,
                        "name": "onlyOwner",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 360,
                        "src": "35874:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "35874:9:0"
                    },
                    {
                      "id": 2089,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 2088,
                        "name": "nonReentrant",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 455,
                        "src": "35884:12:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "35884:12:0"
                    }
                  ],
                  "name": "emergencyRewardWithdraw",
                  "nameLocation": "35758:23:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2085,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2080,
                        "mutability": "mutable",
                        "name": "_pid",
                        "nameLocation": "35799:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2156,
                        "src": "35791:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2079,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35791:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2082,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "35821:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2156,
                        "src": "35813:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2081,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "35813:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2084,
                        "mutability": "mutable",
                        "name": "_beneficiary",
                        "nameLocation": "35846:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 2156,
                        "src": "35838:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2083,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "35838:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "35781:83:0"
                  },
                  "returnParameters": {
                    "id": 2090,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "35897:0:0"
                  },
                  "scope": 2157,
                  "src": "35749:802:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 2158,
              "src": "19821:16732:0",
              "usedErrors": []
            }
          ],
          "src": "153:36401:0"
        },
        "id": 0
      }
    }
  }
}
