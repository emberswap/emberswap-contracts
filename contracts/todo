 #farm/EmberVault.sol
L.887         
0x0D0b4862F5FfA3A47D04DDf0351356d20C830460; //Trusted forwarder 
//TIL NY ADD

L. 1003
        //StartBlock always many years later from contract construct, will be set later in StartFarming function
        startBlock = block.number + (10 * 365 * 24 * 60 * 60); 
// MÅSKE ÆNDRES

L. 1094  // Add a new lp to the pool. Can only be called by the owner.
    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp


 #farm/EmberDistributorV2.sol
L. 623 -650 

  // Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint = 0;

    // The timestamp when Ember mining starts.
    uint256 public startTimestamp;

    // Total locked up rewards
    uint256 public totalLockedUpRewards;

    // Total Ember in Ember Pools (can be multiple pools)
    uint256 public totalEmberInPools = 0;

    // Team address.
    address public teamAddress;

    // Treasury address.
    address public treasuryAddress;

    // Investor address.
    address public investorAddress;

    // Percentage of pool rewards that goto the team.
    uint256 public teamPercent;

    // Percentage of pool rewards that goes to the treasury.
    uint256 public treasuryPercent;

    // Percentage of pool rewards that goes to the investor.
    uint256 public investorPercent;

L. 793  
// Add a new lp to the pool. Can only be called by the owner.
// Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp

L. 858 
    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.

L. 909
    // View function to see pending rewards on frontend.

#farm/rewarders/ComplexRewarderPerSecV2.sol

L. 454 
library BoringERC20 {
    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()
    bytes4 private constant SIG_NAME = 0x06fdde03; // name()
    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()
    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)
    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)

 
 #gasless/GasSwap.sol 

 L. 880
contract GasSwap is Ownable, EIP712MetaTransaction("GasSwap", "2") {
    address public immutable FIRE = 0x225fca2a940cd5b18dfb168cd9b7f921c63d7b6e;
