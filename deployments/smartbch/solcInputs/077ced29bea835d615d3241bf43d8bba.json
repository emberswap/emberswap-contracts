{
  "language": "Solidity",
  "sources": {
    "contracts/farm/rewarders/SimpleRewarderPerSec.sol": {
      "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File contracts/farm/v2/libraries/IBoringERC20.sol\n\n\npragma solidity ^0.8.7;\n\ninterface IBoringERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/rewarders/IRewarder.sol\n\n\npragma solidity ^0.8.2;\n\ninterface IRewarder {\n    function onEmberReward(address user, uint256 newLpAmount) external;\n\n    function pendingTokens(address user)\n        external\n        view\n        returns (uint256 pending);\n\n    function rewardToken() external view returns (IBoringERC20);\n}\n\n\n// File contracts/farm/v2/IEmberDistributorV2.sol\n\n\npragma solidity ^0.8.2;\n\ninterface IEmberDistributorV2 {\n    function totalAllocPoint() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function poolLength() external view returns (uint256);\n\n    function poolTotalLp(uint256 pid) external view returns (uint256);\n}\n\n\n// File contracts/farm/v2/libraries/BoringERC20.sol\n\n\npragma solidity ^0.8.7;\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_SYMBOL)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_NAME)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_DECIMALS)\n        );\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IBoringERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: Transfer failed\"\n        );\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IBoringERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: TransferFrom failed\"\n        );\n    }\n}\n\n\n// File contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol\n\n\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n/**\n * This is a sample contract to be used in the EmberDistributorV2 contract for partners to reward\n * stakers with their native token alongside EMBER.\n *\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\n * E.g. say you've allocated 100,000 XYZ to the EMBER-XYZ farm over 30 days. Then you would need to transfer\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\n */\ncontract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {\n    using BoringERC20 for IBoringERC20;\n\n    IBoringERC20 public immutable override rewardToken;\n    uint256 public immutable pid;\n    bool public immutable isNative;\n    IEmberDistributorV2 public immutable distributorV2;\n\n    /// @notice Info of each distributorV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    /// @notice Info of each distributorV2 poolInfo.\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\n    struct PoolInfo {\n        uint256 accTokenPerShare;\n        uint256 lastRewardTimestamp;\n    }\n\n    /// @notice Info of the poolInfo.\n    PoolInfo public poolInfo;\n    /// @notice Info of each user that stakes LP tokens.\n    mapping(address => UserInfo) public userInfo;\n\n    uint256 public tokenPerSec;\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n    event OnReward(address indexed user, uint256 amount);\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\n\n    modifier onlyDistributorV2() {\n        require(\n            msg.sender == address(distributorV2),\n            \"onlyDistributorV2: only EmberDistributorV2 can call this function\"\n        );\n        _;\n    }\n\n    constructor(\n        IBoringERC20 _rewardToken,\n        uint256 _tokenPerSec,\n        IEmberDistributorV2 _distributorV2,\n        uint256 _pid,\n        bool _isNative\n    ) {\n        require(\n            Address.isContract(address(_rewardToken)),\n            \"constructor: reward token must be a valid contract\"\n        );\n        require(\n            Address.isContract(address(_distributorV2)),\n            \"constructor: EmberDistributorV2 must be a valid contract\"\n        );\n        rewardToken = _rewardToken;\n        pid = _pid;\n        tokenPerSec = _tokenPerSec;\n        distributorV2 = _distributorV2;\n        isNative = _isNative;\n        poolInfo = PoolInfo({\n            lastRewardTimestamp: block.timestamp,\n            accTokenPerShare: 0\n        });\n    }\n\n    /// @notice Update reward variables of the given poolInfo.\n    /// @return pool Returns the pool that was updated.\n    function updatePool() public returns (PoolInfo memory pool) {\n        pool = poolInfo;\n\n        if (block.timestamp > pool.lastRewardTimestamp) {\n            uint256 lpSupply = distributorV2.poolTotalLp(pid);\n\n            if (lpSupply > 0) {\n                uint256 timeElapsed = block.timestamp -\n                    pool.lastRewardTimestamp;\n                uint256 tokenReward = timeElapsed * tokenPerSec;\n                pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\n                    lpSupply);\n            }\n\n            pool.lastRewardTimestamp = block.timestamp;\n            poolInfo = pool;\n        }\n    }\n\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\n    /// @param _tokenPerSec The number of tokens to distribute per second\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\n        updatePool();\n\n        emit RewardRateUpdated(tokenPerSec, _tokenPerSec);\n\n        tokenPerSec = _tokenPerSec;\n    }\n\n    /// @notice internal function to see balance of reward token.\n    function _balance() internal view returns (uint256) {\n        if (isNative) {\n            return address(this).balance;\n        } else {\n            return rewardToken.balanceOf(address(this));\n        }\n    }\n\n    /// @notice Function called by EmberDistributorV2 whenever staker claims EMBER harvest. Allows staker to also receive a 2nd reward token.\n    /// @param _user Address of user\n    /// @param _lpAmount Number of LP tokens the user has\n    function onEmberReward(address _user, uint256 _lpAmount)\n        external\n        override\n        onlyDistributorV2\n        nonReentrant\n    {\n        updatePool();\n        PoolInfo memory pool = poolInfo;\n        UserInfo storage user = userInfo[_user];\n        uint256 pending;\n        uint256 rewardBalance = _balance();\n        if (user.amount > 0) {\n            pending = (((user.amount * pool.accTokenPerShare) /\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\n\n            if (isNative) {\n                if (pending > rewardBalance) {\n                    (bool success, ) = _user.call{value: rewardBalance}(\"\");\n                    require(success, \"Transfer failed\");\n                } else {\n                    (bool success, ) = _user.call{value: pending}(\"\");\n                    require(success, \"Transfer failed\");\n                }\n            } else {\n                if (pending > rewardBalance) {\n                    rewardToken.safeTransfer(_user, rewardBalance);\n                } else {\n                    rewardToken.safeTransfer(_user, pending);\n                }\n            }\n        }\n        user.amount = _lpAmount;\n        user.rewardDebt =\n            (user.amount * pool.accTokenPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        emit OnReward(_user, pending);\n    }\n\n    /// @notice View function to see pending tokens\n    /// @param _user Address of user.\n    /// @return pending reward for a given user.\n    function pendingTokens(address _user)\n        external\n        view\n        override\n        returns (uint256 pending)\n    {\n        PoolInfo memory pool = poolInfo;\n        UserInfo storage user = userInfo[_user];\n\n        uint256 accTokenPerShare = pool.accTokenPerShare;\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\n\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\n            uint256 timeElapsed = block.timestamp - pool.lastRewardTimestamp;\n            uint256 tokenReward = timeElapsed * tokenPerSec;\n            accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\n        }\n\n        pending = (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\n            user.rewardDebt);\n    }\n\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\n    /// withdrawal of remaining tokens.\n    function emergencyWithdraw() public onlyOwner {\n        if (isNative) {\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\n                \"\"\n            );\n            require(success, \"Transfer failed\");\n        } else {\n            rewardToken.safeTransfer(\n                address(msg.sender),\n                rewardToken.balanceOf(address(this))\n            );\n        }\n    }\n\n    /// @notice View function to see balance of reward token.\n    function balance() external view returns (uint256) {\n        return _balance();\n    }\n\n    /// @notice payable function needed to receive BCH\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}