{
  "address": "0x8ecb32C33AB3f7ee3D6Ce9D4020bC53fecB36Be9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_ember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_emberPerSec",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teamPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investorPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IComplexRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IComplexRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetInvestorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetInvestorPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTeamAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTeamPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accEmberPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBoringERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IComplexRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ember",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emberPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "harvestMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decimals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accEmberPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewarders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewardsPerSec",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decimals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardsPerSec",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "poolTotalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IComplexRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        }
      ],
      "name": "setInvestorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInvestorPercent",
          "type": "uint256"
        }
      ],
      "name": "setInvestorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "setTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTeamPercent",
          "type": "uint256"
        }
      ],
      "name": "setTeamPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEmberInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_emberPerSec",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6787db220e86054193c9c3034dddb28665b52a7f60bf6adcaebfcbcbf7bb6154",
  "receipt": {
    "to": null,
    "from": "0x3Bc21B9e5612C303e11162C1F520AD0FF734e90D",
    "contractAddress": "0x8ecb32C33AB3f7ee3D6Ce9D4020bC53fecB36Be9",
    "transactionIndex": 0,
    "gasUsed": "5287034",
    "logsBloom": "0x
    "blockHash": "0xf98c1d360cf685884168939e240ab4e631c9ef39faaca610aadbee857d1eea87",
    "transactionHash": "0x6787db220e86054193c9c3034dddb28665b52a7f60bf6adcaebfcbcbf7bb6154",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3157530,
        "transactionHash": "0x6787db220e86054193c9c3034dddb28665b52a7f60bf6adcaebfcbcbf7bb6154",
        "address": "0x8ecb32C33AB3f7ee3D6Ce9D4020bC53fecB36Be9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003bc21b9e5612c303e11162c1f520ad0ff734e90d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf98c1d360cf685884168939e240ab4e631c9ef39faaca610aadbee857d1eea87"
      }
    ],
    "blockNumber": 3157530,
    "cumulativeGasUsed": "5287034",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6BAbf5277849265b6738e75AEC43AEfdde0Ce88D",
    "24500000000000000000",
    "0x3Bc21B9e5612C303e11162C1F520AD0FF734e90D",
    "0xc6752c2f631416eB6A820e18C159DdF39269c5e9",
    "0xA49310DC0677032fb78D0cCE2B6f7c4d27101dA1",
    50,
    100,
    100
  ],
  "solcInputHash": "a7326c2de1300405fbf6b546db807dae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_ember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emberPerSec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetInvestorPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTeamPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBoringERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ember\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emberPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEmberPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewarders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSec\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolTotalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"setInvestorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInvestorPercent\",\"type\":\"uint256\"}],\"name\":\"setInvestorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTeamPercent\",\"type\":\"uint256\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmberInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emberPerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/EmberDistributorV2.sol\":\"EmberDistributorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/farm/EmberDistributorV2.sol\":{\"content\":\"// Sources flattened with hardhat v2.6.0 https://hardhat.org\\n// SPDX-License-Identifier: MIT\\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\\n\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/libraries/IBoringERC20.sol\\npragma solidity ^0.8.7;\\n\\ninterface IBoringERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\\npragma solidity ^0.8.7;\\n\\ninterface IComplexRewarder {\\n    function onEmberReward(\\n        uint256 pid,\\n        address user,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IBoringERC20);\\n\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\n}\\n\\n\\n// File contracts/farm/v2/libraries/BoringERC20.sol\\npragma solidity ^0.8.7;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IBoringERC20 token)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IBoringERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: Transfer failed\\\"\\n        );\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IBoringERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"BoringERC20: TransferFrom failed\\\"\\n        );\\n    }\\n}\\n\\n\\n// File contracts/farm/v2/IEmberPair.sol\\npragma solidity ^0.8.7;\\n\\ninterface IEmberPair {\\n    function initialize(address, address) external;\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n\\n// File contracts/farm/v2/EmberDistributorV2.sol\\npragma solidity ^0.8.7;\\n\\n\\n\\n\\n\\n\\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\\n    using BoringERC20 for IBoringERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardLockedUp; // Reward locked up.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBoringERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\\n        uint16 depositFeeBP; // Deposit fee in basis points\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        uint256 totalLp; // Total token in Pool\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\n    }\\n\\n    IBoringERC20 public ember;\\n\\n    // Ember tokens created per second\\n    uint256 public emberPerSec;\\n\\n    // Max harvest interval: 14 days\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Maximum deposit fee rate: 10%\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // The timestamp when Ember mining starts.\\n    uint256 public startTimestamp;\\n\\n    // Total locked up rewards\\n    uint256 public totalLockedUpRewards;\\n\\n    // Total Ember in Ember Pools (can be multiple pools)\\n    uint256 public totalEmberInPools = 0;\\n\\n    // Team address.\\n    address public teamAddress;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // Investor address.\\n    address public investorAddress;\\n\\n    // Percentage of pool rewards that goto the team.\\n    uint256 public teamPercent;\\n\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // The precision factor\\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IBoringERC20 indexed lpToken,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint16 depositFeeBP,\\n        uint256 harvestInterval,\\n        IComplexRewarder[] indexed rewarders\\n    );\\n\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accEmberPerShare\\n    );\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    event EmissionRateUpdated(\\n        address indexed caller,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    event RewardLockedUp(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amountLockedUp\\n    );\\n\\n    event AllocPointsUpdated(\\n        address indexed caller,\\n        uint256 previousAmount,\\n        uint256 newAmount\\n    );\\n\\n    event SetTeamAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetInvestorAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\n\\n    constructor(\\n        IBoringERC20 _ember,\\n        uint256 _emberPerSec,\\n        address _teamAddress,\\n        address _treasuryAddress,\\n        address _investorAddress,\\n        uint256 _teamPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) {\\n        require(\\n            _teamPercent <= 1000,\\n            \\\"constructor: invalid team percent value\\\"\\n        );\\n        require(\\n            _treasuryPercent <= 1000,\\n            \\\"constructor: invalid treasury percent value\\\"\\n        );\\n        require(\\n            _investorPercent <= 1000,\\n            \\\"constructor: invalid investor percent value\\\"\\n        );\\n        require(\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\n            \\\"constructor: total percent over max\\\"\\n        );\\n\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\n\\n        ember = _ember;\\n        emberPerSec = _emberPerSec;\\n\\n        teamAddress = _teamAddress;\\n        treasuryAddress = _treasuryAddress;\\n        investorAddress = _investorAddress;\\n\\n        teamPercent = _teamPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n    }\\n\\n    // Set farming start, can call only once\\n    function startFarming() public onlyOwner {\\n        require(\\n            block.timestamp < startTimestamp,\\n            \\\"start farming: farm started already\\\"\\n        );\\n\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardTimestamp = block.timestamp;\\n        }\\n\\n        startTimestamp = block.timestamp;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\n    function add(\\n        uint256 _allocPoint,\\n        IBoringERC20 _lpToken,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner {\\n        require(_rewarders.length <= 10, \\\"add: too many rewarders\\\");\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"add: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"add: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\n            ? block.timestamp\\n            : startTimestamp;\\n\\n        totalAllocPoint += _allocPoint;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accEmberPerShare: 0,\\n                depositFeeBP: _depositFeeBP,\\n                harvestInterval: _harvestInterval,\\n                totalLp: 0,\\n                rewarders: _rewarders\\n            })\\n        );\\n\\n        emit Add(\\n            poolInfo.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _depositFeeBP,\\n        uint256 _harvestInterval,\\n        IComplexRewarder[] calldata _rewarders\\n    ) public onlyOwner validatePoolByPid(_pid) {\\n        require(_rewarders.length <= 10, \\\"set: too many rewarders\\\");\\n\\n        require(\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\n            \\\"set: deposit fee too high\\\"\\n        );\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"set: invalid harvest interval\\\"\\n        );\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < _rewarders.length;\\n            ++rewarderId\\n        ) {\\n            require(\\n                Address.isContract(address(_rewarders[rewarderId])),\\n                \\\"set: rewarder must be contract\\\"\\n            );\\n        }\\n\\n        _massUpdatePools();\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n        poolInfo[_pid].rewarders = _rewarders;\\n\\n        emit Set(\\n            _pid,\\n            _allocPoint,\\n            _depositFeeBP,\\n            _harvestInterval,\\n            _rewarders\\n        );\\n    }\\n\\n    // View function to see pending rewards on frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory amounts\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accEmberPerShare = pool.accEmberPerShare;\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 total = 1000;\\n            uint256 lpPercent = total -\\n                teamPercent -\\n                treasuryPercent -\\n                investorPercent;\\n\\n            uint256 emberReward = (multiplier *\\n                emberPerSec *\\n                pool.allocPoint *\\n                lpPercent) /\\n                totalAllocPoint /\\n                total;\\n\\n            accEmberPerShare += (\\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\\n            );\\n        }\\n\\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        amounts = new uint256[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n        amounts[0] = pendingEmber;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\n                _pid,\\n                _user\\n            );\\n        }\\n    }\\n\\n    /// @notice View function to see pool rewards per sec\\n    function poolRewardsPerSec(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (\\n            address[] memory addresses,\\n            string[] memory symbols,\\n            uint256[] memory decimals,\\n            uint256[] memory rewardsPerSec\\n        )\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        addresses = new address[](pool.rewarders.length + 1);\\n        symbols = new string[](pool.rewarders.length + 1);\\n        decimals = new uint256[](pool.rewarders.length + 1);\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\n\\n        addresses[0] = address(ember);\\n        symbols[0] = IBoringERC20(ember).safeSymbol();\\n        decimals[0] = IBoringERC20(ember).safeDecimals();\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        rewardsPerSec[0] =\\n            (pool.allocPoint * emberPerSec * lpPercent) /\\n            totalAllocPoint /\\n            total;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            addresses[rewarderId + 1] = address(\\n                pool.rewarders[rewarderId].rewardToken()\\n            );\\n\\n            symbols[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeSymbol();\\n\\n            decimals[rewarderId + 1] = IBoringERC20(\\n                pool.rewarders[rewarderId].rewardToken()\\n            ).safeDecimals();\\n\\n            rewardsPerSec[rewarderId + 1] = pool\\n                .rewarders[rewarderId]\\n                .poolRewardsPerSec(_pid);\\n        }\\n    }\\n\\n    // View function to see rewarders for a pool\\n    function poolRewarders(uint256 _pid)\\n        external\\n        view\\n        validatePoolByPid(_pid)\\n        returns (address[] memory rewarders)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        rewarders = new address[](pool.rewarders.length);\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\n        }\\n    }\\n\\n    // View function to see if user can harvest Ember.\\n    function canHarvest(uint256 _pid, address _user)\\n        public\\n        view\\n        validatePoolByPid(_pid)\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return\\n            block.timestamp >= startTimestamp &&\\n            block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() external nonReentrant {\\n        _massUpdatePools();\\n    }\\n\\n    // Internal method for massUpdatePools\\n    function _massUpdatePools() internal {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) external nonReentrant {\\n        _updatePool(_pid);\\n    }\\n\\n    // Internal method for _updatePool\\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.totalLp;\\n\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\n\\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\\n            totalAllocPoint;\\n\\n        uint256 total = 1000;\\n        uint256 lpPercent = total -\\n            teamPercent -\\n            treasuryPercent -\\n            investorPercent;\\n\\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\\n        ember.mint(address(this), (emberReward * lpPercent) / total);\\n\\n        pool.accEmberPerShare +=\\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\\n            pool.totalLp /\\n            total;\\n\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdatePool(\\n            _pid,\\n            pool.lastRewardTimestamp,\\n            lpSupply,\\n            pool.accEmberPerShare\\n        );\\n    }\\n\\n    function depositWithPermit(\\n        uint256 pid,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public nonReentrant validatePoolByPid(pid) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\n        _deposit(_pid, _amount);\\n    }\\n\\n    // Deposit tokens for Ember allocation.\\n    function _deposit(uint256 _pid, uint256 _amount)\\n        internal\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n\\n            _amount = afterDeposit - beforeDeposit;\\n\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\n\\n                _amount = _amount - depositFee;\\n            }\\n\\n            user.amount += _amount;\\n\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools += _amount;\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp += _amount;\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    //withdraw tokens\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        public\\n        nonReentrant\\n        validatePoolByPid(_pid)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        //this will make sure that user can only withdraw from his pool\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\n\\n        //cannot withdraw more than pool's balance\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\n\\n        _updatePool(_pid);\\n\\n        payOrLockupPendingEmber(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount -= _amount;\\n            if (address(pool.lpToken) == address(ember)) {\\n                totalEmberInPools -= _amount;\\n            }\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt =\\n            (user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(\\n                _pid,\\n                msg.sender,\\n                user.amount\\n            );\\n        }\\n\\n        if (_amount > 0) {\\n            pool.totalLp -= _amount;\\n        }\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n\\n        //Cannot withdraw more than pool's balance\\n        require(\\n            pool.totalLp >= amount,\\n            \\\"emergency withdraw: pool total not enough\\\"\\n        );\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.totalLp -= amount;\\n\\n        for (\\n            uint256 rewarderId = 0;\\n            rewarderId < pool.rewarders.length;\\n            ++rewarderId\\n        ) {\\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\\n        }\\n\\n        if (address(pool.lpToken) == address(ember)) {\\n            totalEmberInPools -= amount;\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay or lockup pending Ember.\\n    function payOrLockupPendingEmber(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\n                uint256 pendingRewards = pending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards -= user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // send rewards\\n                safeEmberTransfer(msg.sender, pendingRewards);\\n            }\\n        } else if (pending > 0) {\\n            totalLockedUpRewards += pending;\\n            user.rewardLockedUp += pending;\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\n        }\\n    }\\n\\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\\n            uint256 emberBal = ember.balanceOf(address(this)) -\\n                totalEmberInPools;\\n            if (_amount >= emberBal) {\\n                ember.safeTransfer(_to, emberBal);\\n            } else if (_amount > 0) {\\n                ember.safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\\n        _massUpdatePools();\\n\\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\\n\\n        emberPerSec = _emberPerSec;\\n    }\\n\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\n        public\\n        onlyOwner\\n    {\\n        _massUpdatePools();\\n\\n        emit AllocPointsUpdated(\\n            msg.sender,\\n            poolInfo[_pid].allocPoint,\\n            _allocPoint\\n        );\\n\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\n        return poolInfo[pid].totalLp;\\n    }\\n\\n    // Function to harvest many pools in a single transaction\\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\\n        require(_pids.length <= 30, \\\"harvest many: too many pool ids\\\");\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\n            _deposit(_pids[index], 0);\\n        }\\n    }\\n\\n    // Update team address by the previous team address.\\n    function setTeamAddress(address _teamAddress) public {\\n        require(\\n            msg.sender == teamAddress,\\n            \\\"set team address: only previous team address can call this method\\\"\\n        );\\n        require(\\n            _teamAddress != address(0),\\n            \\\"set team address: invalid new team address\\\"\\n        );\\n        teamAddress = _teamAddress;\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\n    }\\n\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\n        require(\\n            _newTeamPercent <= 1000,\\n            \\\"set team percent: invalid percent value\\\"\\n        );\\n        require(\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\n            \\\"set team percent: total percent over max\\\"\\n        );\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\n        teamPercent = _newTeamPercent;\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddress(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"set treasury address: only previous treasury address can call this method\\\"\\n        );\\n        require(\\n            _treasuryAddress != address(0),\\n            \\\"set treasury address: invalid new treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\n    }\\n\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\n        require(\\n            _newTreasuryPercent <= 1000,\\n            \\\"set treasury percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\n            \\\"set treasury percent: total percent over max\\\"\\n        );\\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\\n        treasuryPercent = _newTreasuryPercent;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddress(address _investorAddress) public {\\n        require(\\n            msg.sender == investorAddress,\\n            \\\"set investor address: only previous investor can call this method\\\"\\n        );\\n        require(\\n            _investorAddress != address(0),\\n            \\\"set investor address: invalid new investor address\\\"\\n        );\\n        investorAddress = _investorAddress;\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\n    }\\n\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\n        require(\\n            _newInvestorPercent <= 1000,\\n            \\\"set investor percent: invalid percent value\\\"\\n        );\\n        require(\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\n            \\\"set investor percent: total percent over max\\\"\\n        );\\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\\n        investorPercent = _newInvestorPercent;\\n    }\\n}\\n\",\"keccak256\":\"0xc06283a46a35cac68267b70024b4f4cd4f1acca80142582fe5bfa259407b0931\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600681905560095564e8d4a510006080523480156200002457600080fd5b5060405162005ec238038062005ec28339810160408190526200004791620002cf565b62000052336200027f565b600180556103e8831115620000be5760405162461bcd60e51b815260206004820152602760248201527f636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e604482015266742076616c756560c81b60648201526084015b60405180910390fd5b6103e8821115620001265760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420747265617375727920706560448201526a7263656e742076616c756560a81b6064820152608401620000b5565b6103e88111156200018e5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420696e766573746f7220706560448201526a7263656e742076616c756560a81b6064820152608401620000b5565b6103e8816200019e84866200035e565b620001aa91906200035e565b1115620002065760405162461bcd60e51b815260206004820152602360248201527f636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206044820152620dac2f60eb1b6064820152608401620000b5565b62000216426301e133806200035e565b600755600280546001600160a01b03199081166001600160a01b039a8b1617909155600397909755600a8054881696891696909617909555600b8054871694881694909417909355600c80549095169190951617909255600d92909255600e55600f556200039e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600080610100898b031215620002ed57600080fd5b8851620002fa8162000385565b60208a015160408b01519199509750620003148162000385565b60608a0151909650620003278162000385565b60808a01519095506200033a8162000385565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b600082198211156200038057634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146200039b57600080fd5b50565b608051615ae5620003dd600039600081816111ad01528181613897015281816138e50152818161429a015281816143c10152614b850152615ae56000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c8063630b5ba111610191578063afbcfea1116100e3578063e2bbb15811610097578063eff8976b11610071578063eff8976b146106a0578063f2fde38b146106c0578063ffcd4263146106d357600080fd5b8063e2bbb15814610671578063e6fd48bc14610684578063eddf96521461068d57600080fd5b8063dc640ac9116100c8578063dc640ac91461064b578063de73149d1461065e578063e164ac501461066857600080fd5b8063afbcfea114610623578063c5f956af1461062b57600080fd5b8063812c64f1116101455780638da5cb5b1161011f5780638da5cb5b1461059257806393f1a40b146105b0578063949e63021461061057600080fd5b8063812c64f114610550578063876d3c9c1461056c57806389a2bc251461057f57600080fd5b80636605bfda116101765780636605bfda146105225780636690864e14610535578063715018a61461054857600080fd5b8063630b5ba114610507578063654c9ece1461050f57600080fd5b80632081ccc41161024a578063465e81ec116101fe578063515bc323116101d8578063515bc323146104ce57806351eb05a6146104e15780635312ea8e146104f457600080fd5b8063465e81ec1461048f578063474fa630146104b2578063508593ab146104bb57600080fd5b80632e6c998d1161022f5780632e6c998d1461044657806342602f1e14610469578063441a3e701461047c57600080fd5b80632081ccc41461042a5780632a22bc431461043d57600080fd5b80631526fe27116102a157806317caf6f11161028657806317caf6f1146103e15780631c75f085146103ea5780631f1b9a7c1461040a57600080fd5b80631526fe27146103755780631745d2e4146103d857600080fd5b8063081e3eda116102d2578063081e3eda146103135780630ba84cd21461031b57806312e228fd1461033057600080fd5b806304ef9d58146102ee5780630735b2081461030a575b600080fd5b6102f7600e5481565b6040519081526020015b60405180910390f35b6102f7600f5481565b6004546102f7565b61032e610329366004615563565b6106e6565b005b600c546103509073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610301565b610388610383366004615563565b6107b7565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e001610301565b6102f760035481565b6102f760065481565b600a546103509073ffffffffffffffffffffffffffffffffffffffff1681565b6002546103509073ffffffffffffffffffffffffffffffffffffffff1681565b61032e610438366004615661565b610821565b6102f760095481565b610459610454366004615595565b610c7f565b6040519015158152602001610301565b61032e6104773660046153fa565b610d3d565b61032e61048a36600461563f565b610f1e565b6104a261049d366004615563565b61131a565b6040516103019493929190615800565b6102f760085481565b61032e6104c93660046155c5565b611a86565b61032e6104dc366004615691565b611fab565b61032e6104ef366004615563565b612178565b61032e610502366004615563565b6121fa565b61032e6124e7565b6102f761051d366004615563565b612567565b61032e6105303660046153fa565b612595565b61032e6105433660046153fa565b612776565b61032e612957565b6105596103e881565b60405161ffff9091168152602001610301565b61032e61057a366004615563565b6129e4565b61032e61058d366004615563565b612be4565b60005473ffffffffffffffffffffffffffffffffffffffff16610350565b6105f06105be366004615595565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610301565b61032e61061e366004615563565b612de4565b61032e612fe4565b600b546103509073ffffffffffffffffffffffffffffffffffffffff1681565b61032e610659366004615417565b61314c565b6102f76212750081565b6102f7600d5481565b61032e61067f36600461563f565b613270565b6102f760075481565b61032e61069b36600461563f565b6132f4565b6106b36106ae366004615563565b61346a565b60405161030191906157ed565b61032e6106ce3660046153fa565b6135e9565b6104a26106e1366004615595565b613719565b60005473ffffffffffffffffffffffffffffffffffffffff16331461076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610774613e24565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b600481815481106107c757600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6004548690811061090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600a82111561097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7365743a20746f6f206d616e79207265776172646572730000000000000000006044820152606401610763565b6103e861ffff861611156109ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610763565b62127500841115610a57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610763565b60005b82811015610b0857610a92848483818110610a7757610a77615a20565b9050602002016020810190610a8c91906153fa565b3b151590565b610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f7365743a207265776172646572206d75737420626520636f6e747261637400006044820152606401610763565b610b0181615998565b9050610a5a565b50610b11613e24565b8560048881548110610b2557610b25615a20565b906000526020600020906008020160010154600654610b449190615955565b610b4e91906158c5565b6006819055508560048881548110610b6857610b68615a20565b9060005260206000209060080201600101819055508460048881548110610b9157610b91615a20565b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610bd057610bd0615a20565b906000526020600020906008020160050181905550828260048981548110610bfa57610bfa615a20565b90600052602060002090600802016007019190610c18929190615285565b508282604051610c29929190615782565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610cef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544210801590610d34575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610e0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff8116610ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f73657420696e766573746f7220616464726573733a20696e76616c6964206e6560448201527f7720696e766573746f72206164647265737300000000000000000000000000006064820152608401610763565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b600260015560045482908110610ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b60006004848154811061101257611012615a20565b6000918252602080832087845260058252604080852033865290925292208054600890920290920192508411156110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f7567686044820152606401610763565b8382600601541015611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768006044820152606401610763565b61111c85613e4a565b6111258561434d565b83156111a4578381600001600082825461113f9190615955565b9091555050600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561118157836009600082825461117b9190615955565b90915550505b81546111a49073ffffffffffffffffffffffffffffffffffffffff163386614502565b600382015481547f0000000000000000000000000000000000000000000000000000000000000000916111d691615918565b6111e091906158dd565b600182015560005b60078301548110156112b75782600701818154811061120957611209615a20565b60009182526020909120015482546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638ad1472890606401600060405180830381600087803b15801561128e57600080fd5b505af11580156112a2573d6000803e3d6000fd5b50505050806112b090615998565b90506111e8565b5083156112d857838260060160008282546112d29190615955565b90915550505b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a3505060018055505050565b60608060608084600480549050811061138f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600487815481106113a4576113a4615a20565b90600052602060002090600802019050806007018054905060016113c891906158c5565b67ffffffffffffffff8111156113e0576113e0615a4f565b604051908082528060200260200182016040528015611409578160200160208202803683370190505b50600782015490965061141d9060016158c5565b67ffffffffffffffff81111561143557611435615a4f565b60405190808252806020026020018201604052801561146857816020015b60608152602001906001900390816114535790505b50600782015490955061147c9060016158c5565b67ffffffffffffffff81111561149457611494615a4f565b6040519080825280602002602001820160405280156114bd578160200160208202803683370190505b5060078201549094506114d19060016158c5565b67ffffffffffffffff8111156114e9576114e9615a4f565b604051908082528060200260200182016040528015611512578160200160208202803683370190505b50600254875191945073ffffffffffffffffffffffffffffffffffffffff1690879060009061154357611543615a20565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526002546115739116614672565b8560008151811061158657611586615a20565b60209081029190910101526002546115b39073ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff16846000815181106115c9576115c9615a20565b60200260200101818152505060006103e890506000600f54600e54600d54846115f29190615955565b6115fc9190615955565b6116069190615955565b90508160065482600354866001015461161f9190615918565b6116299190615918565b61163391906158dd565b61163d91906158dd565b8560008151811061165057611650615a20565b60200260200101818152505060005b6007840154811015611a7a5783600701818154811061168057611680615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611727919061547b565b896117338360016158c5565b8151811061174357611743615a20565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061185784600701828154811061179557611795615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c919061547b565b73ffffffffffffffffffffffffffffffffffffffff16614672565b886118638360016158c5565b8151811061187357611873615a20565b602002602001018190525061195884600701828154811061189657611896615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561190557600080fd5b505afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d919061547b565b73ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff16876119678360016158c5565b8151811061197757611977615a20565b60200260200101818152505083600701818154811061199857611998615a20565b6000918252602090912001546040517f465e81ec000000000000000000000000000000000000000000000000000000008152600481018c905273ffffffffffffffffffffffffffffffffffffffff9091169063465e81ec9060240160206040518083038186803b158015611a0b57600080fd5b505afa158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a43919061557c565b86611a4f8360016158c5565b81518110611a5f57611a5f615a20565b6020908102919091010152611a7381615998565b905061165f565b50505050509193509193565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b600a811115611b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6164643a20746f6f206d616e79207265776172646572730000000000000000006044820152606401610763565b6103e861ffff85161115611be2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610763565b62127500831115611c4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610763565b843b611cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610763565b60005b81811015611d7357611cfd838383818110610a7757610a77615a20565b611d63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610763565b611d6c81615998565b9050611ce0565b50611d7c613e24565b60006007544211611d8f57600754611d91565b425b90508660066000828254611da591906158c5565b9250508190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e08301518051939493611f1b93506007850192919091019061530d565b5050508282604051611f2e929190615782565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff881690611f5e90600190615955565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b60026001541415612018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556004548690811061208a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b60006004888154811061209f5761209f615a20565b6000918252602090912060089091020180546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810189905260ff8816608482015260a4810187905260c4810186905291925073ffffffffffffffffffffffffffffffffffffffff1690819063d505accf9060e401600060405180830381600087803b15801561214757600080fd5b505af115801561215b573d6000803e3d6000fd5b50505050612169898961487d565b50506001805550505050505050565b600260015414156121e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556121f381613e4a565b5060018055565b60026001541415612267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b600260018190555060006004828154811061228457612284615a20565b60009182526020808320858452600582526040808520338652909252922080546008929092029092016006810154909350811115612344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f75676800000000000000000000000000000000000000000000006064820152608401610763565b6000808355600183018190556002830181905560038301819055600684018054839290612372908490615955565b90915550600090505b60078401548110156124455783600701818154811061239c5761239c615a20565b60009182526020822001546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101889052336024820152604481019290925273ffffffffffffffffffffffffffffffffffffffff1690638ad1472890606401600060405180830381600087803b15801561241c57600080fd5b505af1158015612430573d6000803e3d6000fd5b505050508061243e90615998565b905061237b565b50600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561248357806009600082825461247d9190615955565b90915550505b82546124a69073ffffffffffffffffffffffffffffffffffffffff163383614502565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60026001541415612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b6002600155612561613e24565b60018055565b60006004828154811061257c5761257c615a20565b9060005260206000209060080201600601549050919050565b600b5473ffffffffffffffffffffffffffffffffffffffff163314612662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f73657420747265617375727920616464726573733a206f6e6c7920707265766960448201527f6f757320747265617375727920616464726573732063616e2063616c6c20746860648201527f6973206d6574686f640000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff8116612705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f73657420747265617375727920616464726573733a20696e76616c6964206e6560448201527f77207472656173757279206164647265737300000000000000000000000000006064820152608401610763565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b600a5473ffffffffffffffffffffffffffffffffffffffff163314612843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b73ffffffffffffffffffffffffffffffffffffffff81166128e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f736574207465616d20616464726573733a20696e76616c6964206e657720746560448201527f616d2061646472657373000000000000000000000000000000000000000000006064820152608401610763565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146129d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6129e26000614cee565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314612a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610763565b6103e8600e5482600d54612b0b91906158c5565b612b1591906158c5565b1115612ba3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610763565b600f5460408051918252602082018390527f905b464403a98b455243c8b4d30c545b8fbd70cda670142b9326425b2c039f3b910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612c65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612cf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610763565b6103e8600f5482600d54612d0b91906158c5565b612d1591906158c5565b1115612da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610763565b600e5460408051918252602082018390527fa565895c0101fca10e6a7b85742e56cf52ac5f58b09ce030425d3555b47069fd910160405180910390a1600e55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612e65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b6103e8811115612ef7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c7565000000000000000000000000000000000000000000000000006064820152608401610763565b6103e8600f5482600e54612f0b91906158c5565b612f1591906158c5565b1115612fa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d61780000000000000000000000000000000000000000000000006064820152608401610763565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b60005473ffffffffffffffffffffffffffffffffffffffff163314613065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b60075442106130f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7374617274206661726d696e673a206661726d207374617274656420616c726560448201527f61647900000000000000000000000000000000000000000000000000000000006064820152608401610763565b60045460005b818110156131445760006004828154811061311957613119615a20565b90600052602060002090600802019050428160020181905550508061313d90615998565b90506130fc565b505042600755565b600260015414156131b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b6002600155601e811115613229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f68617276657374206d616e793a20746f6f206d616e7920706f6f6c20696473006044820152606401610763565b60005b818110156132675761325783838381811061324957613249615a20565b90506020020135600061487d565b61326081615998565b905061322c565b50506001805550565b600260015414156132dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026001556132ec828261487d565b505060018055565b60005473ffffffffffffffffffffffffffffffffffffffff163314613375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b61337d613e24565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef3600484815481106133c8576133c8615a20565b906000526020600020906008020160010154836040516133f2929190918252602082015260400190565b60405180910390a2806004838154811061340e5761340e615a20565b90600052602060002090600802016001015460065461342d9190615955565b61343791906158c5565b600681905550806004838154811061345157613451615a20565b9060005260206000209060080201600101819055505050565b600454606090829081106134da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600484815481106134ef576134ef615a20565b90600052602060002090600802019050806007018054905067ffffffffffffffff81111561351f5761351f615a4f565b604051908082528060200260200182016040528015613548578160200160208202803683370190505b50925060005b60078201548110156135e15781600701818154811061356f5761356f615a20565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815181106135ac576135ac615a20565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526135da81615998565b905061354e565b505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461366a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b73ffffffffffffffffffffffffffffffffffffffff811661370d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610763565b61371681614cee565b50565b60608060608085600480549050811061378e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600488815481106137a3576137a3615a20565b600091825260208083208b845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8d168652909252922060036008909202909201908101546006820154600283015492945090914211801561380157508015155b156138d75760008460020154426138189190615955565b905060006103e890506000600f54600e54600d54846138379190615955565b6138419190615955565b61384b9190615955565b9050600082600654838a60010154600354886138679190615918565b6138719190615918565b61387b9190615918565b61388591906158dd565b61388f91906158dd565b9050846138bc7f000000000000000000000000000000000000000000000000000000000000000083615918565b6138c691906158dd565b6138d090876158c5565b9550505050505b6000836002015484600101547f00000000000000000000000000000000000000000000000000000000000000008587600001546139149190615918565b61391e91906158dd565b6139289190615955565b61393291906158c5565b60078601549091506139459060016158c5565b67ffffffffffffffff81111561395d5761395d615a4f565b604051908082528060200260200182016040528015613986578160200160208202803683370190505b506007860154909a5061399a9060016158c5565b67ffffffffffffffff8111156139b2576139b2615a4f565b6040519080825280602002602001820160405280156139e557816020015b60608152602001906001900390816139d05790505b5060078601549099506139f99060016158c5565b67ffffffffffffffff811115613a1157613a11615a4f565b604051908082528060200260200182016040528015613a3a578160200160208202803683370190505b506007860154909750613a4e9060016158c5565b67ffffffffffffffff811115613a6657613a66615a4f565b604051908082528060200260200182016040528015613a8f578160200160208202803683370190505b506002548b5191995073ffffffffffffffffffffffffffffffffffffffff16908b90600090613ac057613ac0615a20565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254613af09116614672565b89600081518110613b0357613b03615a20565b6020908102919091010152600254613b309073ffffffffffffffffffffffffffffffffffffffff1661478a565b60ff1688600081518110613b4657613b46615a20565b6020026020010181815250508087600081518110613b6657613b66615a20565b60200260200101818152505060005b6007860154811015613e1457856007018181548110613b9657613b96615a20565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b158015613c0557600080fd5b505afa158015613c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3d919061547b565b8b613c498360016158c5565b81518110613c5957613c59615a20565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613cab86600701828154811061179557611795615a20565b8a613cb78360016158c5565b81518110613cc757613cc7615a20565b6020026020010181905250613cea86600701828154811061189657611896615a20565b60ff1689613cf98360016158c5565b81518110613d0957613d09615a20565b602002602001018181525050856007018181548110613d2a57613d2a615a20565b6000918252602090912001546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481018f905273ffffffffffffffffffffffffffffffffffffffff8e811660248301529091169063ffcd42639060440160206040518083038186803b158015613da557600080fd5b505afa158015613db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddd919061557c565b88613de98360016158c5565b81518110613df957613df9615a20565b6020908102919091010152613e0d81615998565b9050613b75565b5050505050505092959194509250565b60005b60045481101561371657613e3a81613e4a565b613e4381615998565b9050613e27565b60045481908110613eb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b600060048381548110613ecc57613ecc615a20565b9060005260206000209060080201905080600201544211613eec57505050565b6006810154801580613f0057506001820154155b15613f115750426002909101555050565b6000826002015442613f239190615955565b90506000600654846001015460035484613f3d9190615918565b613f479190615918565b613f5191906158dd565b905060006103e890506000600f54600e54600d5484613f709190615955565b613f7a9190615955565b613f849190615955565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116908590613fbf9088615918565b613fc991906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561403457600080fd5b505af1158015614048573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f19935091169085906140839088615918565b61408d91906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156140f857600080fd5b505af115801561410c573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f19935091169085906141479088615918565b61415191906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156141bc57600080fd5b505af11580156141d0573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f19905030846142008588615918565b61420a91906158dd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561427557600080fd5b505af1158015614289573d6000803e3d6000fd5b5050506006870154839150826142bf7f000000000000000000000000000000000000000000000000000000000000000087615918565b6142c99190615918565b6142d391906158dd565b6142dd91906158dd565b8660030160008282546142f091906158c5565b909155505042600287018190556003870154604080519283526020830188905282015288907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469060600160405180910390a25050505050505b5050565b60006004828154811061436257614362615a20565b60009182526020808320858452600582526040808520338652909252922060038101546008909202909201925015801561439e57506007544210155b156143b85760058201546143b290426158c5565b60038201555b600081600101547f0000000000000000000000000000000000000000000000000000000000000000846003015484600001546143f49190615918565b6143fe91906158dd565b6144089190615955565b90506144148433610c7f565b1561448c57600081118061442c575060008260020154115b1561448757600082600201548261444391906158c5565b905082600201546008600082825461445b9190615955565b909155505060006002840155600584015461447690426158c5565b60038401556144853382614d63565b505b6144fc565b80156144fc5780600860008282546144a491906158c5565b92505081905550808260020160008282546144bf91906158c5565b9091555050604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161459991906157d1565b6000604051808303816000865af19150503d80600081146145d6576040519150601f19603f3d011682016040523d82523d6000602084013e6145db565b606091505b50915091508180156146055750805115806146055750808060200190518101906146059190615459565b61466b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610763565b5050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff8616916146f491906157d1565b600060405180830381855afa9150503d806000811461472f576040519150601f19603f3d011682016040523d82523d6000602084013e614734565b606091505b509150915081614779576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250614782565b61478281614f19565b949350505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff86169161480b91906157d1565b600060405180830381855afa9150503d8060008114614846576040519150601f19603f3d011682016040523d82523d6000602084013e61484b565b606091505b509150915081801561485e575080516020145b614869576012614782565b8080602001905181019061478291906156e4565b600454829081106148ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610763565b6000600484815481106148ff576148ff615a20565b6000918252602080832087845260058252604080852033865290925292206008909102909101915061493085613e4a565b6149398561434d565b8315614b7c5781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156149a857600080fd5b505afa1580156149bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149e0919061557c565b8354909150614a079073ffffffffffffffffffffffffffffffffffffffff1633308861510c565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015614a7057600080fd5b505afa158015614a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aa8919061557c565b9050614ab48282615955565b600485015490965061ffff1615614b2357600484015460009061271090614adf9061ffff1689615918565b614ae991906158dd565b600b548654919250614b159173ffffffffffffffffffffffffffffffffffffffff908116911683614502565b614b1f8188615955565b9650505b85836000016000828254614b3791906158c5565b9091555050600254845473ffffffffffffffffffffffffffffffffffffffff90811691161415614b79578560096000828254614b7391906158c5565b90915550505b50505b600382015481547f000000000000000000000000000000000000000000000000000000000000000091614bae91615918565b614bb891906158dd565b600182015560005b6007830154811015614c8f57826007018181548110614be157614be1615a20565b60009182526020909120015482546040517f8ad1472800000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff90911690638ad1472890606401600060405180830381600087803b158015614c6657600080fd5b505af1158015614c7a573d6000803e3d6000fd5b5050505080614c8890615998565b9050614bc0565b508315614cb05783826006016000828254614caa91906158c5565b90915550505b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a35050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b158015614dcf57600080fd5b505afa158015614de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e07919061557c565b1115614349576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015614e7b57600080fd5b505afa158015614e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eb3919061557c565b614ebd9190615955565b9050808210614eef57600254614eea9073ffffffffffffffffffffffffffffffffffffffff168483614502565b505050565b8115614eea57600254614eea9073ffffffffffffffffffffffffffffffffffffffff168484614502565b60606040825110614f3e5781806020019051810190614f389190615498565b92915050565b8151602014156150ce5760005b60208160ff16108015614f985750828160ff1681518110614f6e57614f6e615a20565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b15614faf5780614fa7816159d1565b915050614f4b565b60008160ff1667ffffffffffffffff811115614fcd57614fcd615a4f565b6040519080825280601f01601f191660200182016040528015614ff7576020820181803683370190505b509050600091505b60208260ff1610801561504c5750838260ff168151811061502257615022615a20565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b156150c757838260ff168151811061506657615066615a20565b602001015160f81c60f81b818360ff168151811061508657615086615a20565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816150bf816159d1565b925050614fff565b9392505050565b505060408051808201909152600381527f3f3f3f0000000000000000000000000000000000000000000000000000000000602082015290565b919050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916151ab91906157d1565b6000604051808303816000865af19150503d80600081146151e8576040519150601f19603f3d011682016040523d82523d6000602084013e6151ed565b606091505b50915091508180156152175750805115806152175750808060200190518101906152179190615459565b61527d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152606401610763565b505050505050565b8280548282559060005260206000209081019282156152fd579160200282015b828111156152fd5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8435161782556020909201916001909101906152a5565b50615309929150615387565b5090565b8280548282559060005260206000209081019282156152fd579160200282015b828111156152fd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061532d565b5b808211156153095760008155600101615388565b60008083601f8401126153ae57600080fd5b50813567ffffffffffffffff8111156153c657600080fd5b6020830191508360208260051b85010111156153e157600080fd5b9250929050565b803561ffff8116811461510757600080fd5b60006020828403121561540c57600080fd5b81356150c781615a7e565b6000806020838503121561542a57600080fd5b823567ffffffffffffffff81111561544157600080fd5b61544d8582860161539c565b90969095509350505050565b60006020828403121561546b57600080fd5b815180151581146150c757600080fd5b60006020828403121561548d57600080fd5b81516150c781615a7e565b6000602082840312156154aa57600080fd5b815167ffffffffffffffff808211156154c257600080fd5b818401915084601f8301126154d657600080fd5b8151818111156154e8576154e8615a4f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561552e5761552e615a4f565b8160405282815287602084870101111561554757600080fd5b61555883602083016020880161596c565b979650505050505050565b60006020828403121561557557600080fd5b5035919050565b60006020828403121561558e57600080fd5b5051919050565b600080604083850312156155a857600080fd5b8235915060208301356155ba81615a7e565b809150509250929050565b60008060008060008060a087890312156155de57600080fd5b8635955060208701356155f081615a7e565b94506155fe604088016153e8565b935060608701359250608087013567ffffffffffffffff81111561562157600080fd5b61562d89828a0161539c565b979a9699509497509295939492505050565b6000806040838503121561565257600080fd5b50508035926020909101359150565b60008060008060008060a0878903121561567a57600080fd5b86359550602087013594506155fe604088016153e8565b60008060008060008060c087890312156156aa57600080fd5b86359550602087013594506040870135935060608701356156ca81615aa0565b9598949750929560808101359460a0909101359350915050565b6000602082840312156156f657600080fd5b81516150c781615aa0565b600081518084526020808501945080840160005b8381101561574757815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101615715565b509495945050505050565b600081518084526020808501945080840160005b8381101561574757815187529582019590820190600101615766565b60008184825b858110156157c657813561579b81615a7e565b73ffffffffffffffffffffffffffffffffffffffff1683526020928301929190910190600101615788565b509095945050505050565b600082516157e381846020870161596c565b9190910192915050565b6020815260006150c76020830184615701565b6080815260006158136080830187615701565b6020838203818501528187518084528284019150828160051b850101838a0160005b83811015615899577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808885030186528251805180865261587b818a88018b850161596c565b96880196601f01909116939093018601925090850190600101615835565b505086810360408801526158ad818a615752565b94505050505082810360608401526155588185615752565b600082198211156158d8576158d86159f1565b500190565b600082615913577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615950576159506159f1565b500290565b600082821015615967576159676159f1565b500390565b60005b8381101561598757818101518382015260200161596f565b838111156144fc5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156159ca576159ca6159f1565b5060010190565b600060ff821660ff8114156159e8576159e86159f1565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461371657600080fd5b60ff8116811461371657600080fdfea2646970667358221220675acd47b434fa866a339703ba174905316bc1a1a0cbcd6244a1a80c23c63aaa64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "poolRewardsPerSec(uint256)": {
        "notice": "View function to see pool rewards per sec"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 132,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 937,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "ember",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBoringERC20)529"
      },
      {
        "astId": 939,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "emberPerSec",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 949,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)934_storage)dyn_storage"
      },
      {
        "astId": 956,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)914_storage))"
      },
      {
        "astId": 959,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 961,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 963,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 966,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "totalEmberInPools",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 968,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "teamAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 970,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 972,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "investorAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 974,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "teamPercent",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 976,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 978,
        "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
        "label": "investorPercent",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IComplexRewarder)562)dyn_storage": {
        "base": "t_contract(IComplexRewarder)562",
        "encoding": "dynamic_array",
        "label": "contract IComplexRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)934_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)934_storage",
        "encoding": "dynamic_array",
        "label": "struct EmberDistributorV2.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBoringERC20)529": {
        "encoding": "inplace",
        "label": "contract IBoringERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IComplexRewarder)562": {
        "encoding": "inplace",
        "label": "contract IComplexRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)914_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EmberDistributorV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)914_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)914_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct EmberDistributorV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)914_storage)"
      },
      "t_struct(PoolInfo)934_storage": {
        "encoding": "inplace",
        "label": "struct EmberDistributorV2.PoolInfo",
        "members": [
          {
            "astId": 917,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBoringERC20)529"
          },
          {
            "astId": 919,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 921,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 923,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "accEmberPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 925,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 927,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 929,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 933,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "rewarders",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_contract(IComplexRewarder)562)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)914_storage": {
        "encoding": "inplace",
        "label": "struct EmberDistributorV2.UserInfo",
        "members": [
          {
            "astId": 907,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 909,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 911,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 913,
            "contract": "contracts/farm/EmberDistributorV2.sol:EmberDistributorV2",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}