{
  "language": "Solidity",
  "sources": {
    "contracts/farm/EmberDistributorV2.sol": {
      "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n// SPDX-License-Identifier: MIT\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File contracts/farm/v2/libraries/IBoringERC20.sol\npragma solidity ^0.8.7;\n\ninterface IBoringERC20 {\n    function mint(address to, uint256 amount) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/rewarders/IComplexRewarder.sol\npragma solidity ^0.8.7;\n\ninterface IComplexRewarder {\n    function onEmberReward(\n        uint256 pid,\n        address user,\n        uint256 newLpAmount\n    ) external;\n\n    function pendingTokens(uint256 pid, address user)\n        external\n        view\n        returns (uint256 pending);\n\n    function rewardToken() external view returns (IBoringERC20);\n\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\n}\n\n\n// File contracts/farm/v2/libraries/BoringERC20.sol\npragma solidity ^0.8.7;\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data)\n        internal\n        pure\n        returns (string memory)\n    {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_SYMBOL)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IBoringERC20 token)\n        internal\n        view\n        returns (string memory)\n    {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_NAME)\n        );\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(SIG_DECIMALS)\n        );\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IBoringERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: Transfer failed\"\n        );\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IBoringERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"BoringERC20: TransferFrom failed\"\n        );\n    }\n}\n\n\n// File contracts/farm/v2/IEmberPair.sol\npragma solidity ^0.8.7;\n\ninterface IEmberPair {\n    function initialize(address, address) external;\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\n// File contracts/farm/v2/EmberDistributorV2.sol\npragma solidity ^0.8.7;\n\n\n\n\n\n\ncontract EmberDistributorV2 is Ownable, ReentrancyGuard {\n    using BoringERC20 for IBoringERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardLockedUp; // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IBoringERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\n        uint256 lastRewardTimestamp; // Last block number that Ember distribution occurs.\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e18. See below.\n        uint16 depositFeeBP; // Deposit fee in basis points\n        uint256 harvestInterval; // Harvest interval in seconds\n        uint256 totalLp; // Total token in Pool\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\n    }\n\n    IBoringERC20 public ember;\n\n    // Ember tokens created per second\n    uint256 public emberPerSec;\n\n    // Max harvest interval: 14 days\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    // Maximum deposit fee rate: 10%\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The timestamp when Ember mining starts.\n    uint256 public startTimestamp;\n\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n\n    // Total Ember in Ember Pools (can be multiple pools)\n    uint256 public totalEmberInPools = 0;\n\n    // Team address.\n    address public teamAddress;\n\n    // Treasury address.\n    address public treasuryAddress;\n\n    // Investor address.\n    address public investorAddress;\n\n    // Percentage of pool rewards that goto the team.\n    uint256 public teamPercent;\n\n    // Percentage of pool rewards that goes to the treasury.\n    uint256 public treasuryPercent;\n\n    // Percentage of pool rewards that goes to the investor.\n    uint256 public investorPercent;\n\n    // The precision factor\n    uint256 private immutable ACC_TOKEN_PRECISION = 1e12;\n\n    modifier validatePoolByPid(uint256 _pid) {\n        require(_pid < poolInfo.length, \"Pool does not exist\");\n        _;\n    }\n\n    event Add(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        IBoringERC20 indexed lpToken,\n        uint16 depositFeeBP,\n        uint256 harvestInterval,\n        IComplexRewarder[] indexed rewarders\n    );\n\n    event Set(\n        uint256 indexed pid,\n        uint256 allocPoint,\n        uint16 depositFeeBP,\n        uint256 harvestInterval,\n        IComplexRewarder[] indexed rewarders\n    );\n\n    event UpdatePool(\n        uint256 indexed pid,\n        uint256 lastRewardTimestamp,\n        uint256 lpSupply,\n        uint256 accEmberPerShare\n    );\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    event EmissionRateUpdated(\n        address indexed caller,\n        uint256 previousValue,\n        uint256 newValue\n    );\n\n    event RewardLockedUp(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amountLockedUp\n    );\n\n    event AllocPointsUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n\n    event SetTeamAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetTreasuryAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetInvestorAddress(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\n\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\n\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\n\n    constructor(\n        IBoringERC20 _ember,\n        uint256 _emberPerSec,\n        address _teamAddress,\n        address _treasuryAddress,\n        address _investorAddress,\n        uint256 _teamPercent,\n        uint256 _treasuryPercent,\n        uint256 _investorPercent\n    ) {\n        require(\n            _teamPercent <= 1000,\n            \"constructor: invalid team percent value\"\n        );\n        require(\n            _treasuryPercent <= 1000,\n            \"constructor: invalid treasury percent value\"\n        );\n        require(\n            _investorPercent <= 1000,\n            \"constructor: invalid investor percent value\"\n        );\n        require(\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\n            \"constructor: total percent over max\"\n        );\n\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\n\n        ember = _ember;\n        emberPerSec = _emberPerSec;\n\n        teamAddress = _teamAddress;\n        treasuryAddress = _treasuryAddress;\n        investorAddress = _investorAddress;\n\n        teamPercent = _teamPercent;\n        treasuryPercent = _treasuryPercent;\n        investorPercent = _investorPercent;\n    }\n\n    // Set farming start, can call only once\n    function startFarming() public onlyOwner {\n        require(\n            block.timestamp < startTimestamp,\n            \"start farming: farm started already\"\n        );\n\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            pool.lastRewardTimestamp = block.timestamp;\n        }\n\n        startTimestamp = block.timestamp;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\n    function add(\n        uint256 _allocPoint,\n        IBoringERC20 _lpToken,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        IComplexRewarder[] calldata _rewarders\n    ) public onlyOwner {\n        require(_rewarders.length <= 10, \"add: too many rewarders\");\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"add: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"add: invalid harvest interval\"\n        );\n        require(\n            Address.isContract(address(_lpToken)),\n            \"add: LP token must be a valid contract\"\n        );\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < _rewarders.length;\n            ++rewarderId\n        ) {\n            require(\n                Address.isContract(address(_rewarders[rewarderId])),\n                \"add: rewarder must be contract\"\n            );\n        }\n\n        _massUpdatePools();\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        totalAllocPoint += _allocPoint;\n\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accEmberPerShare: 0,\n                depositFeeBP: _depositFeeBP,\n                harvestInterval: _harvestInterval,\n                totalLp: 0,\n                rewarders: _rewarders\n            })\n        );\n\n        emit Add(\n            poolInfo.length - 1,\n            _allocPoint,\n            _lpToken,\n            _depositFeeBP,\n            _harvestInterval,\n            _rewarders\n        );\n    }\n\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        IComplexRewarder[] calldata _rewarders\n    ) public onlyOwner validatePoolByPid(_pid) {\n        require(_rewarders.length <= 10, \"set: too many rewarders\");\n\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"set: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"set: invalid harvest interval\"\n        );\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < _rewarders.length;\n            ++rewarderId\n        ) {\n            require(\n                Address.isContract(address(_rewarders[rewarderId])),\n                \"set: rewarder must be contract\"\n            );\n        }\n\n        _massUpdatePools();\n\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n        poolInfo[_pid].rewarders = _rewarders;\n\n        emit Set(\n            _pid,\n            _allocPoint,\n            _depositFeeBP,\n            _harvestInterval,\n            _rewarders\n        );\n    }\n\n    // View function to see pending rewards on frontend.\n    function pendingTokens(uint256 _pid, address _user)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (\n            address[] memory addresses,\n            string[] memory symbols,\n            uint256[] memory decimals,\n            uint256[] memory amounts\n        )\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEmberPerShare = pool.accEmberPerShare;\n        uint256 lpSupply = pool.totalLp;\n\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\n            uint256 total = 1000;\n            uint256 lpPercent = total -\n                teamPercent -\n                treasuryPercent -\n                investorPercent;\n\n            uint256 emberReward = (multiplier *\n                emberPerSec *\n                pool.allocPoint *\n                lpPercent) /\n                totalAllocPoint /\n                total;\n\n            accEmberPerShare += (\n                ((emberReward * ACC_TOKEN_PRECISION) / lpSupply)\n            );\n        }\n\n        uint256 pendingEmber = (((user.amount * accEmberPerShare) /\n            ACC_TOKEN_PRECISION) - user.rewardDebt) + user.rewardLockedUp;\n\n        addresses = new address[](pool.rewarders.length + 1);\n        symbols = new string[](pool.rewarders.length + 1);\n        amounts = new uint256[](pool.rewarders.length + 1);\n        decimals = new uint256[](pool.rewarders.length + 1);\n\n        addresses[0] = address(ember);\n        symbols[0] = IBoringERC20(ember).safeSymbol();\n        decimals[0] = IBoringERC20(ember).safeDecimals();\n        amounts[0] = pendingEmber;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            addresses[rewarderId + 1] = address(\n                pool.rewarders[rewarderId].rewardToken()\n            );\n\n            symbols[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeSymbol();\n\n            decimals[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeDecimals();\n\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\n                _pid,\n                _user\n            );\n        }\n    }\n\n    /// @notice View function to see pool rewards per sec\n    function poolRewardsPerSec(uint256 _pid)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (\n            address[] memory addresses,\n            string[] memory symbols,\n            uint256[] memory decimals,\n            uint256[] memory rewardsPerSec\n        )\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        addresses = new address[](pool.rewarders.length + 1);\n        symbols = new string[](pool.rewarders.length + 1);\n        decimals = new uint256[](pool.rewarders.length + 1);\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\n\n        addresses[0] = address(ember);\n        symbols[0] = IBoringERC20(ember).safeSymbol();\n        decimals[0] = IBoringERC20(ember).safeDecimals();\n\n        uint256 total = 1000;\n        uint256 lpPercent = total -\n            teamPercent -\n            treasuryPercent -\n            investorPercent;\n\n        rewardsPerSec[0] =\n            (pool.allocPoint * emberPerSec * lpPercent) /\n            totalAllocPoint /\n            total;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            addresses[rewarderId + 1] = address(\n                pool.rewarders[rewarderId].rewardToken()\n            );\n\n            symbols[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeSymbol();\n\n            decimals[rewarderId + 1] = IBoringERC20(\n                pool.rewarders[rewarderId].rewardToken()\n            ).safeDecimals();\n\n            rewardsPerSec[rewarderId + 1] = pool\n                .rewarders[rewarderId]\n                .poolRewardsPerSec(_pid);\n        }\n    }\n\n    // View function to see rewarders for a pool\n    function poolRewarders(uint256 _pid)\n        external\n        view\n        validatePoolByPid(_pid)\n        returns (address[] memory rewarders)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        rewarders = new address[](pool.rewarders.length);\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\n        }\n    }\n\n    // View function to see if user can harvest Ember.\n    function canHarvest(uint256 _pid, address _user)\n        public\n        view\n        validatePoolByPid(_pid)\n        returns (bool)\n    {\n        UserInfo storage user = userInfo[_pid][_user];\n        return\n            block.timestamp >= startTimestamp &&\n            block.timestamp >= user.nextHarvestUntil;\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() external nonReentrant {\n        _massUpdatePools();\n    }\n\n    // Internal method for massUpdatePools\n    function _massUpdatePools() internal {\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\n            _updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) external nonReentrant {\n        _updatePool(_pid);\n    }\n\n    // Internal method for _updatePool\n    function _updatePool(uint256 _pid) internal validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = pool.totalLp;\n\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 emberReward = ((multiplier * emberPerSec) * pool.allocPoint) /\n            totalAllocPoint;\n\n        uint256 total = 1000;\n        uint256 lpPercent = total -\n            teamPercent -\n            treasuryPercent -\n            investorPercent;\n\n        ember.mint(teamAddress, (emberReward * teamPercent) / total);\n        ember.mint(treasuryAddress, (emberReward * treasuryPercent) / total);\n        ember.mint(investorAddress, (emberReward * investorPercent) / total);\n        ember.mint(address(this), (emberReward * lpPercent) / total);\n\n        pool.accEmberPerShare +=\n            (emberReward * ACC_TOKEN_PRECISION * lpPercent) /\n            pool.totalLp /\n            total;\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit UpdatePool(\n            _pid,\n            pool.lastRewardTimestamp,\n            lpSupply,\n            pool.accEmberPerShare\n        );\n    }\n\n    function depositWithPermit(\n        uint256 pid,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public nonReentrant validatePoolByPid(pid) {\n        PoolInfo storage pool = poolInfo[pid];\n        IEmberPair pair = IEmberPair(address(pool.lpToken));\n        pair.permit(msg.sender, address(this), amount, deadline, v, r, s);\n        _deposit(pid, amount);\n    }\n\n    // Deposit tokens for Ember allocation.\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        _deposit(_pid, _amount);\n    }\n\n    // Deposit tokens for Ember allocation.\n    function _deposit(uint256 _pid, uint256 _amount)\n        internal\n        validatePoolByPid(_pid)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        _updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\n\n            _amount = afterDeposit - beforeDeposit;\n\n            if (pool.depositFeeBP > 0) {\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\n\n                _amount = _amount - depositFee;\n            }\n\n            user.amount += _amount;\n\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools += _amount;\n            }\n        }\n        user.rewardDebt =\n            (user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(\n                _pid,\n                msg.sender,\n                user.amount\n            );\n        }\n\n        if (_amount > 0) {\n            pool.totalLp += _amount;\n        }\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    //withdraw tokens\n    function withdraw(uint256 _pid, uint256 _amount)\n        public\n        nonReentrant\n        validatePoolByPid(_pid)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        //this will make sure that user can only withdraw from his pool\n        require(user.amount >= _amount, \"withdraw: user amount not enough\");\n\n        //cannot withdraw more than pool's balance\n        require(pool.totalLp >= _amount, \"withdraw: pool total not enough\");\n\n        _updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            user.amount -= _amount;\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools -= _amount;\n            }\n            pool.lpToken.safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt =\n            (user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(\n                _pid,\n                msg.sender,\n                user.amount\n            );\n        }\n\n        if (_amount > 0) {\n            pool.totalLp -= _amount;\n        }\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n\n        //Cannot withdraw more than pool's balance\n        require(\n            pool.totalLp >= amount,\n            \"emergency withdraw: pool total not enough\"\n        );\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.rewardLockedUp = 0;\n        user.nextHarvestUntil = 0;\n        pool.totalLp -= amount;\n\n        for (\n            uint256 rewarderId = 0;\n            rewarderId < pool.rewarders.length;\n            ++rewarderId\n        ) {\n            pool.rewarders[rewarderId].onEmberReward(_pid, msg.sender, 0);\n        }\n\n        if (address(pool.lpToken) == address(ember)) {\n            totalEmberInPools -= amount;\n        }\n\n        pool.lpToken.safeTransfer(msg.sender, amount);\n\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    // Pay or lockup pending Ember.\n    function payOrLockupPendingEmber(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\n        }\n\n        uint256 pending = ((user.amount * pool.accEmberPerShare) /\n            ACC_TOKEN_PRECISION) - user.rewardDebt;\n\n        if (canHarvest(_pid, msg.sender)) {\n            if (pending > 0 || user.rewardLockedUp > 0) {\n                uint256 pendingRewards = pending + user.rewardLockedUp;\n\n                // reset lockup\n                totalLockedUpRewards -= user.rewardLockedUp;\n                user.rewardLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\n\n                // send rewards\n                safeEmberTransfer(msg.sender, pendingRewards);\n            }\n        } else if (pending > 0) {\n            totalLockedUpRewards += pending;\n            user.rewardLockedUp += pending;\n            emit RewardLockedUp(msg.sender, _pid, pending);\n        }\n    }\n\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\n            //emberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\n            uint256 emberBal = ember.balanceOf(address(this)) -\n                totalEmberInPools;\n            if (_amount >= emberBal) {\n                ember.safeTransfer(_to, emberBal);\n            } else if (_amount > 0) {\n                ember.safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function updateEmissionRate(uint256 _emberPerSec) public onlyOwner {\n        _massUpdatePools();\n\n        emit EmissionRateUpdated(msg.sender, emberPerSec, _emberPerSec);\n\n        emberPerSec = _emberPerSec;\n    }\n\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\n        public\n        onlyOwner\n    {\n        _massUpdatePools();\n\n        emit AllocPointsUpdated(\n            msg.sender,\n            poolInfo[_pid].allocPoint,\n            _allocPoint\n        );\n\n        totalAllocPoint =\n            totalAllocPoint -\n            poolInfo[_pid].allocPoint +\n            _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\n        return poolInfo[pid].totalLp;\n    }\n\n    // Function to harvest many pools in a single transaction\n    function harvestMany(uint256[] calldata _pids) public nonReentrant {\n        require(_pids.length <= 30, \"harvest many: too many pool ids\");\n        for (uint256 index = 0; index < _pids.length; ++index) {\n            _deposit(_pids[index], 0);\n        }\n    }\n\n    // Update team address by the previous team address.\n    function setTeamAddress(address _teamAddress) public {\n        require(\n            msg.sender == teamAddress,\n            \"set team address: only previous team address can call this method\"\n        );\n        require(\n            _teamAddress != address(0),\n            \"set team address: invalid new team address\"\n        );\n        teamAddress = _teamAddress;\n        emit SetTeamAddress(msg.sender, _teamAddress);\n    }\n\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\n        require(\n            _newTeamPercent <= 1000,\n            \"set team percent: invalid percent value\"\n        );\n        require(\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\n            \"set team percent: total percent over max\"\n        );\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\n        teamPercent = _newTeamPercent;\n    }\n\n    // Update treasury address by the previous treasury.\n    function setTreasuryAddress(address _treasuryAddress) public {\n        require(\n            msg.sender == treasuryAddress,\n            \"set treasury address: only previous treasury address can call this method\"\n        );\n        require(\n            _treasuryAddress != address(0),\n            \"set treasury address: invalid new treasury address\"\n        );\n        treasuryAddress = _treasuryAddress;\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\n    }\n\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\n        require(\n            _newTreasuryPercent <= 1000,\n            \"set treasury percent: invalid percent value\"\n        );\n        require(\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\n            \"set treasury percent: total percent over max\"\n        );\n        emit SetTreasuryPercent(treasuryPercent, _newTreasuryPercent);\n        treasuryPercent = _newTreasuryPercent;\n    }\n\n    // Update the investor address by the previous investor.\n    function setInvestorAddress(address _investorAddress) public {\n        require(\n            msg.sender == investorAddress,\n            \"set investor address: only previous investor can call this method\"\n        );\n        require(\n            _investorAddress != address(0),\n            \"set investor address: invalid new investor address\"\n        );\n        investorAddress = _investorAddress;\n        emit SetInvestorAddress(msg.sender, _investorAddress);\n    }\n\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\n        require(\n            _newInvestorPercent <= 1000,\n            \"set investor percent: invalid percent value\"\n        );\n        require(\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\n            \"set investor percent: total percent over max\"\n        );\n        emit SetInvestorPercent(investorPercent, _newInvestorPercent);\n        investorPercent = _newInvestorPercent;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}