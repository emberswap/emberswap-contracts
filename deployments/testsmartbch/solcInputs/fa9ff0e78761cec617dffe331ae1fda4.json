{
  "language": "Solidity",
  "sources": {
    "contracts/farm/EmberDistributor.sol": {
      "content": "// Sources flattened with hardhat v2.6.0 https://hardhat.org\n// SPDX-License-Identifier: MIT\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n\n// File contracts/farm/IEmberERC20.sol\n\npragma solidity ^0.8.2;\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IEmberERC20 is IERC20, IERC20Permit {\n    function mint(address to, uint256 amount) external;\n}\n\n\n// File contracts/farm/EmberDistributor.sol\n\npragma solidity ^0.8.2;\n\n\n\n\n\n\ncontract EmberDistributor is Ownable, ReentrancyGuard {\n    // remember to change for mainnet deploy\n    address constant _trustedForwarder =\n        0x0d998dDa948c62a4feCA7355E46D6B801A1AEDd6; //TRUSTED FORWARDER\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        uint256 rewardLockedUp; // Reward locked up.\n        uint256 nextHarvestUntil; // When can the user harvest again.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. Ember to distribute per block.\n        uint256 lastRewardBlock; // Last block number that Ember distribution occurs.\n        uint256 accEmberPerShare; // Accumulated Ember per share, times 1e12. See below.\n        uint16 depositFeeBP; // Deposit fee in basis points\n        uint256 harvestInterval; // Harvest interval in seconds\n        uint256 totalLp; // Total token in Pool\n    }\n\n    IEmberERC20 public ember;\n\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\n    //i.e some wrong setting and a pools get too much allocation accidentally\n    address private _operator;\n\n    // Dev address.\n    address public devAddress;\n\n    // Deposit Fee address\n    address public feeAddress;\n\n    // Ember tokens created per block\n    uint256 public emberPerBlock;\n\n    // Max harvest interval: 14 days\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\n\n    // Maximum deposit fee rate: 10%\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The block number when Ember mining starts.\n    uint256 public startBlock;\n\n    // Total locked up rewards\n    uint256 public totalLockedUpRewards;\n\n    // Total Ember in Ember Pools (can be multiple pools)\n    uint256 public totalEmberInPools = 0;\n\n    // Control support for EIP-2771 Meta Transactions\n    bool public metaTxnsEnabled = false;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n    event EmissionRateUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n    event RewardLockedUp(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amountLockedUp\n    );\n    event OperatorTransferred(\n        address indexed previousOperator,\n        address indexed newOperator\n    );\n    event DevAddressChanged(\n        address indexed caller,\n        address oldAddress,\n        address newAddress\n    );\n    event FeeAddressChanged(\n        address indexed caller,\n        address oldAddress,\n        address newAddress\n    );\n    event AllocPointsUpdated(\n        address indexed caller,\n        uint256 previousAmount,\n        uint256 newAmount\n    );\n    event MetaTxnsEnabled(address indexed caller);\n    event MetaTxnsDisabled(address indexed caller);\n\n    modifier onlyOperator() {\n        require(\n            _operator == msg.sender,\n            \"Operator: caller is not the operator\"\n        );\n        _;\n    }\n\n    constructor(IEmberERC20 _ember, uint256 _emberPerBlock) {\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\n\n        ember = _ember;\n        emberPerBlock = _emberPerBlock;\n\n        devAddress = msg.sender;\n        feeAddress = msg.sender;\n        _operator = msg.sender;\n        emit OperatorTransferred(address(0), _operator);\n    }\n\n    function isTrustedForwarder(address forwarder)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override\n        returns (address sender)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override\n        returns (bytes calldata)\n    {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    function operator() public view returns (address) {\n        return _operator;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(uint256 _from, uint256 _to)\n        public\n        pure\n        returns (uint256)\n    {\n        return _to.sub(_from);\n    }\n\n    function transferOperator(address newOperator) public onlyOperator {\n        require(\n            newOperator != address(0),\n            \"TransferOperator: new operator is the zero address\"\n        );\n        emit OperatorTransferred(_operator, newOperator);\n        _operator = newOperator;\n    }\n\n    // Set farming start, can call only once\n    function startFarming() public onlyOwner {\n        require(block.number < startBlock, \"Error::Farm started already\");\n\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            pool.lastRewardBlock = block.number;\n        }\n\n        startBlock = block.number;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        bool _withUpdate\n    ) public onlyOwner {\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"add: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"add: invalid harvest interval\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = block.number > startBlock\n            ? block.number\n            : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accEmberPerShare: 0,\n                depositFeeBP: _depositFeeBP,\n                harvestInterval: _harvestInterval,\n                totalLp: 0\n            })\n        );\n    }\n\n    // Update the given pool's Ember allocation point and deposit fee. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        uint16 _depositFeeBP,\n        uint256 _harvestInterval,\n        bool _withUpdate\n    ) public onlyOwner {\n        require(\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\n            \"set: deposit fee too high\"\n        );\n        require(\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\n            \"set: invalid harvest interval\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint;\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\n        poolInfo[_pid].harvestInterval = _harvestInterval;\n    }\n\n    // View function to see pending Ember on frontend.\n    function pendingEmber(uint256 _pid, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEmberPerShare = pool.accEmberPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(\n                pool.lastRewardBlock,\n                block.number\n            );\n            uint256 emberReward = multiplier\n                .mul(emberPerBlock)\n                .mul(pool.allocPoint)\n                .div(totalAllocPoint);\n            accEmberPerShare = accEmberPerShare.add(\n                emberReward.mul(1e12).div(lpSupply)\n            );\n        }\n\n        uint256 pending = user.amount.mul(accEmberPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        return pending.add(user.rewardLockedUp);\n    }\n\n    // View function to see if user can harvest Ember.\n    function canHarvest(uint256 _pid, address _user)\n        public\n        view\n        returns (bool)\n    {\n        UserInfo storage user = userInfo[_pid][_user];\n        return\n            block.number >= startBlock &&\n            block.timestamp >= user.nextHarvestUntil;\n    }\n\n    // Update reward vairables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n\n        uint256 lpSupply = pool.totalLp;\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 emberReward = multiplier\n            .mul(emberPerBlock)\n            .mul(pool.allocPoint)\n            .div(totalAllocPoint);\n\n        ember.mint(devAddress, emberReward.div(10));\n        ember.mint(address(this), emberReward);\n\n        pool.accEmberPerShare = pool.accEmberPerShare.add(\n            emberReward.mul(1e12).div(pool.totalLp)\n        );\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Deposit LP tokens to EmberDistributor for Ember allocation.\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        require(\n            block.number >= startBlock,\n            \"EmberDistributor: Can not deposit before start\"\n        );\n\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\n\n            _amount = afterDeposit.sub(beforeDeposit);\n\n            if (pool.depositFeeBP > 0) {\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\n\n                _amount = _amount.sub(depositFee);\n            }\n\n            user.amount = user.amount.add(_amount);\n            pool.totalLp = pool.totalLp.add(_amount);\n\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools = totalEmberInPools.add(_amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\n        emit Deposit(_msgSender(), _pid, _amount);\n    }\n\n    // Withdraw tokens\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        //this will make sure that user can only withdraw from his pool\n        require(user.amount >= _amount, \"Withdraw: User amount not enough\");\n\n        //Cannot withdraw more than pool's balance\n        require(pool.totalLp >= _amount, \"Withdraw: Pool total not enough\");\n\n        updatePool(_pid);\n\n        payOrLockupPendingEmber(_pid);\n\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.totalLp = pool.totalLp.sub(_amount);\n            if (address(pool.lpToken) == address(ember)) {\n                totalEmberInPools = totalEmberInPools.sub(_amount);\n            }\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accEmberPerShare).div(1e12);\n        emit Withdraw(_msgSender(), _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n        uint256 amount = user.amount;\n\n        //Cannot withdraw more than pool's balance\n        require(\n            pool.totalLp >= amount,\n            \"EmergencyWithdraw: Pool total not enough\"\n        );\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n        user.rewardLockedUp = 0;\n        user.nextHarvestUntil = 0;\n        pool.totalLp = pool.totalLp.sub(amount);\n\n        if (address(pool.lpToken) == address(ember)) {\n            totalEmberInPools = totalEmberInPools.sub(amount);\n        }\n        pool.lpToken.safeTransfer(_msgSender(), amount);\n\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\n    }\n\n    // Pay or lockup pending Ember.\n    function payOrLockupPendingEmber(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_msgSender()];\n\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\n        }\n\n        uint256 pending = user.amount.mul(pool.accEmberPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        if (canHarvest(_pid, _msgSender())) {\n            if (pending > 0 || user.rewardLockedUp > 0) {\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\n\n                // reset lockup\n                totalLockedUpRewards = totalLockedUpRewards.sub(\n                    user.rewardLockedUp\n                );\n                user.rewardLockedUp = 0;\n                user.nextHarvestUntil = block.timestamp.add(\n                    pool.harvestInterval\n                );\n\n                // send rewards\n                safeEmberTransfer(_msgSender(), totalRewards);\n            }\n        } else if (pending > 0) {\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\n            emit RewardLockedUp(_msgSender(), _pid, pending);\n        }\n    }\n\n    // Safe Ember transfer function, just in case if rounding error causes pool do not have enough Ember.\n    function safeEmberTransfer(address _to, uint256 _amount) internal {\n        if (ember.balanceOf(address(this)) > totalEmberInPools) {\n            //EmberBal = total Ember in EmberDistributor - total Ember in Ember pools, this will make sure that EmberDistributor never transfer rewards from deposited Ember pools\n            uint256 EmberBal = ember.balanceOf(address(this)).sub(\n                totalEmberInPools\n            );\n            if (_amount >= EmberBal) {\n                ember.transfer(_to, EmberBal);\n            } else if (_amount > 0) {\n                ember.transfer(_to, _amount);\n            }\n        }\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devAddress) public {\n        require(_msgSender() == devAddress, \"setDevAddress: FORBIDDEN\");\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\n\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\n\n        devAddress = _devAddress;\n    }\n\n    function setFeeAddress(address _feeAddress) public {\n        require(_msgSender() == feeAddress, \"setFeeAddress: FORBIDDEN\");\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\n\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\n\n        feeAddress = _feeAddress;\n    }\n\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\n    function updateEmissionRate(uint256 _emberPerBlock) public onlyOperator {\n        massUpdatePools();\n\n        emit EmissionRateUpdated(msg.sender, emberPerBlock, _emberPerBlock);\n        emberPerBlock = _emberPerBlock;\n    }\n\n    function updateAllocPoint(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyOperator {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        emit AllocPointsUpdated(\n            _msgSender(),\n            poolInfo[_pid].allocPoint,\n            _allocPoint\n        );\n\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // Enable support for meta transactions\n    function enableMetaTxns() public onlyOperator {\n        require(!metaTxnsEnabled, \"Meta transactions are already enabled\");\n\n        metaTxnsEnabled = true;\n        emit MetaTxnsEnabled(_msgSender());\n    }\n\n    // Disable support for meta transactions\n    function disableMetaTxns() public onlyOperator {\n        require(metaTxnsEnabled, \"Meta transactions are already disabled\");\n\n        metaTxnsEnabled = false;\n        emit MetaTxnsDisabled(_msgSender());\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}